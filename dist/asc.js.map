{"version":3,"sources":["webpack://asc/webpack/universalModuleDefinition","webpack://asc/./asc.js","webpack://asc/./shim/fs.js","webpack://asc/./shim/path.js","webpack://asc/./shim/process.js","webpack://asc/./util/colors.js","webpack://asc/./util/find.js","webpack://asc/./util/mkdirp.js","webpack://asc/./util/options.js","webpack://asc/./util/utf8.js","webpack://asc/../dist/assemblyscript.js","webpack://asc/../lib/loader/umd/index.js","webpack://asc/../lib/rtrace/umd/index.js","webpack://asc/external \"binaryen\"","webpack://asc/webpack/bootstrap","webpack://asc/webpack/runtime/global","webpack://asc/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__911__","fs","path","process","exit","code","console","log","Error","toString","stack","utf8","colorsUtil","optionsUtil","mkdirp","find","binaryen","g","WIN","platform","EOL","SEP","setupExtension","ext","startsWith","ext_d","re","RegExp","re_d","re_except_d","re_index","defaultExtension","__wrap","ptrOrObj","wrapperClass","wrap","assemblyscript","__newString","__getString","__pin","__unpin","__collect","Object","defineProperty","get","ready","removeAllListeners","wasmArg","argv","findIndex","arg","binaryPath","splice","loader","rtrace","err","info","getMemory","memory","gcProfile","length","writeFileSync","timestamp","Date","now","JSON","stringify","join","instantiateSync","readFileSync","install","_start","loadAssemblyScriptWasm","str","ptr","incremental","loadAssemblyScript","isBundle","version","options","libraryPrefix","LIBRARY_PREFIX","valueOf","defaultOptimizeLevel","defaultShrinkLevel","libraryFiles","libDir","bundled","files","forEach","file","replace","definitionFiles","readDefinition","name","assembly","portable","compileString","sources","output","create","stdout","createMemoryStream","stderr","keys","key","val","opt","type","push","Array","isArray","String","main","concat","readFile","prototype","hasOwnProperty","call","writeFile","contents","listFiles","callback","readFileNode","writeFileNode","listFilesNode","stats","readTime","readCount","writeTime","writeCount","parseTime","parseCount","initializeTime","initializeCount","compileTime","compileCount","emitTime","emitCount","validateTime","validateCount","optimizeTime","optimizeCount","transformTime","transformCount","extension","optionsResult","parse","opts","arguments","noColors","supported","from","unknownOpts","unknown","write","yellow","trailingArgv","trailing","red","test","baseDir","normalize","asconfigPath","resolvePath","config","asconfigFile","basename","asconfigDir","dirname","asconfig","getAsconfig","asconfigHasEntries","entries","help","out","color","white","cyan","seenAsconfig","Set","add","target","targets","targetOptions","merge","generalOptions","entry","extends","has","addDefaults","showConfig","program","compilerOptions","newOptions","setTarget","setNoAssert","noAssert","setExportMemory","noExportMemory","setImportMemory","importMemory","setInitialMemory","initialMemory","setMaximumMemory","maximumMemory","setSharedMemory","sharedMemory","setImportTable","importTable","setExportTable","exportTable","setExplicitStart","explicitStart","setMemoryBase","memoryBase","setTableBase","tableBase","setSourceMap","sourceMap","setNoUnsafe","noUnsafe","setPedantic","pedantic","setLowMemoryLimit","lowMemoryLimit","setExportRuntime","exportRuntime","stackSize","runtime","DEFAULT_STACK_SIZE","setStackSize","use","aliases","i","k","part","p","indexOf","alias","substring","trim","aliasPtr","namePtr","setGlobalAlias","features","disable","split","flag","toUpperCase","disableFeature","enable","enableFeature","optimizeLevel","shrinkLevel","optimize","Math","min","max","setOptimizeLevelHints","newProgram","transforms","applyTransform","args","transform","transfromTime","measure","e","libPath","textPtr","pathPtr","customLibDirs","lib","map","libFiles","endsWith","j","l","libText","packageMains","Map","packageBases","getFile","internalPath","dependeePath","sourceText","sourcePath","plainName","indexName","match","packageName","isPackageRoot","undefined","filePath","basePath","traceResolution","paths","parts","resolve","slice","currentPath","relative","mainPath","jsonPath","jsonText","json","ascMain","set","mainDir","parseBacklog","nextFile","getDependee","numErrors","checkDiagnostics","reportDiagnostic","message","runtimeName","runtimePath","runtimeText","filename","isAbsolute","error","parser","s","normalizedPath","sort","initializeProgram","compile","original","Module","wrapModule","ref","dispose","noValidate","isValid","validate","trapMode","runPass","debugInfo","debug","converge","runPasses","pass","last","emitBinary","next","noEmit","outFile","textFile","jsFile","binaryFile","hasStdout","hasOutput","tsdFile","idlFile","wasm","sourceMapURL","binary","writeStdout","sourceRoot","index","text","getSource","sourcesContent","wastFormat","emitText","emitStackIR","idl","buildIDL","tsd","buildTSD","js","emitAsmjs","printStats","dirPath","outputFilePath","existsSync","readdirSync","filter","used","isObject","location","ex","include","diagnosticPtr","nextDiagnostic","formatDiagnostic","isTTY","diagnostic","DiagnosticMessage","range","Range","relatedRange","rangeSource","source","Source","relatedRangeSource","category","start","end","isError","createStats","fn","hrtime","times","formatTime","time","toFixed","format","count","len","pad","allocBuffer","Buffer","allocUnsafe","Uint8Array","stream","chunk","buffer","reset","toBuffer","offset","read","tscOptions","alwaysStrict","noImplicitAny","noImplicitReturns","noImplicitThis","noEmitOnError","strictNullChecks","experimentalDecorators","noLib","types","allowJs","assertPath","TypeError","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","charCodeAt","lastSlashIndex","lastIndexOf","posix","cwd","resolvedPath","resolvedAbsolute","trailingSeparator","joined","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","_makeLong","hasRoot","matchedSlash","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","pathObject","sep","dir","base","_format","ret","delimiter","win32","umask","previousTimestamp","clocktime","performanceNow","performance","seconds","floor","nanoseconds","mozNow","msNow","oNow","webkitNow","getTime","proc","isCI","env","colors","gray","GRAY","RESET","RED","green","GREEN","YELLOW","blue","BLUE","magenta","MAGENTA","CYAN","WHITE","findFiles","statSync","isDirectory","iname","made","mode","mkdirSync","err0","stat","err1","sanitizeValue","value","Boolean","trunc","Number","v","useNodeResolution","default","defaultValue","propagateDefaults","option","exec","parseInt","parseFloat","indent","padding","eol","sbCategories","sbOther","description","sb","noCategories","line","hasCategories","currentOptions","parentOptions","parentBaseDir","mergedOptions","mutuallyExclusive","isPath","cliOnly","currentValue","parentValue","exclude","includes","string","c","t","fromCharCode","apply","c1","c2","__webpack_modules__","720","Long","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","radix","RangeError","radixToPower","result","size","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","60","__unused_webpack_module","DeclarationStatement","SourceKind","Statement","UnaryPrefixExpression","UnaryPostfixExpression","UnaryExpression","FalseExpression","TrueExpression","ThisExpression","SuperExpression","StringLiteralExpression","TernaryExpression","RegexpLiteralExpression","PropertyAccessExpression","ParenthesizedExpression","OmittedExpression","ObjectLiteralExpression","NullExpression","NewExpression","IntegerLiteralExpression","InstanceOfExpression","FunctionExpression","FloatLiteralExpression","ElementAccessExpression","ConstructorExpression","CommaExpression","ClassExpression","CallExpression","BinaryExpression","AssertionExpression","AssertionKind","ArrayLiteralExpression","LiteralExpression","LiteralKind","IdentifierExpression","Expression","CommentNode","CommentKind","DecoratorNode","DecoratorKind","ParameterNode","ParameterKind","TypeParameterNode","FunctionTypeNode","NamedTypeNode","TypeName","TypeNode","Node","NodeKind","isTypeOmitted","mangleInternalPath","findDecorator","WhileStatement","VoidStatement","VariableStatement","VariableDeclaration","TypeDeclaration","TryStatement","ThrowStatement","SwitchStatement","SwitchCase","ReturnStatement","NamespaceDeclaration","MethodDeclaration","InterfaceDeclaration","ImportStatement","ImportDeclaration","IfStatement","FunctionDeclaration","ArrowKind","ForOfStatement","ForStatement","FieldDeclaration","ExpressionStatement","ExportDefaultStatement","ExportStatement","ExportMember","ExportImportStatement","EnumValueDeclaration","EnumDeclaration","EmptyStatement","DoStatement","ContinueStatement","ClassDeclaration","BreakStatement","BlockStatement","VariableLikeDeclarationStatement","IndexSignatureNode","common_1","tokenizer_1","util_1","kind","createIdentifierExpression","typeArguments","isNullable","parameters","returnType","explicitThisType","createSimpleTypeName","extendsType","defaultType","parameterKind","initializer","fromNode","commentKind","isQuoted","elementExpressions","assertionKind","expression","toType","operator","left","right","declaration","expressions","elementExpression","isType","typeName","names","values","property","pattern","patternFlags","condition","ifThen","ifElse","operand","statements","label","decorators","flags","typeParameters","implementsTypes","members","statement","isDeclare","externalName","localName","exportedName","ifTrue","ifFalse","declarations","namespaceName","foreignName","incrementor","variable","iterable","signature","body","arrowKind","keyType","valueType","cases","catchVariable","catchStatements","finallyStatements","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","typeArgumentNodes","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","assert","TYPENAME","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","CommonFlags","NONE","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","COMMENT","ARRAY","ASSERTION","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","UNARYPOSTFIX","UNARYPREFIX","sourceKind","SOURCE","debugInfoIndex","exportPaths","lineCache","lineColumn","pos","PATH_DELIMITER","simplePath","LIBRARY_SUBST","LIBRARY","LIBRARY_ENTRY","off","r","m","unchecked","INDEXSIGNATURE","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","cur","isTrivialAlphanum","decorator","346","compileClassInstanceOf","compileRTTI","compileVisitMembers","compileVisitGlobals","function_builtins","builtins","BuiltinContext","BuiltinNames","diagnostics_1","ast_1","types_1","module_1","program_1","flow_1","resolver_1","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","unreachable","arg0","compileExpression","operands","Type","i32","currentType","isValue","unary","UnaryOp","ClzI32","isWasm64","ClzI64","DiagnosticCode","Operation_0_cannot_be_applied_to_type_1","reportNode","typeArgumentsRange","builtin_ctz","CtzI32","CtzI64","builtin_popcnt","PopcntI32","PopcntI64","builtin_rotl","arg1","flow","currentFlow","temp1","getTempLocal","findUsedLocals","setLocalFlag","LocalFlags","WRAPPED","temp2","BinaryOp","OrI32","ShlI32","local_tee","AndI32","ShrU32","local_get","NativeType","I32","SubI32","freeTempLocal","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","auto","XorI32","AddI32","ShrI32","usizeType","XorI64","AddI64","ShrI64","i64","nativeSizeType","I64","AbsF32","AbsF64","builtin_max","isNumericLiteral","op","GtI32","GtU32","GtI64","GtU64","MaxF32","MaxF64","nativeType","toNativeType","select","builtin_min","LtI32","LtU32","LtI64","LtU64","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","f64","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","f32","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","isIntegerValue","numOperands","immOffset","immAlign","byteSize","evaluateImmediateOffset","evaluateImmediateAlign","load","isSignedIntegerValue","builtin_store","void","contextIsExact","inType","convertExpression","store","builtin_add","isNumericValue","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","atomic_load","builtin_atomic_store","atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","AtomicRMWOp","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","arg2","atomic_cmpxchg","builtin_atomic_wait","atomic_wait","builtin_diagnostic","checkTypeAbsent","emitDiagnostic","User_defined_0","DiagnosticCategory","ERROR","nop","builtin_conversion","builtin_i8x16","v128","expr","i8","precomp","runExpression","ExpressionRunnerFlags","PreserveSideeffects","writeI8","getConstValueI32","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","u8","idx","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","SIMDExtractOp","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","SIMDReplaceOp","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","isInteger","isPowerOf2","mask","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","SIMDLoadOp","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","SIMDShiftOp","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","bool","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","SIMDTernaryOp","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","ensureVisitMembersOf","instance","isManaged","visitRef","nativeSizeSize","visitInstance","internalName","None","hasVisitImpl","isDeclaredInLibrary","visitPrototype","lookupInSelf","ElementKind","FUNCTION_PROTOTYPE","resolver","resolveFunction","compileFunction","visitSignature","visitThisType","thisType","parameterTypes","u32","isStrictlyAssignableTo","needsTempValue","_values","Map_values","member","FIELD","parent","fieldOffset","memoryOffset","if","addFunction","createType","flatten","typeToRuntimeFlags","alignLog2","is","evaluateConstantType","Expected_0_type_arguments_but_got_1","Expected_0_arguments_but_got_1","argumentsRange","usize64","getConstValueI64High","getConstValueI64Low","usize32","naturalAlign","align","_0_must_be_a_power_of_two","feature","hasFeature","Feature_0_is_not_enabled","featureToString","setCurrentTypeOnError","Type_0_is_not_generic","expected","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","i64_is_i32","i64_low","i64_is_u32","i64_high","started","argumentsLength","setArgumentsLength","abort","trace","seed","isFloat","isBoolean","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","isConstant","isVoid","clz","ctz","popcnt","rotl","rotr","abs","copysign","nearest","reinterpret","sqrt","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","call_indirect","instantiate","idof","i16","isize","u16","u64","usize","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","i64_add","f32_add","f64_add","i32_sub","i64_sub","f32_sub","f64_sub","i32_mul","i64_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16","i16x8","i32x4","i64x2","f32x4","f64x2","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","data_end","stack_pointer","heap_base","rtti_base","visit_globals","visit_members","tostack","isFinite","WARNING","INFO","Function","memory_size","memory_grow","memory_copy","memory_fill","memory_data","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Float32Array","Float64Array","wasiAbort","wasiTrace","wasiSeed","thisOperand","isFloatValue","isBooleanValue","classReference","getClass","isAssignableTo","stringInstance","arrayPrototype","isNullableReference","element","lookupExpression","ReportMode","SWALLOW","getExpressionId","ExpressionId","Const","signatureReference","Type_0_has_no_call_signatures","i64_new","getClassOrWrapper","firstOperand","isLiteralKind","String_literal_expected","fieldName","classMembers","Type_0_has_no_property_1","nextMemoryOffset","resultType","isInternalReference","getSignature","ensureStaticString","id","hasDecorator","DecoratorFlags","maybeDropCondition","LocalGet","NeF32","getLocalGetIndex","F32","temp","NeF64","F64","EqF32","SubF32","EqF64","SubF64","isAny","makeIsTrueish","compileCallDirect","elementType","valuesOperand","Array_literal_expected","numElements","exprs","isStatic","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","fromType","isChangeableTo","Type_0_cannot_be_changed_to_type_1","nonNullableType","evaled","Default","getExpressionType","getConstValueF32","getConstValueF64","makeAbort","EqzI32","EqzI64","ref_is_null","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","classInstance","This_expression_is_not_constructable","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","functionPrototype","ftype","requiredParameters","functionArg","shift","thisArg","_this_cannot_be_referenced_in_current_location","compileCallIndirect","isizeType","writeI16","writeI32","writeF32","writeF64","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","elementsByName","global","COMPILED","INLINED","constantIntegerValue","global_get","block","managedClasses","nextId","_keys","Map_keys","instanceId","isPointerfree","return","current","switch","SubI64","data","abvInstance","arrayBufferViewInstance","abvPrototype","setPrototype","mapPrototype","staticArrayPrototype","lastId","getArrayValueType","getTypeArgumentsTo","rttiFlags","segment","addGlobal","instanceofInstance","stmts","instances","200","TypeinfoFlags","Typeinfo","Target","Feature","CommonNames","STUB_DELIMITER","INDEX_SUFFIX","INNER_DELIMITER","STATIC_DELIMITER","INSTANCE_DELIMITER","SETTER_PREFIX","GETTER_PREFIX","PARENT_SUBST","funcref","externref","exnref","anyref","u8x16","u16x8","u32x4","u64x2","void_","number","boolean","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_EXPORT_RUNTIME","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","I8","I16","Isize","U8","U16","U32","U64","Usize","Bool","V128","Funcref","Externref","Exnref","Anyref","StaticArray","ArrayBufferView","ArrayBuffer","Mathf","NativeMath","NativeMathf","ipow32","ipow64","alloc","realloc","free","new_","renew","link","collect","typeinfo","instanceof_","visit","newBuffer","newArray","feature_1","enumerable","target_1","typeinfo_1","220","Compiler","ExportNames","RuntimeFeatures","Constraints","Options","builtins_1","rtrace_1","shadowstack_1","WASM32","exportMemory","globalAliases","optimizeLevelHint","shrinkLevelHint","WASM64","isize64","isize32","table","runtimeFunctions","runtimeGlobals","DiagnosticEmitter","diagnostics","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","setLowMemoryUnused","featureFlags","FeatureFlags","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","makeNativeFunction","Signature","currentBody","shadowStack","ShadowStackPass","hasShadowStack","initialize","actualFunction","startFunctionBody","filesByName","USER_ENTRY","compileFile","compileExports","ensureModuleExports","requireFunction","hasExport","addFunctionExport","requireGlobal","compileGlobal","addGlobalExport","functionsToCompile","Set_values","clear","VIRTUAL","INSTANCE","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","delete","removeGlobal","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","UNLIMITED_MEMORY","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","UNLIMITED_TABLE","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","global_set","ensureArgumentsLength","startIsEmpty","isWasi","unshift","funcRef","nativeParams","nativeResults","typesToNativeTypes","additionalLocals","finalize","setStart","walkModule","lookup","RtraceMemory","elementName","ensureModuleExport","exportsStar","prefix","functionInstances","instanceName","GENERIC","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","identifierNode","CLASS_PROTOTYPE","classPrototype","classInstances","PROPERTY_PROTOTYPE","propertyInstance","CONST","STATIC","READONLY","exportName","Cannot_export_a_mutable_global","ENUMVALUE","enumValue","isImmutable","functionInstance","hasManagedOperands","noteExport","getManagedOperandIndices","PROPERTY","getterInstance","setterInstance","fieldInstance","getterExportName","compileFieldGetter","internalGetterName","internalGetterSignature","setterExportName","compileFieldSetter","internalSetterName","internalSetterSignature","isUnmanaged","ENUM","INTERFACE_PROTOTYPE","NAMESPACE","TYPEDEFINITION","subPrefix","implicitExport","SCOPED","memberName","PRIVATE","compileMembers","compileEnum","resolveClass","compileClass","resolveProperty","compileProperty","compileElement","exportStar","normalizedPathWithoutExtension","pathWithIndex","File_0_not_found","startFunction","startSignature","previousBody","previousFlow","compileTopLevelStatement","locals","localsByIndex","numLocals","varTypes","ERRORED","initExpr","typeNode","initializerNode","RESOLVED","resolvedType","resolveType","Type_expected","setType","checkTypeSupported","atEnd","Type_0_is_not_assignable_to_type_1","AMBIENT","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","GlobalGet","fromName","getGlobalGetName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","constantValueKind","constantFloatValue","compileInlineConstant","Decorator_0_is_not_valid_here","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","setConstantIntegerValue","MODULE_EXPORT","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","addFunctionImport","getFunction","ABSTRACT","INTERFACE","Function_implementation_is_missing_or_not_immediately_following_the_declaration","thisLocal","lookupLocal","bodyStartIndex","compileStatements","GET","SET","canOverflow","isNonnull","allocStmts","makeConditionalAllocation","makeFieldInitializationInConstructor","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","instanceMembers","compileField","getterRef","nativeValueType","nativeThisType","setterRef","bodyExpr","linkInstance","compilePropertyGetter","compilePropertySetter","alignment","MemorySegment","computeBlockStart64","stringValue","stringSegment","totalOverhead","segments","createBuffer","addRuntimeMemorySegment","writeI64","arrayBufferInstance","OBJECTInstance","writeField","bufferSegment","arrayInstance","bufferLength","readI32","arrayLength","bufferAddress","STUB","memorySegment","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","Nop","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","Not_implemented_0","addDebugLocation","isBody","numStatements","Block","getBlockName","getBlockChildCount","getBlockChildAt","needsExplicitUnreachable","outerFlow","innerFlow","fork","freeScopedLocals","inherit","labelNode","breakLabel","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","drop","tcond","local_set","Flow","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritNonnullIfTrue","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritNonnullIfFalse","inheritMutual","valueExpression","constraints","inlineReturnLabel","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","numDeclarations","initializers","uniqueMap","contextualTypeArguments","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","local","Local","parentFunction","setConstantFloatValue","scopedLocals","existing","errorRelated","Duplicate_identifier_0","_const_declarations_must_be_initialized","LET","existingLocal","getScopedLocal","isNative","addScopedLocal","CONSTANT","addLocal","makeLocalAssignment","isShortIntegerValue","doCompileWhileStatement","computeSmallIntegerShift","computeSmallIntegerMask","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","ensureSmallIntegerWrap","explicit","makeRuntimeNonNullCheck","isExternalReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","saturating","isLongIntegerValue","TruncF32ToI64Sat","TruncF32ToI64","TruncF32ToI32Sat","TruncF32ToI32","TruncF32ToU64Sat","TruncF32ToU64","TruncF32ToU32Sat","TruncF32ToU32","TruncF64ToI64Sat","TruncF64ToI64","TruncF64ToI32Sat","TruncF64ToI32","TruncF64ToU64Sat","TruncF64ToU64","TruncF64ToU32Sat","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","PREFIX","AS","NONNULL","exceptVoid","Expression_is_never_null","leftExpr","leftType","rightExpr","rightType","commonType","compound","Token","LESSTHAN","overload","lookupOverload","OperatorKind","LT","compileBinaryOverload","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","makeLt","GREATERTHAN","GT","makeGt","LESSTHAN_EQUALS","LE","makeLe","GREATERTHAN_EQUALS","GE","makeGe","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EQ","operatorTokenToString","makeEq","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","NE","makeNe","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","ADD","The_0_operator_cannot_be_applied_to_type_1","MINUS_EQUALS","MINUS","SUB","ASTERISK_EQUALS","ASTERISK","MUL","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","POW","makePow","SLASH_EQUALS","SLASH","DIV","PERCENT_EQUALS","PERCENT","REM","makeRem","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","intType","BITWISE_SHL","makeShl","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","BITWISE_SHR","makeShr","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","BITWISE_SHR_U","makeShru","AMPERSAND_EQUALS","AMPERSAND","BITWISE_AND","makeAnd","BAR_EQUALS","BAR","BITWISE_OR","makeOr","CARET_EQUALS","CARET","BITWISE_XOR","makeXor","AMPERSAND_AMPERSAND","rightFlow","cloneExpression","BAR_BAR","targetType","getTypeOfElement","makeAssignment","currentThisExpression","currentElementExpression","LtF32","LtF64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","NeI32","AddF32","AddF64","MulI32","MulI64","MulF32","MulF64","Cannot_find_name_0","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI64","ShrU64","AndI64","OrI64","operatorInstance","valueExpr","thisExpression","LOCAL","Variable_0_used_before_its_declaration","checkUnsafe","propertyPrototype","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","INDEXED_SET","INDEXED_GET","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","Indexed_access_may_involve_bounds_checking","indexExpression","tee","isLocalFlag","isConstructor","setThisFieldFlag","FieldFlags","INITIALIZED","fieldParent","makeFieldAssignment","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","localIndex","unsetLocalFlag","field","fieldType","nativeFieldType","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","_super_can_only_be_referenced_in_a_derived_class","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","maybeInferCall","inlinedValue","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Expression_cannot_be_represented_by_a_type","resolveTypeArguments","callee","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","hasRest","minimum","maximum","relatedReportNode","isLibrary","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","makeCallInline","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","paramType","paramExpr","immediatelyDropped","numParameters","createInline","usedLocals","argumentLocal","getParameterName","addScopedAlias","initType","checkFieldInitializationInFlow","stub","varargsStub","originalSignature","originalParameterTypes","originalParameterDeclarations","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","numNames","ofN","Optional_parameter_must_have_an_initializer","virtualStub","overloadPrototypes","overloads","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","isBound","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","boundPrototype","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","n","needsVarargsStub","calledName","addCase","extendees","getAllExtendees","a","b","extendee","removeFunction","render","isConstZero","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","resolved","lastOperand","getSideEffects","SideEffects","WritesGlobal","lastOperandType","operandsTostack","makeCallIndirect","numExpressions","targetExpression","resolveExpression","indexedGet","clone","isNamed","isSemanticallyAnonymous","FunctionPrototype","nextAnonymousId","contextualSignature","signatureNode","numPresentParameters","parameterNode","thisTypeNode","outer","worked","ensureRuntimeFunction","fname","asNullable","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","lookupIdentifierExpression","localType","globalType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime","namedType","hasTypeArguments","resolveTypeName","makeInstanceofClass","expectedType","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","intValue","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","addStaticBuffer","arraySegment","addStaticArrayHeader","arrayAddress","newArrayInstance","nativeArrayType","dataStartMember","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","ctorPrototype","constructorPrototype","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_does_not_exist_on_type_1","Property_0_is_private_and_only_accessible_within_class_1","PROTECTED","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","resolveClassInclTypeArguments","constructorInstance","baseClass","baseCtor","makeNativeFunctionDeclaration","setResolvedInstance","relatedNode","didCheckFieldInitialization","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","ctorInstance","ctxType","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","Unreachable","PLUS_PLUS","POSTFIX_INC","getLocalSetValue","compileUnaryOverload","makeOne","MINUS_MINUS","POSTFIX_DEC","setValue","NegF32","NegF64","PREFIX_INC","PREFIX_DEC","EXCLAMATION","NOT","TILDE","BITWISE_NOT","makeNegOne","TYPEOF","compileTypeof","typeString","REPORT","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","debugInfoRef","debugLocations","parameterReportNode","v128_zero","ref_null","allocInstance","newInstance","thisIndex","makeAllocation","thisLocalIndex","fieldPrototype","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","lineAt","columnAt","mangleInternalName","317","TSDBuilder","IDLBuilder","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","indentLevel","build","typeToString","originalName","walk","remainingMembers","isInterface","extendsNode","252","diagnosticCodeToString","256","formatDiagnosticMessage","diagnosticCategoryToColor","diagnosticCategoryToString","diagnosticMessages_generated_1","diagnosticMessages_generated_2","PEDANTIC","COLOR_MAGENTA","COLOR_CYAN","COLOR_YELLOW","COLOR_RED","thisRange","otherRange","thisRelatedRange","otherRelatedRange","formatDiagnosticContext","isLineBreak","isColorsEnabled","COLOR_RESET","useColors","showContext","wasColorsEnabled","setColorsEnabled","relatedSource","withRange","seenInSource","seenMessagesAtPos","393","ASTBuilder","visitNode","finish","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","elements","visitArguments","numArgs","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","quote","lastCharPos","isDefault","serializeExternalModifiers","numImplementsTypes","numMembers","numValues","serializeAccessModifiers","numTypeParameters","firstDeclaration","REST","OPTIONAL","DECLARE","PUBLIC","154","ConditionKind","FlowFlags","localFlags","thisFieldFlags","inlineFunction","initThisFieldFlags","nextInlineId","resetBreakContext","branch","except","temps","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempExnrefs","tempAnyrefs","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","scopedAlias","scope","localsByName","defaultIfInlined","actualParent","actualClass","fieldFlags","nextBreakId","breakStack","otherFlags","conditionKind","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","before","after","LocalSet","isLocalTee","getLocalSetIndex","iff","If","getIfFalse","getIfCondition","getIfTrue","Unary","getUnaryOp","getUnaryValue","Binary","getBinaryOp","getBinaryLeft","getBinaryRight","exprType","canConversionOverflow","Load","signed","isLoadSigned","getLoadBytes","Select","getSelectThen","getSelectElse","Call","instancesByName","getCallTarget","levels","findusedlocals_1","308","780","__createBinding","o","k2","__exportStar","isWarning","isInfo","FEATURE_MEMORY64","FEATURE_GC","FEATURE_MULTI_VALUE","FEATURE_REFERENCE_TYPES","FEATURE_TAIL_CALLS","FEATURE_EXCEPTION_HANDLING","FEATURE_THREADS","FEATURE_SIMD","FEATURE_BULK_MEMORY","FEATURE_NONTRAPPING_F2I","FEATURE_MUTABLE_GLOBALS","FEATURE_SIGN_EXTENSION","util","compiler_1","definitions_1","Program","diagnosticsOffset","isEntry","parseFile","656","getLoopName","getStoreValue","getStorePtr","getStoreOffset","getStoreBytes","getLoadPtr","getLoadOffset","expandType","ExternalKind","BinaryModule","readString","allocPtrArray","hasSideEffects","Relooper","getEventResults","getEventParams","getEventAttribute","getEventName","getGlobalInit","getGlobalType","getGlobalName","getFunctionVars","getFunctionResults","getFunctionParams","getFunctionName","getFunctionBody","getMemoryGrowDelta","getCallOperandAt","getCallOperandCount","getReturnValue","getDropValue","getSelectCondition","getBreakCondition","getBreakName","getLoopBody","Auto","useShadowStack","hasTemporaryFunction","cachedStringsToPointers","cachedPointersToStrings","lit","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","_BinaryenUnary","_BinaryenBinary","_BinaryenMemorySize","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","replacement","_BinaryenAtomicCmpxchg","timeout","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","single","Return","Throw","singleType","_BinaryenBreak","_BinaryenDrop","ReadsLocal","ReadsGlobal","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","_BinaryenUnreachable","dest","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","_BinaryenGetExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetFastMath","_BinaryenSetFastMath","_BinaryenGetPassArgument","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","_BinaryenModuleSetFeatures","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","setOptimizeLevel","setShrinkLevel","setDebugInfo","setFastMath","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","__i32_load8_u","readBuffer","watFormat","cached","_BinaryenModuleDispose","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenLocalGetGetIndex","globalName","_BinaryenGlobalGetGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","labelHelper","_RelooperRenderAndDispose","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","labelPostfix","labels","defaultLabel","lastCase","Break","numChildren","215","Precedence","Parser","Dependee","backlog","seenlog","donelog","onComment","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","dependee","USER","tn","Tokenizer","skip","ENDOFFILE","parseTopLevelStatement","skipStatement","startPos","AT","tokenPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","DEFAULT","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","nextTokenPos","parseEnum","parseVariable","VAR","parseFunction","state","mark","abstractStart","abstractEnd","nextTokenOnNewLine","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","IdentifierHandling","PREFER","parseNamespace","parseExportImport","parseImport","TYPE","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","DOT","Identifier_expected","acceptParenthesized","suppressErrors","token","OPENPAREN","isNullableSignature","tryParseFunctionType","CLOSEPAREN","_0_expected","Unexpected_token","innerType","parseType","createNamedType","STRINGLITERAL","parseTypeName","parameter","notNullStart","notNull","OPENBRACKET","bracketStart","CLOSEBRACKET","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","DOT_DOT_DOT","COLON","QUESTION","A_rest_parameter_cannot_be_optional","param","createParameter","createOmittedType","EQUALS_GREATERTHAN","createFunctionType","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","SEMICOLON","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","createVariableDeclaration","OPENBRACE","CLOSEBRACE","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","nextToken","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","EXTENDS","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createFunctionDeclaration","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","IMPLEMENTS","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","isGetter","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","ALWAYS","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","createNamespaceDeclaration","parseExportMember","FROM","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","OF","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","ELSE","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","CASE","createSwitchCase","_case_or_default_expected","createThrowStatement","CATCH","FINALLY","createTryStatement","createTypeDeclaration","createVoidStatement","createWhileStatement","YIELD","DELETE","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","INTEGERLITERAL","readInteger","checkForIdentifierStartAfterNumericLiteral","createIntegerLiteralExpression","FLOATLITERAL","readFloat","createFloatLiteralExpression","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Unexpected_end_of_text","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","potentiallyGeneric","createCallExpression","skipBlock","depth","IN","416","pass_1","binaryen_1","FindUsedLocalsVisitor","Visitor","localGet","localSet","singleton","visitor","666","replaceChild","Pass","_currentExpression","currentExpression","previousExpression","visitLabel","visitBlock","visitIf","Loop","visitLoop","_BinaryenBreakGetValue","visitBreak","Switch","_BinaryenSwitchGetDefaultName","_BinaryenSwitchGetNumNames","_BinaryenSwitchGetNameAt","_BinaryenSwitchGetCondition","_BinaryenSwitchGetValue","visitSwitch","visitCallPre","visitName","visitCall","CallIndirect","visitCallIndirectPre","_BinaryenCallIndirectGetTarget","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","visitCallIndirect","visitIndex","visitLocalGet","visitLocalSet","visitGlobalGet","GlobalSet","_BinaryenGlobalSetGetName","_BinaryenGlobalSetGetValue","visitGlobalSet","visitLoad","Store","visitStore","visitConst","visitUnary","visitBinary","visitSelect","Drop","visitDrop","visitReturn","MemorySize","visitMemorySize","MemoryGrow","visitMemoryGrow","visitNop","visitUnreachable","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","visitAtomicRMW","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","visitAtomicCmpxchg","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","visitAtomicWait","AtomicNotify","_BinaryenAtomicNotifyGetPtr","_BinaryenAtomicNotifyGetNotifyCount","visitAtomicNotify","AtomicFence","visitAtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","visitSIMDExtract","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","visitSIMDReplace","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","visitSIMDShuffle","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","visitSIMDTernary","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","visitSIMDShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","visitSIMDLoad","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","visitMemoryInit","DataDrop","visitDataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","visitMemoryCopy","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","visitMemoryFill","Pop","visitPop","RefNull","visitRefNull","RefIsNull","_BinaryenRefIsNullGetValue","visitRefIsNull","RefFunc","_BinaryenRefFuncGetFunc","visitRefFunc","RefEq","_BinaryenRefEqGetLeft","_BinaryenRefEqGetRight","visitRefEq","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","visitTry","visitEvent","_BinaryenThrowGetEvent","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","visitThrow","Rethrow","_BinaryenRethrowGetExnref","visitRethrow","BrOnExn","_BinaryenBrOnExnGetEvent","_BinaryenBrOnExnGetName","_BinaryenBrOnExnGetExnref","visitBrOnExn","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","visitTupleMake","TupleExtract","_BinaryenTupleExtractGetTuple","visitTupleExtract","I31New","visitI31New","I31Get","visitI31Get","CallRef","visitCallRef","RefTest","visitRefTest","RefCast","visitRefCast","BrOnCast","visitBrOnCast","RttCanon","visitRttCanon","RttSub","visitRttSub","StructNew","visitStructNew","StructGet","visitStructGet","StructSet","visitStructSet","ArrayNew","visitArrayNew","ArrayGet","visitArrayGet","ArraySet","visitArraySet","ArrayLen","visitArrayLen","search","child","_BinaryenBlockSetChildAt","_BinaryenIfSetCondition","_BinaryenIfSetIfTrue","_BinaryenIfSetIfFalse","_BinaryenLoopSetBody","_BinaryenBreakSetCondition","_BinaryenBreakSetValue","_BinaryenSwitchSetCondition","_BinaryenSwitchSetValue","_BinaryenCallSetOperandAt","_BinaryenCallIndirectSetTarget","_BinaryenCallIndirectSetOperandAt","_BinaryenLocalSetSetValue","_BinaryenGlobalSetSetValue","_BinaryenLoadSetPtr","_BinaryenStoreSetPtr","_BinaryenStoreSetValue","_BinaryenUnarySetValue","_BinaryenBinarySetLeft","_BinaryenBinarySetRight","_BinaryenSelectSetIfTrue","_BinaryenSelectSetIfFalse","_BinaryenSelectSetCondition","_BinaryenDropSetValue","_BinaryenReturnSetValue","_BinaryenMemoryGrowSetDelta","_BinaryenAtomicRMWSetPtr","_BinaryenAtomicRMWSetValue","_BinaryenAtomicCmpxchgSetPtr","_BinaryenAtomicCmpxchgSetExpected","repl","_BinaryenAtomicCmpxchgSetReplacement","_BinaryenAtomicWaitSetPtr","_BinaryenAtomicWaitSetExpected","_BinaryenAtomicWaitSetTimeout","_BinaryenAtomicNotifySetPtr","_BinaryenAtomicNotifySetNotifyCount","_BinaryenSIMDExtractSetVec","_BinaryenSIMDReplaceSetVec","_BinaryenSIMDReplaceSetValue","_BinaryenSIMDShuffleSetLeft","_BinaryenSIMDShuffleSetRight","_BinaryenSIMDTernarySetA","_BinaryenSIMDTernarySetB","_BinaryenSIMDTernarySetC","_BinaryenSIMDShiftSetVec","_BinaryenSIMDShiftSetShift","_BinaryenSIMDLoadSetPtr","_BinaryenMemoryInitSetDest","_BinaryenMemoryInitSetOffset","_BinaryenMemoryInitSetSize","_BinaryenMemoryCopySetDest","_BinaryenMemoryCopySetSource","_BinaryenMemoryCopySetSize","_BinaryenMemoryFillSetDest","_BinaryenMemoryFillSetValue","_BinaryenMemoryFillSetSize","_BinaryenRefIsNullSetValue","_BinaryenRefEqSetLeft","_BinaryenRefEqSetRight","_BinaryenTrySetBody","_BinaryenTrySetCatchBody","_BinaryenThrowSetOperandAt","_BinaryenRethrowSetExnref","_BinaryenBrOnExnSetExnref","_BinaryenTupleMakeSetOperandAt","_BinaryenTupleExtractSetTuple","_currentFunction","_currentGlobal","currentFunction","currentGlobal","walkFunctions","walkGlobals","moduleRef","_BinaryenGetNumFunctions","walkFunction","_BinaryenGetFunctionByIndex","_BinaryenGetNumGlobals","walkGlobal","_BinaryenGetGlobalByIndex","init","_BinaryenFunctionSetBody","parentExpressionOrNull","_BinaryenExpressionFinalize","865","seenStores","ptrType","readStringCached","checkRT","231","matchTostack","slotMaps","tempMaps","exportMap","hasStackCheckFunction","callSlotOffset","callSlotStack","slotMap","slotIndex","managedOperandIndices","tempMap","_BinaryenFunctionGetNumLocals","ptrBinaryAdd","ptrBinarySub","ptrConst","makeStackCheck","frameSize","remain","nativeSource","numSlots","noteSlot","getSharedTemp","ptrSize","updateCallOperands","callIndirect","replaceCurrent","numVars","vars","exportRef","_BinaryenExportGetKind","internalNameRef","_BinaryenExportGetValue","externalNameRef","_BinaryenExportGetName","numParams","wrapperName","wrapperNameRef","makeStackOffset","instrumentReturns","InstrumentReturns","makeStackFill","bodyType","updateFunction","updateExport","parentPass","974","getDefaultParameterName","Interface","InterfacePrototype","Class","ClassPrototype","IndexSignature","Property","PropertyPrototype","Field","FieldPrototype","Parameter","Global","EnumValue","VariableLikeElement","ConstantValueKind","Enum","Namespace","TypeDefinition","File","TypedElement","isTypedElement","DeclaredElement","isDeclaredElement","Element","parser_1","AL_MASK","AL_SIZE","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","fromDecorator","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","INVALID","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","nextClassId","nextSignatureId","initialized","elementsByDeclaration","wrapperClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_linkInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","nativeDummySignature","Resolver","nativeFile","requireClass","BLOCKInstance","blockOverhead","objectOverhead","currentOffset","payloadSize","blockSize","computeBlockStart","blockMinsize","decoratorFlags","registerNativeType","makeNativeTypeDeclaration","registerConstantInteger","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","starExports","foreignFile","lookupForeignFile","ensureExportStar","madeProgress","queuedImport","lookupForeign","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","queuedExport","ensureExport","globalElement","registerWrapperClass","thisPrototype","baseElement","basePrototype","Class_0_is_final_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","firstChar","markModuleExports","thisInstanceMembers","baseInstanceMembers","thisMember","baseMember","thisMethod","baseMethod","visibilityEquals","Overload_signatures_must_all_be_public_private_or_protected","baseMethodInstances","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","nextPrototype","markModuleExport","className","classElement","wrappedType","isIntegerInclReference","makeNativeVariableDeclaration","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","Duplicate_decorator","checkDecorators","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","addInstance","checkOperatorOverloads","firstArg","_0_is_not_a_valid_operator","Duplicate_function_implementation","operatorKind","parentMembers","Duplicate_property_0","ensureProperty","initializeEnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","initializeFieldAsProperty","copyMembers","shadowType","FILE","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isPublic","vis","declaredElements","selfProperty","selfGetter","selfSetter","typedElements","aliasNamespaces","ensureGlobal","makeNativeNamespaceDeclaration","ns","copyExportsToNamespace","inSelf","i64_zero","boundPrototypes","bound","instanceKey","nameInclTypeParameters","parameterType","parameterName","createParent","registerConcreteElement","postfix","setDebugLocation","FIELD_PROTOTYPE","_internalGetterName","_internalSetterName","_internalGetterSignature","_internalSetterSignature","toBound","_isInterface","basePtototype","interfaces","_id","implementers","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","uncheckedOverload","overhead","computeBlockSize","baseOffset","typeKind","i64_is","writeI32AsI64","writeI64AsI32","extendedPrototype","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","exceptIfMember","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","srcMembers","destMembers","asGlobal","cachedDefaultParameterNames","742","tokenizer_2","resolveClassPending","ctxElement","ctxTypes","reportMode","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_cannot_be_nullable","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","parameterTypeNode","returnTypeNode","typeArgument","prev","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","typeParameterNames","argumentNodes","argumentExpression","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","ensureResolvedLazyGlobal","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","targetNode","propertyName","variableLikeElement","wrapper","baseInstance","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_bool","Type_0_is_illegal_in_this_context","superLocal","fltType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","varType","varElement","thenType","elseType","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","nameInclTypeParamters","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldTypeNode","baseField","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","overloadKind","overloadPrototype","pending","dependsOnInstance","_values2","411","State","tokenIsAlsoIdentifier","tokenFromKeyword","ASYNC","AWAIT","DEBUGGER","IS","KEYOF","MODULE","PACKAGE","WITH","identifierHandling","unsafeNext","maxTokenLength","chr","isDecimalDigit","commentStartPos","LINE","TRIPLE","closed","testInteger","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","reusableState","Unterminated_string_literal","readEscapeSequence","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_4","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","allowLeadingZeroSep","An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","699","TypeFlags","TypeKind","_nonNullableType","_nullableType","nullableType","signednessIsRelevant","currentClass","targetClass","targetFunction","isVectorValue","signednessIsImportant","validWat","nullablePostfix","numTypes","signatureTypes","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","indices","optionalStart","restIndex","cloneParameterTypes","540","readI64","readF64","readF32","readI16","readI8","i32_as_f32","f32_as_i32","i64_as_f64","valueI64","f64_as_i64","189","overrides","cloned","910","96","x","841","separator","ipos","origin","95","colorize","COLOR_WHITE","COLOR_BLUE","COLOR_GREEN","COLOR_GRAY","colorsEnabled","isEnabled","311","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","560","466","607","604","__decorate","desc","d","getOwnPropertyDescriptor","Reflect","decorate","unmanaged","292","__unused_webpack_exports","toText","toAsmjs","710","620","875","i64_one","i64_neg_one","i64_pow","rightLo","rightHi","i64_div","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shr","i64_not","i64_eq","i64_ne","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","minSafeF64","maxSafeF64","i64_is_f64","fround","352","globalScope","window","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","Infinity","NaN","clz32","round","y","sign","isTrueish","CHUNKSIZE","fromCodePoint","at","charAt","configurable","replacment","arraySort","comparator","Ctr","sincos_sin","sincos_cos","signbit","sincos","sin","cos","exp2","byteOffset","911","__webpack_module_cache__","moduleId","globalThis","instantiateStreaming","demangle","BIGINT","BigUint64Array","Symbol","decoder","TextDecoder","getStringImpl","decode","preInstantiate","imports","extendedExports","getString","msg","colm","F_NOEXPORTRUNTIME","postInstantiate","__new","__rtti_base","getArrayInfo","getInfo","getBase","getValueAlign","getView","float","BigInt64Array","__getArrayView","subarray","getTypedArray","getTypedArrayView","bufPtr","attachTypedArrayFunctions","bind","__newArray","view","__getArray","input","__getArrayBuffer","BYTES_PER_ELEMENT","__instanceof","baseId","isResponse","Response","isModule","async","extended","arrayBuffer","elem","curr","hash","classElem","thisValue","getOwnPropertyNames","getter","setter","_default","Rtrace","TOTAL_OVERHEAD","OBJECT_OVERHEAD","BLOCK_OVERHEAD","PTR_VIEW","trimStacktrace","stackTraceLimit","mmTagsToString","gcColorToString","onerror","oninfo","oncollect_","oncollect","shadow","shadowStart","blocks","allocSites","freedBlocks","gcProfileStart","allocCount","resizeCount","moveCount","freeCount","heapBase","assign","oninit","onalloc","onresize","onmove","onvisit","onfree","oninterrupt","onyield","onstore","onload","diff","grow","Memory","PAGE_SIZE","oldSize","PTR_SIZE","errored","isLoad","isRT","syncShadow","mmInfo","gcInfo","gcInfo2","rtId","rtSize","tags","allocStack","getBlockInfo","markShadow","beforeInfo","newSize","unmarkShadow","oldPtr","newPtr","oldInfo","newInfo","freeStack","allocInfo","total","plot","pause","interruptStart","accessShadow","__webpack_require__"],"mappings":"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AI,IAAM,QAEnCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,IAAM,UACrCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UACtCA,EAASA,EAAkB,QAAI,KAAO,UAC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M,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAExCC,EAAwB,CAC1B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACt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","file":"asc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asc\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"asc\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__911__) {\nreturn ","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Compiler frontend for node.js\n *\n * Uses the low-level API exported from src/index.ts so it works with the compiler compiled to\n * JavaScript as well as the compiler compiled to WebAssembly (eventually). Runs the sources\n * directly through ts-node if distribution files are not present.\n *\n * Can also be packaged as a bundle suitable for in-browser use with the standard library injected\n * in the build step. See dist/asc.js for the bundle and webpack.config.js for building details.\n */\n\n/* global BUNDLE_VERSION, BUNDLE_LIBRARY, BUNDLE_DEFINITIONS */\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst process = require(\"process\"); // ensure shim\n\nprocess.exit = ((exit) => function(code) {\n  if (code) console.log(new Error(\"exit \" + code.toString()).stack);\n  exit(code);\n})(process.exit);\n\nconst utf8 = require(\"./util/utf8\");\nconst colorsUtil = require(\"./util/colors\");\nconst optionsUtil = require(\"./util/options\");\nconst mkdirp = require(\"./util/mkdirp\");\nconst find = require(\"./util/find\");\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nconst WIN = process.platform === \"win32\";\nconst EOL = WIN ? \"\\r\\n\" : \"\\n\";\nconst SEP = WIN ? \"\\\\\" : \"/\";\n\n// Sets up an extension with its definition counterpart and relevant regexes.\nfunction setupExtension(ext) {\n  if (!ext.startsWith(\".\")) ext = \".\" + ext;\n  return {\n    ext,\n    ext_d: \".d\" + ext,\n    re: new RegExp(\"\\\\\" + ext + \"$\"),\n    re_d: new RegExp(\"\\\\.d\\\\\" + ext + \"$\"),\n    re_except_d: new RegExp(\"^(?!.*\\\\.d\\\\\" + ext + \"$).*\\\\\" + ext + \"$\"),\n    re_index: new RegExp(\"(?:^|[\\\\\\\\\\\\/])index\\\\\" + ext + \"$\")\n  };\n}\n\nconst defaultExtension = setupExtension(\".ts\");\n\n// Proxy Binaryen's ready event\nObject.defineProperty(exports, \"ready\", {\n  get() { return binaryen.ready; }\n});\n\n// Emscripten adds an `uncaughtException` listener to Binaryen that results in an additional\n// useless code fragment on top of an actual error. suppress this:\nif (process.removeAllListeners) process.removeAllListeners(\"uncaughtException\");\n\n// Use distribution files if present, otherwise run the sources directly.\nfunction loadAssemblyScriptJS() {\n  return require('../dist/assemblyscript.js');\n}\n\n// Loads the specified bootstrapped Wasm binary of the compiler.\nfunction loadAssemblyScriptWasm(binaryPath) {\n  const loader = require(\"../lib/loader/umd/index\");\n  const rtrace = new (require(\"../lib/rtrace/umd/index\").Rtrace)({\n    onerror(err, info) { console.log(err, info); },\n    getMemory() { return exports.memory; },\n    oncollect() {\n      var gcProfile = rtrace.gcProfile;\n      if (gcProfile && gcProfile.length && fs.writeFileSync) {\n        let timestamp = Date.now();\n        fs.writeFileSync(`rtrace-gc-profile-${timestamp}.json`, JSON.stringify(gcProfile));\n        fs.writeFileSync(`rtrace-gc-profile-${timestamp}.csv`, `time,memory,pause\\n${gcProfile.join(\"\\n\")}`);\n      }\n    }\n  });\n  var { exports } = loader.instantiateSync(fs.readFileSync(binaryPath), rtrace.install({ binaryen }));\n  if (exports._start) exports._start();\n  return exports;\n}\n\n/** Ensures that an object is a wrapper class instead of just a pointer. */\nfunction __wrap(ptrOrObj, wrapperClass) {\n  if (typeof ptrOrObj === \"number\") {\n    return ptrOrObj === 0 ? null : wrapperClass.wrap(ptrOrObj);\n  }\n  return ptrOrObj;\n}\n\nvar assemblyscript, __newString, __getString, __pin, __unpin, __collect;\n\nfunction loadAssemblyScript() {\n  const wasmArg = process.argv.findIndex(arg => arg == \"--wasm\");\n  if (~wasmArg) {\n    let binaryPath = process.argv[wasmArg + 1];\n    process.argv.splice(wasmArg, 2);\n    assemblyscript = loadAssemblyScriptWasm(binaryPath);\n    __newString = assemblyscript.__newString;\n    __getString = assemblyscript.__getString;\n    __pin = assemblyscript.__pin;\n    __unpin = assemblyscript.__unpin;\n    __collect = assemblyscript.__collect;\n  } else {\n    assemblyscript = loadAssemblyScriptJS();\n    __newString = str => str;\n    __getString = ptr => ptr;\n    __pin = ptr => ptr;\n    __unpin = ptr => undefined;\n    __collect = incremental => undefined;\n  }\n}\nloadAssemblyScript();\n\nexports.assemblyscript = assemblyscript;\n\n/** Whether this is a webpack bundle or not. */\nexports.isBundle = typeof BUNDLE_VERSION === \"string\";\n\n/** AssemblyScript version. */\nexports.version = BUNDLE_VERSION;\n\n/** Available CLI options. */\nexports.options = require(\"./asc.json\");\n\n/** Prefix used for library files. */\nexports.libraryPrefix = __getString(assemblyscript.LIBRARY_PREFIX.valueOf());\n\n/** Default Binaryen optimization level. */\nexports.defaultOptimizeLevel = 3;\n\n/** Default Binaryen shrink level. */\nexports.defaultShrinkLevel = 1;\n\n/** Bundled library files. */\nexports.libraryFiles = exports.isBundle ? BUNDLE_LIBRARY : (() => { // set up if not a bundle\n  const libDir = path.join(__dirname, \"..\", \"std\", \"assembly\");\n  const bundled = {};\n  find\n    .files(libDir, defaultExtension.re_except_d)\n    .forEach(file => {\n      bundled[file.replace(defaultExtension.re, \"\")] = fs.readFileSync(path.join(libDir, file), \"utf8\");\n    });\n  return bundled;\n})();\n\n/** Bundled definition files. */\nexports.definitionFiles = exports.isBundle ? BUNDLE_DEFINITIONS : (() => { // set up if not a bundle\n  const readDefinition = name => fs.readFileSync(\n    path.join(__dirname, \"..\", \"std\", name, \"index\" + defaultExtension.ext_d),\n    \"utf8\"\n  );\n  return {\n    assembly: readDefinition(\"assembly\"),\n    portable: readDefinition(\"portable\")\n  };\n})();\n\n/** Convenience function that parses and compiles source strings directly. */\nexports.compileString = (sources, options) => {\n  if (typeof sources === \"string\") sources = { [\"input\" + defaultExtension.ext]: sources };\n  const output = Object.create({\n    stdout: createMemoryStream(),\n    stderr: createMemoryStream()\n  });\n  var argv = [\n    \"--binaryFile\", \"binary\",\n    \"--textFile\", \"text\",\n  ];\n  Object.keys(options || {}).forEach(key => {\n    var val = options[key];\n    var opt = exports.options[key];\n    if (opt && opt.type === \"b\") {\n      if (val) argv.push(\"--\" + key);\n    } else {\n      if (Array.isArray(val)) {\n        val.forEach(val => { argv.push(\"--\" + key, String(val)); });\n      }\n      else argv.push(\"--\" + key, String(val));\n    }\n  });\n  exports.main(argv.concat(Object.keys(sources)), {\n    stdout: output.stdout,\n    stderr: output.stderr,\n    readFile: name => Object.prototype.hasOwnProperty.call(sources, name) ? sources[name] : null,\n    writeFile: (name, contents) => { output[name] = contents; },\n    listFiles: () => []\n  });\n  return output;\n};\n\n/** Runs the command line utility using the specified arguments array. */\nexports.main = function main(argv, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  const stdout = options.stdout || process.stdout;\n  const stderr = options.stderr || process.stderr;\n  const readFile = options.readFile || readFileNode;\n  const writeFile = options.writeFile || writeFileNode;\n  const listFiles = options.listFiles || listFilesNode;\n  const stats = options.stats || createStats();\n  let extension = defaultExtension;\n\n  // Output must be specified if not present in the environment\n  if (!stdout) throw Error(\"'options.stdout' must be specified\");\n  if (!stderr) throw Error(\"'options.stderr' must be specified\");\n\n  // Parse command line options but do not populate option defaults yet\n  const optionsResult = optionsUtil.parse(argv, exports.options, false);\n  let opts = optionsResult.options;\n  argv = optionsResult.arguments;\n\n  if (opts.noColors) {\n    colorsUtil.stdout.supported =\n    colorsUtil.stderr.supported = false;\n  } else {\n    colorsUtil.stdout = colorsUtil.from(stdout);\n    colorsUtil.stderr = colorsUtil.from(stderr);\n  }\n\n  // Check for unknown options\n  const unknownOpts = optionsResult.unknown;\n  if (unknownOpts.length) {\n    unknownOpts.forEach(arg => {\n      stderr.write(colorsUtil.stderr.yellow(\"WARNING \") + \"Unknown option '\" + arg + \"'\" + EOL);\n    });\n  }\n\n  // Check for trailing arguments\n  const trailingArgv = optionsResult.trailing;\n  if (trailingArgv.length) {\n    stderr.write(colorsUtil.stderr.yellow(\"WARNING \") + \"Unsupported trailing arguments: \" + trailingArgv.join(\" \") + EOL);\n  }\n\n  // Use default callback if none is provided\n  if (!callback) callback = function defaultCallback(err) {\n    var code = 0;\n    if (err) {\n      stderr.write(colorsUtil.stderr.red(\"FAILURE \") + err.stack.replace(/^ERROR: /i, \"\") + EOL);\n      code = 1;\n    }\n    return code;\n  };\n\n  // Just print the version if requested\n  if (opts.version) {\n    stdout.write(\"Version \" + exports.version + EOL);\n    return callback(null);\n  }\n\n  // Use another extension if requested\n  if (typeof opts.extension === \"string\") {\n    if (/^\\.?[0-9a-zA-Z]{1,14}$/.test(opts.extension)) {\n      extension = setupExtension(opts.extension);\n    } else {\n      return callback(Error(\"Invalid extension: \" + opts.extension));\n    }\n  }\n\n  // Set up base directory\n  const baseDir = path.normalize(opts.baseDir || \".\");\n\n  // Check if a config file is present\n  let asconfigPath = optionsUtil.resolvePath(opts.config || \"asconfig.json\", baseDir);\n  let asconfigFile = path.basename(asconfigPath);\n  let asconfigDir = path.dirname(asconfigPath);\n  let asconfig = getAsconfig(asconfigFile, asconfigDir, readFile);\n  let asconfigHasEntries = asconfig != null && Array.isArray(asconfig.entries) && asconfig.entries.length;\n\n  // Print the help message if requested or no source files are provided\n  if (opts.help || (!argv.length && !asconfigHasEntries)) {\n    var out = opts.help ? stdout : stderr;\n    var color = opts.help ? colorsUtil.stdout : colorsUtil.stderr;\n    out.write([\n      color.white(\"SYNTAX\"),\n      \"  \" + color.cyan(\"asc\") + \" [entryFile ...] [options]\",\n      \"\",\n      color.white(\"EXAMPLES\"),\n      \"  \" + color.cyan(\"asc\") + \" hello\" + extension.ext,\n      \"  \" + color.cyan(\"asc\") + \" hello\" + extension.ext + \" -b hello.wasm -t hello.wat\",\n      \"  \" + color.cyan(\"asc\") + \" hello1\" + extension.ext + \" hello2\" + extension.ext + \" -b -O > hello.wasm\",\n      \"  \" + color.cyan(\"asc\") + \" --config asconfig.json --target release\",\n      \"\",\n      color.white(\"OPTIONS\"),\n    ].concat(\n      optionsUtil.help(exports.options, 24, EOL)\n    ).join(EOL) + EOL);\n    return callback(null);\n  }\n\n  // I/O must be specified if not present in the environment\n  if (!fs.readFileSync) {\n    if (readFile === readFileNode) throw Error(\"'options.readFile' must be specified\");\n    if (writeFile === writeFileNode) throw Error(\"'options.writeFile' must be specified\");\n    if (listFiles === listFilesNode) throw Error(\"'options.listFiles' must be specified\");\n  }\n\n  // Load additional options from asconfig.json\n  const seenAsconfig = new Set();\n  seenAsconfig.add(asconfigPath);\n  const target = opts.target || \"release\";\n  while (asconfig) {\n    // Merge target first\n    if (asconfig.targets) {\n      const targetOptions = asconfig.targets[target];\n      if (targetOptions) {\n        opts = optionsUtil.merge(exports.options, opts, targetOptions, asconfigDir);\n      }\n    }\n    // Merge general options\n    const generalOptions = asconfig.options;\n    if (generalOptions) {\n      opts = optionsUtil.merge(exports.options, opts, generalOptions, asconfigDir);\n    }\n\n    // Append entries\n    if (asconfig.entries) {\n      for (let entry of asconfig.entries) {\n        argv.push(optionsUtil.resolvePath(entry, asconfigDir));\n      }\n    }\n\n    // Look up extended asconfig and repeat\n    if (asconfig.extends) {\n      asconfigPath = optionsUtil.resolvePath(asconfig.extends, asconfigDir, true);\n      asconfigFile = path.basename(asconfigPath);\n      asconfigDir = path.dirname(asconfigPath);\n      if (seenAsconfig.has(asconfigPath)) break;\n      seenAsconfig.add(asconfigPath);\n      asconfig = getAsconfig(asconfigFile, asconfigDir, readFile);\n    } else {\n      break;\n    }\n  }\n\n  // Populate option defaults once user-defined options are set\n  optionsUtil.addDefaults(exports.options, opts);\n\n  // If showConfig print options and exit\n  if (opts.showConfig) {\n    stderr.write(JSON.stringify({\n      options: opts,\n      entries: argv\n    }, null, 2));\n    return callback(null);\n  }\n\n  // create a unique set of values\n  function unique(values) {\n    return [...new Set(values)];\n  }\n\n  // Set up options\n  var program;\n  const compilerOptions = __pin(assemblyscript.newOptions());\n  assemblyscript.setTarget(compilerOptions, 0);\n  assemblyscript.setNoAssert(compilerOptions, opts.noAssert);\n  assemblyscript.setExportMemory(compilerOptions, !opts.noExportMemory);\n  assemblyscript.setImportMemory(compilerOptions, opts.importMemory);\n  assemblyscript.setInitialMemory(compilerOptions, opts.initialMemory >>> 0);\n  assemblyscript.setMaximumMemory(compilerOptions, opts.maximumMemory >>> 0);\n  assemblyscript.setSharedMemory(compilerOptions, opts.sharedMemory);\n  assemblyscript.setImportTable(compilerOptions, opts.importTable);\n  assemblyscript.setExportTable(compilerOptions, opts.exportTable);\n  assemblyscript.setExplicitStart(compilerOptions, opts.explicitStart);\n  assemblyscript.setMemoryBase(compilerOptions, opts.memoryBase >>> 0);\n  assemblyscript.setTableBase(compilerOptions, opts.tableBase >>> 0);\n  assemblyscript.setSourceMap(compilerOptions, opts.sourceMap != null);\n  assemblyscript.setNoUnsafe(compilerOptions, opts.noUnsafe);\n  assemblyscript.setPedantic(compilerOptions, opts.pedantic);\n  assemblyscript.setLowMemoryLimit(compilerOptions, opts.lowMemoryLimit >>> 0);\n  assemblyscript.setExportRuntime(compilerOptions, opts.exportRuntime);\n  if (!opts.stackSize && opts.runtime == \"incremental\") {\n    opts.stackSize = assemblyscript.DEFAULT_STACK_SIZE;\n  }\n  assemblyscript.setStackSize(compilerOptions, opts.stackSize);\n\n  // Instrument callback to perform GC\n  callback = (function(callback) {\n    return function wrappedCallback(err) {\n      __unpin(compilerOptions);\n      if (program) __unpin(program);\n      __collect();\n      return callback(err);\n    };\n  })(callback);\n\n  // Add or override aliases if specified\n  if (opts.use) {\n    let aliases = opts.use;\n    for (let i = 0, k = aliases.length; i < k; ++i) {\n      let part = aliases[i];\n      let p = part.indexOf(\"=\");\n      if (p < 0) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\n      let alias = part.substring(0, p).trim();\n      let name = part.substring(p + 1).trim();\n      if (!alias.length) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\n      {\n        let aliasPtr = __pin(__newString(alias));\n        let namePtr = __newString(name);\n        assemblyscript.setGlobalAlias(compilerOptions, aliasPtr, namePtr);\n        __unpin(aliasPtr);\n      }\n    }\n  }\n\n  // Disable default features if specified\n  var features;\n  if ((features = opts.disable) != null) {\n    if (typeof features === \"string\") features = features.split(\",\");\n    for (let i = 0, k = features.length; i < k; ++i) {\n      let name = features[i].trim();\n      let flag = assemblyscript[\"FEATURE_\" + name.replace(/-/g, \"_\").toUpperCase()];\n      if (!flag) return callback(Error(\"Feature '\" + name + \"' is unknown.\"));\n      assemblyscript.disableFeature(compilerOptions, flag);\n    }\n  }\n\n  // Enable experimental features if specified\n  if ((features = opts.enable) != null) {\n    if (typeof features === \"string\") features = features.split(\",\");\n    for (let i = 0, k = features.length; i < k; ++i) {\n      let name = features[i].trim();\n      let flag = assemblyscript[\"FEATURE_\" + name.replace(/-/g, \"_\").toUpperCase()];\n      if (!flag) return callback(Error(\"Feature '\" + name + \"' is unknown.\"));\n      assemblyscript.enableFeature(compilerOptions, flag);\n    }\n  }\n\n  // Set up optimization levels\n  var optimizeLevel = 0;\n  var shrinkLevel = 0;\n  if (opts.optimize) {\n    optimizeLevel = exports.defaultOptimizeLevel;\n    shrinkLevel = exports.defaultShrinkLevel;\n  }\n  if (typeof opts.optimizeLevel === \"number\") optimizeLevel = opts.optimizeLevel;\n  if (typeof opts.shrinkLevel === \"number\") shrinkLevel = opts.shrinkLevel;\n  optimizeLevel = Math.min(Math.max(optimizeLevel, 0), 3);\n  shrinkLevel = Math.min(Math.max(shrinkLevel, 0), 2);\n  assemblyscript.setOptimizeLevelHints(compilerOptions, optimizeLevel, shrinkLevel);\n\n  // Initialize the program\n  program = __pin(assemblyscript.newProgram(compilerOptions));\n\n  // Set up transforms\n  const transforms = [];\n\n  function applyTransform(name, ...args) {\n    for (let i = 0, k = transforms.length; i < k; ++i) {\n      let transform = transforms[i];\n      if (typeof transform[name] === \"function\") {\n        try {\n          stats.transformCount++;\n          stats.transfromTime += measure(() => {\n            transform[name](...args);\n          });\n        } catch (e) {\n          return e;\n        }\n      }\n    }\n  }\n\n  // Parse library files\n  Object.keys(exports.libraryFiles).forEach(libPath => {\n    if (libPath.indexOf(\"/\") >= 0) return; // in sub-directory: imported on demand\n    stats.parseCount++;\n    stats.parseTime += measure(() => {\n      let textPtr = __pin(__newString(exports.libraryFiles[libPath]));\n      let pathPtr = __newString(exports.libraryPrefix + libPath + extension.ext);\n      assemblyscript.parse(program, textPtr, pathPtr, false);\n      __unpin(textPtr);\n    });\n  });\n  let customLibDirs = [];\n  if (opts.lib) {\n    let lib = opts.lib;\n    if (typeof lib === \"string\") lib = lib.split(\",\");\n    customLibDirs.push(...lib.map(p => p.trim()));\n    customLibDirs = unique(customLibDirs); // `lib` and `customLibDirs` may include duplicates\n    for (let i = 0, k = customLibDirs.length; i < k; ++i) { // custom\n      let libDir = customLibDirs[i];\n      let libFiles;\n      if (libDir.endsWith(extension.ext)) {\n        libFiles = [ path.basename(libDir) ];\n        libDir = path.dirname(libDir);\n      } else {\n        libFiles = listFiles(libDir, baseDir) || [];\n      }\n      for (let j = 0, l = libFiles.length; j < l; ++j) {\n        let libPath = libFiles[j];\n        let libText = readFile(libPath, libDir);\n        if (libText === null) return callback(Error(\"Library file '\" + libPath + \"' not found.\"));\n        stats.parseCount++;\n        exports.libraryFiles[libPath.replace(extension.re, \"\")] = libText;\n        stats.parseTime += measure(() => {\n          let textPtr = __pin(__newString(libText));\n          let pathPtr = __newString(exports.libraryPrefix + libPath);\n          assemblyscript.parse(program, textPtr, pathPtr, false);\n          __unpin(textPtr);\n        });\n      }\n    }\n  }\n  opts.path = opts.path || [];\n\n  // Maps package names to parent directory\n  var packageMains = new Map();\n  var packageBases = new Map();\n\n  // Gets the file matching the specified source path, imported at the given dependee path\n  function getFile(internalPath, dependeePath) {\n    var sourceText = null; // text reported back to the compiler\n    var sourcePath = null; // path reported back to the compiler\n\n    const libraryPrefix = exports.libraryPrefix;\n    const libraryFiles = exports.libraryFiles;\n\n    // Try file.ext, file/index.ext, file.d.ext\n    if (!internalPath.startsWith(libraryPrefix)) {\n      if ((sourceText = readFile(sourcePath = internalPath + extension.ext, baseDir)) == null) {\n        if ((sourceText = readFile(sourcePath = internalPath + \"/index\" + extension.ext, baseDir)) == null) {\n          // portable d.ext: uses the .js file next to it in JS or becomes an import in Wasm\n          sourcePath = internalPath + extension.ext;\n          sourceText = readFile(internalPath + extension.ext_d, baseDir);\n        }\n      }\n\n    // Search library in this order: stdlib, custom lib dirs, paths\n    } else {\n      const plainName = internalPath.substring(libraryPrefix.length);\n      const indexName = plainName + \"/index\";\n      if (Object.prototype.hasOwnProperty.call(libraryFiles, plainName)) {\n        sourceText = libraryFiles[plainName];\n        sourcePath = libraryPrefix + plainName + extension.ext;\n      } else if (Object.prototype.hasOwnProperty.call(libraryFiles, indexName)) {\n        sourceText = libraryFiles[indexName];\n        sourcePath = libraryPrefix + indexName + extension.ext;\n      } else { // custom lib dirs\n        for (const libDir of customLibDirs) {\n          if ((sourceText = readFile(plainName + extension.ext, libDir)) != null) {\n            sourcePath = libraryPrefix + plainName + extension.ext;\n            break;\n          } else {\n            if ((sourceText = readFile(indexName + extension.ext, libDir)) != null) {\n              sourcePath = libraryPrefix + indexName + extension.ext;\n              break;\n            }\n          }\n        }\n        if (sourceText == null) { // paths\n          const match = internalPath.match(/^~lib\\/((?:@[^/]+\\/)?[^/]+)(?:\\/(.+))?/); // ~lib/(pkg)/(path), ~lib/(@org/pkg)/(path)\n          if (match) {\n            const packageName = match[1];\n            const isPackageRoot = match[2] === undefined;\n            const filePath = isPackageRoot ? \"index\" : match[2];\n            const basePath = packageBases.has(dependeePath) ? packageBases.get(dependeePath) : \".\";\n            if (opts.traceResolution) stderr.write(\"Looking for package '\" + packageName + \"' file '\" + filePath + \"' relative to '\" + basePath + \"'\" + EOL);\n            const paths = [];\n            const parts = path.resolve(baseDir, basePath).split(SEP);\n            for (let i = parts.length, k = WIN ? 1 : 0; i >= k; --i) {\n              if (parts[i - 1] !== \"node_modules\") paths.push(parts.slice(0, i).join(SEP) + SEP + \"node_modules\");\n            }\n            for (const currentPath of paths.concat(...opts.path).map(p => path.relative(baseDir, p))) {\n              if (opts.traceResolution) stderr.write(\"  in \" + path.join(currentPath, packageName) + EOL);\n              let mainPath = \"assembly\";\n              if (packageMains.has(packageName)) { // use cached\n                mainPath = packageMains.get(packageName);\n              } else { // evaluate package.json\n                let jsonPath = path.join(currentPath, packageName, \"package.json\");\n                let jsonText = readFile(jsonPath, baseDir);\n                if (jsonText != null) {\n                  try {\n                    let json = JSON.parse(jsonText);\n                    if (typeof json.ascMain === \"string\") {\n                      mainPath = json.ascMain.replace(extension.re_index, \"\");\n                      packageMains.set(packageName, mainPath);\n                    }\n                  } catch (e) { /* nop */ }\n                }\n              }\n              const mainDir = path.join(currentPath, packageName, mainPath);\n              const plainName = filePath;\n              if ((sourceText = readFile(path.join(mainDir, plainName + extension.ext), baseDir)) != null) {\n                sourcePath = libraryPrefix + packageName + \"/\" + plainName + extension.ext;\n                packageBases.set(sourcePath.replace(extension.re, \"\"), path.join(currentPath, packageName));\n                if (opts.traceResolution) stderr.write(\"  -> \" + path.join(mainDir, plainName + extension.ext) + EOL);\n                break;\n              } else if (!isPackageRoot) {\n                const indexName = filePath + \"/index\";\n                if ((sourceText = readFile(path.join(mainDir, indexName + extension.ext), baseDir)) !== null) {\n                  sourcePath = libraryPrefix + packageName + \"/\" + indexName + extension.ext;\n                  packageBases.set(sourcePath.replace(extension.re, \"\"), path.join(currentPath, packageName));\n                  if (opts.traceResolution) stderr.write(\"  -> \" + path.join(mainDir, indexName + extension.ext) + EOL);\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // No such file\n    if (sourceText == null) return null;\n    return { sourceText, sourcePath };\n  }\n\n  // Parses the backlog of imported files after including entry files\n  function parseBacklog() {\n    var internalPath;\n    while ((internalPath = __getString(assemblyscript.nextFile(program)))) {\n      let file = getFile(internalPath, assemblyscript.getDependee(program, internalPath));\n      if (file) {\n        stats.parseCount++;\n        stats.parseTime += measure(() => {\n          let textPtr = __pin(__newString(file.sourceText));\n          let pathPtr = __newString(file.sourcePath);\n          assemblyscript.parse(program, textPtr, pathPtr, false);\n          __unpin(textPtr);\n        });\n      } else {\n        stats.parseTime += measure(() => {\n          let textPtr = __newString(null); // no need to pin\n          let pathPtr = __newString(internalPath + extension.ext);\n          assemblyscript.parse(program, textPtr, pathPtr, false);\n        });\n      }\n    }\n    var numErrors = checkDiagnostics(program, stderr, options.reportDiagnostic);\n    if (numErrors) {\n      const err = Error(numErrors + \" parse error(s)\");\n      err.stack = err.message; // omit stack\n      return callback(err);\n    }\n  }\n\n  // Include runtime before entry files so its setup runs first\n  {\n    let runtimeName = String(opts.runtime);\n    let runtimePath = \"rt/index-\" + runtimeName;\n    let runtimeText = exports.libraryFiles[runtimePath];\n    if (runtimeText == null) {\n      runtimePath = runtimeName;\n      runtimeText = readFile(runtimePath + extension.ext, baseDir);\n      if (runtimeText == null) return callback(Error(`Runtime '${runtimeName}' not found.`));\n    } else {\n      runtimePath = \"~lib/\" + runtimePath;\n    }\n    stats.parseCount++;\n    stats.parseTime += measure(() => {\n      let textPtr = __pin(__newString(runtimeText));\n      let pathPtr = __newString(runtimePath + extension.ext);\n      assemblyscript.parse(program, textPtr, pathPtr, true);\n      __unpin(textPtr);\n    });\n  }\n\n  // Include entry files\n  for (let i = 0, k = argv.length; i < k; ++i) {\n    const filename = argv[i];\n\n    let sourcePath = String(filename).replace(/\\\\/g, \"/\").replace(extension.re, \"\").replace(/[\\\\/]$/, \"\");\n\n    // Setting the path to relative path\n    sourcePath = path.isAbsolute(sourcePath) ? path.relative(baseDir, sourcePath).replace(/\\\\/g, \"/\") : sourcePath;\n\n    // Try entryPath.ext, then entryPath/index.ext\n    let sourceText = readFile(sourcePath + extension.ext, baseDir);\n    if (sourceText == null) {\n      sourceText = readFile(sourcePath + \"/index\" + extension.ext, baseDir);\n      if (sourceText != null) sourcePath += \"/index\" + extension.ext;\n      else sourcePath += extension.ext;\n    } else {\n      sourcePath += extension.ext;\n    }\n\n    stats.parseCount++;\n    stats.parseTime += measure(() => {\n      let textPtr = __pin(__newString(sourceText));\n      let pathPtr = __newString(sourcePath);\n      assemblyscript.parse(program, textPtr, pathPtr, true);\n      __unpin(textPtr);\n    });\n  }\n\n  // Parse entry files\n  {\n    let code = parseBacklog();\n    if (code) return code;\n  }\n\n  // Call afterParse transform hook\n  {\n    let error = applyTransform(\"afterParse\", program.parser);\n    if (error) return callback(error);\n  }\n\n  // Parse additional files, if any\n  {\n    let code = parseBacklog();\n    if (code) return code;\n  }\n\n  // Print files and exit if listFiles\n  if (opts.listFiles) {\n    // FIXME: not a proper C-like API\n    stderr.write(program.sources.map(s => s.normalizedPath).sort().join(EOL) + EOL);\n    return callback(null);\n  }\n\n  // Pre-emptively initialize the program\n  stats.initializeCount++;\n  stats.initializeTime += measure(() => {\n    assemblyscript.initializeProgram(program);\n  });\n\n  // Call afterInitialize transform hook\n  {\n    let error = applyTransform(\"afterInitialize\", program);\n    if (error) return callback(error);\n  }\n\n  var module;\n  stats.compileCount++;\n  stats.compileTime += measure(() => {\n    module = assemblyscript.compile(program);\n    // From here on we are going to use Binaryen.js, except that we keep pass\n    // order as defined in the compiler.\n    if (typeof module === \"number\") { // Wasm\n      const original = assemblyscript.Module.wrap(module);\n      module = binaryen.wrapModule(original.ref);\n      module.optimize = function(...args) {\n        original.optimize(...args);\n      };\n    } else { // JS\n      const original = module;\n      module = binaryen.wrapModule(module.ref);\n      module.optimize = function(...args) {\n        original.optimize(...args);\n      };\n    }\n  });\n  var numErrors = checkDiagnostics(program, stderr, options.reportDiagnostic);\n  if (numErrors) {\n    if (module) module.dispose();\n    const err = Error(numErrors + \" compile error(s)\");\n    err.stack = err.message; // omit stack\n    return callback(err);\n  }\n\n  // Call afterCompile transform hook\n  {\n    let error = applyTransform(\"afterCompile\", module);\n    if (error) return callback(error);\n  }\n\n  // Validate the module if requested\n  if (!opts.noValidate) {\n    stats.validateCount++;\n    let isValid;\n    stats.validateTime += measure(() => {\n      isValid = module.validate();\n    });\n    if (!isValid) {\n      module.dispose();\n      return callback(Error(\"validate error\"));\n    }\n  }\n\n  // Set Binaryen-specific options\n  if (opts.trapMode === \"clamp\") {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPass(\"trap-mode-clamp\");\n    });\n  } else if (opts.trapMode === \"js\") {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPass(\"trap-mode-js\");\n    });\n  } else if (opts.trapMode !== \"allow\") {\n    module.dispose();\n    return callback(Error(\"Unsupported trap mode\"));\n  }\n\n  // Optimize the module\n  const debugInfo = opts.debug;\n  const converge = opts.converge;\n  const runPasses = [];\n  if (opts.runPasses) {\n    if (typeof opts.runPasses === \"string\") {\n      opts.runPasses = opts.runPasses.split(\",\");\n    }\n    if (opts.runPasses.length) {\n      opts.runPasses.forEach(pass => {\n        if (runPasses.indexOf(pass = pass.trim()) < 0)\n          runPasses.push(pass);\n      });\n    }\n  }\n\n  stats.optimizeTime += measure(() => {\n    stats.optimizeCount++;\n    module.optimize(optimizeLevel, shrinkLevel, debugInfo);\n    module.runPasses(runPasses);\n    if (converge) {\n      let last = module.emitBinary();\n      do {\n        stats.optimizeCount++;\n        module.optimize(optimizeLevel, shrinkLevel, debugInfo);\n        module.runPasses(runPasses);\n        let next = module.emitBinary();\n        if (next.length >= last.length) {\n          if (next.length > last.length) {\n            stderr.write(\"Last converge was suboptimial.\" + EOL);\n          }\n          break;\n        }\n        last = next;\n      } while (true);\n    }\n  });\n\n  // Prepare output\n  if (!opts.noEmit) {\n    if (opts.outFile != null) {\n      if (/\\.was?t$/.test(opts.outFile) && opts.textFile == null) {\n        opts.textFile = opts.outFile;\n      } else if (/\\.js$/.test(opts.outFile) && opts.jsFile == null) {\n        opts.jsFile = opts.outFile;\n      } else if (opts.binaryFile == null) {\n        opts.binaryFile = opts.outFile;\n      }\n    }\n\n    let hasStdout = false;\n    let hasOutput = opts.textFile != null\n                 || opts.binaryFile != null\n                 || opts.jsFile != null\n                 || opts.tsdFile != null\n                 || opts.idlFile != null;\n\n    // Write binary\n    if (opts.binaryFile != null) {\n      let basename = path.basename(opts.binaryFile);\n      let sourceMapURL = opts.sourceMap != null\n        ? opts.sourceMap.length\n          ? opts.sourceMap\n          : \"./\" + basename + \".map\"\n        : null;\n\n      let wasm;\n      stats.emitCount++;\n      stats.emitTime += measure(() => {\n        wasm = module.emitBinary(sourceMapURL);\n      });\n\n      if (opts.binaryFile.length) {\n        writeFile(opts.binaryFile, wasm.binary, baseDir);\n      } else {\n        writeStdout(wasm.binary);\n        hasStdout = true;\n      }\n\n      // Post-process source map\n      if (wasm.sourceMap != \"\") {\n        if (opts.binaryFile.length) {\n          let map = JSON.parse(wasm.sourceMap);\n          map.sourceRoot = \"./\" + basename;\n          let contents = [];\n          map.sources.forEach((name, index) => {\n            let text = assemblyscript.getSource(program, __newString(name.replace(extension.re, \"\")));\n            if (text == null) return callback(Error(\"Source of file '\" + name + \"' not found.\"));\n            contents[index] = text;\n          });\n          map.sourcesContent = contents;\n          writeFile(path.join(\n            path.dirname(opts.binaryFile),\n            path.basename(sourceMapURL)\n          ).replace(/^\\.\\//, \"\"), JSON.stringify(map), baseDir);\n        } else {\n          stderr.write(\"Skipped source map (stdout already occupied)\" + EOL);\n        }\n      }\n    }\n\n    // Write text (also fallback)\n    if (opts.textFile != null || !hasOutput) {\n      let out;\n      if (opts.textFile != null && opts.textFile.length) {\n        // use superset text format when extension is `.wast`.\n        // Otherwise use official stack IR format (wat).\n        let wastFormat = opts.textFile.endsWith('.wast');\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          if (wastFormat) {\n            out = module.emitText();\n          } else {\n            out = module.emitStackIR(true);\n          }\n        });\n        writeFile(opts.textFile, out, baseDir);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          out = module.emitStackIR(true);\n        });\n        writeStdout(out);\n      }\n    }\n\n    // Write WebIDL\n    if (opts.idlFile != null) {\n      let idl;\n      if (opts.idlFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          idl = assemblyscript.buildIDL(program);\n        });\n        writeFile(opts.idlFile, __getString(idl), baseDir);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          idl = assemblyscript.buildIDL(program);\n        });\n        writeStdout(__getString(idl));\n        hasStdout = true;\n      }\n    }\n\n    // Write TypeScript definition\n    if (opts.tsdFile != null) {\n      let tsd;\n      if (opts.tsdFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          tsd = assemblyscript.buildTSD(program);\n        });\n        writeFile(opts.tsdFile, __getString(tsd), baseDir);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          tsd = assemblyscript.buildTSD(program);\n        });\n        writeStdout(__getString(tsd));\n        hasStdout = true;\n      }\n    }\n\n    // Write JS (modifies the binary, so must be last)\n    if (opts.jsFile != null) {\n      let js;\n      if (opts.jsFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          js = module.emitAsmjs();\n        });\n        writeFile(opts.jsFile, js, baseDir);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          js = module.emitAsmjs();\n        });\n        writeStdout(js);\n      }\n    }\n  }\n\n  module.dispose();\n  if (opts.measure) {\n    printStats(stats, stderr);\n  }\n\n  return callback(null);\n\n  function readFileNode(filename, baseDir) {\n    let name = path.resolve(baseDir, filename);\n    try {\n      let text;\n      stats.readCount++;\n      stats.readTime += measure(() => {\n        text = fs.readFileSync(name, \"utf8\");\n      });\n      return text;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function writeFileNode(filename, contents, baseDir) {\n    try {\n      stats.writeCount++;\n      stats.writeTime += measure(() => {\n        const dirPath = path.resolve(baseDir, path.dirname(filename));\n        filename = path.basename(filename);\n        const outputFilePath = path.join(dirPath, filename);\n        if (!fs.existsSync(dirPath)) mkdirp(dirPath);\n        fs.writeFileSync(outputFilePath, contents);\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function listFilesNode(dirname, baseDir) {\n    var files;\n    try {\n      stats.readCount++;\n      stats.readTime += measure(() => {\n        files = fs.readdirSync(path.join(baseDir, dirname))\n          .filter(file => extension.re_except_d.test(file));\n      });\n      return files;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function writeStdout(contents) {\n    if (!writeStdout.used) {\n      stats.writeCount++;\n      writeStdout.used = true;\n    }\n    stats.writeTime += measure(() => {\n      stdout.write(contents);\n    });\n  }\n};\n\nconst toString = Object.prototype.toString;\n\nfunction isObject(arg) {\n  return toString.call(arg) === \"[object Object]\";\n}\n\nfunction getAsconfig(file, baseDir, readFile) {\n  const contents = readFile(file, baseDir);\n  const location = path.join(baseDir, file);\n  if (!contents) return null;\n\n  // obtain the configuration\n  let config;\n  try {\n    config = JSON.parse(contents);\n  } catch(ex) {\n    throw new Error(\"Asconfig is not valid json: \" + location);\n  }\n\n  // validate asconfig shape\n  if (config.options && !isObject(config.options)) {\n    throw new Error(\"Asconfig.options is not an object: \" + location);\n  }\n\n  if (config.include && !Array.isArray(config.include)) {\n    throw new Error(\"Asconfig.include is not an array: \" + location);\n  }\n\n  if (config.targets) {\n    if (!isObject(config.targets)) {\n      throw new Error(\"Asconfig.targets is not an object: \" + location);\n    }\n    const targets = Object.keys(config.targets);\n    for (let i = 0; i < targets.length; i++) {\n      const target = targets[i];\n      if (!isObject(config.targets[target])) {\n        throw new Error(\"Asconfig.targets.\" + target + \" is not an object: \" + location);\n      }\n    }\n  }\n\n  if (config.extends && typeof config.extends !== \"string\") {\n    throw new Error(\"Asconfig.extends is not a string: \" + location);\n  }\n\n  return config;\n}\n\nexports.getAsconfig = getAsconfig;\n\n/** Checks diagnostics emitted so far for errors. */\nfunction checkDiagnostics(program, stderr, reportDiagnostic) {\n  var numErrors = 0;\n  do {\n    let diagnosticPtr = assemblyscript.nextDiagnostic(program);\n    if (!diagnosticPtr) break;\n    __pin(diagnosticPtr);\n    if (stderr) {\n      stderr.write(\n        __getString(assemblyscript.formatDiagnostic(diagnosticPtr, stderr.isTTY, true)) +\n        EOL + EOL\n      );\n    }\n    if (reportDiagnostic) {\n      const diagnostic = __wrap(diagnosticPtr, assemblyscript.DiagnosticMessage);\n      const range = __wrap(diagnostic.range, assemblyscript.Range);\n      const relatedRange = __wrap(diagnostic.relatedRange, assemblyscript.Range);\n      const rangeSource = range ? __wrap(range.source, assemblyscript.Source) : null;\n      const relatedRangeSource = relatedRange ? __wrap(relatedRange.source, assemblyscript.Source) : null;\n\n      reportDiagnostic({\n        message: __getString(diagnostic.message),\n        code: diagnostic.code,\n        category: diagnostic.category,\n        range: range ? {\n          start: range.start,\n          end: range.end,\n          source: rangeSource ? {\n            normalizedPath: __getString(rangeSource.normalizedPath)\n          } : null,\n        } : null,\n        relatedRange: relatedRange ? {\n          start: relatedRange.start,\n          end: relatedRange.end,\n          source: relatedRangeSource ? {\n            normalizedPath: __getString(relatedRangeSource.normalizedPath)\n          } : null\n        } : null\n      });\n    }\n    if (assemblyscript.isError(diagnosticPtr)) ++numErrors;\n    __unpin(diagnosticPtr);\n  } while (true);\n  return numErrors;\n}\n\nexports.checkDiagnostics = checkDiagnostics;\n\n/** Creates an empty set of stats. */\nfunction createStats() {\n  return {\n    readTime: 0,\n    readCount: 0,\n    writeTime: 0,\n    writeCount: 0,\n    parseTime: 0,\n    parseCount: 0,\n    initializeTime: 0,\n    initializeCount: 0,\n    compileTime: 0,\n    compileCount: 0,\n    emitTime: 0,\n    emitCount: 0,\n    validateTime: 0,\n    validateCount: 0,\n    optimizeTime: 0,\n    optimizeCount: 0,\n    transformTime: 0,\n    transformCount: 0\n  };\n}\n\nexports.createStats = createStats;\n\n/** Measures the execution time of the specified function.  */\nfunction measure(fn) {\n  const start = process.hrtime();\n  fn();\n  const times = process.hrtime(start);\n  return times[0] * 1e9 + times[1];\n}\n\nexports.measure = measure;\n\nfunction pad(str, len) {\n  while (str.length < len) str = \" \" + str;\n  return str;\n}\n\n/** Formats a high resolution time to a human readable string. */\nfunction formatTime(time) {\n  return time ? (time / 1e6).toFixed(3) + \" ms\" : \"n/a\";\n}\n\nexports.formatTime = formatTime;\n\n/** Formats and prints out the contents of a set of stats. */\nfunction printStats(stats, output) {\n  const format = (time, count) => pad(formatTime(time), 12) + \"  n=\" + count;\n  (output || process.stdout).write([\n    \"I/O Read   : \" + format(stats.readTime, stats.readCount),\n    \"I/O Write  : \" + format(stats.writeTime, stats.writeCount),\n    \"Parse      : \" + format(stats.parseTime, stats.parseCount),\n    \"Initialize : \" + format(stats.initializeTime, stats.initializeCount),\n    \"Compile    : \" + format(stats.compileTime, stats.compileCount),\n    \"Emit       : \" + format(stats.emitTime, stats.emitCount),\n    \"Validate   : \" + format(stats.validateTime, stats.validateCount),\n    \"Optimize   : \" + format(stats.optimizeTime, stats.optimizeCount),\n    \"Transform  : \" + format(stats.transformTime, stats.transformCount),\n    \"\"\n  ].join(EOL) + EOL);\n}\n\nexports.printStats = printStats;\n\nvar allocBuffer = typeof global !== \"undefined\" && global.Buffer\n  ? global.Buffer.allocUnsafe || (len => new global.Buffer(len))\n  : len => new Uint8Array(len);\n\n/** Creates a memory stream that can be used in place of stdout/stderr. */\nfunction createMemoryStream(fn) {\n  var stream = [];\n  stream.write = function(chunk) {\n    if (fn) fn(chunk);\n    if (typeof chunk === \"string\") {\n      let buffer = allocBuffer(utf8.length(chunk));\n      utf8.write(chunk, buffer, 0);\n      chunk = buffer;\n    }\n    this.push(chunk);\n  };\n  stream.reset = function() {\n    stream.length = 0;\n  };\n  stream.toBuffer = function() {\n    var offset = 0, i = 0, k = this.length;\n    while (i < k) offset += this[i++].length;\n    var buffer = allocBuffer(offset);\n    offset = i = 0;\n    while (i < k) {\n      buffer.set(this[i], offset);\n      offset += this[i].length;\n      ++i;\n    }\n    return buffer;\n  };\n  stream.toString = function() {\n    var buffer = this.toBuffer();\n    return utf8.read(buffer, 0, buffer.length);\n  };\n  return stream;\n}\n\nexports.createMemoryStream = createMemoryStream;\n\n/** Compatible TypeScript compiler options for syntax highlighting etc. */\nexports.tscOptions = {\n  alwaysStrict: true,\n  noImplicitAny: true,\n  noImplicitReturns: true,\n  noImplicitThis: true,\n  noEmitOnError: true,\n  strictNullChecks: true,\n  experimentalDecorators: true,\n  target: \"esnext\",\n  module: \"commonjs\",\n  noLib: true,\n  types: [],\n  allowJs: false\n};\n","module.exports = {};\n","const process = require(\"process\"); // ensure shim\n\n// https://github.com/browserify/path-browserify v1.0.1\n//\n// Copyright (c) 2013 James Halliday\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    if (from === \".\") return to; // FIX for 'odule.ts' (see issue #1398)\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","module.exports = {\n  platform: \"linux\",\n  cwd() {\n    return \".\";\n  },\n  umask() {\n    return 0;\n  },\n  hrtime,\n  argv: []\n};\n\n// https://github.com/kumavis/browser-process-hrtime v1.0.0\n//\n// Copyright 2014 kumavis\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice,\n// this list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n// this list of conditions and the following disclaimer in the documentation\n// and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nvar performance = global.performance || {};\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime(); };\n\nfunction hrtime(previousTimestamp) {\n  var clocktime = performanceNow.call(performance);\n  var seconds = Math.floor(clocktime * 1e-3);\n  var nanoseconds = Math.floor(clocktime * 1e6 - seconds * 1e9);\n  if (previousTimestamp) {\n    seconds -= previousTimestamp[0];\n    nanoseconds -= previousTimestamp[1];\n    if (nanoseconds < 0) {\n      seconds--;\n      nanoseconds += 1e9;\n    }\n  }\n  return [ seconds, nanoseconds ];\n}\n","/**\n * @fileoverview Terminal colors utility.\n * @license Apache-2.0\n */\n\nvar proc = typeof process !== \"undefined\" && process || {};\nvar isCI = proc.env && \"CI\" in proc.env; // doesn't work when bundled because 'process' is a mock\n\nfunction from(stream, base) {\n  var colors = base || {};\n  colors.supported = (stream && !!stream.isTTY) || isCI;\n  colors.gray = text => colors.supported ? exports.GRAY + text + exports.RESET : text;\n  colors.red = text => colors.supported ? exports.RED + text + exports.RESET : text;\n  colors.green = text => colors.supported ? exports.GREEN + text + exports.RESET : text;\n  colors.yellow = text => colors.supported ? exports.YELLOW + text + exports.RESET : text;\n  colors.blue = text => colors.supported ? exports.BLUE + text + exports.RESET : text;\n  colors.magenta = text => colors.supported ? exports.MAGENTA + text + exports.RESET : text;\n  colors.cyan = text => colors.supported ? exports.CYAN + text + exports.RESET : text;\n  colors.white = text => colors.supported ? exports.WHITE + text + exports.RESET : text;\n  return colors;\n}\n\nexports.stdout = from(proc.stdout, exports);\nexports.stderr = from(proc.stderr);\nexports.from = from;\n\nexports.GRAY = \"\\u001b[90m\";\nexports.RED = \"\\u001b[91m\";\nexports.GREEN = \"\\u001b[92m\";\nexports.YELLOW = \"\\u001b[93m\";\nexports.BLUE = \"\\u001b[94m\";\nexports.MAGENTA = \"\\u001b[95m\";\nexports.CYAN = \"\\u001b[96m\";\nexports.WHITE = \"\\u001b[97m\";\nexports.RESET = \"\\u001b[0m\";\n","/**\n * @fileoverview File finding utility.\n * @license Apache-2.0\n */\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nfunction findFiles(dirname, filter) {\n  var out = [];\n  fs.readdirSync(dirname).forEach(name => {\n    if (fs.statSync(path.join(dirname, name)).isDirectory()) {\n      findFiles(path.join(dirname, name), filter).forEach(iname => out.push(name + \"/\" + iname));\n    } else if (!filter || typeof filter === \"function\" ? filter(name) : filter.test(name)) {\n      out.push(name);\n    }\n  });\n  return out;\n}\n\nexports.files = findFiles;\n","/**\n * @fileoverview Recursive mkdir.\n * @license\n * Copyright 2010 James Halliday (mail@substack.net)\n *\n * This project is free software released under the MIT/X11 license:\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst process = require(\"process\"); // ensure shim\n\nmodule.exports = function mkdirp(p, opts, made) {\n  if (!opts || typeof opts !== \"object\") {\n    opts = { mode: opts };\n  }\n  var mode = opts.mode;\n  if (mode === undefined) {\n    mode = 0o777 & (~process.umask());\n  }\n  if (!made) made = null;\n  p = path.resolve(p);\n  try {\n    fs.mkdirSync(p, mode);\n    made = made || p;\n  } catch (err0) {\n    switch (err0.code) {\n      case \"ENOENT\":\n        made = mkdirp(path.dirname(p), opts, made);\n        mkdirp(p, opts, made);\n        break;\n      default:\n        var stat;\n        try {\n          stat = fs.statSync(p);\n        } catch (err1) {\n          throw err0;\n        }\n        if (!stat.isDirectory()) throw err0;\n        break;\n    }\n  }\n  return made;\n};\n","/**\n * @fileoverview Command line options utility.\n * @license Apache-2.0\n */\n\nconst path = require(\"path\");\nconst colorsUtil = require(\"./colors\");\n\n// type | meaning\n// -----|---------------\n// b    | boolean\n// i    | integer\n// f    | float\n// s    | string\n// I    | integer array\n// F    | float array\n// S    | string array\n\n/** Parses the specified command line arguments according to the given configuration. */\nfunction parse(argv, config, propagateDefaults = true) {\n  var options = {};\n  var unknown = [];\n  var args = [];\n  var trailing = [];\n\n  // make an alias map and initialize defaults\n  var aliases = {};\n  Object.keys(config).forEach(key => {\n    if (key.startsWith(\" \")) return;\n    var option = config[key];\n    if (option.alias != null) {\n      if (typeof option.alias === \"string\") aliases[option.alias] = key;\n      else if (Array.isArray(option.alias)) option.alias.forEach(alias => aliases[alias] = key);\n    }\n    if (propagateDefaults && option.default != null) options[key] = option.default;\n  });\n\n  // iterate over argv\n  for (var i = 0, k = (argv = argv.slice()).length; i < k; ++i) {\n    let arg = argv[i];\n    if (arg == \"--\") { ++i; break; }\n    let match = /^(?:(-\\w)(?:=(.*))?|(--\\w{2,})(?:=(.*))?)$/.exec(arg), option, key;\n    if (match) {\n      if (config[arg]) option = config[key = arg]; // exact\n      else if (match[1] != null) { // alias\n        option = config[key = aliases[match[1].substring(1)]];\n        if (option && match[2] != null) argv[i--] = match[2];\n      } else if (match[3] != null) { // full\n        option = config[key = match[3].substring(2)];\n        if (option && match[4] != null) argv[i--] = match[4];\n      }\n    } else {\n      if (arg.charCodeAt(0) == 45) option = config[key = arg]; // exact\n      else { args.push(arg); continue; } // argument\n    }\n    if (option) {\n      if (option.value) {\n        // alias setting fixed values\n        Object.keys(option.value).forEach(k => options[k] = option.value[k]);\n      } else if (option.type == null || option.type === \"b\") {\n        // boolean flag not taking a value\n        options[key] = true;\n      } else {\n        if (i + 1 < argv.length && argv[i + 1].charCodeAt(0) != 45) {\n          // non-boolean with given value\n          switch (option.type) {\n            case \"i\": options[key] = parseInt(argv[++i], 10); break;\n            case \"I\": options[key] = (options[key] || []).concat(parseInt(argv[++i], 10)); break;\n            case \"f\": options[key] = parseFloat(argv[++i]); break;\n            case \"F\": options[key] = (options[key] || []).concat(parseFloat(argv[++i])); break;\n            case \"s\": options[key] = String(argv[++i]); break;\n            case \"S\": options[key] = (options[key] || []).concat(argv[++i].split(\",\")); break;\n            default: unknown.push(arg); --i;\n          }\n        } else {\n          // non-boolean with omitted value\n          switch (option.type) {\n            case \"i\":\n            case \"f\": options[key] = option.default || 0; break;\n            case \"s\": options[key] = option.default || \"\"; break;\n            case \"I\":\n            case \"F\":\n            case \"S\": options[key] = option.default || []; break;\n            default: unknown.push(arg);\n          }\n        }\n      }\n    } else unknown.push(arg);\n  }\n  while (i < k) trailing.push(argv[i++]); // trailing\n  if (propagateDefaults) addDefaults(config, options);\n\n  return { options, unknown, arguments: args, trailing };\n}\n\nexports.parse = parse;\n\n/** Generates the help text for the specified configuration. */\nfunction help(config, options) {\n  if (!options) options = {};\n  var indent = options.indent || 2;\n  var padding = options.padding || 24;\n  var eol = options.eol || \"\\n\";\n  var sbCategories = {};\n  var sbOther = [];\n  Object.keys(config).forEach(key => {\n    var option = config[key];\n    if (option.description == null) return;\n    var text = \"\";\n    while (text.length < indent) text += \" \";\n    text += \"--\" + key;\n    if (option.alias) text += \", -\" + option.alias;\n    while (text.length < padding) text += \" \";\n    var sb;\n    if (!options.noCategories && option.category) {\n      if (!(sb = sbCategories[option.category])) {\n        sbCategories[option.category] = sb = [];\n      }\n    } else {\n      sb = sbOther;\n    }\n    if (Array.isArray(option.description)) {\n      sb.push(text + option.description[0] + option.description.slice(1).map(line => {\n        for (let i = 0; i < padding; ++i) line = \" \" + line;\n        return eol + line;\n      }).join(\"\"));\n    } else sb.push(text + option.description);\n  });\n  var sb = [];\n  var hasCategories = false;\n  Object.keys(sbCategories).forEach(category => {\n    hasCategories = true;\n    sb.push(eol + \" \" + colorsUtil.gray(category) + eol);\n    sb.push(sbCategories[category].join(eol));\n  });\n  if (hasCategories) {\n    sb.push(eol + \" \" + colorsUtil.gray(\"Other\") + eol);\n  }\n  sb.push(sbOther.join(eol));\n  return sb.join(eol);\n}\n\nexports.help = help;\n\n/** Sanitizes an option value to be a valid value of the option's type. */\nfunction sanitizeValue(value, type) {\n  if (value != null) {\n    switch (type) {\n      case undefined:\n      case \"b\": return Boolean(value);\n      case \"i\": return Math.trunc(value) || 0;\n      case \"f\": return Number(value) || 0;\n      case \"s\": {\n        if (value === true) return \"\";\n        return String(value);\n      }\n      case \"I\": {\n        if (!Array.isArray(value)) value = [ value ];\n        return value.map(v => Math.trunc(v) || 0);\n      }\n      case \"F\": {\n        if (!Array.isArray(value)) value = [ value ];\n        return value.map(v => Number(v) || 0);\n      }\n      case \"S\": {\n        if (!Array.isArray(value)) value = [ value ];\n        return value.map(String);\n      }\n    }\n  }\n  return undefined;\n}\n\n/** Merges two sets of options into one, preferring the current over the parent set. */\nfunction merge(config, currentOptions, parentOptions, parentBaseDir) {\n  const mergedOptions = {};\n  for (const [key, { type, mutuallyExclusive, isPath, useNodeResolution, cliOnly }] of Object.entries(config)) {\n    let currentValue = sanitizeValue(currentOptions[key], type);\n    let parentValue = sanitizeValue(parentOptions[key], type);\n    if (currentValue == null) {\n      if (parentValue != null) {\n        // only parent value present\n        if (cliOnly) continue;\n        if (Array.isArray(parentValue)) {\n          let exclude;\n          if (isPath) {\n            parentValue = parentValue.map(value => resolvePath(value, parentBaseDir, useNodeResolution));\n          }\n          if (mutuallyExclusive != null && (exclude = currentOptions[mutuallyExclusive])) {\n            mergedOptions[key] = parentValue.filter(value => !exclude.includes(value));\n          } else {\n            mergedOptions[key] = parentValue.slice();\n          }\n        } else {\n          if (isPath) {\n            parentValue = resolvePath(parentValue, parentBaseDir, useNodeResolution);\n          }\n          mergedOptions[key] = parentValue;\n        }\n      }\n    } else if (parentValue == null) {\n      // only current value present\n      if (Array.isArray(currentValue)) {\n        mergedOptions[key] = currentValue.slice();\n      } else {\n        mergedOptions[key] = currentValue;\n      }\n    } else {\n      // both current and parent values present\n      if (Array.isArray(currentValue)) {\n        if (cliOnly) {\n          mergedOptions[key] = currentValue.slice();\n          continue;\n        }\n        let exclude;\n        if (isPath) {\n          parentValue = parentValue.map(value => resolvePath(value, parentBaseDir, useNodeResolution));\n        }\n        if (mutuallyExclusive != null && (exclude = currentOptions[mutuallyExclusive])) {\n          mergedOptions[key] = [\n            ...currentValue,\n            ...parentValue.filter(value => !currentValue.includes(value) && !exclude.includes(value))\n          ];\n        } else {\n          mergedOptions[key] = [\n            ...currentValue,\n            ...parentValue.filter(value => !currentValue.includes(value)) // dedup\n          ];\n        }\n      } else {\n        mergedOptions[key] = currentValue;\n      }\n    }\n  }\n  return mergedOptions;\n}\n\nexports.merge = merge;\n\n/** Resolves a single possibly relative path. Keeps absolute paths, otherwise prepends baseDir. */\nfunction resolvePath(p, baseDir, useNodeResolution = false) {\n  if (path.isAbsolute(p)) return p;\n  return path.join(baseDir, p);\n}\n\nexports.resolvePath = resolvePath;\n\n/** Populates default values on a parsed options result. */\nfunction addDefaults(config, options) {\n  for (const [key, { default: defaultValue }] of Object.entries(config)) {\n    if (options[key] == null && defaultValue != null) {\n      options[key] = defaultValue;\n    }\n  }\n}\n\nexports.addDefaults = addDefaults;\n","/**\n * @fileoverview UTF8 utility.\n * @license Apache-2.0\n */\n\n// @protobufjs/utf8\n\n/**\n * A minimal UTF8 implementation for number arrays.\n * @memberof util\n * @namespace\n */\nvar utf8 = exports;\n\n/**\n * Calculates the UTF8 byte length of a string.\n * @param {string} string String\n * @returns {number} Byte length\n */\nutf8.length = function utf8_length(string) {\n  var len = 0,\n      c = 0;\n  for (var i = 0, l = string.length; i < l; ++i) {\n    c = string.charCodeAt(i);\n    if (c < 128)\n      len += 1;\n    else if (c < 2048)\n      len += 2;\n    else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n      ++i;\n      len += 4;\n    } else\n      len += 3;\n  }\n  return len;\n};\n\n/**\n * Reads UTF8 bytes as a string.\n * @param {Uint8Array} buffer Source buffer\n * @param {number} start Source start\n * @param {number} end Source end\n * @returns {string} String read\n */\nutf8.read = function utf8_read(buffer, start, end) {\n  var len = end - start;\n  if (len < 1)\n    return \"\";\n  var parts = null,\n      chunk = [],\n      i = 0, // char offset\n      t;     // temporary\n  while (start < end) {\n    t = buffer[start++];\n    if (t < 128)\n      chunk[i++] = t;\n    else if (t > 191 && t < 224)\n      chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\n    else if (t > 239 && t < 365) {\n      t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n      chunk[i++] = 0xD800 + (t >> 10);\n      chunk[i++] = 0xDC00 + (t & 1023);\n    } else\n      chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (parts) {\n    if (i)\n      parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\n\n/**\n * Writes a string as UTF8 bytes.\n * @param {string} string Source string\n * @param {Uint8Array} buffer Destination buffer\n * @param {number} offset Destination offset\n * @returns {number} Bytes written\n */\nutf8.write = function utf8_write(string, buffer, offset) {\n  var start = offset,\n      c1, // character 1\n      c2; // character 2\n  for (var i = 0; i < string.length; ++i) {\n    c1 = string.charCodeAt(i);\n    if (c1 < 128) {\n      buffer[offset++] = c1;\n    } else if (c1 < 2048) {\n      buffer[offset++] = c1 >> 6 | 192;\n      buffer[offset++] = c1 & 63 | 128;\n    } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n      c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n      ++i;\n      buffer[offset++] = c1 >> 18 | 240;\n      buffer[offset++] = c1 >> 12 & 63 | 128;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    } else {\n      buffer[offset++] = c1 >> 12 | 224;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    }\n  }\n  return offset - start;\n};\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__911__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 720:\n/***/ ((module) => {\n\nmodule.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n/***/ }),\n\n/***/ 60:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeclarationStatement = exports.Source = exports.SourceKind = exports.Statement = exports.UnaryPrefixExpression = exports.UnaryPostfixExpression = exports.UnaryExpression = exports.FalseExpression = exports.TrueExpression = exports.ThisExpression = exports.SuperExpression = exports.StringLiteralExpression = exports.TernaryExpression = exports.RegexpLiteralExpression = exports.PropertyAccessExpression = exports.ParenthesizedExpression = exports.OmittedExpression = exports.ObjectLiteralExpression = exports.NullExpression = exports.NewExpression = exports.IntegerLiteralExpression = exports.InstanceOfExpression = exports.FunctionExpression = exports.FloatLiteralExpression = exports.ElementAccessExpression = exports.ConstructorExpression = exports.CommaExpression = exports.ClassExpression = exports.CallExpression = exports.BinaryExpression = exports.AssertionExpression = exports.AssertionKind = exports.ArrayLiteralExpression = exports.LiteralExpression = exports.LiteralKind = exports.IdentifierExpression = exports.Expression = exports.CommentNode = exports.CommentKind = exports.DecoratorNode = exports.DecoratorKind = exports.ParameterNode = exports.ParameterKind = exports.TypeParameterNode = exports.FunctionTypeNode = exports.NamedTypeNode = exports.TypeName = exports.TypeNode = exports.Node = exports.NodeKind = void 0;\nexports.isTypeOmitted = exports.mangleInternalPath = exports.findDecorator = exports.WhileStatement = exports.VoidStatement = exports.VariableStatement = exports.VariableDeclaration = exports.TypeDeclaration = exports.TryStatement = exports.ThrowStatement = exports.SwitchStatement = exports.SwitchCase = exports.ReturnStatement = exports.NamespaceDeclaration = exports.MethodDeclaration = exports.InterfaceDeclaration = exports.ImportStatement = exports.ImportDeclaration = exports.IfStatement = exports.FunctionDeclaration = exports.ArrowKind = exports.ForOfStatement = exports.ForStatement = exports.FieldDeclaration = exports.ExpressionStatement = exports.ExportDefaultStatement = exports.ExportStatement = exports.ExportMember = exports.ExportImportStatement = exports.EnumValueDeclaration = exports.EnumDeclaration = exports.EmptyStatement = exports.DoStatement = exports.ContinueStatement = exports.ClassDeclaration = exports.BreakStatement = exports.BlockStatement = exports.VariableLikeDeclarationStatement = exports.IndexSignatureNode = void 0;\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\nconst common_1 = __webpack_require__(200);\nconst tokenizer_1 = __webpack_require__(411);\nconst util_1 = __webpack_require__(910);\n/** Indicates the kind of a node. */\nvar NodeKind;\n(function (NodeKind) {\n    NodeKind[NodeKind[\"SOURCE\"] = 0] = \"SOURCE\";\n    // types\n    NodeKind[NodeKind[\"NAMEDTYPE\"] = 1] = \"NAMEDTYPE\";\n    NodeKind[NodeKind[\"FUNCTIONTYPE\"] = 2] = \"FUNCTIONTYPE\";\n    NodeKind[NodeKind[\"TYPENAME\"] = 3] = \"TYPENAME\";\n    NodeKind[NodeKind[\"TYPEPARAMETER\"] = 4] = \"TYPEPARAMETER\";\n    NodeKind[NodeKind[\"PARAMETER\"] = 5] = \"PARAMETER\";\n    // expressions\n    NodeKind[NodeKind[\"IDENTIFIER\"] = 6] = \"IDENTIFIER\";\n    NodeKind[NodeKind[\"ASSERTION\"] = 7] = \"ASSERTION\";\n    NodeKind[NodeKind[\"BINARY\"] = 8] = \"BINARY\";\n    NodeKind[NodeKind[\"CALL\"] = 9] = \"CALL\";\n    NodeKind[NodeKind[\"CLASS\"] = 10] = \"CLASS\";\n    NodeKind[NodeKind[\"COMMA\"] = 11] = \"COMMA\";\n    NodeKind[NodeKind[\"ELEMENTACCESS\"] = 12] = \"ELEMENTACCESS\";\n    NodeKind[NodeKind[\"FALSE\"] = 13] = \"FALSE\";\n    NodeKind[NodeKind[\"FUNCTION\"] = 14] = \"FUNCTION\";\n    NodeKind[NodeKind[\"INSTANCEOF\"] = 15] = \"INSTANCEOF\";\n    NodeKind[NodeKind[\"LITERAL\"] = 16] = \"LITERAL\";\n    NodeKind[NodeKind[\"NEW\"] = 17] = \"NEW\";\n    NodeKind[NodeKind[\"NULL\"] = 18] = \"NULL\";\n    NodeKind[NodeKind[\"OMITTED\"] = 19] = \"OMITTED\";\n    NodeKind[NodeKind[\"PARENTHESIZED\"] = 20] = \"PARENTHESIZED\";\n    NodeKind[NodeKind[\"PROPERTYACCESS\"] = 21] = \"PROPERTYACCESS\";\n    NodeKind[NodeKind[\"TERNARY\"] = 22] = \"TERNARY\";\n    NodeKind[NodeKind[\"SUPER\"] = 23] = \"SUPER\";\n    NodeKind[NodeKind[\"THIS\"] = 24] = \"THIS\";\n    NodeKind[NodeKind[\"TRUE\"] = 25] = \"TRUE\";\n    NodeKind[NodeKind[\"CONSTRUCTOR\"] = 26] = \"CONSTRUCTOR\";\n    NodeKind[NodeKind[\"UNARYPOSTFIX\"] = 27] = \"UNARYPOSTFIX\";\n    NodeKind[NodeKind[\"UNARYPREFIX\"] = 28] = \"UNARYPREFIX\";\n    // statements\n    NodeKind[NodeKind[\"BLOCK\"] = 29] = \"BLOCK\";\n    NodeKind[NodeKind[\"BREAK\"] = 30] = \"BREAK\";\n    NodeKind[NodeKind[\"CONTINUE\"] = 31] = \"CONTINUE\";\n    NodeKind[NodeKind[\"DO\"] = 32] = \"DO\";\n    NodeKind[NodeKind[\"EMPTY\"] = 33] = \"EMPTY\";\n    NodeKind[NodeKind[\"EXPORT\"] = 34] = \"EXPORT\";\n    NodeKind[NodeKind[\"EXPORTDEFAULT\"] = 35] = \"EXPORTDEFAULT\";\n    NodeKind[NodeKind[\"EXPORTIMPORT\"] = 36] = \"EXPORTIMPORT\";\n    NodeKind[NodeKind[\"EXPRESSION\"] = 37] = \"EXPRESSION\";\n    NodeKind[NodeKind[\"FOR\"] = 38] = \"FOR\";\n    NodeKind[NodeKind[\"FOROF\"] = 39] = \"FOROF\";\n    NodeKind[NodeKind[\"IF\"] = 40] = \"IF\";\n    NodeKind[NodeKind[\"IMPORT\"] = 41] = \"IMPORT\";\n    NodeKind[NodeKind[\"RETURN\"] = 42] = \"RETURN\";\n    NodeKind[NodeKind[\"SWITCH\"] = 43] = \"SWITCH\";\n    NodeKind[NodeKind[\"THROW\"] = 44] = \"THROW\";\n    NodeKind[NodeKind[\"TRY\"] = 45] = \"TRY\";\n    NodeKind[NodeKind[\"VARIABLE\"] = 46] = \"VARIABLE\";\n    NodeKind[NodeKind[\"VOID\"] = 47] = \"VOID\";\n    NodeKind[NodeKind[\"WHILE\"] = 48] = \"WHILE\";\n    // declaration statements\n    NodeKind[NodeKind[\"CLASSDECLARATION\"] = 49] = \"CLASSDECLARATION\";\n    NodeKind[NodeKind[\"ENUMDECLARATION\"] = 50] = \"ENUMDECLARATION\";\n    NodeKind[NodeKind[\"ENUMVALUEDECLARATION\"] = 51] = \"ENUMVALUEDECLARATION\";\n    NodeKind[NodeKind[\"FIELDDECLARATION\"] = 52] = \"FIELDDECLARATION\";\n    NodeKind[NodeKind[\"FUNCTIONDECLARATION\"] = 53] = \"FUNCTIONDECLARATION\";\n    NodeKind[NodeKind[\"IMPORTDECLARATION\"] = 54] = \"IMPORTDECLARATION\";\n    NodeKind[NodeKind[\"INTERFACEDECLARATION\"] = 55] = \"INTERFACEDECLARATION\";\n    NodeKind[NodeKind[\"METHODDECLARATION\"] = 56] = \"METHODDECLARATION\";\n    NodeKind[NodeKind[\"NAMESPACEDECLARATION\"] = 57] = \"NAMESPACEDECLARATION\";\n    NodeKind[NodeKind[\"TYPEDECLARATION\"] = 58] = \"TYPEDECLARATION\";\n    NodeKind[NodeKind[\"VARIABLEDECLARATION\"] = 59] = \"VARIABLEDECLARATION\";\n    // special\n    NodeKind[NodeKind[\"DECORATOR\"] = 60] = \"DECORATOR\";\n    NodeKind[NodeKind[\"EXPORTMEMBER\"] = 61] = \"EXPORTMEMBER\";\n    NodeKind[NodeKind[\"SWITCHCASE\"] = 62] = \"SWITCHCASE\";\n    NodeKind[NodeKind[\"INDEXSIGNATURE\"] = 63] = \"INDEXSIGNATURE\";\n    NodeKind[NodeKind[\"COMMENT\"] = 64] = \"COMMENT\";\n})(NodeKind = exports.NodeKind || (exports.NodeKind = {}));\n/** Base class of all nodes. */\nclass Node {\n    constructor(\n    /** Kind of this node. */\n    kind, \n    /** Source range. */\n    range) {\n        this.kind = kind;\n        this.range = range;\n    }\n    // types\n    static createSimpleTypeName(name, range) {\n        return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n    }\n    static createNamedType(name, typeArguments, isNullable, range) {\n        return new NamedTypeNode(name, typeArguments, isNullable, range);\n    }\n    static createFunctionType(parameters, returnType, explicitThisType, isNullable, range) {\n        return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n    }\n    static createOmittedType(range) {\n        return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n    }\n    static createTypeParameter(name, extendsType, defaultType, range) {\n        return new TypeParameterNode(name, extendsType, defaultType, range);\n    }\n    static createParameter(parameterKind, name, type, initializer, range) {\n        return new ParameterNode(parameterKind, name, type, initializer, range);\n    }\n    // special\n    static createDecorator(name, args, range) {\n        return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n    }\n    static createComment(commentKind, text, range) {\n        return new CommentNode(commentKind, text, range);\n    }\n    // expressions\n    static createIdentifierExpression(text, range, isQuoted = false) {\n        return new IdentifierExpression(text, isQuoted, range);\n    }\n    static createEmptyIdentifierExpression(range) {\n        return new IdentifierExpression(\"\", false, range);\n    }\n    static createArrayLiteralExpression(elementExpressions, range) {\n        return new ArrayLiteralExpression(elementExpressions, range);\n    }\n    static createAssertionExpression(assertionKind, expression, toType, range) {\n        return new AssertionExpression(assertionKind, expression, toType, range);\n    }\n    static createBinaryExpression(operator, left, right, range) {\n        return new BinaryExpression(operator, left, right, range);\n    }\n    static createCallExpression(expression, typeArguments, args, range) {\n        return new CallExpression(expression, typeArguments, args, range);\n    }\n    static createClassExpression(declaration) {\n        return new ClassExpression(declaration);\n    }\n    static createCommaExpression(expressions, range) {\n        return new CommaExpression(expressions, range);\n    }\n    static createConstructorExpression(range) {\n        return new ConstructorExpression(range);\n    }\n    static createElementAccessExpression(expression, elementExpression, range) {\n        return new ElementAccessExpression(expression, elementExpression, range);\n    }\n    static createFalseExpression(range) {\n        return new FalseExpression(range);\n    }\n    static createFloatLiteralExpression(value, range) {\n        return new FloatLiteralExpression(value, range);\n    }\n    static createFunctionExpression(declaration) {\n        return new FunctionExpression(declaration);\n    }\n    static createInstanceOfExpression(expression, isType, range) {\n        return new InstanceOfExpression(expression, isType, range);\n    }\n    static createIntegerLiteralExpression(value, range) {\n        return new IntegerLiteralExpression(value, range);\n    }\n    static createNewExpression(typeName, typeArguments, args, range) {\n        return new NewExpression(typeName, typeArguments, args, range);\n    }\n    static createNullExpression(range) {\n        return new NullExpression(range);\n    }\n    static createObjectLiteralExpression(names, values, range) {\n        return new ObjectLiteralExpression(names, values, range);\n    }\n    static createOmittedExpression(range) {\n        return new OmittedExpression(range);\n    }\n    static createParenthesizedExpression(expression, range) {\n        return new ParenthesizedExpression(expression, range);\n    }\n    static createPropertyAccessExpression(expression, property, range) {\n        return new PropertyAccessExpression(expression, property, range);\n    }\n    static createRegexpLiteralExpression(pattern, patternFlags, range) {\n        return new RegexpLiteralExpression(pattern, patternFlags, range);\n    }\n    static createTernaryExpression(condition, ifThen, ifElse, range) {\n        return new TernaryExpression(condition, ifThen, ifElse, range);\n    }\n    static createStringLiteralExpression(value, range) {\n        return new StringLiteralExpression(value, range);\n    }\n    static createSuperExpression(range) {\n        return new SuperExpression(range);\n    }\n    static createThisExpression(range) {\n        return new ThisExpression(range);\n    }\n    static createTrueExpression(range) {\n        return new TrueExpression(range);\n    }\n    static createUnaryPostfixExpression(operator, operand, range) {\n        return new UnaryPostfixExpression(operator, operand, range);\n    }\n    static createUnaryPrefixExpression(operator, operand, range) {\n        return new UnaryPrefixExpression(operator, operand, range);\n    }\n    // statements\n    static createBlockStatement(statements, range) {\n        return new BlockStatement(statements, range);\n    }\n    static createBreakStatement(label, range) {\n        return new BreakStatement(label, range);\n    }\n    static createClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range) {\n        return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    }\n    static createContinueStatement(label, range) {\n        return new ContinueStatement(label, range);\n    }\n    static createDoStatement(statement, condition, range) {\n        return new DoStatement(statement, condition, range);\n    }\n    static createEmptyStatement(range) {\n        return new EmptyStatement(range);\n    }\n    static createEnumDeclaration(name, decorators, flags, values, range) {\n        return new EnumDeclaration(name, decorators, flags, values, range);\n    }\n    static createEnumValueDeclaration(name, flags, initializer, range) {\n        return new EnumValueDeclaration(name, flags, initializer, range);\n    }\n    static createExportStatement(members, path, isDeclare, range) {\n        return new ExportStatement(members, path, isDeclare, range);\n    }\n    static createExportDefaultStatement(declaration, range) {\n        return new ExportDefaultStatement(declaration, range);\n    }\n    static createExportImportStatement(name, externalName, range) {\n        return new ExportImportStatement(name, externalName, range);\n    }\n    static createExportMember(localName, exportedName, range) {\n        if (!exportedName)\n            exportedName = localName;\n        return new ExportMember(localName, exportedName, range);\n    }\n    static createExpressionStatement(expression) {\n        return new ExpressionStatement(expression);\n    }\n    static createIfStatement(condition, ifTrue, ifFalse, range) {\n        return new IfStatement(condition, ifTrue, ifFalse, range);\n    }\n    static createImportStatement(declarations, path, range) {\n        return new ImportStatement(declarations, null, path, range);\n    }\n    static createWildcardImportStatement(namespaceName, path, range) {\n        return new ImportStatement(null, namespaceName, path, range);\n    }\n    static createImportDeclaration(foreignName, name, range) {\n        if (!name)\n            name = foreignName;\n        return new ImportDeclaration(name, foreignName, range);\n    }\n    static createInterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range) {\n        return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    }\n    static createFieldDeclaration(name, decorators, flags, type, initializer, range) {\n        return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n    }\n    static createForStatement(initializer, condition, incrementor, statement, range) {\n        return new ForStatement(initializer, condition, incrementor, statement, range);\n    }\n    static createForOfStatement(variable, iterable, statement, range) {\n        return new ForOfStatement(variable, iterable, statement, range);\n    }\n    static createFunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range) {\n        return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n    }\n    static createIndexSignature(keyType, valueType, flags, range) {\n        return new IndexSignatureNode(keyType, valueType, flags, range);\n    }\n    static createMethodDeclaration(name, decorators, flags, typeParameters, signature, body, range) {\n        return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n    }\n    static createNamespaceDeclaration(name, decorators, flags, members, range) {\n        return new NamespaceDeclaration(name, decorators, flags, members, range);\n    }\n    static createReturnStatement(value, range) {\n        return new ReturnStatement(value, range);\n    }\n    static createSwitchStatement(condition, cases, range) {\n        return new SwitchStatement(condition, cases, range);\n    }\n    static createSwitchCase(label, statements, range) {\n        return new SwitchCase(label, statements, range);\n    }\n    static createThrowStatement(value, range) {\n        return new ThrowStatement(value, range);\n    }\n    static createTryStatement(statements, catchVariable, catchStatements, finallyStatements, range) {\n        return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n    }\n    static createTypeDeclaration(name, decorators, flags, typeParameters, type, range) {\n        return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n    }\n    static createVariableStatement(decorators, declarations, range) {\n        return new VariableStatement(decorators, declarations, range);\n    }\n    static createVariableDeclaration(name, decorators, flags, type, initializer, range) {\n        return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n    }\n    static createVoidStatement(expression, range) {\n        return new VoidStatement(expression, range);\n    }\n    static createWhileStatement(condition, statement, range) {\n        return new WhileStatement(condition, statement, range);\n    }\n    /** Tests if this node is a literal of the specified kind. */\n    isLiteralKind(literalKind) {\n        return this.kind == NodeKind.LITERAL\n            && changetype(this).literalKind == literalKind; // TS\n    }\n    /** Tests if this node is a literal of a numeric kind (float or integer). */\n    get isNumericLiteral() {\n        if (this.kind == NodeKind.LITERAL) {\n            switch (changetype(this).literalKind) { // TS\n                case LiteralKind.FLOAT:\n                case LiteralKind.INTEGER: return true;\n            }\n        }\n        return false;\n    }\n    /** Tests whether this node is guaranteed to compile to a constant value. */\n    get compilesToConst() {\n        switch (this.kind) {\n            case NodeKind.LITERAL: {\n                switch (changetype(this).literalKind) { // TS\n                    case LiteralKind.FLOAT:\n                    case LiteralKind.INTEGER:\n                    case LiteralKind.STRING: return true;\n                }\n                break;\n            }\n            case NodeKind.NULL:\n            case NodeKind.TRUE:\n            case NodeKind.FALSE: return true;\n        }\n        return false;\n    }\n    isAccessOn(kind) {\n        let node = changetype(this);\n        if (node.kind == NodeKind.CALL) {\n            node = node.expression;\n        }\n        if (node.kind == NodeKind.PROPERTYACCESS) {\n            let target = node.expression;\n            if (target.kind == kind)\n                return true;\n        }\n        return false;\n    }\n    /** Checks if this node accesses a method or property on `this`. */\n    get isAccessOnThis() {\n        return this.isAccessOn(NodeKind.THIS);\n    }\n    /** Checks if this node accesses a method or property on `super`. */\n    get isAccessOnSuper() {\n        return this.isAccessOn(NodeKind.SUPER);\n    }\n}\nexports.Node = Node;\n// types\nclass TypeNode extends Node {\n    constructor(\n    /** Kind of the type node. */\n    kind, \n    /** Whether nullable or not. */\n    isNullable, \n    /** Source range. */\n    range) {\n        super(kind, range);\n        this.isNullable = isNullable;\n    }\n    /** Tests if this type has a generic component matching one of the given type parameters. */\n    hasGenericComponent(typeParameterNodes) {\n        if (this.kind == NodeKind.NAMEDTYPE) {\n            let namedTypeNode = changetype(this); // TS\n            if (!namedTypeNode.name.next) {\n                let typeArgumentNodes = namedTypeNode.typeArguments;\n                if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                    for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n                        if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes))\n                            return true;\n                    }\n                }\n                else {\n                    let name = namedTypeNode.name.identifier.text;\n                    for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n                        if (typeParameterNodes[i].name.text == name)\n                            return true;\n                    }\n                }\n            }\n        }\n        else if (this.kind == NodeKind.FUNCTIONTYPE) {\n            let functionTypeNode = changetype(this); // TS\n            let parameterNodes = functionTypeNode.parameters;\n            for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n                if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes))\n                    return true;\n            }\n            if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes))\n                return true;\n            let explicitThisType = functionTypeNode.explicitThisType;\n            if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes))\n                return true;\n        }\n        else {\n            assert(false);\n        }\n        return false;\n    }\n}\nexports.TypeNode = TypeNode;\n/** Represents a type name. */\nclass TypeName extends Node {\n    constructor(\n    /** Identifier of this part. */\n    identifier, \n    /** Next part of the type name or `null` if this is the last part. */\n    next, \n    /** Source range. */\n    range) {\n        super(NodeKind.TYPENAME, range);\n        this.identifier = identifier;\n        this.next = next;\n    }\n}\nexports.TypeName = TypeName;\n/** Represents a named type. */\nclass NamedTypeNode extends TypeNode {\n    constructor(\n    /** Type name. */\n    name, \n    /** Type argument references. */\n    typeArguments, \n    /** Whether nullable or not. */\n    isNullable, \n    /** Source range. */\n    range) {\n        super(NodeKind.NAMEDTYPE, isNullable, range);\n        this.name = name;\n        this.typeArguments = typeArguments;\n    }\n    /** Checks if this type node has type arguments. */\n    get hasTypeArguments() {\n        var typeArguments = this.typeArguments;\n        return typeArguments !== null && typeArguments.length > 0;\n    }\n}\nexports.NamedTypeNode = NamedTypeNode;\n/** Represents a function type. */\nclass FunctionTypeNode extends TypeNode {\n    constructor(\n    /** Function parameters. */\n    parameters, \n    /** Return type. */\n    returnType, \n    /** Explicitly provided this type, if any. */\n    explicitThisType, // can't be a function\n    /** Whether nullable or not. */\n    isNullable, \n    /** Source range. */\n    range) {\n        super(NodeKind.FUNCTIONTYPE, isNullable, range);\n        this.parameters = parameters;\n        this.returnType = returnType;\n        this.explicitThisType = explicitThisType;\n    }\n}\nexports.FunctionTypeNode = FunctionTypeNode;\n/** Represents a type parameter. */\nclass TypeParameterNode extends Node {\n    constructor(\n    /** Identifier reference. */\n    name, \n    /** Extended type reference, if any. */\n    extendsType, // can't be a function\n    /** Default type if omitted, if any. */\n    defaultType, // can't be a function\n    /** Source range. */\n    range) {\n        super(NodeKind.TYPEPARAMETER, range);\n        this.name = name;\n        this.extendsType = extendsType;\n        this.defaultType = defaultType;\n    }\n}\nexports.TypeParameterNode = TypeParameterNode;\n/** Represents the kind of a parameter. */\nvar ParameterKind;\n(function (ParameterKind) {\n    /** No specific flags. */\n    ParameterKind[ParameterKind[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    /** Is an optional parameter. */\n    ParameterKind[ParameterKind[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /** Is a rest parameter. */\n    ParameterKind[ParameterKind[\"REST\"] = 2] = \"REST\";\n})(ParameterKind = exports.ParameterKind || (exports.ParameterKind = {}));\n/** Represents a function parameter. */\nclass ParameterNode extends Node {\n    constructor(\n    /** Parameter kind. */\n    parameterKind, \n    /** Parameter name. */\n    name, \n    /** Parameter type. */\n    type, \n    /** Initializer expression, if any. */\n    initializer, \n    /** Source range. */\n    range) {\n        super(NodeKind.PARAMETER, range);\n        this.parameterKind = parameterKind;\n        this.name = name;\n        this.type = type;\n        this.initializer = initializer;\n        /** Implicit field declaration, if applicable. */\n        this.implicitFieldDeclaration = null;\n        /** Common flags indicating specific traits. */\n        this.flags = common_1.CommonFlags.NONE;\n    }\n    /** Tests if this node has the specified flag or flags. */\n    is(flag) { return (this.flags & flag) == flag; }\n    /** Tests if this node has one of the specified flags. */\n    isAny(flag) { return (this.flags & flag) != 0; }\n    /** Sets a specific flag or flags. */\n    set(flag) { this.flags |= flag; }\n}\nexports.ParameterNode = ParameterNode;\n// special\n/** Built-in decorator kinds. */\nvar DecoratorKind;\n(function (DecoratorKind) {\n    DecoratorKind[DecoratorKind[\"CUSTOM\"] = 0] = \"CUSTOM\";\n    DecoratorKind[DecoratorKind[\"GLOBAL\"] = 1] = \"GLOBAL\";\n    DecoratorKind[DecoratorKind[\"OPERATOR\"] = 2] = \"OPERATOR\";\n    DecoratorKind[DecoratorKind[\"OPERATOR_BINARY\"] = 3] = \"OPERATOR_BINARY\";\n    DecoratorKind[DecoratorKind[\"OPERATOR_PREFIX\"] = 4] = \"OPERATOR_PREFIX\";\n    DecoratorKind[DecoratorKind[\"OPERATOR_POSTFIX\"] = 5] = \"OPERATOR_POSTFIX\";\n    DecoratorKind[DecoratorKind[\"UNMANAGED\"] = 6] = \"UNMANAGED\";\n    DecoratorKind[DecoratorKind[\"FINAL\"] = 7] = \"FINAL\";\n    DecoratorKind[DecoratorKind[\"INLINE\"] = 8] = \"INLINE\";\n    DecoratorKind[DecoratorKind[\"EXTERNAL\"] = 9] = \"EXTERNAL\";\n    DecoratorKind[DecoratorKind[\"BUILTIN\"] = 10] = \"BUILTIN\";\n    DecoratorKind[DecoratorKind[\"LAZY\"] = 11] = \"LAZY\";\n    DecoratorKind[DecoratorKind[\"UNSAFE\"] = 12] = \"UNSAFE\";\n})(DecoratorKind = exports.DecoratorKind || (exports.DecoratorKind = {}));\n(function (DecoratorKind) {\n    /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n    function fromNode(nameNode) {\n        if (nameNode.kind == NodeKind.IDENTIFIER) {\n            let nameStr = nameNode.text;\n            assert(nameStr.length);\n            switch (nameStr.charCodeAt(0)) {\n                case 98 /* b */: {\n                    if (nameStr == \"builtin\")\n                        return DecoratorKind.BUILTIN;\n                    break;\n                }\n                case 101 /* e */: {\n                    if (nameStr == \"external\")\n                        return DecoratorKind.EXTERNAL;\n                    break;\n                }\n                case 102 /* f */: {\n                    if (nameStr == \"final\")\n                        return DecoratorKind.FINAL;\n                    break;\n                }\n                case 103 /* g */: {\n                    if (nameStr == \"global\")\n                        return DecoratorKind.GLOBAL;\n                    break;\n                }\n                case 105 /* i */: {\n                    if (nameStr == \"inline\")\n                        return DecoratorKind.INLINE;\n                    break;\n                }\n                case 108 /* l */: {\n                    if (nameStr == \"lazy\")\n                        return DecoratorKind.LAZY;\n                    break;\n                }\n                case 111 /* o */: {\n                    if (nameStr == \"operator\")\n                        return DecoratorKind.OPERATOR;\n                    break;\n                }\n                case 117 /* u */: {\n                    if (nameStr == \"unmanaged\")\n                        return DecoratorKind.UNMANAGED;\n                    if (nameStr == \"unsafe\")\n                        return DecoratorKind.UNSAFE;\n                    break;\n                }\n            }\n        }\n        else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n            let propertyAccessNode = nameNode;\n            let expression = propertyAccessNode.expression;\n            if (expression.kind == NodeKind.IDENTIFIER) {\n                let nameStr = expression.text;\n                assert(nameStr.length);\n                let propStr = propertyAccessNode.property.text;\n                assert(propStr.length);\n                if (nameStr == \"operator\") {\n                    switch (propStr.charCodeAt(0)) {\n                        case 98 /* b */: {\n                            if (propStr == \"binary\")\n                                return DecoratorKind.OPERATOR_BINARY;\n                            break;\n                        }\n                        case 112 /* p */: {\n                            if (propStr == \"prefix\")\n                                return DecoratorKind.OPERATOR_PREFIX;\n                            if (propStr == \"postfix\")\n                                return DecoratorKind.OPERATOR_POSTFIX;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return DecoratorKind.CUSTOM;\n    }\n    DecoratorKind.fromNode = fromNode;\n})(DecoratorKind = exports.DecoratorKind || (exports.DecoratorKind = {}));\n/** Represents a decorator. */\nclass DecoratorNode extends Node {\n    constructor(\n    /** Built-in decorator kind, or custom. */\n    decoratorKind, \n    /** Name expression. */\n    name, \n    /** Argument expressions. */\n    args, \n    /** Source range. */\n    range) {\n        super(NodeKind.DECORATOR, range);\n        this.decoratorKind = decoratorKind;\n        this.name = name;\n        this.args = args;\n    }\n}\nexports.DecoratorNode = DecoratorNode;\n/** Comment kinds. */\nvar CommentKind;\n(function (CommentKind) {\n    /** Line comment. */\n    CommentKind[CommentKind[\"LINE\"] = 0] = \"LINE\";\n    /** Triple-slash line comment. */\n    CommentKind[CommentKind[\"TRIPLE\"] = 1] = \"TRIPLE\";\n    /** Block comment. */\n    CommentKind[CommentKind[\"BLOCK\"] = 2] = \"BLOCK\";\n})(CommentKind = exports.CommentKind || (exports.CommentKind = {}));\n/** Represents a comment. */\nclass CommentNode extends Node {\n    constructor(\n    /** Comment kind. */\n    commentKind, \n    /** Comment text. */\n    text, \n    /** Source range. */\n    range) {\n        super(NodeKind.COMMENT, range);\n        this.commentKind = commentKind;\n        this.text = text;\n    }\n}\nexports.CommentNode = CommentNode;\n// expressions\n/** Base class of all expression nodes. */\nclass Expression extends Node {\n}\nexports.Expression = Expression;\n/** Represents an identifier expression. */\nclass IdentifierExpression extends Expression {\n    constructor(\n    /** Textual name. */\n    text, \n    /** Whether quoted or not. */\n    isQuoted, \n    /** Source range. */\n    range) {\n        super(NodeKind.IDENTIFIER, range);\n        this.text = text;\n        this.isQuoted = isQuoted;\n    }\n}\nexports.IdentifierExpression = IdentifierExpression;\n/** Indicates the kind of a literal. */\nvar LiteralKind;\n(function (LiteralKind) {\n    LiteralKind[LiteralKind[\"FLOAT\"] = 0] = \"FLOAT\";\n    LiteralKind[LiteralKind[\"INTEGER\"] = 1] = \"INTEGER\";\n    LiteralKind[LiteralKind[\"STRING\"] = 2] = \"STRING\";\n    LiteralKind[LiteralKind[\"REGEXP\"] = 3] = \"REGEXP\";\n    LiteralKind[LiteralKind[\"ARRAY\"] = 4] = \"ARRAY\";\n    LiteralKind[LiteralKind[\"OBJECT\"] = 5] = \"OBJECT\";\n})(LiteralKind = exports.LiteralKind || (exports.LiteralKind = {}));\n/** Base class of all literal expressions. */\nclass LiteralExpression extends Expression {\n    constructor(\n    /** Specific literal kind. */\n    literalKind, \n    /** Source range. */\n    range) {\n        super(NodeKind.LITERAL, range);\n        this.literalKind = literalKind;\n    }\n}\nexports.LiteralExpression = LiteralExpression;\n/** Represents an `[]` literal expression. */\nclass ArrayLiteralExpression extends LiteralExpression {\n    constructor(\n    /** Nested element expressions. */\n    elementExpressions, \n    /** Source range. */\n    range) {\n        super(LiteralKind.ARRAY, range);\n        this.elementExpressions = elementExpressions;\n    }\n}\nexports.ArrayLiteralExpression = ArrayLiteralExpression;\n/** Indicates the kind of an assertion. */\nvar AssertionKind;\n(function (AssertionKind) {\n    /** A prefix assertion, i.e. `<T>expr`. */\n    AssertionKind[AssertionKind[\"PREFIX\"] = 0] = \"PREFIX\";\n    /** An as assertion, i.e. `expr as T`. */\n    AssertionKind[AssertionKind[\"AS\"] = 1] = \"AS\";\n    /** A non-null assertion, i.e. `!expr`. */\n    AssertionKind[AssertionKind[\"NONNULL\"] = 2] = \"NONNULL\";\n    /** A const assertion, i.e. `expr as const`. */\n    AssertionKind[AssertionKind[\"CONST\"] = 3] = \"CONST\";\n})(AssertionKind = exports.AssertionKind || (exports.AssertionKind = {}));\n/** Represents an assertion expression. */\nclass AssertionExpression extends Expression {\n    constructor(\n    /** Specific kind of this assertion. */\n    assertionKind, \n    /** Expression being asserted. */\n    expression, \n    /** Target type, if applicable. */\n    toType, \n    /** Source range. */\n    range) {\n        super(NodeKind.ASSERTION, range);\n        this.assertionKind = assertionKind;\n        this.expression = expression;\n        this.toType = toType;\n    }\n}\nexports.AssertionExpression = AssertionExpression;\n/** Represents a binary expression. */\nclass BinaryExpression extends Expression {\n    constructor(\n    /** Operator token. */\n    operator, \n    /** Left-hand side expression */\n    left, \n    /** Right-hand side expression. */\n    right, \n    /** Source range. */\n    range) {\n        super(NodeKind.BINARY, range);\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n}\nexports.BinaryExpression = BinaryExpression;\n/** Represents a call expression. */\nclass CallExpression extends Expression {\n    constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    expression, \n    /** Provided type arguments. */\n    typeArguments, \n    /** Provided arguments. */\n    args, \n    /** Source range. */\n    range) {\n        super(NodeKind.CALL, range);\n        this.expression = expression;\n        this.typeArguments = typeArguments;\n        this.args = args;\n    }\n    /** Gets the type arguments range for reporting. */\n    get typeArgumentsRange() {\n        var typeArguments = this.typeArguments;\n        var numTypeArguments;\n        if (typeArguments) {\n            if (numTypeArguments = typeArguments.length) {\n                return tokenizer_1.Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n            }\n        }\n        return this.expression.range;\n    }\n    /** Gets the arguments range for reporting. */\n    get argumentsRange() {\n        var args = this.args;\n        var numArguments = args.length;\n        if (numArguments) {\n            return tokenizer_1.Range.join(args[0].range, args[numArguments - 1].range);\n        }\n        return this.expression.range;\n    }\n}\nexports.CallExpression = CallExpression;\n/** Represents a class expression using the 'class' keyword. */\nclass ClassExpression extends Expression {\n    constructor(\n    /** Inline class declaration. */\n    declaration) {\n        super(NodeKind.CLASS, declaration.range);\n        this.declaration = declaration;\n    }\n}\nexports.ClassExpression = ClassExpression;\n/** Represents a comma expression composed of multiple expressions. */\nclass CommaExpression extends Expression {\n    constructor(\n    /** Sequential expressions. */\n    expressions, \n    /** Source range. */\n    range) {\n        super(NodeKind.COMMA, range);\n        this.expressions = expressions;\n    }\n}\nexports.CommaExpression = CommaExpression;\n/** Represents a `constructor` expression. */\nclass ConstructorExpression extends IdentifierExpression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(\"constructor\", false, range);\n        this.kind = NodeKind.CONSTRUCTOR;\n    }\n}\nexports.ConstructorExpression = ConstructorExpression;\n/** Represents an element access expression, e.g., array access. */\nclass ElementAccessExpression extends Expression {\n    constructor(\n    /** Expression being accessed. */\n    expression, \n    /** Element of the expression being accessed. */\n    elementExpression, \n    /** Source range. */\n    range) {\n        super(NodeKind.ELEMENTACCESS, range);\n        this.expression = expression;\n        this.elementExpression = elementExpression;\n    }\n}\nexports.ElementAccessExpression = ElementAccessExpression;\n/** Represents a float literal expression. */\nclass FloatLiteralExpression extends LiteralExpression {\n    constructor(\n    /** Float value. */\n    value, \n    /** Source range. */\n    range) {\n        super(LiteralKind.FLOAT, range);\n        this.value = value;\n    }\n}\nexports.FloatLiteralExpression = FloatLiteralExpression;\n/** Represents a function expression using the 'function' keyword. */\nclass FunctionExpression extends Expression {\n    constructor(\n    /** Inline function declaration. */\n    declaration) {\n        super(NodeKind.FUNCTION, declaration.range);\n        this.declaration = declaration;\n    }\n}\nexports.FunctionExpression = FunctionExpression;\n/** Represents an `instanceof` expression. */\nclass InstanceOfExpression extends Expression {\n    constructor(\n    /** Expression being asserted. */\n    expression, \n    /** Type to test for. */\n    isType, \n    /** Source range. */\n    range) {\n        super(NodeKind.INSTANCEOF, range);\n        this.expression = expression;\n        this.isType = isType;\n    }\n}\nexports.InstanceOfExpression = InstanceOfExpression;\n/** Represents an integer literal expression. */\nclass IntegerLiteralExpression extends LiteralExpression {\n    constructor(\n    /** Integer value. */\n    value, \n    /** Source range. */\n    range) {\n        super(LiteralKind.INTEGER, range);\n        this.value = value;\n    }\n}\nexports.IntegerLiteralExpression = IntegerLiteralExpression;\n/** Represents a `new` expression. Like a call but with its own kind. */\nclass NewExpression extends Expression {\n    constructor(\n    /** Type being constructed. */\n    typeName, \n    /** Provided type arguments. */\n    typeArguments, \n    /** Provided arguments. */\n    args, \n    /** Source range. */\n    range) {\n        super(NodeKind.NEW, range);\n        this.typeName = typeName;\n        this.typeArguments = typeArguments;\n        this.args = args;\n    }\n    /** Gets the type arguments range for reporting. */\n    get typeArgumentsRange() {\n        var typeArguments = this.typeArguments;\n        var numTypeArguments;\n        if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n            return tokenizer_1.Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n        }\n        return this.typeName.range;\n    }\n    /** Gets the arguments range for reporting. */\n    get argumentsRange() {\n        var args = this.args;\n        var numArguments = args.length;\n        if (numArguments) {\n            return tokenizer_1.Range.join(args[0].range, args[numArguments - 1].range);\n        }\n        return this.typeName.range;\n    }\n}\nexports.NewExpression = NewExpression;\n/** Represents a `null` expression. */\nclass NullExpression extends IdentifierExpression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(\"null\", false, range);\n        this.kind = NodeKind.NULL;\n    }\n}\nexports.NullExpression = NullExpression;\n/** Represents an object literal expression. */\nclass ObjectLiteralExpression extends LiteralExpression {\n    constructor(\n    /** Field names. */\n    names, \n    /** Field values. */\n    values, \n    /** Source range. */\n    range) {\n        super(LiteralKind.OBJECT, range);\n        this.names = names;\n        this.values = values;\n    }\n}\nexports.ObjectLiteralExpression = ObjectLiteralExpression;\n/** Represents an omitted expression, e.g. within an array literal. */\nclass OmittedExpression extends Expression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(NodeKind.OMITTED, range);\n    }\n}\nexports.OmittedExpression = OmittedExpression;\n/** Represents a parenthesized expression. */\nclass ParenthesizedExpression extends Expression {\n    constructor(\n    /** Expression in parenthesis. */\n    expression, \n    /** Source range. */\n    range) {\n        super(NodeKind.PARENTHESIZED, range);\n        this.expression = expression;\n    }\n}\nexports.ParenthesizedExpression = ParenthesizedExpression;\n/** Represents a property access expression. */\nclass PropertyAccessExpression extends Expression {\n    constructor(\n    /** Expression being accessed. */\n    expression, \n    /** Property of the expression being accessed. */\n    property, \n    /** Source range. */\n    range) {\n        super(NodeKind.PROPERTYACCESS, range);\n        this.expression = expression;\n        this.property = property;\n    }\n}\nexports.PropertyAccessExpression = PropertyAccessExpression;\n/** Represents a regular expression literal expression. */\nclass RegexpLiteralExpression extends LiteralExpression {\n    constructor(\n    /** Regular expression pattern. */\n    pattern, \n    /** Regular expression flags. */\n    patternFlags, \n    /** Source range. */\n    range) {\n        super(LiteralKind.REGEXP, range);\n        this.pattern = pattern;\n        this.patternFlags = patternFlags;\n    }\n}\nexports.RegexpLiteralExpression = RegexpLiteralExpression;\n/** Represents a ternary expression, i.e., short if notation. */\nclass TernaryExpression extends Expression {\n    constructor(\n    /** Condition expression. */\n    condition, \n    /** Expression executed when condition is `true`. */\n    ifThen, \n    /** Expression executed when condition is `false`. */\n    ifElse, \n    /** Source range. */\n    range) {\n        super(NodeKind.TERNARY, range);\n        this.condition = condition;\n        this.ifThen = ifThen;\n        this.ifElse = ifElse;\n    }\n}\nexports.TernaryExpression = TernaryExpression;\n/** Represents a string literal expression. */\nclass StringLiteralExpression extends LiteralExpression {\n    constructor(\n    /** String value without quotes. */\n    value, \n    /** Source range. */\n    range) {\n        super(LiteralKind.STRING, range);\n        this.value = value;\n    }\n}\nexports.StringLiteralExpression = StringLiteralExpression;\n/** Represents a `super` expression. */\nclass SuperExpression extends IdentifierExpression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(\"super\", false, range);\n        this.kind = NodeKind.SUPER;\n    }\n}\nexports.SuperExpression = SuperExpression;\n/** Represents a `this` expression. */\nclass ThisExpression extends IdentifierExpression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(\"this\", false, range);\n        this.kind = NodeKind.THIS;\n    }\n}\nexports.ThisExpression = ThisExpression;\n/** Represents a `true` expression. */\nclass TrueExpression extends IdentifierExpression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(\"true\", false, range);\n        this.kind = NodeKind.TRUE;\n    }\n}\nexports.TrueExpression = TrueExpression;\n/** Represents a `false` expression. */\nclass FalseExpression extends IdentifierExpression {\n    constructor(\n    /** Source range. */\n    range) {\n        super(\"false\", false, range);\n        this.kind = NodeKind.FALSE;\n    }\n}\nexports.FalseExpression = FalseExpression;\n/** Base class of all unary expressions. */\nclass UnaryExpression extends Expression {\n    constructor(\n    /** Unary expression kind. */\n    kind, \n    /** Operator token. */\n    operator, \n    /** Operand expression. */\n    operand, \n    /** Source range. */\n    range) {\n        super(kind, range);\n        this.operator = operator;\n        this.operand = operand;\n    }\n}\nexports.UnaryExpression = UnaryExpression;\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nclass UnaryPostfixExpression extends UnaryExpression {\n    constructor(\n    /** Operator token. */\n    operator, \n    /** Operand expression. */\n    operand, \n    /** Source range. */\n    range) {\n        super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n    }\n}\nexports.UnaryPostfixExpression = UnaryPostfixExpression;\n/** Represents a unary prefix expression, e.g. a negation. */\nclass UnaryPrefixExpression extends UnaryExpression {\n    constructor(\n    /** Operator token. */\n    operator, \n    /** Operand expression. */\n    operand, \n    /** Source range. */\n    range) {\n        super(NodeKind.UNARYPREFIX, operator, operand, range);\n    }\n}\nexports.UnaryPrefixExpression = UnaryPrefixExpression;\n// statements\n/** Base class of all statement nodes. */\nclass Statement extends Node {\n}\nexports.Statement = Statement;\n/** Indicates the specific kind of a source. */\nvar SourceKind;\n(function (SourceKind) {\n    /** User-provided file. */\n    SourceKind[SourceKind[\"USER\"] = 0] = \"USER\";\n    /** User-provided entry file. */\n    SourceKind[SourceKind[\"USER_ENTRY\"] = 1] = \"USER_ENTRY\";\n    /** Library-provided file. */\n    SourceKind[SourceKind[\"LIBRARY\"] = 2] = \"LIBRARY\";\n    /** Library-provided entry file. */\n    SourceKind[SourceKind[\"LIBRARY_ENTRY\"] = 3] = \"LIBRARY_ENTRY\";\n})(SourceKind = exports.SourceKind || (exports.SourceKind = {}));\n/** A top-level source node. */\nclass Source extends Node {\n    constructor(\n    /** Source kind. */\n    sourceKind, \n    /** Normalized path with file extension. */\n    normalizedPath, \n    /** Full source text. */\n    text) {\n        super(NodeKind.SOURCE, new tokenizer_1.Range(0, text.length));\n        this.sourceKind = sourceKind;\n        this.normalizedPath = normalizedPath;\n        this.text = text;\n        /** Contained statements. */\n        this.statements = new Array();\n        /** Source map index. */\n        this.debugInfoIndex = -1;\n        /** Re-exported sources. */\n        this.exportPaths = null;\n        /** Cached line starts. */\n        this.lineCache = null;\n        /** Remembered column number. */\n        this.lineColumn = 1;\n        var internalPath = mangleInternalPath(normalizedPath);\n        this.internalPath = internalPath;\n        var pos = internalPath.lastIndexOf(common_1.PATH_DELIMITER);\n        this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n        this.range.source = this;\n    }\n    /** Checks if this source represents native code. */\n    get isNative() {\n        return this.internalPath == common_1.LIBRARY_SUBST;\n    }\n    /** Checks if this source is part of the (standard) library. */\n    get isLibrary() {\n        var kind = this.sourceKind;\n        return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n    }\n    /** Determines the line number at the specified position. Starts at `1`. */\n    lineAt(pos) {\n        assert(pos >= 0 && pos < 0x7fffffff);\n        var lineCache = this.lineCache;\n        if (!lineCache) {\n            this.lineCache = lineCache = [0];\n            let text = this.text;\n            let off = 0;\n            let end = text.length;\n            while (off < end) {\n                if (text.charCodeAt(off++) == 10 /* LINEFEED */)\n                    lineCache.push(off);\n            }\n            lineCache.push(0x7fffffff);\n        }\n        var l = 0;\n        var r = lineCache.length - 1;\n        while (l < r) {\n            let m = l + ((r - l) >> 1);\n            let s = unchecked(lineCache[m]);\n            if (pos < s)\n                r = m;\n            else if (pos < unchecked(lineCache[m + 1])) {\n                this.lineColumn = pos - s + 1;\n                return m + 1;\n            }\n            else\n                l = m + 1;\n        }\n        return assert(0);\n    }\n    /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n    columnAt() {\n        return this.lineColumn;\n    }\n}\nexports.Source = Source;\n/** Base class of all declaration statements. */\nclass DeclarationStatement extends Statement {\n    constructor(\n    /** Declaration node kind. */\n    kind, \n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Source range. */\n    range) {\n        super(kind, range);\n        this.name = name;\n        this.decorators = decorators;\n        this.flags = flags;\n    }\n    /** Tests if this node has the specified flag or flags. */\n    is(flag) { return (this.flags & flag) == flag; }\n    /** Tests if this node has one of the specified flags. */\n    isAny(flag) { return (this.flags & flag) != 0; }\n    /** Sets a specific flag or flags. */\n    set(flag) { this.flags |= flag; }\n}\nexports.DeclarationStatement = DeclarationStatement;\n/** Represents an index signature. */\nclass IndexSignatureNode extends Node {\n    constructor(\n    /** Key type. */\n    keyType, \n    /** Value type. */\n    valueType, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Source range. */\n    range) {\n        super(NodeKind.INDEXSIGNATURE, range);\n        this.keyType = keyType;\n        this.valueType = valueType;\n        this.flags = flags;\n    }\n}\nexports.IndexSignatureNode = IndexSignatureNode;\n/** Base class of all variable-like declaration statements. */\nclass VariableLikeDeclarationStatement extends DeclarationStatement {\n    constructor(\n    /** Variable-like declaration node kind. */\n    kind, \n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Annotated type node, if any. */\n    type, \n    /** Initializer expression, if any. */\n    initializer, \n    /** Source range. */\n    range) {\n        super(kind, name, decorators, flags, range);\n        this.type = type;\n        this.initializer = initializer;\n    }\n}\nexports.VariableLikeDeclarationStatement = VariableLikeDeclarationStatement;\n/** Represents a block statement. */\nclass BlockStatement extends Statement {\n    constructor(\n    /** Contained statements. */\n    statements, \n    /** Source range. */\n    range) {\n        super(NodeKind.BLOCK, range);\n        this.statements = statements;\n    }\n}\nexports.BlockStatement = BlockStatement;\n/** Represents a `break` statement. */\nclass BreakStatement extends Statement {\n    constructor(\n    /** Target label, if any. */\n    label, \n    /** Source range. */\n    range) {\n        super(NodeKind.BREAK, range);\n        this.label = label;\n    }\n}\nexports.BreakStatement = BreakStatement;\n/** Represents a `class` declaration. */\nclass ClassDeclaration extends DeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Accepted type parameters. */\n    typeParameters, \n    /** Base class type being extended, if any. */\n    extendsType, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes, // can't be functions\n    /** Class member declarations. */\n    members, \n    /** Source range. */\n    range) {\n        super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n        this.typeParameters = typeParameters;\n        this.extendsType = extendsType;\n        this.implementsTypes = implementsTypes;\n        this.members = members;\n        /** Index signature, if present. */\n        this.indexSignature = null;\n    }\n    get isGeneric() {\n        var typeParameters = this.typeParameters;\n        return typeParameters != null && typeParameters.length > 0;\n    }\n}\nexports.ClassDeclaration = ClassDeclaration;\n/** Represents a `continue` statement. */\nclass ContinueStatement extends Statement {\n    constructor(\n    /** Target label, if applicable. */\n    label, \n    /** Source range. */\n    range) {\n        super(NodeKind.CONTINUE, range);\n        this.label = label;\n    }\n}\nexports.ContinueStatement = ContinueStatement;\n/** Represents a `do` statement. */\nclass DoStatement extends Statement {\n    constructor(\n    /** Statement being looped over. */\n    statement, \n    /** Condition when to repeat. */\n    condition, \n    /** Source range. */\n    range) {\n        super(NodeKind.DO, range);\n        this.statement = statement;\n        this.condition = condition;\n    }\n}\nexports.DoStatement = DoStatement;\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nclass EmptyStatement extends Statement {\n    constructor(\n    /** Source range. */\n    range) {\n        super(NodeKind.EMPTY, range);\n    }\n}\nexports.EmptyStatement = EmptyStatement;\n/** Represents an `enum` declaration. */\nclass EnumDeclaration extends DeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Enum value declarations. */\n    values, \n    /** Source range. */\n    range) {\n        super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n        this.values = values;\n    }\n}\nexports.EnumDeclaration = EnumDeclaration;\n/** Represents a value of an `enum` declaration. */\nclass EnumValueDeclaration extends VariableLikeDeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Initializer expression, if any. */\n    initializer, \n    /** Source range. */\n    range) {\n        super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n    }\n}\nexports.EnumValueDeclaration = EnumValueDeclaration;\n/** Represents an `export import` statement of an interface. */\nclass ExportImportStatement extends Statement {\n    constructor(\n    /** Identifier being imported. */\n    name, \n    /** Identifier being exported. */\n    externalName, \n    /** Source range. */\n    range) {\n        super(NodeKind.EXPORTIMPORT, range);\n        this.name = name;\n        this.externalName = externalName;\n    }\n}\nexports.ExportImportStatement = ExportImportStatement;\n/** Represents a member of an `export` statement. */\nclass ExportMember extends Node {\n    constructor(\n    /** Local identifier. */\n    localName, \n    /** Exported identifier. */\n    exportedName, \n    /** Source range. */\n    range) {\n        super(NodeKind.EXPORTMEMBER, range);\n        this.localName = localName;\n        this.exportedName = exportedName;\n    }\n}\nexports.ExportMember = ExportMember;\n/** Represents an `export` statement. */\nclass ExportStatement extends Statement {\n    constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    members, \n    /** Path being exported from, if applicable. */\n    path, \n    /** Whether this is a declared export. */\n    isDeclare, \n    /** Source range. */\n    range) {\n        super(NodeKind.EXPORT, range);\n        this.members = members;\n        this.path = path;\n        this.isDeclare = isDeclare;\n        if (path) {\n            let normalizedPath = util_1.normalizePath(path.value);\n            if (path.value.startsWith(\".\")) { // relative\n                normalizedPath = util_1.resolvePath(normalizedPath, range.source.internalPath);\n            }\n            else { // absolute\n                if (!normalizedPath.startsWith(common_1.LIBRARY_PREFIX))\n                    normalizedPath = common_1.LIBRARY_PREFIX + normalizedPath;\n            }\n            this.internalPath = normalizedPath;\n        }\n        else {\n            this.internalPath = null;\n        }\n    }\n}\nexports.ExportStatement = ExportStatement;\n/** Represents an `export default` statement. */\nclass ExportDefaultStatement extends Statement {\n    constructor(\n    /** Declaration being exported as default. */\n    declaration, \n    /** Source range. */\n    range) {\n        super(NodeKind.EXPORTDEFAULT, range);\n        this.declaration = declaration;\n    }\n}\nexports.ExportDefaultStatement = ExportDefaultStatement;\n/** Represents an expression that is used as a statement. */\nclass ExpressionStatement extends Statement {\n    constructor(\n    /** Expression being used as a statement.*/\n    expression) {\n        super(NodeKind.EXPRESSION, expression.range);\n        this.expression = expression;\n    }\n}\nexports.ExpressionStatement = ExpressionStatement;\n/** Represents a field declaration within a `class`. */\nclass FieldDeclaration extends VariableLikeDeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Annotated type node, if any. */\n    type, \n    /** Initializer expression, if any. */\n    initializer, \n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    parameterIndex, \n    /** Source range. */\n    range) {\n        super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n        this.parameterIndex = parameterIndex;\n    }\n}\nexports.FieldDeclaration = FieldDeclaration;\n/** Represents a `for` statement. */\nclass ForStatement extends Statement {\n    constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    initializer, \n    /** Condition expression, if present. */\n    condition, \n    /** Incrementor expression, if present. */\n    incrementor, \n    /** Statement being looped over. */\n    statement, \n    /** Source range. */\n    range) {\n        super(NodeKind.FOR, range);\n        this.initializer = initializer;\n        this.condition = condition;\n        this.incrementor = incrementor;\n        this.statement = statement;\n    }\n}\nexports.ForStatement = ForStatement;\n/** Represents a `for..of` statement. */\nclass ForOfStatement extends Statement {\n    constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    variable, \n    /** Iterable expression being iterated. */\n    iterable, \n    /** Statement being looped over. */\n    statement, \n    /** Source range. */\n    range) {\n        super(NodeKind.FOROF, range);\n        this.variable = variable;\n        this.iterable = iterable;\n        this.statement = statement;\n    }\n}\nexports.ForOfStatement = ForOfStatement;\n/** Indicates the kind of an array function. */\nvar ArrowKind;\n(function (ArrowKind) {\n    /** Not an arrow function. */\n    ArrowKind[ArrowKind[\"NONE\"] = 0] = \"NONE\";\n    /** Parenthesized parameter list. */\n    ArrowKind[ArrowKind[\"ARROW_PARENTHESIZED\"] = 1] = \"ARROW_PARENTHESIZED\";\n    /** Single parameter without parenthesis. */\n    ArrowKind[ArrowKind[\"ARROW_SINGLE\"] = 2] = \"ARROW_SINGLE\";\n})(ArrowKind = exports.ArrowKind || (exports.ArrowKind = {}));\n/** Represents a `function` declaration. */\nclass FunctionDeclaration extends DeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Type parameters, if any. */\n    typeParameters, \n    /** Function signature. */\n    signature, \n    /** Body statement. Usually a block. */\n    body, \n    /** Arrow function kind, if applicable. */\n    arrowKind, \n    /** Source range. */\n    range) {\n        super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n        this.typeParameters = typeParameters;\n        this.signature = signature;\n        this.body = body;\n        this.arrowKind = arrowKind;\n    }\n    /** Gets if this function is generic. */\n    get isGeneric() {\n        var typeParameters = this.typeParameters;\n        return typeParameters != null && typeParameters.length > 0;\n    }\n    /** Clones this function declaration. */\n    clone() {\n        return new FunctionDeclaration(this.name, this.decorators, this.flags, this.typeParameters, this.signature, this.body, this.arrowKind, this.range);\n    }\n}\nexports.FunctionDeclaration = FunctionDeclaration;\n/** Represents an `if` statement. */\nclass IfStatement extends Statement {\n    constructor(\n    /** Condition. */\n    condition, \n    /** Statement executed when condition is `true`. */\n    ifTrue, \n    /** Statement executed when condition is `false`. */\n    ifFalse, \n    /** Source range. */\n    range) {\n        super(NodeKind.IF, range);\n        this.condition = condition;\n        this.ifTrue = ifTrue;\n        this.ifFalse = ifFalse;\n    }\n}\nexports.IfStatement = IfStatement;\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nclass ImportDeclaration extends DeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Identifier being imported. */\n    foreignName, \n    /** Source range. */\n    range) {\n        super(NodeKind.IMPORTDECLARATION, name, null, common_1.CommonFlags.NONE, range);\n        this.foreignName = foreignName;\n    }\n}\nexports.ImportDeclaration = ImportDeclaration;\n/** Represents an `import` statement. */\nclass ImportStatement extends Statement {\n    constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    declarations, \n    /** Name of the local namespace, if an asterisk import. */\n    namespaceName, \n    /** Path being imported from. */\n    path, \n    /** Source range. */\n    range) {\n        super(NodeKind.IMPORT, range);\n        this.declarations = declarations;\n        this.namespaceName = namespaceName;\n        this.path = path;\n        var normalizedPath = util_1.normalizePath(path.value);\n        if (path.value.startsWith(\".\")) { // relative in project\n            normalizedPath = util_1.resolvePath(normalizedPath, range.source.internalPath);\n        }\n        else { // absolute in library\n            if (!normalizedPath.startsWith(common_1.LIBRARY_PREFIX))\n                normalizedPath = common_1.LIBRARY_PREFIX + normalizedPath;\n        }\n        this.internalPath = normalizedPath;\n    }\n}\nexports.ImportStatement = ImportStatement;\n/** Represents an `interfarce` declaration. */\nclass InterfaceDeclaration extends ClassDeclaration {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Accepted type parameters. */\n    typeParameters, \n    /** Base class type being extended, if any. */\n    extendsType, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes, // can't be functions\n    /** Class member declarations. */\n    members, \n    /** Source range. */\n    range) {\n        super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n        this.kind = NodeKind.INTERFACEDECLARATION;\n    }\n}\nexports.InterfaceDeclaration = InterfaceDeclaration;\n/** Represents a method declaration within a `class`. */\nclass MethodDeclaration extends FunctionDeclaration {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Type parameters, if any. */\n    typeParameters, \n    /** Function signature. */\n    signature, \n    /** Body statement. Usually a block. */\n    body, \n    /** Source range. */\n    range) {\n        super(name, decorators, flags, typeParameters, signature, body, 0 /* NONE */, range);\n        this.kind = NodeKind.METHODDECLARATION;\n    }\n}\nexports.MethodDeclaration = MethodDeclaration;\n/** Represents a `namespace` declaration. */\nclass NamespaceDeclaration extends DeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Array of namespace members. */\n    members, \n    /** Source range. */\n    range) {\n        super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n        this.members = members;\n    }\n}\nexports.NamespaceDeclaration = NamespaceDeclaration;\n/** Represents a `return` statement. */\nclass ReturnStatement extends Statement {\n    constructor(\n    /** Value expression being returned, if present. */\n    value, \n    /** Source range. */\n    range) {\n        super(NodeKind.RETURN, range);\n        this.value = value;\n    }\n}\nexports.ReturnStatement = ReturnStatement;\n/** Represents a single `case` within a `switch` statement. */\nclass SwitchCase extends Node {\n    constructor(\n    /** Label expression. `null` indicates the default case. */\n    label, \n    /** Contained statements. */\n    statements, \n    /** Source range. */\n    range) {\n        super(NodeKind.SWITCHCASE, range);\n        this.label = label;\n        this.statements = statements;\n    }\n}\nexports.SwitchCase = SwitchCase;\n/** Represents a `switch` statement. */\nclass SwitchStatement extends Statement {\n    constructor(\n    /** Condition expression. */\n    condition, \n    /** Contained cases. */\n    cases, \n    /** Source range. */\n    range) {\n        super(NodeKind.SWITCH, range);\n        this.condition = condition;\n        this.cases = cases;\n    }\n}\nexports.SwitchStatement = SwitchStatement;\n/** Represents a `throw` statement. */\nclass ThrowStatement extends Statement {\n    constructor(\n    /** Value expression being thrown. */\n    value, \n    /** Source range. */\n    range) {\n        super(NodeKind.THROW, range);\n        this.value = value;\n    }\n}\nexports.ThrowStatement = ThrowStatement;\n/** Represents a `try` statement. */\nclass TryStatement extends Statement {\n    constructor(\n    /** Contained statements. */\n    statements, \n    /** Exception variable name, if a `catch` clause is present. */\n    catchVariable, \n    /** Statements being executed on catch, if a `catch` clause is present. */\n    catchStatements, \n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    finallyStatements, \n    /** Source range. */\n    range) {\n        super(NodeKind.TRY, range);\n        this.statements = statements;\n        this.catchVariable = catchVariable;\n        this.catchStatements = catchStatements;\n        this.finallyStatements = finallyStatements;\n    }\n}\nexports.TryStatement = TryStatement;\n/** Represents a `type` declaration. */\nclass TypeDeclaration extends DeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Type parameters, if any. */\n    typeParameters, \n    /** Type being aliased. */\n    type, \n    /** Source range. */\n    range) {\n        super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n        this.typeParameters = typeParameters;\n        this.type = type;\n    }\n}\nexports.TypeDeclaration = TypeDeclaration;\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nclass VariableDeclaration extends VariableLikeDeclarationStatement {\n    constructor(\n    /** Simple name being declared. */\n    name, \n    /** Array of decorators, if any. */\n    decorators, \n    /** Common flags indicating specific traits. */\n    flags, \n    /** Annotated type node, if any. */\n    type, \n    /** Initializer expression, if any. */\n    initializer, \n    /** Source range. */\n    range) {\n        super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n    }\n}\nexports.VariableDeclaration = VariableDeclaration;\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nclass VariableStatement extends Statement {\n    constructor(\n    /** Array of decorators. */\n    decorators, \n    /** Array of member declarations. */\n    declarations, \n    /** Source range. */\n    range) {\n        super(NodeKind.VARIABLE, range);\n        this.decorators = decorators;\n        this.declarations = declarations;\n    }\n}\nexports.VariableStatement = VariableStatement;\n/** Represents a void statement dropping an expression's value. */\nclass VoidStatement extends Statement {\n    constructor(\n    /** Expression being dropped. */\n    expression, \n    /** Source range. */\n    range) {\n        super(NodeKind.VOID, range);\n        this.expression = expression;\n    }\n}\nexports.VoidStatement = VoidStatement;\n/** Represents a `while` statement. */\nclass WhileStatement extends Statement {\n    constructor(\n    /** Condition expression. */\n    condition, \n    /** Statement being looped over. */\n    statement, \n    /** Source range. */\n    range) {\n        super(NodeKind.WHILE, range);\n        this.condition = condition;\n        this.statement = statement;\n    }\n}\nexports.WhileStatement = WhileStatement;\n/** Finds the first decorator matching the specified kind. */\nfunction findDecorator(kind, decorators) {\n    if (decorators) {\n        for (let i = 0, k = decorators.length; i < k; ++i) {\n            let decorator = decorators[i];\n            if (decorator.decoratorKind == kind)\n                return decorator;\n        }\n    }\n    return null;\n}\nexports.findDecorator = findDecorator;\n/** Mangles an external to an internal path. */\nfunction mangleInternalPath(path) {\n    var pos = path.lastIndexOf(\".\");\n    var len = path.length;\n    if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n        let cur = pos;\n        while (++cur < len) {\n            if (!util_1.isTrivialAlphanum(path.charCodeAt(cur))) {\n                assert(false); // not a valid external path\n                return path;\n            }\n        }\n        return path.substring(0, pos);\n    }\n    assert(false); // not an external path\n    return path;\n}\nexports.mangleInternalPath = mangleInternalPath;\n/** Tests if the specified type node represents an omitted type. */\nfunction isTypeOmitted(type) {\n    if (type.kind == NodeKind.NAMEDTYPE) {\n        let name = type.name;\n        return !(name.next !== null || name.identifier.text.length > 0);\n    }\n    return false;\n}\nexports.isTypeOmitted = isTypeOmitted;\n\n\n/***/ }),\n\n/***/ 346:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compileClassInstanceOf = exports.compileRTTI = exports.compileVisitMembers = exports.compileVisitGlobals = exports.function_builtins = exports.builtins = exports.BuiltinContext = exports.BuiltinNames = void 0;\nconst diagnostics_1 = __webpack_require__(256);\nconst ast_1 = __webpack_require__(60);\nconst types_1 = __webpack_require__(699);\nconst module_1 = __webpack_require__(656);\nconst program_1 = __webpack_require__(974);\nconst flow_1 = __webpack_require__(154);\nconst resolver_1 = __webpack_require__(742);\nconst common_1 = __webpack_require__(200);\nconst util_1 = __webpack_require__(910);\n/** Internal names of various compiler built-ins. */\nvar BuiltinNames;\n(function (BuiltinNames) {\n    // compiler-generated\n    BuiltinNames.start = \"~start\";\n    BuiltinNames.started = \"~started\";\n    BuiltinNames.argumentsLength = \"~argumentsLength\";\n    BuiltinNames.setArgumentsLength = \"~setArgumentsLength\";\n    // std/builtins.ts\n    BuiltinNames.abort = \"~lib/builtins/abort\";\n    BuiltinNames.trace = \"~lib/builtins/trace\";\n    BuiltinNames.seed = \"~lib/builtins/seed\";\n    BuiltinNames.isInteger = \"~lib/builtins/isInteger\";\n    BuiltinNames.isFloat = \"~lib/builtins/isFloat\";\n    BuiltinNames.isBoolean = \"~lib/builtins/isBoolean\";\n    BuiltinNames.isSigned = \"~lib/builtins/isSigned\";\n    BuiltinNames.isReference = \"~lib/builtins/isReference\";\n    BuiltinNames.isString = \"~lib/builtins/isString\";\n    BuiltinNames.isArray = \"~lib/builtins/isArray\";\n    BuiltinNames.isArrayLike = \"~lib/builtins/isArrayLike\";\n    BuiltinNames.isFunction = \"~lib/builtins/isFunction\";\n    BuiltinNames.isNullable = \"~lib/builtins/isNullable\";\n    BuiltinNames.isDefined = \"~lib/builtins/isDefined\";\n    BuiltinNames.isConstant = \"~lib/builtins/isConstant\";\n    BuiltinNames.isManaged = \"~lib/builtins/isManaged\";\n    BuiltinNames.isVoid = \"~lib/builtins/isVoid\";\n    BuiltinNames.add = \"~lib/builtins/add\";\n    BuiltinNames.sub = \"~lib/builtins/sub\";\n    BuiltinNames.mul = \"~lib/builtins/mul\";\n    BuiltinNames.div = \"~lib/builtins/div\";\n    BuiltinNames.clz = \"~lib/builtins/clz\";\n    BuiltinNames.ctz = \"~lib/builtins/ctz\";\n    BuiltinNames.popcnt = \"~lib/builtins/popcnt\";\n    BuiltinNames.rotl = \"~lib/builtins/rotl\";\n    BuiltinNames.rotr = \"~lib/builtins/rotr\";\n    BuiltinNames.abs = \"~lib/builtins/abs\";\n    BuiltinNames.max = \"~lib/builtins/max\";\n    BuiltinNames.min = \"~lib/builtins/min\";\n    BuiltinNames.ceil = \"~lib/builtins/ceil\";\n    BuiltinNames.floor = \"~lib/builtins/floor\";\n    BuiltinNames.copysign = \"~lib/builtins/copysign\";\n    BuiltinNames.nearest = \"~lib/builtins/nearest\";\n    BuiltinNames.reinterpret = \"~lib/builtins/reinterpret\";\n    BuiltinNames.sqrt = \"~lib/builtins/sqrt\";\n    BuiltinNames.trunc = \"~lib/builtins/trunc\";\n    BuiltinNames.load = \"~lib/builtins/load\";\n    BuiltinNames.store = \"~lib/builtins/store\";\n    BuiltinNames.atomic_load = \"~lib/builtins/atomic.load\";\n    BuiltinNames.atomic_store = \"~lib/builtins/atomic.store\";\n    BuiltinNames.atomic_add = \"~lib/builtins/atomic.add\";\n    BuiltinNames.atomic_sub = \"~lib/builtins/atomic.sub\";\n    BuiltinNames.atomic_and = \"~lib/builtins/atomic.and\";\n    BuiltinNames.atomic_or = \"~lib/builtins/atomic.or\";\n    BuiltinNames.atomic_xor = \"~lib/builtins/atomic.xor\";\n    BuiltinNames.atomic_xchg = \"~lib/builtins/atomic.xchg\";\n    BuiltinNames.atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n    BuiltinNames.atomic_wait = \"~lib/builtins/atomic.wait\";\n    BuiltinNames.atomic_notify = \"~lib/builtins/atomic.notify\";\n    BuiltinNames.atomic_fence = \"~lib/builtins/atomic.fence\";\n    BuiltinNames.sizeof = \"~lib/builtins/sizeof\";\n    BuiltinNames.alignof = \"~lib/builtins/alignof\";\n    BuiltinNames.offsetof = \"~lib/builtins/offsetof\";\n    BuiltinNames.nameof = \"~lib/builtins/nameof\";\n    BuiltinNames.lengthof = \"~lib/builtins/lengthof\";\n    BuiltinNames.select = \"~lib/builtins/select\";\n    BuiltinNames.unreachable = \"~lib/builtins/unreachable\";\n    BuiltinNames.changetype = \"~lib/builtins/changetype\";\n    BuiltinNames.assert = \"~lib/builtins/assert\";\n    BuiltinNames.call_indirect = \"~lib/builtins/call_indirect\";\n    BuiltinNames.unchecked = \"~lib/builtins/unchecked\";\n    BuiltinNames.instantiate = \"~lib/builtins/instantiate\";\n    BuiltinNames.idof = \"~lib/builtins/idof\";\n    BuiltinNames.i8 = \"~lib/builtins/i8\";\n    BuiltinNames.i16 = \"~lib/builtins/i16\";\n    BuiltinNames.i32 = \"~lib/builtins/i32\";\n    BuiltinNames.i64 = \"~lib/builtins/i64\";\n    BuiltinNames.isize = \"~lib/builtins/isize\";\n    BuiltinNames.u8 = \"~lib/builtins/u8\";\n    BuiltinNames.u16 = \"~lib/builtins/u16\";\n    BuiltinNames.u32 = \"~lib/builtins/u32\";\n    BuiltinNames.u64 = \"~lib/builtins/u64\";\n    BuiltinNames.usize = \"~lib/builtins/usize\";\n    BuiltinNames.bool = \"~lib/builtins/bool\";\n    BuiltinNames.f32 = \"~lib/builtins/f32\";\n    BuiltinNames.f64 = \"~lib/builtins/f64\";\n    BuiltinNames.v128 = \"~lib/builtins/v128\";\n    BuiltinNames.i32_clz = \"~lib/builtins/i32.clz\";\n    BuiltinNames.i64_clz = \"~lib/builtins/i64.clz\";\n    BuiltinNames.i32_ctz = \"~lib/builtins/i32.ctz\";\n    BuiltinNames.i64_ctz = \"~lib/builtins/i64.ctz\";\n    BuiltinNames.i32_popcnt = \"~lib/builtins/i32.popcnt\";\n    BuiltinNames.i64_popcnt = \"~lib/builtins/i64.popcnt\";\n    BuiltinNames.i32_rotl = \"~lib/builtins/i32.rotl\";\n    BuiltinNames.i64_rotl = \"~lib/builtins/i64.rotl\";\n    BuiltinNames.i32_rotr = \"~lib/builtins/i32.rotr\";\n    BuiltinNames.i64_rotr = \"~lib/builtins/i64.rotr\";\n    BuiltinNames.f32_abs = \"~lib/builtins/f32.abs\";\n    BuiltinNames.f64_abs = \"~lib/builtins/f64.abs\";\n    BuiltinNames.f32_max = \"~lib/builtins/f32.max\";\n    BuiltinNames.f64_max = \"~lib/builtins/f64.max\";\n    BuiltinNames.f32_min = \"~lib/builtins/f32.min\";\n    BuiltinNames.f64_min = \"~lib/builtins/f64.min\";\n    BuiltinNames.f32_ceil = \"~lib/builtins/f32.ceil\";\n    BuiltinNames.f64_ceil = \"~lib/builtins/f64.ceil\";\n    BuiltinNames.f32_floor = \"~lib/builtins/f32.floor\";\n    BuiltinNames.f64_floor = \"~lib/builtins/f64.floor\";\n    BuiltinNames.f32_copysign = \"~lib/builtins/f32.copysign\";\n    BuiltinNames.f64_copysign = \"~lib/builtins/f64.copysign\";\n    BuiltinNames.f32_nearest = \"~lib/builtins/f32.nearest\";\n    BuiltinNames.f64_nearest = \"~lib/builtins/f64.nearest\";\n    BuiltinNames.i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n    BuiltinNames.i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n    BuiltinNames.f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n    BuiltinNames.f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n    BuiltinNames.f32_sqrt = \"~lib/builtins/f32.sqrt\";\n    BuiltinNames.f64_sqrt = \"~lib/builtins/f64.sqrt\";\n    BuiltinNames.f32_trunc = \"~lib/builtins/f32.trunc\";\n    BuiltinNames.f64_trunc = \"~lib/builtins/f64.trunc\";\n    BuiltinNames.i32_add = \"~lib/builtins/i32.add\";\n    BuiltinNames.i64_add = \"~lib/builtins/i64.add\";\n    BuiltinNames.f32_add = \"~lib/builtins/f32.add\";\n    BuiltinNames.f64_add = \"~lib/builtins/f64.add\";\n    BuiltinNames.i32_sub = \"~lib/builtins/i32.sub\";\n    BuiltinNames.i64_sub = \"~lib/builtins/i64.sub\";\n    BuiltinNames.f32_sub = \"~lib/builtins/f32.sub\";\n    BuiltinNames.f64_sub = \"~lib/builtins/f64.sub\";\n    BuiltinNames.i32_mul = \"~lib/builtins/i32.mul\";\n    BuiltinNames.i64_mul = \"~lib/builtins/i64.mul\";\n    BuiltinNames.f32_mul = \"~lib/builtins/f32.mul\";\n    BuiltinNames.f64_mul = \"~lib/builtins/f64.mul\";\n    BuiltinNames.i32_div_s = \"~lib/builtins/i32.div_s\";\n    BuiltinNames.i32_div_u = \"~lib/builtins/i32.div_u\";\n    BuiltinNames.i64_div_s = \"~lib/builtins/i64.div_s\";\n    BuiltinNames.i64_div_u = \"~lib/builtins/i64.div_u\";\n    BuiltinNames.f32_div = \"~lib/builtins/f32.div\";\n    BuiltinNames.f64_div = \"~lib/builtins/f64.div\";\n    BuiltinNames.i32_load8_s = \"~lib/builtins/i32.load8_s\";\n    BuiltinNames.i32_load8_u = \"~lib/builtins/i32.load8_u\";\n    BuiltinNames.i32_load16_s = \"~lib/builtins/i32.load16_s\";\n    BuiltinNames.i32_load16_u = \"~lib/builtins/i32.load16_u\";\n    BuiltinNames.i32_load = \"~lib/builtins/i32.load\";\n    BuiltinNames.i64_load8_s = \"~lib/builtins/i64.load8_s\";\n    BuiltinNames.i64_load8_u = \"~lib/builtins/i64.load8_u\";\n    BuiltinNames.i64_load16_s = \"~lib/builtins/i64.load16_s\";\n    BuiltinNames.i64_load16_u = \"~lib/builtins/i64.load16_u\";\n    BuiltinNames.i64_load32_s = \"~lib/builtins/i64.load32_s\";\n    BuiltinNames.i64_load32_u = \"~lib/builtins/i64.load32_u\";\n    BuiltinNames.i64_load = \"~lib/builtins/i64.load\";\n    BuiltinNames.f32_load = \"~lib/builtins/f32.load\";\n    BuiltinNames.f64_load = \"~lib/builtins/f64.load\";\n    BuiltinNames.i32_store8 = \"~lib/builtins/i32.store8\";\n    BuiltinNames.i32_store16 = \"~lib/builtins/i32.store16\";\n    BuiltinNames.i32_store = \"~lib/builtins/i32.store\";\n    BuiltinNames.i64_store8 = \"~lib/builtins/i64.store8\";\n    BuiltinNames.i64_store16 = \"~lib/builtins/i64.store16\";\n    BuiltinNames.i64_store32 = \"~lib/builtins/i64.store32\";\n    BuiltinNames.i64_store = \"~lib/builtins/i64.store\";\n    BuiltinNames.f32_store = \"~lib/builtins/f32.store\";\n    BuiltinNames.f64_store = \"~lib/builtins/f64.store\";\n    BuiltinNames.i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n    BuiltinNames.i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n    BuiltinNames.i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n    BuiltinNames.i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n    BuiltinNames.i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n    BuiltinNames.i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n    BuiltinNames.i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n    BuiltinNames.i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n    BuiltinNames.i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n    BuiltinNames.i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n    BuiltinNames.i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n    BuiltinNames.i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n    BuiltinNames.i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n    BuiltinNames.i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n    BuiltinNames.i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n    BuiltinNames.i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n    BuiltinNames.i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n    BuiltinNames.i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n    BuiltinNames.i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n    BuiltinNames.i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n    BuiltinNames.i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n    BuiltinNames.i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n    BuiltinNames.i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n    BuiltinNames.i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n    BuiltinNames.i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n    BuiltinNames.i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n    BuiltinNames.i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n    BuiltinNames.i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n    BuiltinNames.i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n    BuiltinNames.i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n    BuiltinNames.i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n    BuiltinNames.i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n    BuiltinNames.i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n    BuiltinNames.i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n    BuiltinNames.i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n    BuiltinNames.i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n    BuiltinNames.i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n    BuiltinNames.i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n    BuiltinNames.i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n    BuiltinNames.i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n    BuiltinNames.i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n    BuiltinNames.i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n    BuiltinNames.i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n    BuiltinNames.i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n    BuiltinNames.i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n    BuiltinNames.i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n    BuiltinNames.i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n    BuiltinNames.i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n    BuiltinNames.i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n    BuiltinNames.i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n    BuiltinNames.i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n    BuiltinNames.i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n    BuiltinNames.i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n    BuiltinNames.i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n    BuiltinNames.i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n    BuiltinNames.i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n    BuiltinNames.i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n    BuiltinNames.i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n    BuiltinNames.i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n    BuiltinNames.i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n    BuiltinNames.i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n    BuiltinNames.i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n    BuiltinNames.i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n    BuiltinNames.i32_wait = \"~lib/builtins/i32.wait\";\n    BuiltinNames.i64_wait = \"~lib/builtins/i64.wait\";\n    BuiltinNames.v128_splat = \"~lib/builtins/v128.splat\";\n    BuiltinNames.v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n    BuiltinNames.v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n    BuiltinNames.v128_shuffle = \"~lib/builtins/v128.shuffle\";\n    BuiltinNames.v128_swizzle = \"~lib/builtins/v128.swizzle\";\n    BuiltinNames.v128_load_splat = \"~lib/builtins/v128.load_splat\";\n    BuiltinNames.v128_load_ext = \"~lib/builtins/v128.load_ext\";\n    BuiltinNames.v128_load = \"~lib/builtins/v128.load\";\n    BuiltinNames.v128_store = \"~lib/builtins/v128.store\";\n    BuiltinNames.v128_add = \"~lib/builtins/v128.add\";\n    BuiltinNames.v128_sub = \"~lib/builtins/v128.sub\";\n    BuiltinNames.v128_mul = \"~lib/builtins/v128.mul\";\n    BuiltinNames.v128_div = \"~lib/builtins/v128.div\";\n    BuiltinNames.v128_neg = \"~lib/builtins/v128.neg\";\n    BuiltinNames.v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n    BuiltinNames.v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n    BuiltinNames.v128_shl = \"~lib/builtins/v128.shl\";\n    BuiltinNames.v128_shr = \"~lib/builtins/v128.shr\";\n    BuiltinNames.v128_and = \"~lib/builtins/v128.and\";\n    BuiltinNames.v128_or = \"~lib/builtins/v128.or\";\n    BuiltinNames.v128_xor = \"~lib/builtins/v128.xor\";\n    BuiltinNames.v128_andnot = \"~lib/builtins/v128.andnot\";\n    BuiltinNames.v128_not = \"~lib/builtins/v128.not\";\n    BuiltinNames.v128_bitselect = \"~lib/builtins/v128.bitselect\";\n    BuiltinNames.v128_any_true = \"~lib/builtins/v128.any_true\";\n    BuiltinNames.v128_all_true = \"~lib/builtins/v128.all_true\";\n    BuiltinNames.v128_bitmask = \"~lib/builtins/v128.bitmask\";\n    BuiltinNames.v128_min = \"~lib/builtins/v128.min\";\n    BuiltinNames.v128_max = \"~lib/builtins/v128.max\";\n    BuiltinNames.v128_pmin = \"~lib/builtins/v128.pmin\";\n    BuiltinNames.v128_pmax = \"~lib/builtins/v128.pmax\";\n    BuiltinNames.v128_dot = \"~lib/builtins/v128.dot\";\n    BuiltinNames.v128_avgr = \"~lib/builtins/v128.avgr\";\n    BuiltinNames.v128_abs = \"~lib/builtins/v128.abs\";\n    BuiltinNames.v128_sqrt = \"~lib/builtins/v128.sqrt\";\n    BuiltinNames.v128_ceil = \"~lib/builtins/v128.ceil\";\n    BuiltinNames.v128_floor = \"~lib/builtins/v128.floor\";\n    BuiltinNames.v128_trunc = \"~lib/builtins/v128.trunc\";\n    BuiltinNames.v128_nearest = \"~lib/builtins/v128.nearest\";\n    BuiltinNames.v128_eq = \"~lib/builtins/v128.eq\";\n    BuiltinNames.v128_ne = \"~lib/builtins/v128.ne\";\n    BuiltinNames.v128_lt = \"~lib/builtins/v128.lt\";\n    BuiltinNames.v128_le = \"~lib/builtins/v128.le\";\n    BuiltinNames.v128_gt = \"~lib/builtins/v128.gt\";\n    BuiltinNames.v128_ge = \"~lib/builtins/v128.ge\";\n    BuiltinNames.v128_convert = \"~lib/builtins/v128.convert\";\n    BuiltinNames.v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n    BuiltinNames.v128_narrow = \"~lib/builtins/v128.narrow\";\n    BuiltinNames.v128_widen_low = \"~lib/builtins/v128.widen_low\";\n    BuiltinNames.v128_widen_high = \"~lib/builtins/v128.widen_high\";\n    BuiltinNames.v128_qfma = \"~lib/builtins/v128.qfma\";\n    BuiltinNames.v128_qfms = \"~lib/builtins/v128.qfms\";\n    BuiltinNames.i8x16 = \"~lib/builtins/i8x16\";\n    BuiltinNames.i16x8 = \"~lib/builtins/i16x8\";\n    BuiltinNames.i32x4 = \"~lib/builtins/i32x4\";\n    BuiltinNames.i64x2 = \"~lib/builtins/i64x2\";\n    BuiltinNames.f32x4 = \"~lib/builtins/f32x4\";\n    BuiltinNames.f64x2 = \"~lib/builtins/f64x2\";\n    BuiltinNames.i8x16_splat = \"~lib/builtins/i8x16.splat\";\n    BuiltinNames.i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n    BuiltinNames.i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n    BuiltinNames.i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n    BuiltinNames.i8x16_add = \"~lib/builtins/i8x16.add\";\n    BuiltinNames.i8x16_sub = \"~lib/builtins/i8x16.sub\";\n    BuiltinNames.i8x16_mul = \"~lib/builtins/i8x16.mul\";\n    BuiltinNames.i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n    BuiltinNames.i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n    BuiltinNames.i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n    BuiltinNames.i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n    BuiltinNames.i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n    BuiltinNames.i8x16_abs = \"~lib/builtins/i8x16.abs\";\n    BuiltinNames.i8x16_neg = \"~lib/builtins/i8x16.neg\";\n    BuiltinNames.i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n    BuiltinNames.i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n    BuiltinNames.i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n    BuiltinNames.i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n    BuiltinNames.i8x16_shl = \"~lib/builtins/i8x16.shl\";\n    BuiltinNames.i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n    BuiltinNames.i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n    BuiltinNames.i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n    BuiltinNames.i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n    BuiltinNames.i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n    BuiltinNames.i8x16_eq = \"~lib/builtins/i8x16.eq\";\n    BuiltinNames.i8x16_ne = \"~lib/builtins/i8x16.ne\";\n    BuiltinNames.i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n    BuiltinNames.i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n    BuiltinNames.i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n    BuiltinNames.i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n    BuiltinNames.i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n    BuiltinNames.i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n    BuiltinNames.i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n    BuiltinNames.i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n    BuiltinNames.i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n    BuiltinNames.i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n    BuiltinNames.i16x8_splat = \"~lib/builtins/i16x8.splat\";\n    BuiltinNames.i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n    BuiltinNames.i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n    BuiltinNames.i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n    BuiltinNames.i16x8_add = \"~lib/builtins/i16x8.add\";\n    BuiltinNames.i16x8_sub = \"~lib/builtins/i16x8.sub\";\n    BuiltinNames.i16x8_mul = \"~lib/builtins/i16x8.mul\";\n    BuiltinNames.i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n    BuiltinNames.i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n    BuiltinNames.i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n    BuiltinNames.i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n    BuiltinNames.i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n    BuiltinNames.i16x8_abs = \"~lib/builtins/i16x8.abs\";\n    BuiltinNames.i16x8_neg = \"~lib/builtins/i16x8.neg\";\n    BuiltinNames.i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n    BuiltinNames.i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n    BuiltinNames.i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n    BuiltinNames.i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n    BuiltinNames.i16x8_shl = \"~lib/builtins/i16x8.shl\";\n    BuiltinNames.i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n    BuiltinNames.i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n    BuiltinNames.i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n    BuiltinNames.i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n    BuiltinNames.i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n    BuiltinNames.i16x8_eq = \"~lib/builtins/i16x8.eq\";\n    BuiltinNames.i16x8_ne = \"~lib/builtins/i16x8.ne\";\n    BuiltinNames.i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n    BuiltinNames.i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n    BuiltinNames.i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n    BuiltinNames.i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n    BuiltinNames.i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n    BuiltinNames.i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n    BuiltinNames.i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n    BuiltinNames.i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n    BuiltinNames.i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n    BuiltinNames.i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n    BuiltinNames.i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n    BuiltinNames.i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n    BuiltinNames.i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n    BuiltinNames.i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n    BuiltinNames.i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n    BuiltinNames.i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n    BuiltinNames.i32x4_splat = \"~lib/builtins/i32x4.splat\";\n    BuiltinNames.i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n    BuiltinNames.i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n    BuiltinNames.i32x4_add = \"~lib/builtins/i32x4.add\";\n    BuiltinNames.i32x4_sub = \"~lib/builtins/i32x4.sub\";\n    BuiltinNames.i32x4_mul = \"~lib/builtins/i32x4.mul\";\n    BuiltinNames.i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n    BuiltinNames.i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n    BuiltinNames.i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n    BuiltinNames.i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n    BuiltinNames.i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n    BuiltinNames.i32x4_abs = \"~lib/builtins/i32x4.abs\";\n    BuiltinNames.i32x4_neg = \"~lib/builtins/i32x4.neg\";\n    BuiltinNames.i32x4_shl = \"~lib/builtins/i32x4.shl\";\n    BuiltinNames.i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n    BuiltinNames.i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n    BuiltinNames.i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n    BuiltinNames.i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n    BuiltinNames.i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n    BuiltinNames.i32x4_eq = \"~lib/builtins/i32x4.eq\";\n    BuiltinNames.i32x4_ne = \"~lib/builtins/i32x4.ne\";\n    BuiltinNames.i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n    BuiltinNames.i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n    BuiltinNames.i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n    BuiltinNames.i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n    BuiltinNames.i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n    BuiltinNames.i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n    BuiltinNames.i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n    BuiltinNames.i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n    BuiltinNames.i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n    BuiltinNames.i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n    BuiltinNames.i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n    BuiltinNames.i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n    BuiltinNames.i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n    BuiltinNames.i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n    BuiltinNames.i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n    BuiltinNames.i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n    BuiltinNames.i64x2_splat = \"~lib/builtins/i64x2.splat\";\n    BuiltinNames.i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n    BuiltinNames.i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n    BuiltinNames.i64x2_add = \"~lib/builtins/i64x2.add\";\n    BuiltinNames.i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n    BuiltinNames.i64x2_neg = \"~lib/builtins/i64x2.neg\";\n    BuiltinNames.i64x2_shl = \"~lib/builtins/i64x2.shl\";\n    BuiltinNames.i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n    BuiltinNames.i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n    BuiltinNames.i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n    BuiltinNames.i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n    BuiltinNames.i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n    BuiltinNames.i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n    BuiltinNames.i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n    BuiltinNames.i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n    BuiltinNames.f32x4_splat = \"~lib/builtins/f32x4.splat\";\n    BuiltinNames.f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n    BuiltinNames.f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n    BuiltinNames.f32x4_add = \"~lib/builtins/f32x4.add\";\n    BuiltinNames.f32x4_sub = \"~lib/builtins/f32x4.sub\";\n    BuiltinNames.f32x4_mul = \"~lib/builtins/f32x4.mul\";\n    BuiltinNames.f32x4_div = \"~lib/builtins/f32x4.div\";\n    BuiltinNames.f32x4_neg = \"~lib/builtins/f32x4.neg\";\n    BuiltinNames.f32x4_min = \"~lib/builtins/f32x4.min\";\n    BuiltinNames.f32x4_max = \"~lib/builtins/f32x4.max\";\n    BuiltinNames.f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n    BuiltinNames.f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n    BuiltinNames.f32x4_abs = \"~lib/builtins/f32x4.abs\";\n    BuiltinNames.f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n    BuiltinNames.f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n    BuiltinNames.f32x4_floor = \"~lib/builtins/f32x4.floor\";\n    BuiltinNames.f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n    BuiltinNames.f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n    BuiltinNames.f32x4_eq = \"~lib/builtins/f32x4.eq\";\n    BuiltinNames.f32x4_ne = \"~lib/builtins/f32x4.ne\";\n    BuiltinNames.f32x4_lt = \"~lib/builtins/f32x4.lt\";\n    BuiltinNames.f32x4_le = \"~lib/builtins/f32x4.le\";\n    BuiltinNames.f32x4_gt = \"~lib/builtins/f32x4.gt\";\n    BuiltinNames.f32x4_ge = \"~lib/builtins/f32x4.ge\";\n    BuiltinNames.f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n    BuiltinNames.f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n    BuiltinNames.f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n    BuiltinNames.f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n    BuiltinNames.f64x2_splat = \"~lib/builtins/f64x2.splat\";\n    BuiltinNames.f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n    BuiltinNames.f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n    BuiltinNames.f64x2_add = \"~lib/builtins/f64x2.add\";\n    BuiltinNames.f64x2_sub = \"~lib/builtins/f64x2.sub\";\n    BuiltinNames.f64x2_mul = \"~lib/builtins/f64x2.mul\";\n    BuiltinNames.f64x2_div = \"~lib/builtins/f64x2.div\";\n    BuiltinNames.f64x2_neg = \"~lib/builtins/f64x2.neg\";\n    BuiltinNames.f64x2_min = \"~lib/builtins/f64x2.min\";\n    BuiltinNames.f64x2_max = \"~lib/builtins/f64x2.max\";\n    BuiltinNames.f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n    BuiltinNames.f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n    BuiltinNames.f64x2_abs = \"~lib/builtins/f64x2.abs\";\n    BuiltinNames.f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n    BuiltinNames.f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n    BuiltinNames.f64x2_floor = \"~lib/builtins/f64x2.floor\";\n    BuiltinNames.f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n    BuiltinNames.f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n    BuiltinNames.f64x2_eq = \"~lib/builtins/f64x2.eq\";\n    BuiltinNames.f64x2_ne = \"~lib/builtins/f64x2.ne\";\n    BuiltinNames.f64x2_lt = \"~lib/builtins/f64x2.lt\";\n    BuiltinNames.f64x2_le = \"~lib/builtins/f64x2.le\";\n    BuiltinNames.f64x2_gt = \"~lib/builtins/f64x2.gt\";\n    BuiltinNames.f64x2_ge = \"~lib/builtins/f64x2.ge\";\n    BuiltinNames.f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n    BuiltinNames.f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n    BuiltinNames.f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n    BuiltinNames.f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n    BuiltinNames.v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n    BuiltinNames.v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n    BuiltinNames.v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n    BuiltinNames.v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n    BuiltinNames.v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n    BuiltinNames.v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n    // internals\n    BuiltinNames.data_end = \"~lib/memory/__data_end\";\n    BuiltinNames.stack_pointer = \"~lib/memory/__stack_pointer\";\n    BuiltinNames.heap_base = \"~lib/memory/__heap_base\";\n    BuiltinNames.rtti_base = \"~lib/rt/__rtti_base\";\n    BuiltinNames.visit_globals = \"~lib/rt/__visit_globals\";\n    BuiltinNames.visit_members = \"~lib/rt/__visit_members\";\n    BuiltinNames.tostack = \"~lib/rt/__tostack\";\n    // std/number.ts\n    BuiltinNames.isNaN = \"~lib/number/isNaN\";\n    BuiltinNames.isFinite = \"~lib/number/isFinite\";\n    // std/diagnostics.ts\n    BuiltinNames.ERROR = \"~lib/diagnostics/ERROR\";\n    BuiltinNames.WARNING = \"~lib/diagnostics/WARNING\";\n    BuiltinNames.INFO = \"~lib/diagnostics/INFO\";\n    // std/function.ts\n    BuiltinNames.Function = \"~lib/function/Function\";\n    // std/memory.ts\n    BuiltinNames.memory_size = \"~lib/memory/memory.size\";\n    BuiltinNames.memory_grow = \"~lib/memory/memory.grow\";\n    BuiltinNames.memory_copy = \"~lib/memory/memory.copy\";\n    BuiltinNames.memory_fill = \"~lib/memory/memory.fill\";\n    BuiltinNames.memory_data = \"~lib/memory/memory.data\";\n    // std/typedarray.ts\n    BuiltinNames.Int8Array = \"~lib/typedarray/Int8Array\";\n    BuiltinNames.Uint8Array = \"~lib/typedarray/Uint8Array\";\n    BuiltinNames.Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n    BuiltinNames.Int16Array = \"~lib/typedarray/Int16Array\";\n    BuiltinNames.Uint16Array = \"~lib/typedarray/Uint16Array\";\n    BuiltinNames.Int32Array = \"~lib/typedarray/Int32Array\";\n    BuiltinNames.Uint32Array = \"~lib/typedarray/Uint32Array\";\n    BuiltinNames.Int64Array = \"~lib/typedarray/Int64Array\";\n    BuiltinNames.Uint64Array = \"~lib/typedarray/Uint64Array\";\n    BuiltinNames.Float32Array = \"~lib/typedarray/Float32Array\";\n    BuiltinNames.Float64Array = \"~lib/typedarray/Float64Array\";\n    // std/bindings/wasi.ts\n    BuiltinNames.wasiAbort = \"~lib/wasi/index/abort\";\n    BuiltinNames.wasiTrace = \"~lib/wasi/index/trace\";\n    BuiltinNames.wasiSeed = \"~lib/wasi/index/seed\";\n})(BuiltinNames = exports.BuiltinNames || (exports.BuiltinNames = {}));\n/** Builtin compilation context. */\nclass BuiltinContext {\n    constructor(\n    /** Compiler reference. */\n    compiler, \n    /** Prototype being called. */\n    prototype, \n    /** Provided type arguments. */\n    typeArguments, \n    /** Provided operands. */\n    operands, \n    /** Provided this operand, if any. */\n    thisOperand, \n    /** Contextual type. */\n    contextualType, \n    /** Respective call expression. */\n    reportNode, \n    /** Whether originating from inline assembly. */\n    contextIsExact) {\n        this.compiler = compiler;\n        this.prototype = prototype;\n        this.typeArguments = typeArguments;\n        this.operands = operands;\n        this.thisOperand = thisOperand;\n        this.contextualType = contextualType;\n        this.reportNode = reportNode;\n        this.contextIsExact = contextIsExact;\n    }\n}\nexports.BuiltinContext = BuiltinContext;\n/** Global builtins map. */\nexports.builtins = new Map();\n/** Function builtins map. */\nexports.function_builtins = new Map();\n// === Static type evaluation =================================================================\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isIntegerValue ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isInteger, builtin_isInteger);\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isFloatValue ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isFloat, builtin_isFloat);\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isBooleanValue ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isSigned, builtin_isSigned);\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isReference ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isReference, builtin_isReference);\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    var classReference = type.getClass();\n    return module.i32(classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n        ? 1\n        : 0);\n}\nexports.builtins.set(BuiltinNames.isString, builtin_isString);\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    var classReference = type.getClass();\n    return module.i32(classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n        ? 1\n        : 0);\n}\nexports.builtins.set(BuiltinNames.isArray, builtin_isArray);\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    var classReference = type.getClass();\n    return module.i32(classReference !== null && classReference.isArrayLike\n        ? 1\n        : 0);\n}\nexports.builtins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isFunction ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isFunction, builtin_isFunction);\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isNullableReference ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isNullable, builtin_isNullable);\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.bool;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var element = compiler.resolver.lookupExpression(ctx.operands[0], compiler.currentFlow, types_1.Type.auto, resolver_1.ReportMode.SWALLOW);\n    return module.i32(element !== null ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isDefined, builtin_isDefined);\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.bool;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var expr = compiler.compileExpression(ctx.operands[0], types_1.Type.auto);\n    compiler.currentType = types_1.Type.bool;\n    return module.i32(module_1.getExpressionId(expr) == module_1.ExpressionId.Const ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isConstant, builtin_isConstant);\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.isManaged ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isManaged, builtin_isManaged);\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.bool;\n    if (!type)\n        return module.unreachable();\n    return module.i32(type.kind == 18 /* VOID */ ? 1 : 0);\n}\nexports.builtins.set(BuiltinNames.isVoid, builtin_isVoid);\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.i32;\n    if (!type)\n        return module.unreachable();\n    var signatureReference = type.signatureReference;\n    if (!signatureReference) {\n        compiler.error(diagnostics_1.DiagnosticCode.Type_0_has_no_call_signatures, ctx.reportNode.range, type.toString());\n        return module.unreachable();\n    }\n    return module.i32(signatureReference.parameterTypes.length);\n}\nexports.builtins.set(BuiltinNames.lengthof, builtin_lengthof);\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = compiler.options.usizeType;\n    if (checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 0))\n        return module.unreachable();\n    var type = ctx.typeArguments[0];\n    var byteSize = type.byteSize;\n    if (!byteSize) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString());\n        return module.unreachable();\n    }\n    return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nexports.builtins.set(BuiltinNames.sizeof, builtin_sizeof);\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = compiler.options.usizeType;\n    if (checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 0))\n        return module.unreachable();\n    var type = ctx.typeArguments[0];\n    var byteSize = type.byteSize;\n    if (!util_1.isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString());\n        return module.unreachable();\n    }\n    return contextualUsize(compiler, i64_new(ctz(byteSize)), ctx.contextualType);\n}\nexports.builtins.set(BuiltinNames.alignof, builtin_alignof);\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = compiler.options.usizeType;\n    if (checkTypeRequired(ctx) |\n        checkArgsOptional(ctx, 0, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var contextualType = ctx.contextualType;\n    var type = ctx.typeArguments[0];\n    var classReference = type.getClassOrWrapper(compiler.program);\n    if (!classReference) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString());\n        if (compiler.options.isWasm64) {\n            if (contextualType.isIntegerValue && contextualType.size <= 32) {\n                compiler.currentType = types_1.Type.u32;\n            }\n        }\n        else {\n            if (contextualType.isIntegerValue && contextualType.size == 64) {\n                compiler.currentType = types_1.Type.u64;\n            }\n        }\n        return module.unreachable();\n    }\n    if (operands.length) {\n        let firstOperand = operands[0];\n        if (!firstOperand.isLiteralKind(ast_1.LiteralKind.STRING)) {\n            compiler.error(diagnostics_1.DiagnosticCode.String_literal_expected, operands[0].range);\n            return module.unreachable();\n        }\n        let fieldName = firstOperand.value;\n        let classMembers = classReference.members;\n        if (classMembers !== null && classMembers.has(fieldName)) {\n            let member = assert(classMembers.get(fieldName));\n            if (member.kind == program_1.ElementKind.FIELD) {\n                return contextualUsize(compiler, i64_new(member.memoryOffset), contextualType);\n            }\n        }\n        compiler.error(diagnostics_1.DiagnosticCode.Type_0_has_no_property_1, firstOperand.range, classReference.internalName, fieldName);\n        return module.unreachable();\n    }\n    return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nexports.builtins.set(BuiltinNames.offsetof, builtin_offsetof);\n// nameof<T> -> string\nfunction builtin_nameof(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var resultType = evaluateConstantType(ctx);\n    if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n    }\n    var value;\n    if (resultType.isInternalReference) {\n        let classReference = resultType.getClass();\n        if (classReference) {\n            value = classReference.name;\n        }\n        else {\n            assert(resultType.getSignature());\n            value = \"Function\";\n        }\n    }\n    else {\n        value = resultType.toString();\n    }\n    return compiler.ensureStaticString(value);\n}\nexports.builtins.set(BuiltinNames.nameof, builtin_nameof);\n// idof<T> -> u32\nfunction builtin_idof(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var type = evaluateConstantType(ctx);\n    compiler.currentType = types_1.Type.u32;\n    if (!type)\n        return module.unreachable();\n    let signatureReference = type.getSignature();\n    if (signatureReference) {\n        return module.i32(signatureReference.id);\n    }\n    let classReference = type.getClassOrWrapper(compiler.program);\n    if (classReference !== null && !classReference.hasDecorator(program_1.DecoratorFlags.UNMANAGED)) {\n        return module.i32(classReference.id);\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"idof\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.idof, builtin_idof);\n// === Math ===================================================================================\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(ctx.operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(ctx.operands[0], types_1.Type.i32, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 10 /* BOOL */: // not wrapped\n            case 0 /* I8 */:\n            case 5 /* U8 */:\n            case 1 /* I16 */:\n            case 6 /* U16 */:\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.ClzI32, arg0);\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.ClzI64\n                    : module_1.UnaryOp.ClzI32, arg0);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.ClzI64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"clz\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.clz, builtin_clz);\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.i32, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 10 /* BOOL */: // not wrapped\n            case 0 /* I8 */:\n            case 5 /* U8 */:\n            case 1 /* I16 */:\n            case 6 /* U16 */:\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.CtzI32, arg0);\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.CtzI64\n                    : module_1.UnaryOp.CtzI32, arg0);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.CtzI64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.ctz, builtin_ctz);\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.i32, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (compiler.currentType.kind) {\n            case 10 /* BOOL */: return arg0;\n            case 0 /* I8 */: // not wrapped\n            case 5 /* U8 */:\n            case 1 /* I16 */:\n            case 6 /* U16 */:\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.PopcntI32, arg0);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.PopcntI64, arg0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.PopcntI64\n                    : module_1.UnaryOp.PopcntI32, arg0);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.popcnt, builtin_popcnt);\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.i32, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        switch (type.kind) {\n            case 10 /* BOOL */: return arg0;\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */: {\n                // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n                let flow = compiler.currentFlow;\n                let temp1 = flow.getTempLocal(type, flow_1.findUsedLocals(arg1));\n                flow.setLocalFlag(temp1.index, flow_1.LocalFlags.WRAPPED);\n                let temp2 = flow.getTempLocal(type);\n                flow.setLocalFlag(temp2.index, flow_1.LocalFlags.WRAPPED);\n                let ret = module.binary(module_1.BinaryOp.OrI32, module.binary(module_1.BinaryOp.ShlI32, module.local_tee(temp1.index, arg0, false), // i32\n                module.binary(module_1.BinaryOp.AndI32, module.local_tee(temp2.index, arg1, false), // i32\n                module.i32(type.size - 1))), module.binary(module_1.BinaryOp.ShrU32, module.local_get(temp1.index, module_1.NativeType.I32), module.binary(module_1.BinaryOp.AndI32, module.binary(module_1.BinaryOp.SubI32, module.i32(0), module.local_get(temp2.index, module_1.NativeType.I32)), module.i32(type.size - 1))));\n                flow.freeTempLocal(temp2);\n                flow.freeTempLocal(temp1);\n                return ret;\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.RotlI32, arg0, arg1);\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(compiler.options.isWasm64\n                    ? module_1.BinaryOp.RotlI64\n                    : module_1.BinaryOp.RotlI32, arg0, arg1);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.binary(module_1.BinaryOp.RotlI64, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.rotl, builtin_rotl);\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.i32, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        switch (type.kind) {\n            case 10 /* BOOL */: return arg0;\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */: {\n                // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n                let flow = compiler.currentFlow;\n                let temp1 = flow.getTempLocal(type, flow_1.findUsedLocals(arg1));\n                flow.setLocalFlag(temp1.index, flow_1.LocalFlags.WRAPPED);\n                let temp2 = flow.getTempLocal(type);\n                flow.setLocalFlag(temp2.index, flow_1.LocalFlags.WRAPPED);\n                let ret = module.binary(module_1.BinaryOp.OrI32, module.binary(module_1.BinaryOp.ShrU32, module.local_tee(temp1.index, arg0, false), // i32\n                module.binary(module_1.BinaryOp.AndI32, module.local_tee(temp2.index, arg1, false), // i32\n                module.i32(type.size - 1))), module.binary(module_1.BinaryOp.ShlI32, module.local_get(temp1.index, module_1.NativeType.I32), module.binary(module_1.BinaryOp.AndI32, module.binary(module_1.BinaryOp.SubI32, module.i32(0), module.local_get(temp2.index, module_1.NativeType.I32)), module.i32(type.size - 1))));\n                flow.freeTempLocal(temp2);\n                flow.freeTempLocal(temp1);\n                return ret;\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.RotrI32, arg0, arg1);\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(compiler.options.isWasm64\n                    ? module_1.BinaryOp.RotrI64\n                    : module_1.BinaryOp.RotrI32, arg0, arg1);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.binary(module_1.BinaryOp.RotrI64, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.rotr, builtin_rotr);\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */: {\n                let flow = compiler.currentFlow;\n                // possibly overflows, e.g. abs<i8>(-128) == 128\n                let temp1 = flow.getTempLocal(types_1.Type.i32);\n                let temp2 = flow.getTempLocal(types_1.Type.i32);\n                // (x + (x >> 31)) ^ (x >> 31)\n                let ret = module.binary(module_1.BinaryOp.XorI32, module.binary(module_1.BinaryOp.AddI32, module.local_tee(temp2.index, module.binary(module_1.BinaryOp.ShrI32, module.local_tee(temp1.index, arg0, false), // i32\n                module.i32(31)), false // i32\n                ), module.local_get(temp1.index, module_1.NativeType.I32)), module.local_get(temp2.index, module_1.NativeType.I32));\n                flow.freeTempLocal(temp2);\n                flow.freeTempLocal(temp1);\n                return ret;\n            }\n            case 4 /* ISIZE */: {\n                let options = compiler.options;\n                let flow = compiler.currentFlow;\n                let isWasm64 = options.isWasm64;\n                let temp1 = flow.getTempLocal(options.usizeType);\n                let temp2 = flow.getTempLocal(options.usizeType);\n                let ret = module.binary(isWasm64 ? module_1.BinaryOp.XorI64 : module_1.BinaryOp.XorI32, module.binary(isWasm64 ? module_1.BinaryOp.AddI64 : module_1.BinaryOp.AddI32, module.local_tee(temp2.index, module.binary(isWasm64 ? module_1.BinaryOp.ShrI64 : module_1.BinaryOp.ShrI32, module.local_tee(temp1.index, arg0, false), // i32/i64\n                isWasm64 ? module.i64(63) : module.i32(31)), false // i32/i64\n                ), module.local_get(temp1.index, options.nativeSizeType)), module.local_get(temp2.index, options.nativeSizeType));\n                flow.freeTempLocal(temp2);\n                flow.freeTempLocal(temp1);\n                return ret;\n            }\n            case 3 /* I64 */: {\n                let flow = compiler.currentFlow;\n                let temp1 = flow.getTempLocal(types_1.Type.i64);\n                let temp2 = flow.getTempLocal(types_1.Type.i64);\n                // (x + (x >> 63)) ^ (x >> 63)\n                let ret = module.binary(module_1.BinaryOp.XorI64, module.binary(module_1.BinaryOp.AddI64, module.local_tee(temp2.index, module.binary(module_1.BinaryOp.ShrI64, module.local_tee(temp1.index, arg0, false), // i64\n                module.i64(63)), false // i64\n                ), module.local_get(temp1.index, module_1.NativeType.I64)), module.local_get(temp2.index, module_1.NativeType.I64));\n                flow.freeTempLocal(temp2);\n                flow.freeTempLocal(temp1);\n                return ret;\n            }\n            case 9 /* USIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 10 /* BOOL */: return arg0;\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.AbsF32, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.AbsF64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"abs\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.abs, builtin_abs);\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var left = operands[0];\n    var arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1;\n        if (!typeArguments && left.isNumericLiteral) { // prefer right type\n            arg1 = compiler.compileExpression(operands[1], type, 4 /* MUST_WRAP */);\n            if (compiler.currentType != type) {\n                arg0 = compiler.compileExpression(left, type = compiler.currentType, 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */);\n            }\n        }\n        else {\n            arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */);\n        }\n        let op = -1;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */: {\n                op = module_1.BinaryOp.GtI32;\n                break;\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: {\n                op = module_1.BinaryOp.GtU32;\n                break;\n            }\n            case 3 /* I64 */: {\n                op = module_1.BinaryOp.GtI64;\n                break;\n            }\n            case 8 /* U64 */: {\n                op = module_1.BinaryOp.GtU64;\n                break;\n            }\n            case 4 /* ISIZE */: {\n                op = compiler.options.isWasm64\n                    ? module_1.BinaryOp.GtI64\n                    : module_1.BinaryOp.GtI32;\n                break;\n            }\n            case 9 /* USIZE */: {\n                op = compiler.options.isWasm64\n                    ? module_1.BinaryOp.GtU64\n                    : module_1.BinaryOp.GtU32;\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.MaxF32, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n            let flow = compiler.currentFlow;\n            let nativeType = type.toNativeType();\n            let temp1 = flow.getTempLocal(type, flow_1.findUsedLocals(arg1));\n            flow.setLocalFlag(temp1.index, flow_1.LocalFlags.WRAPPED);\n            let temp2 = flow.getTempLocal(type);\n            flow.setLocalFlag(temp2.index, flow_1.LocalFlags.WRAPPED);\n            let ret = module.select(module.local_tee(temp1.index, arg0, false), // numeric\n            module.local_tee(temp2.index, arg1, false), // numeric\n            module.binary(op, module.local_get(temp1.index, nativeType), module.local_get(temp2.index, nativeType)));\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"max\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.max, builtin_max);\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var left = operands[0];\n    var arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1;\n        if (!typeArguments && left.isNumericLiteral) { // prefer right type\n            arg1 = compiler.compileExpression(operands[1], type, 4 /* MUST_WRAP */);\n            if (compiler.currentType != type) {\n                arg0 = compiler.compileExpression(left, type = compiler.currentType, 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */);\n            }\n        }\n        else {\n            arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */);\n        }\n        let op = -1;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */: {\n                op = module_1.BinaryOp.LtI32;\n                break;\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: {\n                op = module_1.BinaryOp.LtU32;\n                break;\n            }\n            case 3 /* I64 */: {\n                op = module_1.BinaryOp.LtI64;\n                break;\n            }\n            case 8 /* U64 */: {\n                op = module_1.BinaryOp.LtU64;\n                break;\n            }\n            case 4 /* ISIZE */: {\n                op = compiler.options.isWasm64\n                    ? module_1.BinaryOp.LtI64\n                    : module_1.BinaryOp.LtI32;\n                break;\n            }\n            case 9 /* USIZE */: {\n                op = compiler.options.isWasm64\n                    ? module_1.BinaryOp.LtU64\n                    : module_1.BinaryOp.LtU32;\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.MinF32, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n            let flow = compiler.currentFlow;\n            let nativeType = type.toNativeType();\n            let temp1 = flow.getTempLocal(type, flow_1.findUsedLocals(arg1));\n            flow.setLocalFlag(temp1.index, flow_1.LocalFlags.WRAPPED);\n            let temp2 = flow.getTempLocal(type);\n            flow.setLocalFlag(temp2.index, flow_1.LocalFlags.WRAPPED);\n            let ret = module.select(module.local_tee(temp1.index, arg0, false), // numeric\n            module.local_tee(temp2.index, arg1, false), // numeric\n            module.binary(op, module.local_get(temp1.index, nativeType), module.local_get(temp2.index, nativeType)));\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"min\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.min, builtin_min);\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 0 /* NONE */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */:\n            case 10 /* BOOL */: return arg0; // considered rounded\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.CeilF32, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.CeilF64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.ceil, builtin_ceil);\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 0 /* NONE */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */:\n            case 10 /* BOOL */: return arg0; // considered rounded\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.FloorF32, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.FloorF64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"floor\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.floor, builtin_floor);\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        switch (type.kind) {\n            // TODO: does an integer version make sense?\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.CopysignF32, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.CopysignF64, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.copysign, builtin_copysign);\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 0 /* NONE */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */:\n            case 10 /* BOOL */: return arg0;\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.NearestF32, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.NearestF64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.nearest, builtin_nearest);\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeRequired(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    if (type.isValue) {\n        switch (type.kind) {\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                let arg0 = compiler.compileExpression(operands[0], types_1.Type.f32, 1 /* CONV_IMPLICIT */);\n                compiler.currentType = type;\n                return module.unary(module_1.UnaryOp.ReinterpretF32, arg0);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                let arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 1 /* CONV_IMPLICIT */);\n                compiler.currentType = type;\n                return module.unary(module_1.UnaryOp.ReinterpretF64, arg0);\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                let arg0 = compiler.compileExpression(operands[0], compiler.options.isWasm64\n                    ? types_1.Type.f64\n                    : types_1.Type.f32, 1 /* CONV_IMPLICIT */);\n                compiler.currentType = type;\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.ReinterpretF64\n                    : module_1.UnaryOp.ReinterpretF32, arg0);\n            }\n            case 11 /* F32 */: {\n                let arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n                compiler.currentType = types_1.Type.f32;\n                return module.unary(module_1.UnaryOp.ReinterpretI32, arg0);\n            }\n            case 12 /* F64 */: {\n                let arg0 = compiler.compileExpression(operands[0], types_1.Type.i64, 1 /* CONV_IMPLICIT */);\n                compiler.currentType = types_1.Type.f64;\n                return module.unary(module_1.UnaryOp.ReinterpretI64, arg0);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            // TODO: integer versions (that return f64 or convert)?\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.SqrtF32, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.SqrtF64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.sqrt, builtin_sqrt);\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto, 0 /* NONE */);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */:\n            case 10 /* BOOL */: return arg0; // considered truncated\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.TruncF32, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.TruncF64, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.trunc, builtin_trunc);\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.bool;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    compiler.currentType = types_1.Type.bool;\n    if (type.isValue) {\n        switch (type.kind) {\n            // never NaN\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */: {\n                return module.maybeDropCondition(arg0, module.i32(0));\n            }\n            // (t = arg0) != t\n            case 11 /* F32 */: {\n                if (module_1.getExpressionId(arg0) == module_1.ExpressionId.LocalGet) {\n                    return module.binary(module_1.BinaryOp.NeF32, arg0, module.local_get(module_1.getLocalGetIndex(arg0), module_1.NativeType.F32));\n                }\n                let flow = compiler.currentFlow;\n                let temp = flow.getTempLocal(types_1.Type.f32);\n                let ret = module.binary(module_1.BinaryOp.NeF32, module.local_tee(temp.index, arg0, false), // f32\n                module.local_get(temp.index, module_1.NativeType.F32));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 12 /* F64 */: {\n                if (module_1.getExpressionId(arg0) == module_1.ExpressionId.LocalGet) {\n                    return module.binary(module_1.BinaryOp.NeF64, arg0, module.local_get(module_1.getLocalGetIndex(arg0), module_1.NativeType.F64));\n                }\n                let flow = compiler.currentFlow;\n                let temp = flow.getTempLocal(types_1.Type.f64);\n                let ret = module.binary(module_1.BinaryOp.NeF64, module.local_tee(temp.index, arg0, false), // f64\n                module.local_get(temp.index, module_1.NativeType.F64));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.isNaN, builtin_isNaN);\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.bool;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    compiler.currentType = types_1.Type.bool;\n    if (type.isValue) {\n        switch (type.kind) {\n            // always finite\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */: {\n                return module.maybeDropCondition(arg0, module.i32(1));\n            }\n            // (t = arg0) - t == 0\n            case 11 /* F32 */: {\n                if (module_1.getExpressionId(arg0) == module_1.ExpressionId.LocalGet) {\n                    return module.binary(module_1.BinaryOp.EqF32, module.binary(module_1.BinaryOp.SubF32, arg0, module.local_get(module_1.getLocalGetIndex(arg0), module_1.NativeType.F32)), module.f32(0));\n                }\n                let flow = compiler.currentFlow;\n                let temp = flow.getTempLocal(types_1.Type.f32);\n                let ret = module.binary(module_1.BinaryOp.EqF32, module.binary(module_1.BinaryOp.SubF32, module.local_tee(temp.index, arg0, false), // f32\n                module.local_get(temp.index, module_1.NativeType.F32)), module.f32(0));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 12 /* F64 */: {\n                if (module_1.getExpressionId(arg0) == module_1.ExpressionId.LocalGet) {\n                    return module.binary(module_1.BinaryOp.EqF64, module.binary(module_1.BinaryOp.SubF64, arg0, module.local_get(module_1.getLocalGetIndex(arg0), module_1.NativeType.F64)), module.f64(0));\n                }\n                let flow = compiler.currentFlow;\n                let temp = flow.getTempLocal(types_1.Type.f64);\n                let ret = module.binary(module_1.BinaryOp.EqF64, module.binary(module_1.BinaryOp.SubF64, module.local_tee(temp.index, arg0, false), // f64\n                module.local_get(temp.index, module_1.NativeType.F64)), module.f64(0));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.isFinite, builtin_isFinite);\n// === Memory access ==========================================================================\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeRequired(ctx, true) |\n        checkArgsOptional(ctx, 1, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var contextualType = ctx.contextualType;\n    var type = typeArguments[0];\n    var outType = (contextualType != types_1.Type.auto &&\n        type.isIntegerValue &&\n        contextualType.isIntegerValue &&\n        contextualType.size > type.size) ? contextualType : type;\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var numOperands = operands.length;\n    var immOffset = 0;\n    var immAlign = type.byteSize;\n    if (numOperands >= 2) {\n        immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n        if (immOffset < 0) {\n            compiler.currentType = outType;\n            return module.unreachable();\n        }\n        if (numOperands == 3) {\n            immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n            if (immAlign < 0) {\n                compiler.currentType = outType;\n                return module.unreachable();\n            }\n        }\n    }\n    compiler.currentType = outType;\n    return module.load(type.byteSize, type.isSignedIntegerValue, arg0, outType.toNativeType(), immOffset, immAlign);\n}\nexports.builtins.set(BuiltinNames.load, builtin_load);\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.void;\n    if (checkTypeRequired(ctx) |\n        checkArgsOptional(ctx, 2, 4))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var numOperands = operands.length;\n    var typeArguments = ctx.typeArguments;\n    var contextualType = ctx.contextualType;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = ctx.contextIsExact\n        ? compiler.compileExpression(operands[1], contextualType, 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[1], type, type.isIntegerValue\n            ? 0 /* NONE */\n            : 1 /* CONV_IMPLICIT */);\n    var inType = compiler.currentType;\n    if (type.isIntegerValue &&\n        (!inType.isIntegerValue || // float to int\n            inType.size < type.size // int to larger int (clear garbage bits)\n        )) {\n        // either conversion or memory operation clears garbage bits\n        arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n        inType = type;\n    }\n    var immOffset = 0;\n    var immAlign = type.byteSize;\n    if (numOperands >= 3) {\n        immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n        if (immOffset < 0) {\n            compiler.currentType = types_1.Type.void;\n            return module.unreachable();\n        }\n        if (numOperands == 4) {\n            immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n            if (immAlign < 0) {\n                compiler.currentType = types_1.Type.void;\n                return module.unreachable();\n            }\n        }\n    }\n    compiler.currentType = types_1.Type.void;\n    return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nexports.builtins.set(BuiltinNames.store, builtin_store);\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var left = operands[0];\n    var arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1;\n        if (!typeArguments && left.isNumericLiteral) {\n            // prefer right type\n            arg1 = compiler.compileExpression(operands[1], type);\n            if (compiler.currentType != type) {\n                arg0 = compiler.compileExpression(left, (type = compiler.currentType), 1 /* CONV_IMPLICIT */);\n            }\n        }\n        else {\n            arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        }\n        if (type.isNumericValue) {\n            return compiler.makeAdd(arg0, arg1, type);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"add\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.add, builtin_add);\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var left = operands[0];\n    var arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1;\n        if (!typeArguments && left.isNumericLiteral) {\n            // prefer right type\n            arg1 = compiler.compileExpression(operands[1], type);\n            if (compiler.currentType != type) {\n                arg0 = compiler.compileExpression(left, (type = compiler.currentType), 1 /* CONV_IMPLICIT */);\n            }\n        }\n        else {\n            arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        }\n        if (type.isNumericValue) {\n            return compiler.makeSub(arg0, arg1, type);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"sub\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.sub, builtin_sub);\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var left = operands[0];\n    var arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1;\n        if (!typeArguments && left.isNumericLiteral) {\n            // prefer right type\n            arg1 = compiler.compileExpression(operands[1], type);\n            if (compiler.currentType != type) {\n                arg0 = compiler.compileExpression(left, (type = compiler.currentType), 1 /* CONV_IMPLICIT */);\n            }\n        }\n        else {\n            arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        }\n        if (type.isNumericValue) {\n            return compiler.makeMul(arg0, arg1, type);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"mul\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.mul, builtin_mul);\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var left = operands[0];\n    var arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    if (type.isValue) {\n        let arg1;\n        if (!typeArguments && left.isNumericLiteral) {\n            // prefer right type\n            arg1 = compiler.compileExpression(operands[1], type);\n            if (compiler.currentType != type) {\n                arg0 = compiler.compileExpression(left, (type = compiler.currentType), 1 /* CONV_IMPLICIT */);\n            }\n        }\n        else {\n            arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n        }\n        if (type.isNumericValue) {\n            return compiler.makeDiv(arg0, arg1, type);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"div\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.div, builtin_div);\n// === Atomics ================================================================================\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeRequired(ctx, true) |\n        checkArgsOptional(ctx, 1, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var contextualType = ctx.contextualType;\n    var type = typeArguments[0];\n    var outType = (type.isIntegerValue &&\n        contextualType.isIntegerValue &&\n        contextualType.size > type.size) ? contextualType : type;\n    if (!type.isIntegerValue) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString());\n        compiler.currentType = outType;\n        return module.unreachable();\n    }\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n    if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n    }\n    compiler.currentType = outType;\n    return module.atomic_load(type.byteSize, arg0, outType.toNativeType(), immOffset);\n}\nexports.builtins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeRequired(ctx) |\n        checkArgsOptional(ctx, 2, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var contextualType = ctx.contextualType;\n    var type = typeArguments[0];\n    if (!type.isIntegerValue) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString());\n        compiler.currentType = types_1.Type.void;\n        return module.unreachable();\n    }\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = ctx.contextIsExact\n        ? compiler.compileExpression(operands[1], contextualType, 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[1], type, type.isIntegerValue\n            ? 0 /* NONE */\n            : 1 /* CONV_IMPLICIT */);\n    var inType = compiler.currentType;\n    if (type.isIntegerValue &&\n        (!inType.isIntegerValue || // float to int\n            inType.size < type.size // int to larger int (clear garbage bits)\n        )) {\n        // either conversion or memory operation clears garbage bits\n        arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n        inType = type;\n    }\n    var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n    if (immOffset < 0) {\n        compiler.currentType = types_1.Type.void;\n        return module.unreachable();\n    }\n    compiler.currentType = types_1.Type.void;\n    return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nexports.builtins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx, op, opName) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeRequired(ctx, true) |\n        checkArgsOptional(ctx, 2, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var contextualType = ctx.contextualType;\n    var type = typeArguments[0];\n    if (!type.isIntegerValue || type.size < 8) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, opName, type.toString());\n        return module.unreachable();\n    }\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = ctx.contextIsExact\n        ? compiler.compileExpression(operands[1], contextualType, 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[1], type, type.isIntegerValue\n            ? 0 /* NONE */\n            : 1 /* CONV_IMPLICIT */);\n    var inType = compiler.currentType;\n    if (type.isIntegerValue &&\n        (!inType.isIntegerValue || // float to int\n            inType.size < type.size // int to larger int (clear garbage bits)\n        )) {\n        // either conversion or memory operation clears garbage bits\n        arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n        inType = type;\n    }\n    var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n    if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n    }\n    compiler.currentType = inType;\n    return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx) {\n    return builtin_atomic_binary(ctx, module_1.AtomicRMWOp.Add, \"atomic.add\");\n}\nexports.builtins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx) {\n    return builtin_atomic_binary(ctx, module_1.AtomicRMWOp.Sub, \"atomic.sub\");\n}\nexports.builtins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx) {\n    return builtin_atomic_binary(ctx, module_1.AtomicRMWOp.And, \"atomic.and\");\n}\nexports.builtins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx) {\n    return builtin_atomic_binary(ctx, module_1.AtomicRMWOp.Or, \"atomic.or\");\n}\nexports.builtins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx) {\n    return builtin_atomic_binary(ctx, module_1.AtomicRMWOp.Xor, \"atomic.xor\");\n}\nexports.builtins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx) {\n    return builtin_atomic_binary(ctx, module_1.AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nexports.builtins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeRequired(ctx, true) |\n        checkArgsOptional(ctx, 3, 4))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var contextualType = ctx.contextualType;\n    var type = typeArguments[0];\n    if (!type.isIntegerValue || type.size < 8) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString());\n        return module.unreachable();\n    }\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = ctx.contextIsExact\n        ? compiler.compileExpression(operands[1], contextualType, 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[1], type, type.isIntegerValue\n            ? 0 /* NONE */\n            : 1 /* CONV_IMPLICIT */);\n    var inType = compiler.currentType;\n    var arg2 = compiler.compileExpression(operands[2], inType, 1 /* CONV_IMPLICIT */);\n    if (type.isIntegerValue &&\n        (!inType.isIntegerValue || // float to int\n            inType.size < type.size // int to larger int (clear garbage bits)\n        )) {\n        // either conversion or memory operation clears garbage bits\n        arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n        arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n        inType = type;\n    }\n    var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n    if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n    }\n    compiler.currentType = inType;\n    return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nexports.builtins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 3)) {\n        compiler.currentType = types_1.Type.i32;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], types_1.Type.i64, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.i32;\n    switch (type.kind) {\n        case 2 /* I32 */:\n        case 3 /* I64 */:\n        case 4 /* ISIZE */:\n        case 7 /* U32 */:\n        case 8 /* U64 */:\n        case 9 /* USIZE */: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.i32;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.i32;\n    return module.atomic_notify(arg0, arg1);\n}\nexports.builtins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.void;\n    if (checkFeatureEnabled(ctx, 32 /* THREADS */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 0))\n        return module.unreachable();\n    return module.atomic_fence();\n}\nexports.builtins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n// === Control flow ===========================================================================\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsRequired(ctx, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */)\n        : compiler.compileExpression(operands[0], types_1.Type.auto);\n    var type = compiler.currentType;\n    if (!type.isAny(128 /* VALUE */ | 256 /* REFERENCE */)) {\n        compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"select\", type.toString());\n        return module.unreachable();\n    }\n    var arg1 = compiler.compileExpression(operands[1], type, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.makeIsTrueish(compiler.compileExpression(operands[2], types_1.Type.bool), compiler.currentType, // ^\n    operands[2]);\n    compiler.currentType = type;\n    return module.select(arg0, arg1, arg2);\n}\nexports.builtins.set(BuiltinNames.select, builtin_select);\n// unreachable() -> *\nfunction builtin_unreachable(ctx) {\n    checkTypeAbsent(ctx);\n    checkArgsRequired(ctx, 0);\n    return ctx.compiler.module.unreachable();\n}\nexports.builtins.set(BuiltinNames.unreachable, builtin_unreachable);\n// === Memory =================================================================================\n// memory.size() -> i32\nfunction builtin_memory_size(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.i32;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 0))\n        return module.unreachable();\n    return module.memory_size();\n}\nexports.builtins.set(BuiltinNames.memory_size, builtin_memory_size);\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.i32;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    return module.memory_grow(compiler.compileExpression(ctx.operands[0], types_1.Type.i32, 1 /* CONV_IMPLICIT */));\n}\nexports.builtins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.void;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    if (!compiler.options.hasFeature(8 /* BULK_MEMORY */)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n        compiler.currentType = types_1.Type.void;\n        if (!instance || !compiler.compileFunction(instance, true))\n            return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n    }\n    var usizeType = compiler.options.usizeType;\n    var arg0 = compiler.compileExpression(operands[0], usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], usizeType, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], usizeType, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.void;\n    return module.memory_copy(arg0, arg1, arg2);\n}\nexports.builtins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.void;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    if (!compiler.options.hasFeature(8 /* BULK_MEMORY */)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n        compiler.currentType = types_1.Type.void;\n        if (!instance || !compiler.compileFunction(instance, true))\n            return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n    }\n    var usizeType = compiler.options.usizeType;\n    var arg0 = compiler.compileExpression(operands[0], usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.u8, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], usizeType, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.void;\n    return module.memory_fill(arg0, arg1, arg2);\n}\nexports.builtins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    compiler.currentType = types_1.Type.i32;\n    if (checkTypeOptional(ctx) |\n        checkArgsOptional(ctx, 1, 2))\n        return module.unreachable();\n    var typeArguments = ctx.typeArguments;\n    var operands = ctx.operands;\n    var numOperands = operands.length;\n    var usizeType = compiler.options.usizeType;\n    var offset;\n    if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n        let elementType = typeArguments[0];\n        if (!elementType.isValue) {\n            compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString());\n            compiler.currentType = usizeType;\n            return module.unreachable();\n        }\n        let valuesOperand = operands[0];\n        if (valuesOperand.kind != ast_1.NodeKind.LITERAL || valuesOperand.literalKind != ast_1.LiteralKind.ARRAY) {\n            compiler.error(diagnostics_1.DiagnosticCode.Array_literal_expected, operands[0].range);\n            compiler.currentType = usizeType;\n            return module.unreachable();\n        }\n        let expressions = valuesOperand.elementExpressions;\n        let numElements = expressions.length;\n        let exprs = new Array(numElements);\n        let isStatic = true;\n        for (let i = 0; i < numElements; ++i) {\n            let elementExpression = expressions[i];\n            if (elementExpression.kind != ast_1.NodeKind.OMITTED) {\n                let expr = compiler.compileExpression(elementExpression, elementType, 1 /* CONV_IMPLICIT */);\n                let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                if (precomp) {\n                    expr = precomp;\n                }\n                else {\n                    isStatic = false;\n                }\n                exprs[i] = expr;\n            }\n            else {\n                exprs[i] = compiler.makeZero(elementType, elementExpression);\n            }\n        }\n        if (!isStatic) {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, valuesOperand.range);\n            compiler.currentType = usizeType;\n            return module.unreachable();\n        }\n        let align = elementType.byteSize;\n        if (numOperands == 2) {\n            align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n            if (align < 0) {\n                compiler.currentType = usizeType;\n                return module.unreachable();\n            }\n        }\n        let buf = new Uint8Array(numElements * elementType.byteSize);\n        assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n        offset = compiler.addAlignedMemorySegment(buf, align).offset;\n    }\n    else { // data(size[, align])\n        let arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(arg0, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (!precomp) {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[0].range);\n            compiler.currentType = usizeType;\n            return module.unreachable();\n        }\n        let size = module_1.getConstValueI32(precomp);\n        if (size < 1) {\n            compiler.error(diagnostics_1.DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive, operands[0].range, \"1\", i32.MAX_VALUE.toString());\n            compiler.currentType = usizeType;\n            return module.unreachable();\n        }\n        let align = 16;\n        if (numOperands == 2) {\n            align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n            if (align < 0) {\n                compiler.currentType = usizeType;\n                return module.unreachable();\n            }\n        }\n        offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n    }\n    // FIXME: what if recompiles happen? recompiles are bad.\n    compiler.currentType = usizeType;\n    if (usizeType == types_1.Type.usize32) {\n        assert(!i64_high(offset));\n        return module.i32(i64_low(offset));\n    }\n    else {\n        return module.i64(i64_low(offset), i64_high(offset));\n    }\n}\nexports.builtins.set(BuiltinNames.memory_data, builtin_memory_data);\n// === Helpers ================================================================================\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeRequired(ctx, true) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var toType = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.auto);\n    var fromType = compiler.currentType;\n    compiler.currentType = toType;\n    if (!fromType.isChangeableTo(toType)) {\n        compiler.error(diagnostics_1.DiagnosticCode.Type_0_cannot_be_changed_to_type_1, ctx.reportNode.range, fromType.toString(), toType.toString());\n        return module.unreachable();\n    }\n    return arg0;\n}\nexports.builtins.set(BuiltinNames.changetype, builtin_changetype);\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    var typeArguments = ctx.typeArguments;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsOptional(ctx, 1, 2)) {\n        if (typeArguments) {\n            assert(typeArguments.length); // otherwise invalid, should not been set at all\n            compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var contextualType = ctx.contextualType;\n    var arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */)\n        : compiler.compileExpression(operands[0], types_1.Type.bool, 4 /* MUST_WRAP */);\n    var type = compiler.currentType;\n    compiler.currentType = type.nonNullableType;\n    // omit if assertions are disabled\n    if (compiler.options.noAssert) {\n        return arg0;\n    }\n    // omit if the assertion can be proven statically\n    var evaled = module.runExpression(arg0, module_1.ExpressionRunnerFlags.Default);\n    if (evaled) {\n        switch (module_1.getExpressionType(evaled)) {\n            case module_1.NativeType.I32: {\n                if (module_1.getConstValueI32(evaled)) {\n                    return arg0;\n                }\n                break;\n            }\n            case module_1.NativeType.I64: {\n                if (module_1.getConstValueI64Low(evaled) | module_1.getConstValueI64High(evaled)) {\n                    return arg0;\n                }\n                break;\n            }\n            case module_1.NativeType.F32: {\n                if (module_1.getConstValueF32(evaled)) {\n                    return arg0;\n                }\n                break;\n            }\n            case module_1.NativeType.F64: {\n                if (module_1.getConstValueF64(evaled)) {\n                    return arg0;\n                }\n                break;\n            }\n        }\n    }\n    // otherwise call abort if the assertion is false-ish\n    var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n    compiler.currentType = type.nonNullableType;\n    if (contextualType == types_1.Type.void) { // simplify if dropped anyway\n        compiler.currentType = types_1.Type.void;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: return module.if(module.unary(module_1.UnaryOp.EqzI32, arg0), abort);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.if(module.unary(module_1.UnaryOp.EqzI64, arg0), abort);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.if(module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.EqzI64\n                    : module_1.UnaryOp.EqzI32, arg0), abort);\n            }\n            // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n            case 11 /* F32 */: return module.if(module.binary(module_1.BinaryOp.EqF32, arg0, module.f32(0)), abort);\n            case 12 /* F64 */: return module.if(module.binary(module_1.BinaryOp.EqF64, arg0, module.f64(0)), abort);\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n            case 16 /* EXNREF */:\n            case 17 /* ANYREF */: return module.if(module.ref_is_null(arg0), abort);\n        }\n    }\n    else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: {\n                let temp = flow.getTempLocal(type);\n                flow.setLocalFlag(temp.index, flow_1.LocalFlags.WRAPPED); // arg0 is wrapped\n                let ret = module.if(module.local_tee(temp.index, arg0, false), // numeric\n                module.local_get(temp.index, module_1.NativeType.I32), abort);\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                let temp = flow.getTempLocal(types_1.Type.i64);\n                let ret = module.if(module.unary(module_1.UnaryOp.EqzI64, module.local_tee(temp.index, arg0, false) // i64\n                ), abort, module.local_get(temp.index, module_1.NativeType.I64));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                let temp = flow.getTempLocal(compiler.options.usizeType);\n                let ret = module.if(module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.EqzI64\n                    : module_1.UnaryOp.EqzI32, module.local_tee(temp.index, arg0, type.isManaged)), abort, module.local_get(temp.index, compiler.options.nativeSizeType));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 11 /* F32 */: {\n                let temp = flow.getTempLocal(types_1.Type.f32);\n                let ret = module.if(module.binary(module_1.BinaryOp.EqF32, module.local_tee(temp.index, arg0, false), // f32\n                module.f32(0)), abort, module.local_get(temp.index, module_1.NativeType.F32));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 12 /* F64 */: {\n                let temp = flow.getTempLocal(types_1.Type.f64);\n                let ret = module.if(module.binary(module_1.BinaryOp.EqF64, module.local_tee(temp.index, arg0, false), // f64\n                module.f64(0)), abort, module.local_get(temp.index, module_1.NativeType.F64));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n            case 16 /* EXNREF */:\n            case 17 /* ANYREF */: {\n                let temp = flow.getTempLocal(type);\n                let ret = module.if(module.ref_is_null(module.local_tee(temp.index, arg0, false) // ref\n                ), abort, module.local_get(temp.index, module_1.NativeType.F64));\n                flow.freeTempLocal(temp);\n                return ret;\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"assert\", compiler.currentType.toString());\n    return abort;\n}\nexports.builtins.set(BuiltinNames.assert, builtin_assert);\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1))\n        return module.unreachable();\n    var flow = compiler.currentFlow;\n    var alreadyUnchecked = flow.is(32768 /* UNCHECKED_CONTEXT */);\n    flow.set(32768 /* UNCHECKED_CONTEXT */);\n    // eliminate unnecessary tees by preferring contextualType(=void)\n    var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n    if (!alreadyUnchecked)\n        flow.unset(32768 /* UNCHECKED_CONTEXT */);\n    return expr;\n}\nexports.builtins.set(BuiltinNames.unchecked, builtin_unchecked);\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeOptional(ctx, true) |\n        checkArgsOptional(ctx, 1, i32.MAX_VALUE))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var returnType;\n    if (typeArguments) {\n        assert(typeArguments.length);\n        returnType = typeArguments[0];\n    }\n    else {\n        returnType = ctx.contextualType;\n    }\n    var indexArg = compiler.compileExpression(operands[0], types_1.Type.u32, 1 /* CONV_IMPLICIT */);\n    var numOperands = operands.length - 1;\n    var operandExprs = new Array(numOperands);\n    var nativeParamTypes = new Array(numOperands);\n    for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], types_1.Type.auto);\n        nativeParamTypes[i] = compiler.currentType.toNativeType();\n    }\n    compiler.currentType = returnType;\n    return module.call_indirect(indexArg, operandExprs, module_1.createType(nativeParamTypes), returnType.toNativeType());\n}\nexports.builtins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeRequired(ctx, true))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var typeArgument = typeArguments[0];\n    var classInstance = typeArgument.getClass();\n    if (!classInstance) {\n        compiler.error(diagnostics_1.DiagnosticCode.This_expression_is_not_constructable, ctx.reportNode.expression.range);\n        return module.unreachable();\n    }\n    compiler.currentType = classInstance.type;\n    var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n    compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n    return compiler.compileInstantiate(ctor, operands, 0 /* NONE */, ctx.reportNode);\n}\nexports.builtins.set(BuiltinNames.instantiate, builtin_instantiate);\n// === User-defined diagnostics ===============================================================\nfunction builtin_diagnostic(ctx, category) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    checkTypeAbsent(ctx);\n    var operands = ctx.operands;\n    var reportNode = ctx.reportNode;\n    compiler.emitDiagnostic(diagnostics_1.DiagnosticCode.User_defined_0, category, reportNode.range, null, operands.length\n        ? operands[0].range.toString()\n        : reportNode.range.toString());\n    return category == diagnostics_1.DiagnosticCategory.ERROR\n        ? module.unreachable()\n        : module.nop();\n}\n// ERROR(message?)\nfunction builtin_error(ctx) {\n    return builtin_diagnostic(ctx, diagnostics_1.DiagnosticCategory.ERROR);\n}\nexports.builtins.set(BuiltinNames.ERROR, builtin_error);\n// WARNING(message?)\nfunction builtin_warning(ctx) {\n    return builtin_diagnostic(ctx, diagnostics_1.DiagnosticCategory.WARNING);\n}\nexports.builtins.set(BuiltinNames.WARNING, builtin_warning);\n// INFO(message?)\nfunction builtin_info(ctx) {\n    return builtin_diagnostic(ctx, diagnostics_1.DiagnosticCategory.INFO);\n}\nexports.builtins.set(BuiltinNames.INFO, builtin_info);\n// === Function builtins ======================================================================\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx) {\n    var compiler = ctx.compiler;\n    var parent = ctx.prototype.parent;\n    assert(parent.kind == program_1.ElementKind.CLASS);\n    var classInstance = parent;\n    assert(classInstance.prototype == compiler.program.functionPrototype);\n    var typeArguments = assert(classInstance.typeArguments);\n    assert(typeArguments.length == 1);\n    var ftype = typeArguments[0];\n    var signature = assert(ftype.getSignature());\n    var returnType = signature.returnType;\n    if (checkTypeAbsent(ctx) |\n        checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)) {\n        compiler.currentType = returnType;\n        return compiler.module.unreachable();\n    }\n    var functionArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, 1 /* CONV_IMPLICIT */);\n    var thisOperand = assert(ctx.operands.shift());\n    var thisType = signature.thisType;\n    var thisArg = 0;\n    if (thisType) {\n        thisArg = compiler.compileExpression(thisOperand, thisType, 1 /* CONV_IMPLICIT */);\n    }\n    else if (thisOperand.kind != ast_1.NodeKind.NULL) {\n        compiler.error(diagnostics_1.DiagnosticCode._this_cannot_be_referenced_in_current_location, thisOperand.range);\n        return compiler.module.unreachable();\n    }\n    return compiler.compileCallIndirect(signature, functionArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == types_1.Type.void);\n}\nexports.function_builtins.set(\"call\", builtin_function_call);\n// === Portable type conversions ==============================================================\nfunction builtin_conversion(ctx, toType) {\n    var compiler = ctx.compiler;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = toType;\n        return compiler.module.unreachable();\n    }\n    return compiler.compileExpression(ctx.operands[0], toType, 2 /* CONV_EXPLICIT */);\n}\n// i8(*) -> i8\nfunction builtin_i8(ctx) {\n    return builtin_conversion(ctx, types_1.Type.i8);\n}\nexports.builtins.set(BuiltinNames.i8, builtin_i8);\n// i16(*) -> i16\nfunction builtin_i16(ctx) {\n    return builtin_conversion(ctx, types_1.Type.i16);\n}\nexports.builtins.set(BuiltinNames.i16, builtin_i16);\n// i32(*) -> i32\nfunction builtin_i32(ctx) {\n    return builtin_conversion(ctx, types_1.Type.i32);\n}\nexports.builtins.set(BuiltinNames.i32, builtin_i32);\n// i64(*) -> i64\nfunction builtin_i64(ctx) {\n    return builtin_conversion(ctx, types_1.Type.i64);\n}\nexports.builtins.set(BuiltinNames.i64, builtin_i64);\n// isize(*) -> isize\nfunction builtin_isize(ctx) {\n    return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nexports.builtins.set(BuiltinNames.isize, builtin_isize);\n// u8(*) -> u8\nfunction builtin_u8(ctx) {\n    return builtin_conversion(ctx, types_1.Type.u8);\n}\nexports.builtins.set(BuiltinNames.u8, builtin_u8);\n// u16(*) -> u16\nfunction builtin_u16(ctx) {\n    return builtin_conversion(ctx, types_1.Type.u16);\n}\nexports.builtins.set(BuiltinNames.u16, builtin_u16);\n// u32(*) -> u32\nfunction builtin_u32(ctx) {\n    return builtin_conversion(ctx, types_1.Type.u32);\n}\nexports.builtins.set(BuiltinNames.u32, builtin_u32);\n// u64(*) -> u64\nfunction builtin_u64(ctx) {\n    return builtin_conversion(ctx, types_1.Type.u64);\n}\nexports.builtins.set(BuiltinNames.u64, builtin_u64);\n// usize(*) -> usize\nfunction builtin_usize(ctx) {\n    return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nexports.builtins.set(BuiltinNames.usize, builtin_usize);\n// bool(*) -> bool\nfunction builtin_bool(ctx) {\n    return builtin_conversion(ctx, types_1.Type.bool);\n}\nexports.builtins.set(BuiltinNames.bool, builtin_bool);\n// f32(*) -> f32\nfunction builtin_f32(ctx) {\n    return builtin_conversion(ctx, types_1.Type.f32);\n}\nexports.builtins.set(BuiltinNames.f32, builtin_f32);\n// f64(*) -> f64\nfunction builtin_f64(ctx) {\n    return builtin_conversion(ctx, types_1.Type.f64);\n}\nexports.builtins.set(BuiltinNames.f64, builtin_f64);\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx) {\n    return builtin_i8x16(ctx);\n}\nexports.builtins.set(BuiltinNames.v128, builtin_v128);\n// === SIMD ===================================================================================\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 16)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var bytes = new Uint8Array(16);\n    for (let i = 0; i < 16; ++i) {\n        let expr = compiler.compileExpression(operands[i], types_1.Type.i8, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            util_1.writeI8(module_1.getConstValueI32(precomp), bytes, i);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[i].range);\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    return module.v128(bytes);\n}\nexports.builtins.set(BuiltinNames.i8x16, builtin_i8x16);\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 8)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var bytes = new Uint8Array(16);\n    for (let i = 0; i < 8; ++i) {\n        let expr = compiler.compileExpression(operands[i], types_1.Type.i16, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            util_1.writeI16(module_1.getConstValueI32(precomp), bytes, i << 1);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[i].range);\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    return module.v128(bytes);\n}\nexports.builtins.set(BuiltinNames.i16x8, builtin_i16x8);\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 4)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var bytes = new Uint8Array(16);\n    for (let i = 0; i < 4; ++i) {\n        let expr = compiler.compileExpression(operands[i], types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            util_1.writeI32(module_1.getConstValueI32(precomp), bytes, i << 2);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[i].range);\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    return module.v128(bytes);\n}\nexports.builtins.set(BuiltinNames.i32x4, builtin_i32x4);\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var bytes = new Uint8Array(16);\n    for (let i = 0; i < 2; ++i) {\n        let expr = compiler.compileExpression(operands[i], types_1.Type.i64, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            let off = i << 3;\n            util_1.writeI32(module_1.getConstValueI64Low(precomp), bytes, off);\n            util_1.writeI32(module_1.getConstValueI64High(precomp), bytes, off + 4);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[i].range);\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    return module.v128(bytes);\n}\nexports.builtins.set(BuiltinNames.i64x2, builtin_i64x2);\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 4)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var bytes = new Uint8Array(16);\n    for (let i = 0; i < 4; ++i) {\n        let expr = compiler.compileExpression(operands[i], types_1.Type.f32, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            util_1.writeF32(module_1.getConstValueF32(precomp), bytes, i << 2);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[i].range);\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    return module.v128(bytes);\n}\nexports.builtins.set(BuiltinNames.f32x4, builtin_f32x4);\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var bytes = new Uint8Array(16);\n    for (let i = 0; i < 2; ++i) {\n        let expr = compiler.compileExpression(operands[i], types_1.Type.f64, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            util_1.writeF64(module_1.getConstValueF64(precomp), bytes, i << 3);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[i].range);\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    return module.v128(bytes);\n}\nexports.builtins.set(BuiltinNames.f64x2, builtin_f64x2);\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], type, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.v128;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.SplatI8x16, arg0);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.SplatI16x8, arg0);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.SplatI32x4, arg0);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.SplatI64x2, arg0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.SplatI64x2\n                    : module_1.UnaryOp.SplatI32x4, arg0);\n            }\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.SplatF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.SplatF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx, true) |\n        checkArgsRequired(ctx, 2))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.u8, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = type;\n    var idx = 0;\n    var precomp = module.runExpression(arg1, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n        idx = module_1.getConstValueI32(precomp);\n    }\n    else {\n        compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[1].range);\n    }\n    if (type.isValue) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n            compiler.error(diagnostics_1.DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive, operands[1].range, \"Lane index\", \"0\", maxIdx.toString());\n            idx = 0;\n        }\n        switch (type.kind) {\n            case 0 /* I8 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n            case 5 /* U8 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n            case 1 /* I16 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n            case 6 /* U16 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.simd_extract(compiler.options.isWasm64\n                    ? module_1.SIMDExtractOp.ExtractLaneI64x2\n                    : module_1.SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n            }\n            case 11 /* F32 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n            case 12 /* F64 */: return module.simd_extract(module_1.SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 3)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.u8, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], type, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.v128;\n    var idx = 0;\n    var precomp = module.runExpression(arg1, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n        idx = module_1.getConstValueI32(precomp);\n    }\n    else {\n        compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operands[1].range);\n    }\n    if (type.isValue) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n            compiler.error(diagnostics_1.DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive, operands[1].range, \"Lane index\", \"0\", maxIdx.toString());\n            idx = 0;\n        }\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.simd_replace(module_1.SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.simd_replace(module_1.SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.simd_replace(module_1.SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.simd_replace(module_1.SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.simd_replace(compiler.options.isWasm64\n                    ? module_1.SIMDReplaceOp.ReplaceLaneI64x2\n                    : module_1.SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n            }\n            case 11 /* F32 */: return module.simd_replace(module_1.SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n            case 12 /* F64 */: return module.simd_replace(module_1.SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    if (type.isValue) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && util_1.isPowerOf2(laneCount));\n        if (checkArgsRequired(ctx, 2 + laneCount)) {\n            compiler.currentType = types_1.Type.v128;\n            return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n        let arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 3 /* I64 */:\n            case 4 /* ISIZE */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 8 /* U64 */:\n            case 9 /* USIZE */:\n            case 11 /* F32 */:\n            case 12 /* F64 */: {\n                let mask = new Uint8Array(16);\n                let maxIdx = (laneCount << 1) - 1;\n                for (let i = 0; i < laneCount; ++i) {\n                    let operand = operands[2 + i];\n                    let argN = compiler.compileExpression(operand, types_1.Type.u8, 1 /* CONV_IMPLICIT */);\n                    let precomp = module.runExpression(argN, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                    let idx = 0;\n                    if (precomp) {\n                        idx = module_1.getConstValueI32(precomp);\n                        if (idx < 0 || idx > maxIdx) {\n                            compiler.error(diagnostics_1.DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive, operand.range, \"Lane index\", \"0\", maxIdx.toString());\n                            idx = 0;\n                        }\n                    }\n                    else {\n                        compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, operand.range);\n                    }\n                    switch (laneWidth) {\n                        case 1: {\n                            util_1.writeI8(idx, mask, i);\n                            break;\n                        }\n                        case 2: {\n                            let off8 = i << 1;\n                            let idx8 = idx << 1;\n                            util_1.writeI8(idx8, mask, off8);\n                            util_1.writeI8(idx8 + 1, mask, off8 + 1);\n                            break;\n                        }\n                        case 4: {\n                            let off8 = i << 2;\n                            let idx8 = idx << 2;\n                            util_1.writeI8(idx8, mask, off8);\n                            util_1.writeI8(idx8 + 1, mask, off8 + 1);\n                            util_1.writeI8(idx8 + 2, mask, off8 + 2);\n                            util_1.writeI8(idx8 + 3, mask, off8 + 3);\n                            break;\n                        }\n                        case 8: {\n                            let off8 = i << 3;\n                            let idx8 = idx << 3;\n                            util_1.writeI8(idx8, mask, off8);\n                            util_1.writeI8(idx8 + 1, mask, off8 + 1);\n                            util_1.writeI8(idx8 + 2, mask, off8 + 2);\n                            util_1.writeI8(idx8 + 3, mask, off8 + 3);\n                            util_1.writeI8(idx8 + 4, mask, off8 + 4);\n                            util_1.writeI8(idx8 + 5, mask, off8 + 5);\n                            util_1.writeI8(idx8 + 6, mask, off8 + 6);\n                            util_1.writeI8(idx8 + 7, mask, off8 + 7);\n                            break;\n                        }\n                        default: assert(false);\n                    }\n                }\n                compiler.currentType = types_1.Type.v128;\n                return module.simd_shuffle(arg0, arg1, mask);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString());\n    compiler.currentType = types_1.Type.v128;\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    return module.binary(module_1.BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nexports.builtins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx, true) |\n        checkArgsOptional(ctx, 1, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var numOperands = operands.length;\n    var immOffset = 0;\n    var immAlign = type.byteSize;\n    if (numOperands >= 2) {\n        immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n        if (immOffset < 0) {\n            compiler.currentType = types_1.Type.v128;\n            return module.unreachable();\n        }\n        if (numOperands == 3) {\n            immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n            if (immAlign < 0) {\n                compiler.currentType = types_1.Type.v128;\n                return module.unreachable();\n            }\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: {\n                return module.simd_load(module_1.SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n            }\n            case 1 /* I16 */:\n            case 6 /* U16 */: {\n                return module.simd_load(module_1.SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */:\n            case 11 /* F32 */: {\n                return module.simd_load(module_1.SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.simd_load(module_1.SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n                }\n                // fall-through\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */:\n            case 12 /* F64 */: {\n                return module.simd_load(module_1.SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx, true) |\n        checkArgsOptional(ctx, 1, 3))\n        return module.unreachable();\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var numOperands = operands.length;\n    var immOffset = 0;\n    var immAlign = type.byteSize;\n    if (numOperands >= 2) {\n        immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n        if (immOffset < 0) {\n            compiler.currentType = types_1.Type.v128;\n            return module.unreachable();\n        }\n        if (numOperands == 3) {\n            immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n            if (immAlign < 0) {\n                compiler.currentType = types_1.Type.v128;\n                return module.unreachable();\n            }\n        }\n    }\n    compiler.currentType = types_1.Type.v128;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.simd_load(module_1.SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n            case 5 /* U8 */: return module.simd_load(module_1.SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n            case 1 /* I16 */: return module.simd_load(module_1.SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n            case 6 /* U16 */: return module.simd_load(module_1.SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n            case 4 /* ISIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 2 /* I32 */: return module.simd_load(module_1.SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n            case 9 /* USIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 7 /* U32 */: return module.simd_load(module_1.SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.AddI8x16, arg0, arg1);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.AddI16x8, arg0, arg1);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.AddI32x4, arg0, arg1);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.binary(module_1.BinaryOp.AddI64x2, arg0, arg1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.binary(compiler.options.isWasm64\n                    ? module_1.BinaryOp.AddI64x2\n                    : module_1.BinaryOp.AddI32x4, arg0, arg1);\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.AddF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.AddF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_add, builtin_v128_add);\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.SubI8x16, arg0, arg1);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.SubI16x8, arg0, arg1);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.SubI32x4, arg0, arg1);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.binary(module_1.BinaryOp.SubI64x2, arg0, arg1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.binary(compiler.options.isWasm64\n                    ? module_1.BinaryOp.SubI64x2\n                    : module_1.BinaryOp.SubI32x4, arg0, arg1);\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.SubF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.SubF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.MulI8x16, arg0, arg1);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.MulI16x8, arg0, arg1);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.MulI32x4, arg0, arg1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.MulI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.MulF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.MulF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.DivF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.DivF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_div, builtin_v128_div);\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.AddSatI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.AddSatU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.AddSatI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.SubSatI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.SubSatU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.SubSatI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.MinI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.MinU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.MinI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.MinU16x8, arg0, arg1);\n            case 4 /* ISIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.MinI32x4, arg0, arg1);\n            case 9 /* USIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.MinU32x4, arg0, arg1);\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.MinF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.MinF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_min, builtin_v128_min);\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.MaxI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.MaxU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.MaxI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.MaxU16x8, arg0, arg1);\n            case 4 /* ISIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.MaxI32x4, arg0, arg1);\n            case 9 /* USIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.MaxU32x4, arg0, arg1);\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.MaxF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.MaxF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_max, builtin_v128_max);\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.PminF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.PminF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.PmaxF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.PmaxF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.DotI16x8, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.AvgrU8x16, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.AvgrU16x8, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.EqI8x16, arg0, arg1);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.EqI16x8, arg0, arg1);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.EqI32x4, arg0, arg1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.EqI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.EqF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.EqF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.NeI8x16, arg0, arg1);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.NeI16x8, arg0, arg1);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.NeI32x4, arg0, arg1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.NeI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.NeF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.NeF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.LtI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.LtU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.LtI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.LtU16x8, arg0, arg1);\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.LtI32x4, arg0, arg1);\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.LtU32x4, arg0, arg1);\n            case 4 /* ISIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.LtI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.LtU32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.LtF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.LtF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.LeI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.LeU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.LeI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.LeU16x8, arg0, arg1);\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.LeI32x4, arg0, arg1);\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.LeU32x4, arg0, arg1);\n            case 4 /* ISIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.LeI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.LeU32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.LeF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.LeF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_le, builtin_v128_le);\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.GtI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.GtU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.GtI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.GtU16x8, arg0, arg1);\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.GtI32x4, arg0, arg1);\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.GtU32x4, arg0, arg1);\n            case 4 /* ISIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.GtI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.GtU32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.GtF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.GtF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.binary(module_1.BinaryOp.GeI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.binary(module_1.BinaryOp.GeU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.GeI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.GeU16x8, arg0, arg1);\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.GeI32x4, arg0, arg1);\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.GeU32x4, arg0, arg1);\n            case 4 /* ISIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.GeI32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 9 /* USIZE */: {\n                if (!compiler.options.isWasm64) {\n                    return module.binary(module_1.BinaryOp.GeU32x4, arg0, arg1);\n                }\n                break;\n            }\n            case 11 /* F32 */: return module.binary(module_1.BinaryOp.GeF32x4, arg0, arg1);\n            case 12 /* F64 */: return module.binary(module_1.BinaryOp.GeF64x2, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 1 /* I16 */: return module.binary(module_1.BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n            case 6 /* U16 */: return module.binary(module_1.BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n            case 2 /* I32 */: return module.binary(module_1.BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n            case 7 /* U32 */: return module.binary(module_1.BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.NegI8x16, arg0);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.NegI16x8, arg0);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.NegI32x4, arg0);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.NegI64x2, arg0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.NegI64x2\n                    : module_1.UnaryOp.NegI32x4, arg0);\n            }\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.NegF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.NegF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.unary(module_1.UnaryOp.AbsI8x16, arg0);\n            case 1 /* I16 */: return module.unary(module_1.UnaryOp.AbsI16x8, arg0);\n            case 4 /* ISIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 2 /* I32 */: return module.unary(module_1.UnaryOp.AbsI32x4, arg0);\n            case 9 /* USIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */: return arg0;\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.AbsF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.AbsF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.SqrtF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.SqrtF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.CeilF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.CeilF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.FloorF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.FloorF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.TruncF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.TruncF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.unary(module_1.UnaryOp.NearestF32x4, arg0);\n            case 12 /* F64 */: return module.unary(module_1.UnaryOp.NearestF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 2 /* I32 */: return module.unary(module_1.UnaryOp.ConvertI32x4ToF32x4, arg0);\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.ConvertU32x4ToF32x4, arg0);\n            case 3 /* I64 */: return module.unary(module_1.UnaryOp.ConvertI64x2ToF64x2, arg0);\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 2 /* I32 */: return module.unary(module_1.UnaryOp.TruncSatF32x4ToI32x4, arg0);\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.TruncSatF32x4ToU32x4, arg0);\n            case 3 /* I64 */: return module.unary(module_1.UnaryOp.TruncSatF64x2ToI64x2, arg0);\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.unary(module_1.UnaryOp.WidenLowI8x16ToI16x8, arg0);\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.WidenLowU8x16ToU16x8, arg0);\n            case 1 /* I16 */: return module.unary(module_1.UnaryOp.WidenLowI16x8ToI32x4, arg0);\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    var type = typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.unary(module_1.UnaryOp.WidenHighI8x16ToI16x8, arg0);\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.WidenHighU8x16ToU16x8, arg0);\n            case 1 /* I16 */: return module.unary(module_1.UnaryOp.WidenHighI16x8ToI32x4, arg0);\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.v128;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.simd_shift(module_1.SIMDShiftOp.ShlI8x16, arg0, arg1);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.simd_shift(module_1.SIMDShiftOp.ShlI16x8, arg0, arg1);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.simd_shift(module_1.SIMDShiftOp.ShlI32x4, arg0, arg1);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.simd_shift(module_1.SIMDShiftOp.ShlI64x2, arg0, arg1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.simd_shift(compiler.options.isWasm64\n                    ? module_1.SIMDShiftOp.ShlI64x2\n                    : module_1.SIMDShiftOp.ShlI32x4, arg0, arg1);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.v128;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */: return module.simd_shift(module_1.SIMDShiftOp.ShrI8x16, arg0, arg1);\n            case 5 /* U8 */: return module.simd_shift(module_1.SIMDShiftOp.ShrU8x16, arg0, arg1);\n            case 1 /* I16 */: return module.simd_shift(module_1.SIMDShiftOp.ShrI16x8, arg0, arg1);\n            case 6 /* U16 */: return module.simd_shift(module_1.SIMDShiftOp.ShrU16x8, arg0, arg1);\n            case 2 /* I32 */: return module.simd_shift(module_1.SIMDShiftOp.ShrI32x4, arg0, arg1);\n            case 7 /* U32 */: return module.simd_shift(module_1.SIMDShiftOp.ShrU32x4, arg0, arg1);\n            case 3 /* I64 */: return module.simd_shift(module_1.SIMDShiftOp.ShrI64x2, arg0, arg1);\n            case 8 /* U64 */: return module.simd_shift(module_1.SIMDShiftOp.ShrU64x2, arg0, arg1);\n            case 4 /* ISIZE */: {\n                return module.simd_shift(compiler.options.isWasm64\n                    ? module_1.SIMDShiftOp.ShrI64x2\n                    : module_1.SIMDShiftOp.ShrI32x4, arg0, arg1);\n            }\n            case 9 /* USIZE */: {\n                return module.simd_shift(compiler.options.isWasm64\n                    ? module_1.SIMDShiftOp.ShrU64x2\n                    : module_1.SIMDShiftOp.ShrU32x4, arg0, arg1);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_shr, builtin_v128_shr);\nfunction builtin_v128_bitwise_binary(ctx, op) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 2)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    return module.binary(op, arg0, arg1);\n}\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx) {\n    return builtin_v128_bitwise_binary(ctx, module_1.BinaryOp.AndV128);\n}\nexports.builtins.set(BuiltinNames.v128_and, builtin_v128_and);\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx) {\n    return builtin_v128_bitwise_binary(ctx, module_1.BinaryOp.OrV128);\n}\nexports.builtins.set(BuiltinNames.v128_or, builtin_v128_or);\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx) {\n    return builtin_v128_bitwise_binary(ctx, module_1.BinaryOp.XorV128);\n}\nexports.builtins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx) {\n    return builtin_v128_bitwise_binary(ctx, module_1.BinaryOp.AndNotV128);\n}\nexports.builtins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\nfunction builtin_v128_bitwise_unary(ctx, op) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    return module.unary(op, arg0);\n}\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx) {\n    return builtin_v128_bitwise_unary(ctx, module_1.UnaryOp.NotV128);\n}\nexports.builtins.set(BuiltinNames.v128_not, builtin_v128_not);\nfunction builtin_v128_bitwise_ternary(ctx, op) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 3)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    return module.simd_ternary(op, arg0, arg1, arg2);\n}\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx) {\n    return builtin_v128_bitwise_ternary(ctx, module_1.SIMDTernaryOp.Bitselect);\n}\nexports.builtins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.bool;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.bool;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.AnyTrueI8x16, arg0);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.AnyTrueI16x8, arg0);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.AnyTrueI32x4, arg0);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.AnyTrueI64x2, arg0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.AnyTrueI64x2\n                    : module_1.UnaryOp.AnyTrueI32x4, arg0);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.bool;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.bool;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.AllTrueI8x16, arg0);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.AllTrueI16x8, arg0);\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.AllTrueI32x4, arg0);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.unary(module_1.UnaryOp.AllTrueI64x2, arg0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.unary(compiler.options.isWasm64\n                    ? module_1.UnaryOp.AllTrueI64x2\n                    : module_1.UnaryOp.AllTrueI32x4, arg0);\n            }\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 1)) {\n        compiler.currentType = types_1.Type.i32;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    compiler.currentType = types_1.Type.i32;\n    if (type.isValue) {\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 5 /* U8 */: return module.unary(module_1.UnaryOp.BitmaskI8x16, arg0);\n            case 1 /* I16 */:\n            case 6 /* U16 */: return module.unary(module_1.UnaryOp.BitmaskI16x8, arg0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                if (compiler.options.isWasm64)\n                    break;\n                // fall-through\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: return module.unary(module_1.UnaryOp.BitmaskI32x4, arg0);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 3)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.simd_ternary(module_1.SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n            case 12 /* F64 */: return module.simd_ternary(module_1.SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkFeatureEnabled(ctx, 16 /* SIMD */) |\n        checkTypeRequired(ctx) |\n        checkArgsRequired(ctx, 3)) {\n        compiler.currentType = types_1.Type.v128;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var type = ctx.typeArguments[0];\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    var arg2 = compiler.compileExpression(operands[2], types_1.Type.v128, 1 /* CONV_IMPLICIT */);\n    if (type.isValue) {\n        switch (type.kind) {\n            case 11 /* F32 */: return module.simd_ternary(module_1.SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n            case 12 /* F64 */: return module.simd_ternary(module_1.SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString());\n    return module.unreachable();\n}\nexports.builtins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n// === Internal runtime =======================================================================\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 1) // cookie\n    ) {\n        compiler.currentType = types_1.Type.void;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], types_1.Type.u32, 1 /* CONV_IMPLICIT */);\n    compiler.runtimeFeatures |= 16 /* visitGlobals */;\n    compiler.currentType = types_1.Type.void;\n    return module.call(BuiltinNames.visit_globals, [arg0], module_1.NativeType.None);\n}\nexports.builtins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx) {\n    var compiler = ctx.compiler;\n    var module = compiler.module;\n    if (checkTypeAbsent(ctx) |\n        checkArgsRequired(ctx, 2) // ref, cookie\n    ) {\n        compiler.currentType = types_1.Type.void;\n        return module.unreachable();\n    }\n    var operands = ctx.operands;\n    var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 1 /* CONV_IMPLICIT */);\n    var arg1 = compiler.compileExpression(operands[1], types_1.Type.u32, 1 /* CONV_IMPLICIT */);\n    compiler.runtimeFeatures |= 32 /* visitMembers */;\n    compiler.currentType = types_1.Type.void;\n    return module.call(BuiltinNames.visit_members, [arg0, arg1], module_1.NativeType.None);\n}\nexports.builtins.set(BuiltinNames.visit_members, builtin_visit_members);\n// === Inline assembler =======================================================================\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_clz(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_clz(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_ctz(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_ctz(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_popcnt(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_popcnt(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_rotl(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_rotl(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_rotr(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_rotr(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_max(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_max, builtin_f32_max);\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_max(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_max, builtin_f64_max);\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_min(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_min, builtin_f32_min);\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_min(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_min, builtin_f64_min);\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_ceil(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_ceil(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_floor(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_floor(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_copysign(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_copysign(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_nearest(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_nearest(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_reinterpret(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_reinterpret(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_reinterpret(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_reinterpret(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_sqrt(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_sqrt(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_trunc(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_trunc(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_add, builtin_i32_add);\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_add, builtin_i64_add);\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_add(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_add, builtin_f32_add);\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_add(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_add, builtin_f64_add);\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_div(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.u32;\n    return builtin_div(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_div(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u64];\n    ctx.contextualType = types_1.Type.u64;\n    return builtin_div(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_div(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_div, builtin_f32_div);\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_div(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_div, builtin_f64_div);\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_load, builtin_i32_load);\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_load, builtin_i64_load);\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_load, builtin_f32_load);\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_load, builtin_f64_load);\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_store, builtin_i32_store);\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_store, builtin_i64_store);\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.f32_store, builtin_f32_store);\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.f64_store, builtin_f64_store);\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_atomic_load(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_store(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_and(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_or(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xor(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_xchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    ctx.contextIsExact = true;\n    return builtin_atomic_cmpxchg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    return builtin_atomic_wait(ctx);\n}\nexports.builtins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_atomic_wait(ctx);\n}\nexports.builtins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.v128];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_load(ctx);\n}\nexports.builtins.set(BuiltinNames.v128_load, builtin_v128_load);\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.v128];\n    ctx.contextualType = types_1.Type.v128;\n    ctx.contextIsExact = true;\n    return builtin_store(ctx);\n}\nexports.builtins.set(BuiltinNames.v128_store, builtin_v128_store);\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_replace_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_avgr(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_neg(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shl(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_any_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_all_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_bitmask(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_eq(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ne(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_narrow(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_narrow(ctx);\n}\nexports.builtins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_replace_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_avgr(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_neg(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub_saturate(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shl(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_any_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_all_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_bitmask(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_eq(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ne(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_narrow(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_narrow(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_low(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_low(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_high(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_high(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_ext(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_ext(ctx);\n}\nexports.builtins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_replace_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_dot(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_neg(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shl(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_any_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_all_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_bitmask(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_eq(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ne(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_trunc_sat(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_trunc_sat(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_low(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_low(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_high(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_widen_high(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_ext(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_ext(ctx);\n}\nexports.builtins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i64;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_replace_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_neg(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shl(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shr(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_any_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.i32;\n    return builtin_v128_all_true(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_trunc_sat(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_trunc_sat(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_ext(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_ext(ctx);\n}\nexports.builtins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.f32;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_replace_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_div(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_neg(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_pmin(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_pmax(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sqrt(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ceil(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_floor(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_trunc(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_nearest(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_eq(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ne(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_convert(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_convert(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_qfma(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_qfms(ctx);\n}\nexports.builtins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.f64;\n    return builtin_v128_extract_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_replace_lane(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_add(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sub(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_mul(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_div(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_neg(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_min(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_max(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_pmin(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_pmax(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_abs(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_sqrt(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ceil(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_floor(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_trunc(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_nearest(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_eq(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ne(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_lt(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_le(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_gt(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_ge(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_convert(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_convert(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_qfma(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.f64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_qfms(ctx);\n}\nexports.builtins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.i8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_shuffle(ctx);\n}\nexports.builtins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = null;\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_swizzle(ctx);\n}\nexports.builtins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u8];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u16];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u32];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx) {\n    checkTypeAbsent(ctx);\n    ctx.typeArguments = [types_1.Type.u64];\n    ctx.contextualType = types_1.Type.v128;\n    return builtin_v128_load_splat(ctx);\n}\nexports.builtins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n// === Internal helpers =======================================================================\n/** Compiles the `visit_globals` function. */\nfunction compileVisitGlobals(compiler) {\n    var module = compiler.module;\n    var exprs = new Array();\n    var nativeSizeType = compiler.options.nativeSizeType;\n    var visitInstance = assert(compiler.program.visitInstance);\n    // this function is @lazy: make sure it exists\n    compiler.compileFunction(visitInstance, true);\n    // TODO: for (let element of compiler.program.elementsByName.values()) {\n    for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (element.kind != program_1.ElementKind.GLOBAL)\n            continue;\n        let global = element;\n        let globalType = global.type;\n        let classReference = globalType.getClass();\n        if (classReference !== null &&\n            !classReference.hasDecorator(program_1.DecoratorFlags.UNMANAGED) &&\n            global.is(common_1.CommonFlags.COMPILED)) {\n            if (global.is(common_1.CommonFlags.INLINED)) {\n                let value = global.constantIntegerValue;\n                if (i64_low(value) || i64_high(value)) {\n                    exprs.push(module.call(visitInstance.internalName, [\n                        compiler.options.isWasm64\n                            ? module.i64(i64_low(value), i64_high(value))\n                            : module.i32(i64_low(value)),\n                        module.local_get(0, module_1.NativeType.I32) // cookie\n                    ], module_1.NativeType.None));\n                }\n            }\n            else {\n                exprs.push(module.if(module.local_tee(1, module.global_get(global.internalName, nativeSizeType), false // internal\n                ), module.call(visitInstance.internalName, [\n                    module.local_get(1, nativeSizeType),\n                    module.local_get(0, module_1.NativeType.I32) // cookie\n                ], module_1.NativeType.None)));\n            }\n        }\n    }\n    module.addFunction(BuiltinNames.visit_globals, module_1.NativeType.I32, // cookie\n    module_1.NativeType.None, // => void\n    [nativeSizeType], exprs.length\n        ? module.block(null, exprs)\n        : module.nop());\n}\nexports.compileVisitGlobals = compileVisitGlobals;\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler, instance) {\n    assert(instance.type.isManaged);\n    if (instance.visitRef)\n        return;\n    var program = compiler.program;\n    var module = compiler.module;\n    var usizeType = program.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var nativeSizeSize = usizeType.byteSize;\n    var visitInstance = assert(program.visitInstance);\n    var body = new Array();\n    // If the class has a base class, call its visitor first\n    var base = instance.base;\n    if (base) {\n        body.push(module.call(base.internalName + \"~visit\", [\n            module.local_get(0, nativeSizeType),\n            module.local_get(1, module_1.NativeType.I32) // cookie\n        ], module_1.NativeType.None));\n    }\n    // Some standard library components provide a custom visitor implementation,\n    // for example to visit all members of a collection, e.g. arrays and maps.\n    var hasVisitImpl = false;\n    if (instance.isDeclaredInLibrary) {\n        let visitPrototype = instance.lookupInSelf(\"__visit\");\n        if (visitPrototype) {\n            assert(visitPrototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n            let visitInstance = program.resolver.resolveFunction(visitPrototype, null);\n            if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n                body.push(module.unreachable());\n            }\n            else {\n                let visitSignature = visitInstance.signature;\n                let visitThisType = assert(visitSignature.thisType);\n                assert(visitSignature.parameterTypes.length == 1 &&\n                    visitSignature.parameterTypes[0] == types_1.Type.u32 &&\n                    visitSignature.returnType == types_1.Type.void &&\n                    instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n                );\n                body.push(module.call(visitInstance.internalName, [\n                    module.local_get(0, nativeSizeType),\n                    module.local_get(1, module_1.NativeType.I32) // cookie\n                ], module_1.NativeType.None));\n            }\n            hasVisitImpl = true;\n        }\n    }\n    // Otherwise, if there is no custom visitor, generate a visitor function\n    // according to class layout, visiting all _own_ managed members.\n    var needsTempValue = false;\n    if (!hasVisitImpl) {\n        let members = instance.members;\n        if (members) {\n            // TODO: for (let member of members.values()) {\n            for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n                let member = unchecked(_values[j]);\n                if (member.kind == program_1.ElementKind.FIELD) {\n                    if (member.parent === instance) {\n                        let fieldType = member.type;\n                        if (fieldType.isManaged) {\n                            let fieldOffset = member.memoryOffset;\n                            assert(fieldOffset >= 0);\n                            needsTempValue = true;\n                            body.push(\n                            // if ($2 = value) __visit($2, $1)\n                            module.if(module.local_tee(2, module.load(nativeSizeSize, false, module.local_get(0, nativeSizeType), nativeSizeType, fieldOffset), false // internal\n                            ), module.call(visitInstance.internalName, [\n                                module.local_get(2, nativeSizeType),\n                                module.local_get(1, module_1.NativeType.I32) // cookie\n                            ], module_1.NativeType.None)));\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Create the visitor function\n    instance.visitRef = module.addFunction(instance.internalName + \"~visit\", module_1.createType([nativeSizeType, module_1.NativeType.I32]), module_1.NativeType.None, needsTempValue ? [nativeSizeType] : null, module.flatten(body, module_1.NativeType.None));\n    // And make sure the base visitor function exists\n    if (base)\n        ensureVisitMembersOf(compiler, base);\n}\n/** Compiles the `__visit_members` function. */\nfunction compileVisitMembers(compiler) {\n    var program = compiler.program;\n    var module = compiler.module;\n    var usizeType = program.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var managedClasses = program.managedClasses;\n    var visitInstance = assert(program.visitInstance);\n    compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n    // Prepare a mapping of class names to visitor calls. Each name corresponds to\n    // the respective sequential (0..N) class id.\n    var names = new Array();\n    var cases = new Array();\n    var nextId = 0;\n    for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n        let instanceId = _keys[i];\n        assert(instanceId == nextId++);\n        let instance = assert(managedClasses.get(instanceId));\n        names[i] = instance.internalName;\n        if (instance.isPointerfree) {\n            cases[i] = module.return();\n        }\n        else {\n            cases[i] = module.block(null, [\n                module.call(instance.internalName + \"~visit\", [\n                    module.local_get(0, nativeSizeType),\n                    module.local_get(1, module_1.NativeType.I32) // cookie\n                ], module_1.NativeType.None),\n                module.return()\n            ], module_1.NativeType.None);\n            ensureVisitMembersOf(compiler, instance);\n        }\n    }\n    // Make a br_table of the mapping, calling visitor functions by unique class id\n    var current = module.block(names[0], [\n        module.switch(names, \"invalid\", \n        // load<u32>(changetype<usize>(this) - 8)\n        module.load(4, false, nativeSizeType == module_1.NativeType.I64\n            ? module.binary(module_1.BinaryOp.SubI64, module.local_get(0, nativeSizeType), module.i64(8))\n            : module.binary(module_1.BinaryOp.SubI32, module.local_get(0, nativeSizeType), module.i32(8) // rtId is at -8\n            ), module_1.NativeType.I32, 0))\n    ], module_1.NativeType.None);\n    // Wrap blocks in order\n    for (let i = 0, k = names.length - 1; i < k; ++i) {\n        current = module.block(names[i + 1], [\n            current,\n            cases[i]\n        ], module_1.NativeType.None);\n    }\n    // Wrap the last id in an 'invalid' block to break out of on invalid ids\n    current = module.block(\"invalid\", [\n        current,\n        cases[names.length - 1]\n    ], module_1.NativeType.None);\n    // Add the function, executing an unreachable if breaking to 'invalid'\n    module.addFunction(BuiltinNames.visit_members, module_1.createType([nativeSizeType, module_1.NativeType.I32]), // this, cookie\n    module_1.NativeType.None, // => void\n    null, module.flatten([\n        current,\n        module.unreachable()\n    ]));\n}\nexports.compileVisitMembers = compileVisitMembers;\nfunction typeToRuntimeFlags(type) {\n    var flags = 64 /* VALUE_ALIGN_0 */ * (1 << type.alignLog2);\n    if (type.is(1 /* SIGNED */))\n        flags |= 2048 /* VALUE_SIGNED */;\n    if (type.is(8 /* FLOAT */))\n        flags |= 4096 /* VALUE_FLOAT */;\n    if (type.is(512 /* NULLABLE */))\n        flags |= 8192 /* VALUE_NULLABLE */;\n    if (type.isManaged)\n        flags |= 16384 /* VALUE_MANAGED */;\n    return flags / 64 /* VALUE_ALIGN_0 */;\n}\n/** Compiles runtime type information for use by stdlib. */\nfunction compileRTTI(compiler) {\n    var program = compiler.program;\n    var module = compiler.module;\n    var managedClasses = program.managedClasses;\n    var count = managedClasses.size;\n    var size = 4 + 8 * count;\n    var data = new Uint8Array(size);\n    util_1.writeI32(count, data, 0);\n    var off = 4;\n    var abvInstance = program.arrayBufferViewInstance;\n    var abvPrototype = abvInstance.prototype;\n    var arrayPrototype = program.arrayPrototype;\n    var setPrototype = program.setPrototype;\n    var mapPrototype = program.mapPrototype;\n    var staticArrayPrototype = program.staticArrayPrototype;\n    var lastId = 0;\n    // TODO: for (let [instanceId, instance] of managedClasses) {\n    for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n        let instanceId = unchecked(_keys[i]);\n        let instance = assert(managedClasses.get(instanceId));\n        assert(instanceId == lastId++);\n        let flags = 0;\n        if (instance.isPointerfree)\n            flags |= 32 /* POINTERFREE */;\n        if (instance !== abvInstance && instance.extends(abvPrototype)) {\n            let valueType = instance.getArrayValueType();\n            flags |= 1 /* ARRAYBUFFERVIEW */;\n            flags |= 64 /* VALUE_ALIGN_0 */ * typeToRuntimeFlags(valueType);\n        }\n        else if (instance.extends(arrayPrototype)) {\n            let valueType = instance.getArrayValueType();\n            flags |= 2 /* ARRAY */;\n            flags |= 64 /* VALUE_ALIGN_0 */ * typeToRuntimeFlags(valueType);\n        }\n        else if (instance.extends(setPrototype)) {\n            let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n            assert(typeArguments.length == 1);\n            flags |= 8 /* SET */;\n            flags |= 64 /* VALUE_ALIGN_0 */ * typeToRuntimeFlags(typeArguments[0]);\n        }\n        else if (instance.extends(mapPrototype)) {\n            let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n            assert(typeArguments.length == 2);\n            flags |= 16 /* MAP */;\n            flags |= 32768 /* KEY_ALIGN_0 */ * typeToRuntimeFlags(typeArguments[0]);\n            flags |= 64 /* VALUE_ALIGN_0 */ * typeToRuntimeFlags(typeArguments[1]);\n        }\n        else if (instance.extends(staticArrayPrototype)) {\n            let valueType = instance.getArrayValueType();\n            flags |= 4 /* STATICARRAY */;\n            flags |= 64 /* VALUE_ALIGN_0 */ * typeToRuntimeFlags(valueType);\n        }\n        util_1.writeI32(flags, data, off);\n        off += 4;\n        instance.rttiFlags = flags;\n        let base = instance.base;\n        util_1.writeI32(base ? base.id : 0, data, off);\n        off += 4;\n    }\n    assert(off == size);\n    var usizeType = program.options.usizeType;\n    var segment = compiler.addAlignedMemorySegment(data);\n    if (usizeType.size == 8) {\n        let offset = segment.offset;\n        module.addGlobal(BuiltinNames.rtti_base, module_1.NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n    }\n    else {\n        module.addGlobal(BuiltinNames.rtti_base, module_1.NativeType.I32, false, module.i32(i64_low(segment.offset)));\n    }\n}\nexports.compileRTTI = compileRTTI;\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nfunction compileClassInstanceOf(compiler, prototype) {\n    var module = compiler.module;\n    var nativeSizeType = compiler.options.nativeSizeType;\n    var instanceofInstance = assert(prototype.program.instanceofInstance);\n    compiler.compileFunction(instanceofInstance);\n    var stmts = new Array();\n    // if (!ref) return false\n    stmts.push(module.if(module.unary(nativeSizeType == module_1.NativeType.I64\n        ? module_1.UnaryOp.EqzI64\n        : module_1.UnaryOp.EqzI32, module.local_get(0, nativeSizeType)), module.return(module.i32(0))));\n    // if (__instanceof(ref, ID[i])) return true\n    var instances = prototype.instances;\n    if (instances !== null && instances.size > 0) {\n        // TODO: for (let instance of instances.values()) {\n        for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            stmts.push(module.if(module.call(instanceofInstance.internalName, [\n                module.local_get(0, nativeSizeType),\n                module.i32(instance.id)\n            ], module_1.NativeType.I32), module.return(module.i32(1))));\n        }\n    }\n    // return false\n    stmts.push(module.return(module.i32(0)));\n    module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, module_1.NativeType.I32, null, module.flatten(stmts));\n}\nexports.compileClassInstanceOf = compileClassInstanceOf;\n// Helpers\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx) {\n    var compiler = ctx.compiler;\n    var operands = ctx.operands;\n    var typeArguments = ctx.typeArguments;\n    if (operands.length == 0) { // requires type argument\n        if (!typeArguments || typeArguments.length != 1) {\n            compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\");\n            return null;\n        }\n        return typeArguments[0];\n    }\n    if (operands.length == 1) { // optional type argument\n        if (typeArguments !== null && typeArguments.length > 0) {\n            if (typeArguments.length > 1) {\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString());\n                return null;\n            }\n            compiler.compileExpression(operands[0], typeArguments[0], 1 /* CONV_IMPLICIT */);\n        }\n        else {\n            compiler.compileExpression(operands[0], types_1.Type.auto);\n        }\n        return compiler.currentType;\n    }\n    if (typeArguments !== null && typeArguments.length > 1) {\n        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString());\n    }\n    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, ctx.reportNode.argumentsRange, \"1\", operands.length.toString());\n    return null;\n}\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression, compiler) {\n    var module = compiler.module;\n    var value;\n    if (compiler.options.isWasm64) {\n        let expr = compiler.compileExpression(expression, types_1.Type.usize64, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            assert(module_1.getConstValueI64High(precomp) == 0); // TODO\n            value = module_1.getConstValueI64Low(precomp);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, expression.range);\n            value = -1;\n        }\n    }\n    else {\n        let expr = compiler.compileExpression(expression, types_1.Type.usize32, 1 /* CONV_IMPLICIT */);\n        let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n            value = module_1.getConstValueI32(precomp);\n        }\n        else {\n            compiler.error(diagnostics_1.DiagnosticCode.Expression_must_be_a_compile_time_constant, expression.range);\n            value = -1;\n        }\n    }\n    return value;\n}\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression, naturalAlign, compiler) {\n    var align = evaluateImmediateOffset(expression, compiler);\n    if (align < 0)\n        return align;\n    if (align < 1 || naturalAlign > 16) {\n        compiler.error(diagnostics_1.DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive, expression.range, \"Alignment\", \"1\", naturalAlign.toString());\n        return -1;\n    }\n    if (!util_1.isPowerOf2(align)) {\n        compiler.error(diagnostics_1.DiagnosticCode._0_must_be_a_power_of_two, expression.range, \"Alignment\");\n        return -1;\n    }\n    return align;\n}\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx, feature) {\n    var compiler = ctx.compiler;\n    if (!compiler.options.hasFeature(feature)) {\n        compiler.error(diagnostics_1.DiagnosticCode.Feature_0_is_not_enabled, ctx.reportNode.range, common_1.featureToString(feature));\n        return 1;\n    }\n    return 0;\n}\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx, setCurrentTypeOnError = false) {\n    var compiler = ctx.compiler;\n    var typeArguments = ctx.typeArguments;\n    if (typeArguments) {\n        let numTypeArguments = typeArguments.length;\n        if (numTypeArguments == 1)\n            return 0;\n        assert(numTypeArguments); // invalid if 0, must not be set at all instead\n        if (setCurrentTypeOnError)\n            compiler.currentType = typeArguments[0];\n        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString());\n    }\n    else {\n        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ctx.reportNode.range, \"1\", \"0\");\n    }\n    return 1;\n}\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx, setCurrentTypeOnError = false) {\n    var typeArguments = ctx.typeArguments;\n    if (typeArguments) {\n        let compiler = ctx.compiler;\n        let numTypeArguments = typeArguments.length;\n        if (numTypeArguments == 1)\n            return 0;\n        assert(numTypeArguments); // invalid if 0, must not be set at all instead\n        if (setCurrentTypeOnError)\n            compiler.currentType = typeArguments[0];\n        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString());\n        return 1;\n    }\n    return 0;\n}\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx) {\n    var typeArguments = ctx.typeArguments;\n    if (typeArguments) {\n        let prototype = ctx.prototype;\n        prototype.program.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, ctx.reportNode.typeArgumentsRange, prototype.internalName);\n        return 1;\n    }\n    return 0;\n}\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx, expected) {\n    var operands = ctx.operands;\n    if (operands.length != expected) {\n        ctx.compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, ctx.reportNode.range, expected.toString(), operands.length.toString());\n        return 1;\n    }\n    return 0;\n}\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx, expectedMinimum, expectedMaximum) {\n    var operands = ctx.operands;\n    var numOperands = operands.length;\n    if (numOperands < expectedMinimum) {\n        ctx.compiler.error(diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1, ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString());\n        return 1;\n    }\n    else if (numOperands > expectedMaximum) {\n        ctx.compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString());\n        return 1;\n    }\n    return 0;\n}\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler, value, contextualType) {\n    var module = compiler.module;\n    // Check if contextual type fits\n    if (contextualType != types_1.Type.auto && contextualType.isIntegerValue) {\n        switch (contextualType.kind) {\n            case 2 /* I32 */: {\n                if (i64_is_i32(value)) {\n                    compiler.currentType = types_1.Type.i32;\n                    return module.i32(i64_low(value));\n                }\n                break;\n            }\n            case 7 /* U32 */: {\n                if (i64_is_u32(value)) {\n                    compiler.currentType = types_1.Type.u32;\n                    return module.i32(i64_low(value));\n                }\n                break;\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                compiler.currentType = contextualType;\n                return module.i64(i64_low(value), i64_high(value));\n            }\n            // isize/usize falls through\n            // small int is probably not intended\n        }\n    }\n    // Default to usize\n    if (compiler.options.isWasm64) {\n        compiler.currentType = types_1.Type.usize64;\n        return module.i64(i64_low(value), i64_high(value));\n    }\n    else {\n        compiler.currentType = types_1.Type.usize32;\n        assert(!i64_high(value));\n        return module.i32(i64_low(value));\n    }\n}\n\n\n/***/ }),\n\n/***/ 200:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TypeinfoFlags = exports.Typeinfo = exports.Target = exports.featureToString = exports.Feature = exports.CommonNames = exports.STUB_DELIMITER = exports.INDEX_SUFFIX = exports.LIBRARY_PREFIX = exports.LIBRARY_SUBST = exports.INNER_DELIMITER = exports.STATIC_DELIMITER = exports.INSTANCE_DELIMITER = exports.SETTER_PREFIX = exports.GETTER_PREFIX = exports.PARENT_SUBST = exports.PATH_DELIMITER = exports.CommonFlags = void 0;\n/** Indicates traits of a {@link Node} or {@link Element}. */\nvar CommonFlags;\n(function (CommonFlags) {\n    /** No flags set. */\n    CommonFlags[CommonFlags[\"NONE\"] = 0] = \"NONE\";\n    // Basic modifiers\n    /** Has an `import` modifier. */\n    CommonFlags[CommonFlags[\"IMPORT\"] = 1] = \"IMPORT\";\n    /** Has an `export` modifier. */\n    CommonFlags[CommonFlags[\"EXPORT\"] = 2] = \"EXPORT\";\n    /** Has a `declare` modifier. */\n    CommonFlags[CommonFlags[\"DECLARE\"] = 4] = \"DECLARE\";\n    /** Has a `const` modifier. */\n    CommonFlags[CommonFlags[\"CONST\"] = 8] = \"CONST\";\n    /** Has a `let` modifier. */\n    CommonFlags[CommonFlags[\"LET\"] = 16] = \"LET\";\n    /** Has a `static` modifier. */\n    CommonFlags[CommonFlags[\"STATIC\"] = 32] = \"STATIC\";\n    /** Has a `readonly` modifier. */\n    CommonFlags[CommonFlags[\"READONLY\"] = 64] = \"READONLY\";\n    /** Has an `abstract` modifier. */\n    CommonFlags[CommonFlags[\"ABSTRACT\"] = 128] = \"ABSTRACT\";\n    /** Has a `public` modifier. */\n    CommonFlags[CommonFlags[\"PUBLIC\"] = 256] = \"PUBLIC\";\n    /** Has a `private` modifier. */\n    CommonFlags[CommonFlags[\"PRIVATE\"] = 512] = \"PRIVATE\";\n    /** Has a `protected` modifier. */\n    CommonFlags[CommonFlags[\"PROTECTED\"] = 1024] = \"PROTECTED\";\n    /** Has a `get` modifier. */\n    CommonFlags[CommonFlags[\"GET\"] = 2048] = \"GET\";\n    /** Has a `set` modifier. */\n    CommonFlags[CommonFlags[\"SET\"] = 4096] = \"SET\";\n    /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n    CommonFlags[CommonFlags[\"DEFINITELY_ASSIGNED\"] = 8192] = \"DEFINITELY_ASSIGNED\";\n    // Extended modifiers usually derived from basic modifiers\n    /** Is ambient, that is either declared or nested in a declared element. */\n    CommonFlags[CommonFlags[\"AMBIENT\"] = 16384] = \"AMBIENT\";\n    /** Is generic. */\n    CommonFlags[CommonFlags[\"GENERIC\"] = 32768] = \"GENERIC\";\n    /** Is part of a generic context. */\n    CommonFlags[CommonFlags[\"GENERIC_CONTEXT\"] = 65536] = \"GENERIC_CONTEXT\";\n    /** Is an instance member. */\n    CommonFlags[CommonFlags[\"INSTANCE\"] = 131072] = \"INSTANCE\";\n    /** Is a constructor. */\n    CommonFlags[CommonFlags[\"CONSTRUCTOR\"] = 262144] = \"CONSTRUCTOR\";\n    /** Is a module export. */\n    CommonFlags[CommonFlags[\"MODULE_EXPORT\"] = 524288] = \"MODULE_EXPORT\";\n    /** Is a module import. */\n    CommonFlags[CommonFlags[\"MODULE_IMPORT\"] = 1048576] = \"MODULE_IMPORT\";\n    // Compilation states\n    /** Is resolved. */\n    CommonFlags[CommonFlags[\"RESOLVED\"] = 2097152] = \"RESOLVED\";\n    /** Is compiled. */\n    CommonFlags[CommonFlags[\"COMPILED\"] = 4194304] = \"COMPILED\";\n    /** Did error. */\n    CommonFlags[CommonFlags[\"ERRORED\"] = 8388608] = \"ERRORED\";\n    /** Has a constant value and is therefore inlined. */\n    CommonFlags[CommonFlags[\"INLINED\"] = 16777216] = \"INLINED\";\n    /** Is scoped. */\n    CommonFlags[CommonFlags[\"SCOPED\"] = 33554432] = \"SCOPED\";\n    /** Is a stub. */\n    CommonFlags[CommonFlags[\"STUB\"] = 67108864] = \"STUB\";\n    /** Is a virtual method. */\n    CommonFlags[CommonFlags[\"VIRTUAL\"] = 134217728] = \"VIRTUAL\";\n    /** Is (part of) a closure. */\n    CommonFlags[CommonFlags[\"CLOSURE\"] = 268435456] = \"CLOSURE\";\n    // Other\n    /** Is quoted. */\n    CommonFlags[CommonFlags[\"QUOTED\"] = 536870912] = \"QUOTED\";\n})(CommonFlags = exports.CommonFlags || (exports.CommonFlags = {}));\n/** Path delimiter inserted between file system levels. */\nexports.PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexports.PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexports.GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexports.SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexports.INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexports.STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexports.INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexports.LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexports.LIBRARY_PREFIX = exports.LIBRARY_SUBST + exports.PATH_DELIMITER;\n/** Path index suffix. */\nexports.INDEX_SUFFIX = exports.PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexports.STUB_DELIMITER = \"@\";\n/** Common names. */\nvar CommonNames;\n(function (CommonNames) {\n    // special\n    CommonNames.EMPTY = \"\";\n    // types\n    CommonNames.i8 = \"i8\";\n    CommonNames.i16 = \"i16\";\n    CommonNames.i32 = \"i32\";\n    CommonNames.i64 = \"i64\";\n    CommonNames.isize = \"isize\";\n    CommonNames.u8 = \"u8\";\n    CommonNames.u16 = \"u16\";\n    CommonNames.u32 = \"u32\";\n    CommonNames.u64 = \"u64\";\n    CommonNames.usize = \"usize\";\n    CommonNames.bool = \"bool\";\n    CommonNames.f32 = \"f32\";\n    CommonNames.f64 = \"f64\";\n    CommonNames.v128 = \"v128\";\n    CommonNames.funcref = \"funcref\";\n    CommonNames.externref = \"externref\";\n    CommonNames.exnref = \"exnref\";\n    CommonNames.anyref = \"anyref\";\n    CommonNames.i8x16 = \"i8x16\";\n    CommonNames.u8x16 = \"u8x16\";\n    CommonNames.i16x8 = \"i16x8\";\n    CommonNames.u16x8 = \"u16x8\";\n    CommonNames.i32x4 = \"i32x4\";\n    CommonNames.u32x4 = \"u32x4\";\n    CommonNames.i64x2 = \"i64x2\";\n    CommonNames.u64x2 = \"u64x2\";\n    CommonNames.f32x4 = \"f32x4\";\n    CommonNames.f64x2 = \"f64x2\";\n    CommonNames.void_ = \"void\";\n    CommonNames.number = \"number\";\n    CommonNames.boolean = \"boolean\";\n    CommonNames.string = \"string\";\n    CommonNames.native = \"native\";\n    CommonNames.indexof = \"indexof\";\n    CommonNames.valueof = \"valueof\";\n    CommonNames.returnof = \"returnof\";\n    // aliases\n    CommonNames.null_ = \"null\";\n    CommonNames.true_ = \"true\";\n    CommonNames.false_ = \"false\";\n    // objects\n    CommonNames.this_ = \"this\";\n    CommonNames.super_ = \"super\";\n    CommonNames.constructor = \"constructor\";\n    // constants\n    CommonNames.ASC_TARGET = \"ASC_TARGET\";\n    CommonNames.ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n    CommonNames.ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n    CommonNames.ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n    CommonNames.ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n    CommonNames.ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n    CommonNames.ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n    CommonNames.ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n    CommonNames.ASC_EXPORT_RUNTIME = \"ASC_EXPORT_RUNTIME\";\n    CommonNames.ASC_WASI = \"ASC_WASI\";\n    CommonNames.ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n    CommonNames.ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n    CommonNames.ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n    CommonNames.ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n    CommonNames.ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n    CommonNames.ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n    CommonNames.ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n    CommonNames.ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n    CommonNames.ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n    CommonNames.ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n    CommonNames.ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n    CommonNames.ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n    // classes\n    CommonNames.I8 = \"I8\";\n    CommonNames.I16 = \"I16\";\n    CommonNames.I32 = \"I32\";\n    CommonNames.I64 = \"I64\";\n    CommonNames.Isize = \"Isize\";\n    CommonNames.U8 = \"U8\";\n    CommonNames.U16 = \"U16\";\n    CommonNames.U32 = \"U32\";\n    CommonNames.U64 = \"U64\";\n    CommonNames.Usize = \"Usize\";\n    CommonNames.Bool = \"Bool\";\n    CommonNames.F32 = \"F32\";\n    CommonNames.F64 = \"F64\";\n    CommonNames.V128 = \"V128\";\n    CommonNames.Funcref = \"Funcref\";\n    CommonNames.Externref = \"Externref\";\n    CommonNames.Exnref = \"Exnref\";\n    CommonNames.Anyref = \"Anyref\";\n    CommonNames.String = \"String\";\n    CommonNames.Array = \"Array\";\n    CommonNames.StaticArray = \"StaticArray\";\n    CommonNames.Set = \"Set\";\n    CommonNames.Map = \"Map\";\n    CommonNames.Function = \"Function\";\n    CommonNames.ArrayBufferView = \"ArrayBufferView\";\n    CommonNames.ArrayBuffer = \"ArrayBuffer\";\n    CommonNames.Math = \"Math\";\n    CommonNames.Mathf = \"Mathf\";\n    CommonNames.NativeMath = \"NativeMath\";\n    CommonNames.NativeMathf = \"NativeMathf\";\n    CommonNames.Int8Array = \"Int8Array\";\n    CommonNames.Int16Array = \"Int16Array\";\n    CommonNames.Int32Array = \"Int32Array\";\n    CommonNames.Int64Array = \"Int64Array\";\n    CommonNames.Uint8Array = \"Uint8Array\";\n    CommonNames.Uint8ClampedArray = \"Uint8ClampedArray\";\n    CommonNames.Uint16Array = \"Uint16Array\";\n    CommonNames.Uint32Array = \"Uint32Array\";\n    CommonNames.Uint64Array = \"Uint64Array\";\n    CommonNames.Float32Array = \"Float32Array\";\n    CommonNames.Float64Array = \"Float64Array\";\n    CommonNames.Error = \"Error\";\n    // runtime\n    CommonNames.abort = \"abort\";\n    CommonNames.trace = \"trace\";\n    CommonNames.seed = \"seed\";\n    CommonNames.pow = \"pow\";\n    CommonNames.ipow32 = \"ipow32\";\n    CommonNames.ipow64 = \"ipow64\";\n    CommonNames.mod = \"mod\";\n    CommonNames.alloc = \"__alloc\";\n    CommonNames.realloc = \"__realloc\";\n    CommonNames.free = \"__free\";\n    CommonNames.new_ = \"__new\";\n    CommonNames.renew = \"__renew\";\n    CommonNames.link = \"__link\";\n    CommonNames.collect = \"__collect\";\n    CommonNames.typeinfo = \"__typeinfo\";\n    CommonNames.instanceof_ = \"__instanceof\";\n    CommonNames.visit = \"__visit\";\n    CommonNames.newBuffer = \"__newBuffer\";\n    CommonNames.newArray = \"__newArray\";\n    CommonNames.BLOCK = \"~lib/rt/common/BLOCK\";\n    CommonNames.OBJECT = \"~lib/rt/common/OBJECT\";\n})(CommonNames = exports.CommonNames || (exports.CommonNames = {}));\n// shared\nvar feature_1 = __webpack_require__(466);\nObject.defineProperty(exports, \"Feature\", ({ enumerable: true, get: function () { return feature_1.Feature; } }));\nObject.defineProperty(exports, \"featureToString\", ({ enumerable: true, get: function () { return feature_1.featureToString; } }));\nvar target_1 = __webpack_require__(607);\nObject.defineProperty(exports, \"Target\", ({ enumerable: true, get: function () { return target_1.Target; } }));\nvar typeinfo_1 = __webpack_require__(604);\nObject.defineProperty(exports, \"Typeinfo\", ({ enumerable: true, get: function () { return typeinfo_1.Typeinfo; } }));\nObject.defineProperty(exports, \"TypeinfoFlags\", ({ enumerable: true, get: function () { return typeinfo_1.TypeinfoFlags; } }));\n\n\n/***/ }),\n\n/***/ 220:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Compiler = exports.ExportNames = exports.RuntimeFeatures = exports.Constraints = exports.Options = void 0;\nconst builtins_1 = __webpack_require__(346);\nconst diagnostics_1 = __webpack_require__(256);\nconst module_1 = __webpack_require__(656);\nconst common_1 = __webpack_require__(200);\nconst program_1 = __webpack_require__(974);\nconst flow_1 = __webpack_require__(154);\nconst resolver_1 = __webpack_require__(742);\nconst tokenizer_1 = __webpack_require__(411);\nconst ast_1 = __webpack_require__(60);\nconst types_1 = __webpack_require__(699);\nconst util_1 = __webpack_require__(910);\nconst rtrace_1 = __webpack_require__(865);\nconst shadowstack_1 = __webpack_require__(231);\n/** Compiler options. */\nclass Options {\n    constructor() {\n        /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n        this.target = common_1.Target.WASM32;\n        /** If true, replaces assertions with nops. */\n        this.noAssert = false;\n        /** It true, exports the memory to the embedder. */\n        this.exportMemory = true;\n        /** If true, imports the memory provided by the embedder. */\n        this.importMemory = false;\n        /** Initial memory size, in pages. */\n        this.initialMemory = 0;\n        /** Maximum memory size, in pages. */\n        this.maximumMemory = 0;\n        /** If true, memory is declared as shared. */\n        this.sharedMemory = false;\n        /** If true, imports the function table provided by the embedder. */\n        this.importTable = false;\n        /** If true, exports the function table. */\n        this.exportTable = false;\n        /** If true, generates information necessary for source maps. */\n        this.sourceMap = false;\n        /** If true, generates an explicit start function. */\n        this.explicitStart = false;\n        /** Static memory start offset. */\n        this.memoryBase = 0;\n        /** Static table start offset. */\n        this.tableBase = 0;\n        /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n        this.globalAliases = null;\n        /** Features to activate by default. These are the finished proposals. */\n        this.features = 2 /* MUTABLE_GLOBALS */;\n        /** If true, disallows unsafe features in user code. */\n        this.noUnsafe = false;\n        /** If true, enables pedantic diagnostics. */\n        this.pedantic = false;\n        /** Indicates a very low (<64k) memory limit. */\n        this.lowMemoryLimit = 0;\n        /** If true, exports the runtime helpers. */\n        this.exportRuntime = false;\n        /** Stack size in bytes, if using a stack. */\n        this.stackSize = 0;\n        /** Hinted optimize level. Not applied by the compiler itself. */\n        this.optimizeLevelHint = 0;\n        /** Hinted shrink level. Not applied by the compiler itself. */\n        this.shrinkLevelHint = 0;\n    }\n    /** Tests if the target is WASM64 or, otherwise, WASM32. */\n    get isWasm64() {\n        return this.target == common_1.Target.WASM64;\n    }\n    /** Gets the unsigned size type matching the target. */\n    get usizeType() {\n        return this.target == common_1.Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32;\n    }\n    /** Gets the signed size type matching the target. */\n    get isizeType() {\n        return this.target == common_1.Target.WASM64 ? types_1.Type.isize64 : types_1.Type.isize32;\n    }\n    /** Gets the native size type matching the target. */\n    get nativeSizeType() {\n        return this.target == common_1.Target.WASM64 ? module_1.NativeType.I64 : module_1.NativeType.I32;\n    }\n    /** Gets if any optimizations will be performed. */\n    get willOptimize() {\n        return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n    }\n    /** Tests if a specific feature is activated. */\n    hasFeature(feature) {\n        return (this.features & feature) != 0;\n    }\n}\nexports.Options = Options;\n/** Various constraints in expression compilation. */\nvar Constraints;\n(function (Constraints) {\n    Constraints[Constraints[\"NONE\"] = 0] = \"NONE\";\n    /** Must implicitly convert to the target type. */\n    Constraints[Constraints[\"CONV_IMPLICIT\"] = 1] = \"CONV_IMPLICIT\";\n    /** Must explicitly convert to the target type. */\n    Constraints[Constraints[\"CONV_EXPLICIT\"] = 2] = \"CONV_EXPLICIT\";\n    /** Must wrap small integer values to match the target type. */\n    Constraints[Constraints[\"MUST_WRAP\"] = 4] = \"MUST_WRAP\";\n    /** Indicates that the value will be dropped immediately. */\n    Constraints[Constraints[\"WILL_DROP\"] = 8] = \"WILL_DROP\";\n    /** Indicates that static data is preferred. */\n    Constraints[Constraints[\"PREFER_STATIC\"] = 16] = \"PREFER_STATIC\";\n    /** Indicates that the value will become `this` of a property access or instance call. */\n    Constraints[Constraints[\"IS_THIS\"] = 32] = \"IS_THIS\";\n})(Constraints = exports.Constraints || (exports.Constraints = {}));\n/** Runtime features to be activated by the compiler. */\nvar RuntimeFeatures;\n(function (RuntimeFeatures) {\n    RuntimeFeatures[RuntimeFeatures[\"NONE\"] = 0] = \"NONE\";\n    /** Requires data setup. */\n    RuntimeFeatures[RuntimeFeatures[\"DATA\"] = 1] = \"DATA\";\n    /** Requires a stack. */\n    RuntimeFeatures[RuntimeFeatures[\"STACK\"] = 2] = \"STACK\";\n    /** Requires heap setup. */\n    RuntimeFeatures[RuntimeFeatures[\"HEAP\"] = 4] = \"HEAP\";\n    /** Requires runtime type information setup. */\n    RuntimeFeatures[RuntimeFeatures[\"RTTI\"] = 8] = \"RTTI\";\n    /** Requires the built-in globals visitor. */\n    RuntimeFeatures[RuntimeFeatures[\"visitGlobals\"] = 16] = \"visitGlobals\";\n    /** Requires the built-in members visitor. */\n    RuntimeFeatures[RuntimeFeatures[\"visitMembers\"] = 32] = \"visitMembers\";\n    /** Requires the setArgumentsLength export. */\n    RuntimeFeatures[RuntimeFeatures[\"setArgumentsLength\"] = 64] = \"setArgumentsLength\";\n})(RuntimeFeatures = exports.RuntimeFeatures || (exports.RuntimeFeatures = {}));\n/** Exported names of compiler-generated elements. */\nvar ExportNames;\n(function (ExportNames) {\n    /** Name of the explicit start function, if applicable. */\n    ExportNames.start = \"_start\"; // match WASI\n    /** Name of the argumentsLength varargs helper global. */\n    ExportNames.argumentsLength = \"__argumentsLength\";\n    /** Name of the alternative argumentsLength setter function. */\n    ExportNames.setArgumentsLength = \"__setArgumentsLength\";\n    /** Name of the memory instance, if exported. */\n    ExportNames.memory = \"memory\";\n    /** Name of the table instance, if exported. */\n    ExportNames.table = \"table\";\n})(ExportNames = exports.ExportNames || (exports.ExportNames = {}));\n/** Functions to export if `--exportRuntime` is set. */\nconst runtimeFunctions = [\"__new\", \"__pin\", \"__unpin\", \"__collect\"];\n/** Globals to export if `--exportRuntime` is set. */\nconst runtimeGlobals = [\"__rtti_base\"];\n/** Compiler interface. */\nclass Compiler extends diagnostics_1.DiagnosticEmitter {\n    /** Constructs a new compiler for a {@link Program} using the specified options. */\n    constructor(program) {\n        super(program.diagnostics);\n        /** Current parent element if not a function, i.e. an enum or namespace. */\n        this.currentParent = null;\n        /** Current type in compilation. */\n        this.currentType = types_1.Type.void;\n        /** Memory segments being compiled. */\n        this.memorySegments = [];\n        /** Map of already compiled static string segments. */\n        this.stringSegments = new Map();\n        /** Function table being compiled. First elem is blank. */\n        this.functionTable = [];\n        /** Arguments length helper global. */\n        this.builtinArgumentsLength = 0;\n        /** Requires runtime features. */\n        this.runtimeFeatures = 0 /* NONE */;\n        /** Current inline functions stack. */\n        this.inlineStack = [];\n        /** Lazily compiled functions. */\n        this.lazyFunctions = new Set();\n        /** Pending class-specific instanceof helpers. */\n        this.pendingClassInstanceOf = new Set();\n        /** Functions potentially involving a virtual call. */\n        this.virtualCalls = new Set();\n        /** Elements currently undergoing compilation. */\n        this.pendingElements = new Set();\n        /** Elements, that are module exports, already processed */\n        this.doneModuleExports = new Set();\n        this.f32ModInstance = null;\n        this.f64ModInstance = null;\n        this.f32PowInstance = null;\n        this.f64PowInstance = null;\n        this.i32PowInstance = null;\n        this.i64PowInstance = null;\n        this.program = program;\n        var options = program.options;\n        var module = module_1.Module.create(options.stackSize > 0);\n        this.module = module;\n        if (options.memoryBase) {\n            this.memoryOffset = i64_new(options.memoryBase);\n            module.setLowMemoryUnused(false);\n        }\n        else {\n            if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n                this.memoryOffset = i64_new(1024);\n                module.setLowMemoryUnused(true);\n            }\n            else {\n                this.memoryOffset = i64_new(8);\n                module.setLowMemoryUnused(false);\n            }\n        }\n        var featureFlags = 0;\n        if (options.hasFeature(1 /* SIGN_EXTENSION */))\n            featureFlags |= module_1.FeatureFlags.SignExt;\n        if (options.hasFeature(2 /* MUTABLE_GLOBALS */))\n            featureFlags |= module_1.FeatureFlags.MutableGloabls;\n        if (options.hasFeature(4 /* NONTRAPPING_F2I */))\n            featureFlags |= module_1.FeatureFlags.NontrappingFPToInt;\n        if (options.hasFeature(8 /* BULK_MEMORY */))\n            featureFlags |= module_1.FeatureFlags.BulkMemory;\n        if (options.hasFeature(16 /* SIMD */))\n            featureFlags |= module_1.FeatureFlags.SIMD128;\n        if (options.hasFeature(32 /* THREADS */))\n            featureFlags |= module_1.FeatureFlags.Atomics;\n        if (options.hasFeature(64 /* EXCEPTION_HANDLING */))\n            featureFlags |= module_1.FeatureFlags.ExceptionHandling;\n        if (options.hasFeature(128 /* TAIL_CALLS */))\n            featureFlags |= module_1.FeatureFlags.TailCall;\n        if (options.hasFeature(256 /* REFERENCE_TYPES */))\n            featureFlags |= module_1.FeatureFlags.ReferenceTypes;\n        if (options.hasFeature(512 /* MULTI_VALUE */))\n            featureFlags |= module_1.FeatureFlags.MultiValue;\n        if (options.hasFeature(1024 /* GC */))\n            featureFlags |= module_1.FeatureFlags.GC;\n        if (options.hasFeature(2048 /* MEMORY64 */))\n            featureFlags |= module_1.FeatureFlags.Memory64;\n        module.setFeatures(featureFlags);\n        // set up the main start function\n        var startFunctionInstance = program.makeNativeFunction(builtins_1.BuiltinNames.start, new types_1.Signature(program, [], types_1.Type.void));\n        startFunctionInstance.internalName = builtins_1.BuiltinNames.start;\n        this.currentFlow = startFunctionInstance.flow;\n        this.currentBody = new Array();\n        this.shadowStack = new shadowstack_1.ShadowStackPass(this);\n    }\n    /** Resolver reference. */\n    get resolver() { return this.program.resolver; }\n    /** Provided options. */\n    get options() { return this.program.options; }\n    /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n    static compile(program) {\n        return new Compiler(program).compile();\n    }\n    /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n    compile() {\n        var options = this.options;\n        var module = this.module;\n        var program = this.program;\n        var hasShadowStack = options.stackSize > 0; // implies runtime=incremental\n        // initialize lookup maps, built-ins, imports, exports, etc.\n        this.program.initialize();\n        // obtain the main start function\n        var startFunctionInstance = this.currentFlow.actualFunction;\n        assert(startFunctionInstance.internalName == builtins_1.BuiltinNames.start);\n        var startFunctionBody = this.currentBody;\n        assert(startFunctionBody.length == 0);\n        // add mutable data, heap and rtti offset dummies\n        if (options.isWasm64) {\n            module.addGlobal(builtins_1.BuiltinNames.data_end, module_1.NativeType.I64, true, module.i64(0));\n            module.addGlobal(builtins_1.BuiltinNames.heap_base, module_1.NativeType.I64, true, module.i64(0));\n            module.addGlobal(builtins_1.BuiltinNames.rtti_base, module_1.NativeType.I64, true, module.i64(0));\n        }\n        else {\n            module.addGlobal(builtins_1.BuiltinNames.data_end, module_1.NativeType.I32, true, module.i32(0));\n            module.addGlobal(builtins_1.BuiltinNames.heap_base, module_1.NativeType.I32, true, module.i32(0));\n            module.addGlobal(builtins_1.BuiltinNames.rtti_base, module_1.NativeType.I32, true, module.i32(0));\n        }\n        // compile entry file(s) while traversing reachable elements\n        var files = program.filesByName;\n        // TODO: for (let file of files.values()) {\n        for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n            let file = unchecked(_values[i]);\n            if (file.source.sourceKind == ast_1.SourceKind.USER_ENTRY) {\n                this.compileFile(file);\n                this.compileExports(file);\n            }\n        }\n        // set up module exports\n        // TODO: for (let file of this.program.filesByName.values()) {\n        for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n            let file = unchecked(_values[i]);\n            if (file.source.sourceKind == ast_1.SourceKind.USER_ENTRY)\n                this.ensureModuleExports(file);\n        }\n        // compile and export runtime if requested\n        if (this.options.exportRuntime) {\n            for (let i = 0, k = runtimeFunctions.length; i < k; ++i) {\n                let name = runtimeFunctions[i];\n                let instance = program.requireFunction(name);\n                if (this.compileFunction(instance) && !module.hasExport(name)) {\n                    module.addFunctionExport(instance.internalName, name);\n                }\n            }\n            for (let i = 0, k = runtimeGlobals.length; i < k; ++i) {\n                let name = runtimeGlobals[i];\n                let instance = program.requireGlobal(name);\n                if (this.compileGlobal(instance) && !module.hasExport(name)) {\n                    module.addGlobalExport(instance.internalName, name);\n                }\n            }\n        }\n        // compile lazy functions\n        var lazyFunctions = this.lazyFunctions;\n        do {\n            let functionsToCompile = new Array();\n            // TODO: for (let instance of lazyLibraryFunctions) {\n            for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n                let instance = unchecked(_values[i]);\n                functionsToCompile.push(instance);\n            }\n            lazyFunctions.clear();\n            for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n                this.compileFunction(unchecked(functionsToCompile[i]), true);\n            }\n        } while (lazyFunctions.size);\n        // compile pending class-specific instanceof helpers\n        // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n        for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n            let prototype = unchecked(_values[i]);\n            builtins_1.compileClassInstanceOf(this, prototype);\n        }\n        // set up virtual lookup tables\n        var functionTable = this.functionTable;\n        for (let i = 0, k = functionTable.length; i < k; ++i) {\n            let instance = functionTable[i];\n            if (instance.is(common_1.CommonFlags.VIRTUAL)) {\n                assert(instance.is(common_1.CommonFlags.INSTANCE));\n                functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n                this.finalizeVirtualStub(instance);\n            }\n            else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n                functionTable[i] = this.ensureVarargsStub(instance);\n            }\n        }\n        var virtualCalls = this.virtualCalls;\n        while (virtualCalls.size) {\n            // finalizing a stub may discover more virtual calls, so do this in a loop\n            for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n                let instance = unchecked(_values[i]);\n                this.finalizeVirtualStub(instance);\n                virtualCalls.delete(instance);\n            }\n        }\n        // finalize runtime features\n        module.removeGlobal(builtins_1.BuiltinNames.rtti_base);\n        if (this.runtimeFeatures & 8 /* RTTI */)\n            builtins_1.compileRTTI(this);\n        if (this.runtimeFeatures & 16 /* visitGlobals */)\n            builtins_1.compileVisitGlobals(this);\n        if (this.runtimeFeatures & 32 /* visitMembers */)\n            builtins_1.compileVisitMembers(this);\n        var memoryOffset = i64_align(this.memoryOffset, options.usizeType.byteSize);\n        // finalize data\n        module.removeGlobal(builtins_1.BuiltinNames.data_end);\n        if ((this.runtimeFeatures & 1 /* DATA */) != 0 || hasShadowStack) {\n            if (options.isWasm64) {\n                module.addGlobal(builtins_1.BuiltinNames.data_end, module_1.NativeType.I64, false, module.i64(i64_low(memoryOffset), i64_high(memoryOffset)));\n            }\n            else {\n                module.addGlobal(builtins_1.BuiltinNames.data_end, module_1.NativeType.I32, false, module.i32(i64_low(memoryOffset)));\n            }\n        }\n        // finalize stack (grows down from __heap_base to __data_end)\n        module.removeGlobal(builtins_1.BuiltinNames.stack_pointer);\n        if ((this.runtimeFeatures & 2 /* STACK */) != 0 || hasShadowStack) {\n            memoryOffset = i64_align(i64_add(memoryOffset, i64_new(options.stackSize)), options.usizeType.byteSize);\n            if (options.isWasm64) {\n                module.addGlobal(builtins_1.BuiltinNames.stack_pointer, module_1.NativeType.I64, true, module.i64(i64_low(memoryOffset), i64_high(memoryOffset)));\n            }\n            else {\n                module.addGlobal(builtins_1.BuiltinNames.stack_pointer, module_1.NativeType.I32, true, module.i32(i64_low(memoryOffset)));\n            }\n        }\n        // finalize heap\n        module.removeGlobal(builtins_1.BuiltinNames.heap_base);\n        if ((this.runtimeFeatures & 4 /* HEAP */) != 0 || hasShadowStack) {\n            if (options.isWasm64) {\n                module.addGlobal(builtins_1.BuiltinNames.heap_base, module_1.NativeType.I64, false, module.i64(i64_low(memoryOffset), i64_high(memoryOffset)));\n            }\n            else {\n                module.addGlobal(builtins_1.BuiltinNames.heap_base, module_1.NativeType.I32, false, module.i32(i64_low(memoryOffset)));\n            }\n        }\n        this.memoryOffset = memoryOffset;\n        // check that we didn't exceed lowMemoryLimit already\n        var lowMemoryLimit32 = this.options.lowMemoryLimit;\n        if (lowMemoryLimit32) {\n            let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n            if (i64_gt(memoryOffset, lowMemoryLimit)) {\n                this.error(diagnostics_1.DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1, null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit));\n            }\n        }\n        // set up memory\n        var initialPages = 0;\n        if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n            initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n        }\n        if (options.initialMemory) {\n            if (options.initialMemory < initialPages) {\n                this.error(diagnostics_1.DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory, null, initialPages.toString());\n            }\n            else {\n                initialPages = options.initialMemory;\n            }\n        }\n        var maximumPages = module_1.Module.UNLIMITED_MEMORY;\n        if (options.maximumMemory) {\n            if (options.maximumMemory < initialPages) {\n                this.error(diagnostics_1.DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory, null, initialPages.toString());\n            }\n            else {\n                maximumPages = options.maximumMemory;\n            }\n        }\n        var isSharedMemory = false;\n        if (options.sharedMemory) {\n            isSharedMemory = true;\n            if (!options.maximumMemory) {\n                this.error(diagnostics_1.DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined, null);\n                isSharedMemory = false;\n            }\n            if (!options.hasFeature(32 /* THREADS */)) {\n                this.error(diagnostics_1.DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled, null);\n                isSharedMemory = false;\n            }\n        }\n        module.setMemory(initialPages, maximumPages, this.memorySegments, options.target, options.exportMemory ? ExportNames.memory : null, isSharedMemory);\n        // import memory if requested (default memory is named '0' by Binaryen)\n        if (options.importMemory)\n            module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n        // set up function table (first elem is blank)\n        var tableBase = this.options.tableBase;\n        if (!tableBase)\n            tableBase = 1; // leave first elem blank\n        var functionTableNames = new Array(functionTable.length);\n        for (let i = 0, k = functionTable.length; i < k; ++i) {\n            functionTableNames[i] = functionTable[i].internalName;\n        }\n        module.setFunctionTable(tableBase + functionTable.length, module_1.Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n        // import and/or export table if requested (default table is named '0' by Binaryen)\n        if (options.importTable) {\n            module.addTableImport(\"0\", \"env\", \"table\");\n            if (options.pedantic && options.willOptimize) {\n                this.pedantic(diagnostics_1.DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations, null);\n            }\n        }\n        if (options.exportTable) {\n            module.addTableExport(\"0\", ExportNames.table);\n            if (options.pedantic && options.willOptimize) {\n                this.pedantic(diagnostics_1.DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations, null);\n            }\n        }\n        // expose the arguments length helper if there are varargs exports\n        if (this.runtimeFeatures & 64 /* setArgumentsLength */) {\n            module.addFunction(builtins_1.BuiltinNames.setArgumentsLength, module_1.NativeType.I32, module_1.NativeType.None, null, module.global_set(this.ensureArgumentsLength(), module.local_get(0, module_1.NativeType.I32)));\n            module.addFunctionExport(builtins_1.BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n        }\n        // NOTE: no more element compiles from here. may go to the start function!\n        // compile the start function if not empty or if explicitly requested\n        var startIsEmpty = !startFunctionBody.length;\n        var explicitStart = program.isWasi || options.explicitStart;\n        if (!startIsEmpty || explicitStart) {\n            let signature = startFunctionInstance.signature;\n            if (!startIsEmpty && explicitStart) {\n                module.addGlobal(builtins_1.BuiltinNames.started, module_1.NativeType.I32, true, module.i32(0));\n                startFunctionBody.unshift(module.global_set(builtins_1.BuiltinNames.started, module.i32(1)));\n                startFunctionBody.unshift(module.if(module.global_get(builtins_1.BuiltinNames.started, module_1.NativeType.I32), module.return()));\n            }\n            let funcRef = module.addFunction(startFunctionInstance.internalName, signature.nativeParams, signature.nativeResults, types_1.typesToNativeTypes(startFunctionInstance.additionalLocals), module.flatten(startFunctionBody));\n            startFunctionInstance.finalize(module, funcRef);\n            if (!explicitStart)\n                module.setStart(funcRef);\n            else\n                module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n        }\n        // Run custom passes\n        if (hasShadowStack) {\n            this.shadowStack.walkModule();\n        }\n        if (program.lookup(\"ASC_RTRACE\") != null) {\n            new rtrace_1.RtraceMemory(this).walkModule();\n        }\n        return module;\n    }\n    // === Exports ==================================================================================\n    /** Applies the respective module exports for the specified file. */\n    ensureModuleExports(file) {\n        var exports = file.exports;\n        if (exports) {\n            // TODO: for (let [elementName, element] of exports) {\n            for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n                let elementName = unchecked(_keys[i]);\n                let element = assert(exports.get(elementName));\n                this.ensureModuleExport(elementName, element);\n            }\n        }\n        var exportsStar = file.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                this.ensureModuleExports(exportsStar[i]);\n            }\n        }\n    }\n    /** Applies the respective module export(s) for the specified element. */\n    ensureModuleExport(name, element, prefix = \"\") {\n        var module = this.module;\n        switch (element.kind) {\n            // traverse instances\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                let functionPrototype = element;\n                let functionInstances = functionPrototype.instances;\n                if (functionInstances !== null && functionInstances.size > 0) {\n                    // TODO: for (let instance of instances.values()) {\n                    for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n                        let instance = unchecked(_values[i]);\n                        let instanceName = name;\n                        if (instance.is(common_1.CommonFlags.GENERIC)) {\n                            let fullName = instance.internalName;\n                            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n                        }\n                        this.ensureModuleExport(instanceName, instance, prefix);\n                    }\n                }\n                else if (functionPrototype.is(common_1.CommonFlags.GENERIC)) {\n                    this.warning(diagnostics_1.DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances, functionPrototype.identifierNode.range);\n                }\n                break;\n            }\n            case program_1.ElementKind.CLASS_PROTOTYPE: {\n                let classPrototype = element;\n                let classInstances = classPrototype.instances;\n                if (classInstances !== null && classInstances.size > 0) {\n                    // TODO: for (let instance of instances.values()) {\n                    for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n                        let instance = unchecked(_values[i]);\n                        let instanceName = name;\n                        if (instance.is(common_1.CommonFlags.GENERIC)) {\n                            let fullName = instance.internalName;\n                            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n                        }\n                        this.ensureModuleExport(instanceName, instance, prefix);\n                    }\n                }\n                else if (classPrototype.is(common_1.CommonFlags.GENERIC)) {\n                    this.warning(diagnostics_1.DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances, classPrototype.identifierNode.range);\n                }\n                break;\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyInstance = element.instance;\n                if (propertyInstance)\n                    this.ensureModuleExport(name, propertyInstance, prefix);\n                break;\n            }\n            // export concrete elements\n            case program_1.ElementKind.GLOBAL: {\n                let global = element;\n                let isConst = global.is(common_1.CommonFlags.CONST) || global.is(common_1.CommonFlags.STATIC | common_1.CommonFlags.READONLY);\n                if (!isConst && !this.options.hasFeature(2 /* MUTABLE_GLOBALS */)) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_export_a_mutable_global, global.identifierNode.range);\n                }\n                else if (global.is(common_1.CommonFlags.COMPILED)) {\n                    let exportName = prefix + name;\n                    if (!module.hasExport(exportName)) {\n                        module.addGlobalExport(element.internalName, exportName);\n                    }\n                }\n                break;\n            }\n            case program_1.ElementKind.ENUMVALUE: {\n                let enumValue = element;\n                if (!enumValue.isImmutable && !this.options.hasFeature(2 /* MUTABLE_GLOBALS */)) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_export_a_mutable_global, enumValue.identifierNode.range);\n                }\n                else if (enumValue.is(common_1.CommonFlags.COMPILED)) {\n                    let exportName = prefix + name;\n                    if (!module.hasExport(exportName)) {\n                        module.addGlobalExport(element.internalName, exportName);\n                    }\n                }\n                break;\n            }\n            case program_1.ElementKind.FUNCTION: {\n                let functionInstance = element;\n                if (!functionInstance.hasDecorator(program_1.DecoratorFlags.BUILTIN)) {\n                    let signature = functionInstance.signature;\n                    if (signature.requiredParameters < signature.parameterTypes.length) {\n                        // utilize varargs stub to fill in omitted arguments\n                        functionInstance = this.ensureVarargsStub(functionInstance);\n                        this.runtimeFeatures |= 64 /* setArgumentsLength */;\n                    }\n                    if (functionInstance.is(common_1.CommonFlags.COMPILED)) {\n                        let exportName = prefix + name;\n                        if (!module.hasExport(exportName)) {\n                            module.addFunctionExport(functionInstance.internalName, exportName);\n                            if (signature.hasManagedOperands) {\n                                this.shadowStack.noteExport(exportName, signature.getManagedOperandIndices());\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            case program_1.ElementKind.PROPERTY: {\n                let propertyInstance = element;\n                let getterInstance = propertyInstance.getterInstance;\n                if (getterInstance)\n                    this.ensureModuleExport(common_1.GETTER_PREFIX + name, getterInstance, prefix);\n                let setterInstance = propertyInstance.setterInstance;\n                if (setterInstance)\n                    this.ensureModuleExport(common_1.SETTER_PREFIX + name, setterInstance, prefix);\n                break;\n            }\n            case program_1.ElementKind.FIELD: {\n                let fieldInstance = element;\n                if (element.is(common_1.CommonFlags.COMPILED)) {\n                    let getterExportName = prefix + common_1.GETTER_PREFIX + name;\n                    if (this.compileFieldGetter(fieldInstance) && !module.hasExport(getterExportName)) {\n                        module.addFunctionExport(fieldInstance.internalGetterName, getterExportName);\n                        let signature = fieldInstance.internalGetterSignature;\n                        if (signature.hasManagedOperands) {\n                            this.shadowStack.noteExport(getterExportName, signature.getManagedOperandIndices());\n                        }\n                    }\n                    if (!element.is(common_1.CommonFlags.READONLY)) {\n                        let setterExportName = prefix + common_1.SETTER_PREFIX + name;\n                        if (this.compileFieldSetter(fieldInstance) && !module.hasExport(setterExportName)) {\n                            module.addFunctionExport(fieldInstance.internalSetterName, setterExportName);\n                            let signature = fieldInstance.internalSetterSignature;\n                            if (signature.hasManagedOperands) {\n                                this.shadowStack.noteExport(setterExportName, signature.getManagedOperandIndices());\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            case program_1.ElementKind.CLASS: {\n                let classInstance = element;\n                // make the class name itself represent its runtime id\n                if (!classInstance.type.isUnmanaged) {\n                    let module = this.module;\n                    let internalName = classInstance.internalName;\n                    if (!this.doneModuleExports.has(element)) {\n                        module.addGlobal(internalName, module_1.NativeType.I32, false, module.i32(classInstance.id));\n                        this.doneModuleExports.add(element);\n                    }\n                    module.addGlobalExport(internalName, prefix + name);\n                }\n                break;\n            }\n            // just traverse members below\n            case program_1.ElementKind.ENUM:\n            case program_1.ElementKind.INTERFACE_PROTOTYPE:\n            case program_1.ElementKind.NAMESPACE:\n            case program_1.ElementKind.TYPEDEFINITION:\n            case program_1.ElementKind.INDEXSIGNATURE: break;\n            default: assert(false); // unexpected module export\n        }\n        // traverse members\n        var members = element.members;\n        if (members) {\n            let subPrefix = prefix + name + (element.kind == program_1.ElementKind.CLASS\n                ? common_1.INSTANCE_DELIMITER\n                : common_1.STATIC_DELIMITER);\n            if (element.kind == program_1.ElementKind.NAMESPACE) {\n                let implicitExport = element.is(common_1.CommonFlags.SCOPED);\n                // TODO: for (let [memberName, member] of members) {\n                for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n                    let memberName = unchecked(_keys[i]);\n                    let member = assert(members.get(memberName));\n                    if (implicitExport || member.is(common_1.CommonFlags.EXPORT)) {\n                        this.ensureModuleExport(memberName, member, subPrefix);\n                    }\n                }\n            }\n            else {\n                // TODO: for (let [memberName, member] of members) {\n                for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n                    let memberName = unchecked(_keys[i]);\n                    let member = assert(members.get(memberName));\n                    if (!member.is(common_1.CommonFlags.PRIVATE)) {\n                        this.ensureModuleExport(memberName, member, subPrefix);\n                    }\n                }\n            }\n        }\n    }\n    // === Elements =================================================================================\n    /** Compiles any element. */\n    compileElement(element, compileMembers = true) {\n        switch (element.kind) {\n            case program_1.ElementKind.GLOBAL: {\n                this.compileGlobal(element);\n                break;\n            }\n            case program_1.ElementKind.ENUM: {\n                this.compileEnum(element);\n                break;\n            }\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                if (!element.is(common_1.CommonFlags.GENERIC)) {\n                    let functionInstance = this.resolver.resolveFunction(element, null);\n                    if (functionInstance)\n                        this.compileFunction(functionInstance);\n                }\n                break;\n            }\n            case program_1.ElementKind.CLASS_PROTOTYPE: {\n                if (!element.is(common_1.CommonFlags.GENERIC)) {\n                    let classInstance = this.resolver.resolveClass(element, null);\n                    if (classInstance)\n                        this.compileClass(classInstance);\n                }\n                break;\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyInstance = this.resolver.resolveProperty(element);\n                if (propertyInstance)\n                    this.compileProperty(propertyInstance);\n                break;\n            }\n            case program_1.ElementKind.INTERFACE_PROTOTYPE:\n            case program_1.ElementKind.NAMESPACE:\n            case program_1.ElementKind.TYPEDEFINITION:\n            case program_1.ElementKind.ENUMVALUE:\n            case program_1.ElementKind.INDEXSIGNATURE: break;\n            default: assert(false);\n        }\n        if (compileMembers) {\n            let members = element.members;\n            if (members) {\n                // TODO: for (let element of members.values()) {\n                for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                    let element = unchecked(_values[i]);\n                    this.compileElement(element);\n                }\n            }\n        }\n    }\n    /** Compiles a file's exports. */\n    compileExports(file) {\n        var exports = file.exports;\n        if (exports) {\n            // TODO: for (let element of exports.values()) {\n            for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n                let element = unchecked(_values[i]);\n                if (!element.hasDecorator(program_1.DecoratorFlags.LAZY))\n                    this.compileElement(element);\n            }\n        }\n        var exportsStar = file.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                let exportStar = unchecked(exportsStar[i]);\n                this.compileFile(exportStar);\n                this.compileExports(exportStar);\n            }\n        }\n    }\n    // files\n    /** Compiles the file matching the specified path. */\n    compileFileByPath(normalizedPathWithoutExtension, reportNode) {\n        var file;\n        var filesByName = this.program.filesByName;\n        var pathWithIndex;\n        if (filesByName.has(normalizedPathWithoutExtension)) {\n            file = assert(filesByName.get(normalizedPathWithoutExtension));\n        }\n        else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + common_1.INDEX_SUFFIX)) {\n            file = assert(filesByName.get(pathWithIndex));\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.File_0_not_found, reportNode.range, normalizedPathWithoutExtension);\n            return;\n        }\n        this.compileFile(file);\n    }\n    /** Compiles the specified file. */\n    compileFile(file) {\n        if (file.is(common_1.CommonFlags.COMPILED))\n            return;\n        file.set(common_1.CommonFlags.COMPILED);\n        // compile top-level statements within the file's start function\n        var startFunction = file.startFunction;\n        var startSignature = startFunction.signature;\n        var previousBody = this.currentBody;\n        var startFunctionBody = new Array();\n        this.currentBody = startFunctionBody;\n        // compile top-level statements\n        var previousFlow = this.currentFlow;\n        var flow = startFunction.flow;\n        this.currentFlow = flow;\n        for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n            this.compileTopLevelStatement(statements[i], startFunctionBody);\n        }\n        // no need to insert unreachable since last statement should have done that\n        this.currentFlow = previousFlow;\n        this.currentBody = previousBody;\n        // if top-level statements are present, make the per-file start function and call it in start\n        if (startFunctionBody.length) {\n            let module = this.module;\n            let locals = startFunction.localsByIndex;\n            let numLocals = locals.length;\n            let varTypes = new Array(numLocals);\n            for (let i = 0; i < numLocals; ++i)\n                varTypes[i] = locals[i].type.toNativeType();\n            module.addFunction(startFunction.internalName, startSignature.nativeParams, startSignature.nativeResults, varTypes, module.flatten(startFunctionBody));\n            previousBody.push(module.call(startFunction.internalName, null, module_1.NativeType.None));\n        }\n    }\n    // === Globals ==================================================================================\n    /** Compiles a global variable. */\n    compileGlobal(global) {\n        if (global.is(common_1.CommonFlags.COMPILED))\n            return !global.is(common_1.CommonFlags.ERRORED);\n        global.set(common_1.CommonFlags.COMPILED);\n        var pendingElements = this.pendingElements;\n        pendingElements.add(global);\n        var module = this.module;\n        var initExpr = 0;\n        var typeNode = global.typeNode;\n        var initializerNode = global.initializerNode;\n        if (!global.is(common_1.CommonFlags.RESOLVED)) {\n            // Resolve type if annotated\n            if (typeNode) {\n                let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n                if (!resolvedType) {\n                    global.set(common_1.CommonFlags.ERRORED);\n                    pendingElements.delete(global);\n                    return false;\n                }\n                if (resolvedType == types_1.Type.void) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, typeNode.range);\n                    global.set(common_1.CommonFlags.ERRORED);\n                    pendingElements.delete(global);\n                    return false;\n                }\n                global.setType(resolvedType);\n                this.checkTypeSupported(global.type, typeNode);\n                // Otherwise infer type from initializer\n            }\n            else if (initializerNode) {\n                let previousFlow = this.currentFlow;\n                if (global.hasDecorator(program_1.DecoratorFlags.LAZY)) {\n                    this.currentFlow = global.file.startFunction.flow;\n                }\n                initExpr = this.compileExpression(initializerNode, types_1.Type.auto, // reports\n                4 /* MUST_WRAP */ | 16 /* PREFER_STATIC */);\n                this.currentFlow = previousFlow;\n                if (this.currentType == types_1.Type.void) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, initializerNode.range, this.currentType.toString(), \"<auto>\");\n                    global.set(common_1.CommonFlags.ERRORED);\n                    pendingElements.delete(global);\n                    return false;\n                }\n                global.setType(this.currentType);\n                // Error if there's neither a type nor an initializer\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, global.identifierNode.range.atEnd);\n                global.set(common_1.CommonFlags.ERRORED);\n                pendingElements.delete(global);\n                return false;\n            }\n        }\n        // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n        if (global.is(common_1.CommonFlags.AMBIENT) && global.hasDecorator(program_1.DecoratorFlags.BUILTIN)) {\n            let internalName = global.internalName;\n            if (internalName == builtins_1.BuiltinNames.data_end)\n                this.runtimeFeatures |= 1 /* DATA */;\n            else if (internalName == builtins_1.BuiltinNames.stack_pointer)\n                this.runtimeFeatures |= 2 /* STACK */;\n            else if (internalName == builtins_1.BuiltinNames.heap_base)\n                this.runtimeFeatures |= 4 /* HEAP */;\n            else if (internalName == builtins_1.BuiltinNames.rtti_base)\n                this.runtimeFeatures |= 8 /* RTTI */;\n            pendingElements.delete(global);\n            return true;\n        }\n        var type = global.type;\n        var nativeType = type.toNativeType();\n        var isDeclaredConstant = global.is(common_1.CommonFlags.CONST) || global.is(common_1.CommonFlags.STATIC | common_1.CommonFlags.READONLY);\n        var isDeclaredInline = global.hasDecorator(program_1.DecoratorFlags.INLINE);\n        // Handle imports\n        if (global.is(common_1.CommonFlags.AMBIENT)) {\n            // Constant global or mutable globals enabled\n            if (isDeclaredConstant || this.options.hasFeature(2 /* MUTABLE_GLOBALS */)) {\n                global.set(common_1.CommonFlags.MODULE_IMPORT);\n                mangleImportName(global, global.declaration);\n                module.addGlobalImport(global.internalName, mangleImportName_moduleName, mangleImportName_elementName, nativeType, !isDeclaredConstant);\n                pendingElements.delete(global);\n                return true;\n            }\n            // Importing mutable globals is not supported in the MVP\n            this.error(diagnostics_1.DiagnosticCode.Feature_0_is_not_enabled, global.declaration.range, \"mutable-globals\");\n            global.set(common_1.CommonFlags.ERRORED);\n            pendingElements.delete(global);\n            return false;\n        }\n        // The MVP does not yet support initializer expressions other than constants and gets of\n        // imported immutable globals, hence such initializations must be performed in the start.\n        var initializeInStart = false;\n        // Evaluate initializer if present\n        if (initializerNode) {\n            if (!initExpr) {\n                let previousFlow = this.currentFlow;\n                if (global.hasDecorator(program_1.DecoratorFlags.LAZY)) {\n                    this.currentFlow = global.file.startFunction.flow;\n                }\n                initExpr = this.compileExpression(initializerNode, type, 1 /* CONV_IMPLICIT */ | 4 /* MUST_WRAP */ | 16 /* PREFER_STATIC */);\n                this.currentFlow = previousFlow;\n            }\n            // If not a constant, attempt to precompute\n            if (module_1.getExpressionId(initExpr) != module_1.ExpressionId.Const) {\n                if (isDeclaredConstant) {\n                    if (module_1.getExpressionId(initExpr) != module_1.ExpressionId.Const) {\n                        let precomp = module.runExpression(initExpr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                        if (precomp) {\n                            initExpr = precomp;\n                        }\n                        else {\n                            initializeInStart = true;\n                        }\n                    }\n                }\n                else {\n                    initializeInStart = true;\n                }\n            }\n            // Handle special case of initializing from imported immutable global\n            if (initializeInStart && module_1.getExpressionId(initExpr) == module_1.ExpressionId.GlobalGet) {\n                let fromName = assert(module_1.getGlobalGetName(initExpr));\n                if (!module_1.isGlobalMutable(module.getGlobal(fromName))) {\n                    let elementsByName = this.program.elementsByName;\n                    if (elementsByName.has(fromName)) {\n                        let global = assert(elementsByName.get(fromName));\n                        if (global.is(common_1.CommonFlags.AMBIENT))\n                            initializeInStart = false;\n                    }\n                }\n            }\n            // Explicitly inline if annotated\n            if (isDeclaredInline) {\n                if (initializeInStart) {\n                    this.warning(diagnostics_1.DiagnosticCode.Mutable_value_cannot_be_inlined, initializerNode.range);\n                }\n                else {\n                    assert(module_1.getExpressionId(initExpr) == module_1.ExpressionId.Const);\n                    let exprType = module_1.getExpressionType(initExpr);\n                    switch (exprType) {\n                        case module_1.NativeType.I32: {\n                            global.constantValueKind = 1 /* INTEGER */;\n                            global.constantIntegerValue = i64_new(module_1.getConstValueI32(initExpr), 0);\n                            break;\n                        }\n                        case module_1.NativeType.I64: {\n                            global.constantValueKind = 1 /* INTEGER */;\n                            global.constantIntegerValue = i64_new(module_1.getConstValueI64Low(initExpr), module_1.getConstValueI64High(initExpr));\n                            break;\n                        }\n                        case module_1.NativeType.F32: {\n                            global.constantValueKind = 2 /* FLOAT */;\n                            global.constantFloatValue = module_1.getConstValueF32(initExpr);\n                            break;\n                        }\n                        case module_1.NativeType.F64: {\n                            global.constantValueKind = 2 /* FLOAT */;\n                            global.constantFloatValue = module_1.getConstValueF64(initExpr);\n                            break;\n                        }\n                        default: {\n                            assert(false);\n                            global.set(common_1.CommonFlags.ERRORED);\n                            pendingElements.delete(global);\n                            return false;\n                        }\n                    }\n                    global.set(common_1.CommonFlags.INLINED); // inline the value from now on\n                }\n            }\n            // Initialize to zero if there's no initializer\n        }\n        else {\n            if (global.is(common_1.CommonFlags.INLINED)) {\n                initExpr = this.compileInlineConstant(global, global.type, 16 /* PREFER_STATIC */);\n            }\n            else {\n                initExpr = this.makeZero(type, global.declaration);\n            }\n        }\n        var internalName = global.internalName;\n        if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n            if (isDeclaredInline) {\n                this.error(diagnostics_1.DiagnosticCode.Decorator_0_is_not_valid_here, ast_1.findDecorator(ast_1.DecoratorKind.INLINE, global.decoratorNodes).range, \"inline\");\n            }\n            module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n            this.currentBody.push(module.global_set(internalName, initExpr));\n        }\n        else if (!isDeclaredInline) { // compile normally\n            module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n        }\n        pendingElements.delete(global);\n        return true;\n    }\n    // === Enums ====================================================================================\n    /** Compiles an enum. */\n    compileEnum(element) {\n        if (element.is(common_1.CommonFlags.COMPILED))\n            return !element.is(common_1.CommonFlags.ERRORED);\n        element.set(common_1.CommonFlags.COMPILED);\n        var pendingElements = this.pendingElements;\n        pendingElements.add(element);\n        var module = this.module;\n        var previousParent = this.currentParent;\n        this.currentParent = element;\n        var previousValue = null;\n        var previousValueIsMut = false;\n        var isInline = element.is(common_1.CommonFlags.CONST) || element.hasDecorator(program_1.DecoratorFlags.INLINE);\n        var members = element.members;\n        if (members) {\n            // TODO: for (let member of element.members.values()) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                if (member.kind != program_1.ElementKind.ENUMVALUE)\n                    continue; // happens if an enum is also a namespace\n                let initInStart = false;\n                let enumValue = member;\n                let valueNode = enumValue.valueNode;\n                enumValue.set(common_1.CommonFlags.COMPILED);\n                let previousFlow = this.currentFlow;\n                if (element.hasDecorator(program_1.DecoratorFlags.LAZY)) {\n                    this.currentFlow = element.file.startFunction.flow;\n                }\n                let initExpr;\n                if (valueNode) {\n                    initExpr = this.compileExpression(valueNode, types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n                    if (module_1.getExpressionId(initExpr) != module_1.ExpressionId.Const) {\n                        let precomp = module.runExpression(initExpr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                        if (precomp) {\n                            initExpr = precomp;\n                        }\n                        else {\n                            if (element.is(common_1.CommonFlags.CONST)) {\n                                this.error(diagnostics_1.DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression, valueNode.range);\n                            }\n                            initInStart = true;\n                        }\n                    }\n                }\n                else if (previousValue == null) {\n                    initExpr = module.i32(0);\n                }\n                else {\n                    if (previousValueIsMut) {\n                        this.error(diagnostics_1.DiagnosticCode.Enum_member_must_have_initializer, enumValue.identifierNode.range.atEnd);\n                    }\n                    if (isInline) {\n                        let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n                        assert(!i64_high(value));\n                        initExpr = module.i32(i64_low(value));\n                    }\n                    else {\n                        initExpr = module.binary(module_1.BinaryOp.AddI32, module.global_get(previousValue.internalName, module_1.NativeType.I32), module.i32(1));\n                        let precomp = module.runExpression(initExpr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                        if (precomp) {\n                            initExpr = precomp;\n                        }\n                        else {\n                            if (element.is(common_1.CommonFlags.CONST)) {\n                                this.error(diagnostics_1.DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression, member.declaration.range);\n                            }\n                            initInStart = true;\n                        }\n                    }\n                }\n                this.currentFlow = previousFlow;\n                if (initInStart) {\n                    module.addGlobal(enumValue.internalName, module_1.NativeType.I32, true, module.i32(0));\n                    this.currentBody.push(this.makeGlobalAssignment(enumValue, initExpr, types_1.Type.i32, false));\n                    previousValueIsMut = true;\n                }\n                else {\n                    if (isInline) {\n                        enumValue.setConstantIntegerValue(i64_new(module_1.getConstValueI32(initExpr)), types_1.Type.i32);\n                        if (enumValue.is(common_1.CommonFlags.MODULE_EXPORT)) {\n                            module.addGlobal(enumValue.internalName, module_1.NativeType.I32, false, initExpr);\n                        }\n                    }\n                    else {\n                        module.addGlobal(enumValue.internalName, module_1.NativeType.I32, false, initExpr);\n                    }\n                    enumValue.isImmutable = true;\n                    previousValueIsMut = false;\n                }\n                previousValue = enumValue;\n            }\n        }\n        this.currentParent = previousParent;\n        pendingElements.delete(element);\n        return true;\n    }\n    // === Functions ================================================================================\n    /** Compiles a priorly resolved function. */\n    compileFunction(\n    /** Function to compile. */\n    instance, \n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative = false) {\n        if (instance.is(common_1.CommonFlags.COMPILED))\n            return !instance.is(common_1.CommonFlags.ERRORED);\n        if (!forceStdAlternative) {\n            if (instance.hasDecorator(program_1.DecoratorFlags.BUILTIN))\n                return true;\n            if (instance.hasDecorator(program_1.DecoratorFlags.LAZY)) {\n                this.lazyFunctions.add(instance);\n                return true;\n            }\n        }\n        instance.set(common_1.CommonFlags.COMPILED);\n        var pendingElements = this.pendingElements;\n        pendingElements.add(instance);\n        var previousType = this.currentType;\n        var module = this.module;\n        var signature = instance.signature;\n        var bodyNode = instance.prototype.bodyNode;\n        var declarationNode = instance.declaration;\n        assert(declarationNode.kind == ast_1.NodeKind.FUNCTIONDECLARATION || declarationNode.kind == ast_1.NodeKind.METHODDECLARATION);\n        this.checkSignatureSupported(instance.signature, declarationNode.signature);\n        var funcRef;\n        // concrete function\n        if (bodyNode) {\n            // must not be ambient\n            if (instance.is(common_1.CommonFlags.AMBIENT)) {\n                this.error(diagnostics_1.DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, instance.identifierNode.range);\n            }\n            // cannot have an annotated external name\n            if (instance.hasDecorator(program_1.DecoratorFlags.EXTERNAL)) {\n                let decoratorNodes = instance.decoratorNodes;\n                let decorator = assert(ast_1.findDecorator(ast_1.DecoratorKind.EXTERNAL, decoratorNodes));\n                this.error(diagnostics_1.DiagnosticCode.Decorator_0_is_not_valid_here, decorator.range, \"external\");\n            }\n            // compile body in this function's context\n            let previousFlow = this.currentFlow;\n            let flow = instance.flow;\n            this.currentFlow = flow;\n            let stmts = new Array();\n            if (!this.compileFunctionBody(instance, stmts)) {\n                stmts.push(module.unreachable());\n            }\n            this.currentFlow = previousFlow;\n            // create the function\n            funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, types_1.typesToNativeTypes(instance.additionalLocals), module.flatten(stmts, instance.signature.returnType.toNativeType()));\n            // imported function\n        }\n        else if (instance.is(common_1.CommonFlags.AMBIENT)) {\n            instance.set(common_1.CommonFlags.MODULE_IMPORT);\n            mangleImportName(instance, declarationNode); // TODO: check for duplicates\n            module.addFunctionImport(instance.internalName, mangleImportName_moduleName, mangleImportName_elementName, signature.nativeParams, signature.nativeResults);\n            funcRef = module.getFunction(instance.internalName);\n            // abstract or interface function\n        }\n        else if (instance.is(common_1.CommonFlags.ABSTRACT) || instance.parent.kind == program_1.ElementKind.INTERFACE) {\n            funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, null, module.unreachable());\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, instance.identifierNode.range);\n            funcRef = 0; // TODO?\n            instance.set(common_1.CommonFlags.ERRORED);\n        }\n        instance.finalize(module, funcRef);\n        this.currentType = previousType;\n        pendingElements.delete(instance);\n        return true;\n    }\n    /** Compiles the body of a function within the specified flow. */\n    compileFunctionBody(\n    /** Function to compile. */\n    instance, \n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts) {\n        var module = this.module;\n        var bodyNode = assert(instance.prototype.bodyNode);\n        var returnType = instance.signature.returnType;\n        var flow = this.currentFlow;\n        var thisLocal = instance.signature.thisType\n            ? assert(flow.lookupLocal(common_1.CommonNames.this_))\n            : null;\n        var bodyStartIndex = stmts.length;\n        // compile statements\n        if (bodyNode.kind == ast_1.NodeKind.BLOCK) {\n            stmts = this.compileStatements(bodyNode.statements, true, stmts);\n        }\n        else {\n            // must be an expression statement if not a block\n            assert(bodyNode.kind == ast_1.NodeKind.EXPRESSION);\n            // must be an arrow function\n            assert(instance.prototype.arrowKind);\n            // none of the following can be an arrow function\n            assert(!instance.isAny(common_1.CommonFlags.CONSTRUCTOR | common_1.CommonFlags.GET | common_1.CommonFlags.SET));\n            let expr = this.compileExpression(bodyNode.expression, returnType, 1 /* CONV_IMPLICIT */);\n            if (!flow.canOverflow(expr, returnType))\n                flow.set(2 /* RETURNS_WRAPPED */);\n            if (flow.isNonnull(expr, returnType))\n                flow.set(4 /* RETURNS_NONNULL */);\n            if (!stmts)\n                stmts = [expr];\n            else\n                stmts.push(expr);\n            if (!flow.is(256 /* TERMINATES */)) {\n                if (!flow.canOverflow(expr, returnType))\n                    flow.set(2 /* RETURNS_WRAPPED */);\n                if (flow.isNonnull(expr, returnType))\n                    flow.set(4 /* RETURNS_NONNULL */);\n                flow.set(1 /* RETURNS */ | 256 /* TERMINATES */);\n            }\n        }\n        // Make constructors return their instance pointer, and prepend a conditional\n        // allocation if any code path accesses `this`.\n        if (instance.is(common_1.CommonFlags.CONSTRUCTOR)) {\n            assert(instance.is(common_1.CommonFlags.INSTANCE));\n            thisLocal = assert(thisLocal);\n            let parent = assert(instance.parent);\n            assert(parent.kind == program_1.ElementKind.CLASS);\n            let classInstance = parent;\n            if (flow.isAny(64 /* ACCESSES_THIS */ | 8192 /* CONDITIONALLY_ACCESSES_THIS */) || !flow.is(256 /* TERMINATES */)) {\n                // Allocate `this` if not a super call, and initialize fields\n                let allocStmts = new Array();\n                allocStmts.push(this.makeConditionalAllocation(classInstance, thisLocal.index));\n                this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n                // Insert right before the body\n                for (let i = stmts.length - 1; i >= bodyStartIndex; --i) {\n                    stmts[i + 1] = stmts[i];\n                }\n                stmts[bodyStartIndex] = module.flatten(allocStmts, module_1.NativeType.None);\n                // Just prepended allocation is dropped when returning non-'this'\n                if (flow.is(16384 /* MAY_RETURN_NONTHIS */)) {\n                    if (this.options.pedantic) {\n                        this.pedantic(diagnostics_1.DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation, instance.identifierNode.range);\n                    }\n                }\n            }\n            // Returning something else than 'this' would break 'super()' calls\n            if (flow.is(16384 /* MAY_RETURN_NONTHIS */) && !classInstance.hasDecorator(program_1.DecoratorFlags.FINAL)) {\n                this.error(diagnostics_1.DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final, classInstance.identifierNode.range);\n            }\n            // Implicitly return `this` if the flow falls through\n            if (!flow.is(256 /* TERMINATES */)) {\n                stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n                flow.set(1 /* RETURNS */ | 4 /* RETURNS_NONNULL */ | 256 /* TERMINATES */);\n            }\n            // check that super has been called if this is a derived class\n            if (classInstance.base !== null && !flow.is(128 /* CALLS_SUPER */)) {\n                this.error(diagnostics_1.DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call, instance.prototype.declaration.range);\n            }\n            // if this is a normal function, make sure that all branches terminate\n        }\n        else if (returnType != types_1.Type.void && !flow.is(256 /* TERMINATES */)) {\n            this.error(diagnostics_1.DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value, instance.prototype.functionTypeNode.returnType.range);\n            return false; // not recoverable\n        }\n        return true;\n    }\n    // === Classes ==================================================================================\n    /** Compiles a priorly resolved class. */\n    compileClass(instance) {\n        if (instance.is(common_1.CommonFlags.COMPILED))\n            return true;\n        instance.set(common_1.CommonFlags.COMPILED);\n        var prototype = instance.prototype;\n        var staticMembers = prototype.members;\n        if (staticMembers) {\n            // TODO: for (let element of staticMembers.values()) {\n            for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n                let element = unchecked(_values[i]);\n                switch (element.kind) {\n                    case program_1.ElementKind.GLOBAL: {\n                        this.compileGlobal(element);\n                        break;\n                    }\n                    case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                        if (element.is(common_1.CommonFlags.GENERIC))\n                            break;\n                        let functionInstance = this.resolver.resolveFunction(element, null);\n                        if (!functionInstance)\n                            break;\n                        element = functionInstance;\n                        // fall-through\n                    }\n                    case program_1.ElementKind.FUNCTION: {\n                        this.compileFunction(element);\n                        break;\n                    }\n                    case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                        let propertyInstance = this.resolver.resolveProperty(element);\n                        if (!propertyInstance)\n                            break;\n                        element = propertyInstance;\n                        // fall-through\n                    }\n                    case program_1.ElementKind.PROPERTY: {\n                        this.compileProperty(element);\n                        break;\n                    }\n                }\n            }\n        }\n        this.ensureConstructor(instance, instance.identifierNode);\n        this.checkFieldInitialization(instance);\n        var instanceMembers = instance.members;\n        if (instanceMembers) {\n            // TODO: for (let element of instanceMembers.values()) {\n            for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n                let element = unchecked(_values[i]);\n                switch (element.kind) {\n                    case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                        if (element.is(common_1.CommonFlags.GENERIC))\n                            break;\n                        let functionInstance = this.resolver.resolveFunction(element, null);\n                        if (!functionInstance)\n                            break;\n                        element = functionInstance;\n                        // fall-through\n                    }\n                    case program_1.ElementKind.FUNCTION: {\n                        this.compileFunction(element);\n                        break;\n                    }\n                    case program_1.ElementKind.FIELD: {\n                        this.compileField(element);\n                        break;\n                    }\n                    case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                        let propertyInstance = this.resolver.resolveProperty(element);\n                        if (!propertyInstance)\n                            break;\n                        element = propertyInstance;\n                        // fall-through\n                    }\n                    case program_1.ElementKind.PROPERTY: {\n                        this.compileProperty(element);\n                        break;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /** Compiles an instance field to a getter and a setter. */\n    compileField(instance) {\n        this.compileFieldGetter(instance);\n        this.compileFieldSetter(instance);\n        return instance.is(common_1.CommonFlags.COMPILED);\n    }\n    /** Compiles the getter of the specified instance field. */\n    compileFieldGetter(instance) {\n        if (instance.getterRef)\n            return true;\n        var module = this.module;\n        var valueType = instance.type;\n        var nativeValueType = valueType.toNativeType();\n        var nativeThisType = this.options.nativeSizeType;\n        // return this.field\n        instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, module.load(valueType.byteSize, valueType.isSignedIntegerValue, module.local_get(0, nativeThisType), nativeValueType, instance.memoryOffset));\n        if (instance.setterRef) {\n            instance.set(common_1.CommonFlags.COMPILED);\n        }\n        else {\n            let typeNode = instance.typeNode;\n            if (typeNode)\n                this.checkTypeSupported(instance.type, typeNode);\n        }\n        return true;\n    }\n    /** Compiles the setter of the specified instance field. */\n    compileFieldSetter(instance) {\n        if (instance.setterRef)\n            return true;\n        var type = instance.type;\n        var nativeThisType = this.options.nativeSizeType;\n        var nativeValueType = type.toNativeType();\n        var module = this.module;\n        // void(this.field = value)\n        var bodyExpr = module.store(type.byteSize, module.local_get(0, nativeThisType), module.local_get(1, nativeValueType), nativeValueType, instance.memoryOffset);\n        if (type.isManaged) {\n            let parent = instance.parent;\n            assert(parent.kind == program_1.ElementKind.CLASS);\n            if (parent.type.isManaged) {\n                let linkInstance = this.program.linkInstance;\n                this.compileFunction(linkInstance);\n                bodyExpr = module.block(null, [\n                    bodyExpr,\n                    module.call(linkInstance.internalName, [\n                        module.local_get(0, nativeThisType),\n                        module.local_get(1, nativeValueType),\n                        module.i32(0)\n                    ], module_1.NativeType.None)\n                ], module_1.NativeType.None);\n            }\n        }\n        instance.setterRef = module.addFunction(instance.internalSetterName, module_1.createType([nativeThisType, nativeValueType]), module_1.NativeType.None, null, bodyExpr);\n        if (instance.getterRef) {\n            instance.set(common_1.CommonFlags.COMPILED);\n        }\n        else {\n            let typeNode = instance.typeNode;\n            if (typeNode)\n                this.checkTypeSupported(instance.type, typeNode);\n        }\n        return true;\n    }\n    /** Compiles a property to a getter and potentially a setter. */\n    compileProperty(instance) {\n        this.compilePropertyGetter(instance);\n        this.compilePropertySetter(instance);\n        return instance.is(common_1.CommonFlags.COMPILED);\n    }\n    /* Compiles the getter of the specified property. */\n    compilePropertyGetter(instance) {\n        var getterInstance = instance.getterInstance;\n        if (getterInstance) {\n            let ret = this.compileFunction(getterInstance);\n            let setterInstance = instance.setterInstance;\n            if (getterInstance.is(common_1.CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(common_1.CommonFlags.COMPILED))) {\n                instance.set(common_1.CommonFlags.COMPILED);\n            }\n            return ret;\n        }\n        return false;\n    }\n    /** Compiles the setter of the specified property. */\n    compilePropertySetter(instance) {\n        var setterInstance = instance.setterInstance;\n        if (setterInstance) {\n            let ret = this.compileFunction(setterInstance);\n            let getterInstance = instance.getterInstance;\n            if (getterInstance !== null && getterInstance.is(common_1.CommonFlags.COMPILED) && setterInstance.is(common_1.CommonFlags.COMPILED)) {\n                instance.set(common_1.CommonFlags.COMPILED);\n            }\n            return ret;\n        }\n        return false;\n    }\n    // === Memory ===================================================================================\n    /** Adds a static memory segment with the specified data. */\n    addAlignedMemorySegment(buffer, alignment = 16) {\n        assert(util_1.isPowerOf2(alignment));\n        var memoryOffset = i64_align(this.memoryOffset, alignment);\n        var segment = new module_1.MemorySegment(buffer, memoryOffset);\n        this.memorySegments.push(segment);\n        this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n        return segment;\n    }\n    /** Adds a static memory segment representing a runtime object. */\n    addRuntimeMemorySegment(buffer) {\n        var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n        var segment = new module_1.MemorySegment(buffer, memoryOffset);\n        this.memorySegments.push(segment);\n        this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n        return segment;\n    }\n    /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n    ensureStaticString(stringValue) {\n        var program = this.program;\n        var totalOverhead = program.totalOverhead;\n        var stringInstance = assert(program.stringInstance);\n        var stringSegment;\n        var segments = this.stringSegments;\n        if (segments.has(stringValue)) {\n            stringSegment = assert(segments.get(stringValue)); // reuse\n        }\n        else {\n            let len = stringValue.length;\n            let buf = stringInstance.createBuffer(len << 1);\n            for (let i = 0; i < len; ++i) {\n                util_1.writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n            }\n            stringSegment = this.addRuntimeMemorySegment(buf);\n            segments.set(stringValue, stringSegment);\n        }\n        var ptr = i64_add(stringSegment.offset, i64_new(totalOverhead));\n        this.currentType = stringInstance.type;\n        if (this.options.isWasm64) {\n            return this.module.i64(i64_low(ptr), i64_high(ptr));\n        }\n        else {\n            assert(i64_is_u32(ptr));\n            return this.module.i32(i64_low(ptr));\n        }\n    }\n    /** Writes a series of static values of the specified type to a buffer. */\n    writeStaticBuffer(buf, pos, elementType, values) {\n        var length = values.length;\n        var byteSize = elementType.byteSize;\n        var nativeType = elementType.toNativeType();\n        switch (nativeType) {\n            case module_1.NativeType.I32: {\n                switch (byteSize) {\n                    case 1: {\n                        for (let i = 0; i < length; ++i) {\n                            let value = values[i];\n                            assert(module_1.getExpressionType(value) == nativeType);\n                            assert(module_1.getExpressionId(value) == module_1.ExpressionId.Const);\n                            util_1.writeI8(module_1.getConstValueI32(value), buf, pos);\n                            pos += 1;\n                        }\n                        break;\n                    }\n                    case 2: {\n                        for (let i = 0; i < length; ++i) {\n                            let value = values[i];\n                            assert(module_1.getExpressionType(value) == nativeType);\n                            assert(module_1.getExpressionId(value) == module_1.ExpressionId.Const);\n                            util_1.writeI16(module_1.getConstValueI32(value), buf, pos);\n                            pos += 2;\n                        }\n                        break;\n                    }\n                    case 4: {\n                        for (let i = 0; i < length; ++i) {\n                            let value = values[i];\n                            assert(module_1.getExpressionType(value) == nativeType);\n                            assert(module_1.getExpressionId(value) == module_1.ExpressionId.Const);\n                            util_1.writeI32(module_1.getConstValueI32(value), buf, pos);\n                            pos += 4;\n                        }\n                        break;\n                    }\n                    default: assert(false);\n                }\n                break;\n            }\n            case module_1.NativeType.I64: {\n                for (let i = 0; i < length; ++i) {\n                    let value = values[i];\n                    assert(module_1.getExpressionType(value) == nativeType);\n                    assert(module_1.getExpressionId(value) == module_1.ExpressionId.Const);\n                    util_1.writeI64(i64_new(module_1.getConstValueI64Low(value), module_1.getConstValueI64High(value)), buf, pos);\n                    pos += 8;\n                }\n                break;\n            }\n            case module_1.NativeType.F32: {\n                for (let i = 0; i < length; ++i) {\n                    let value = values[i];\n                    assert(module_1.getExpressionType(value) == nativeType);\n                    assert(module_1.getExpressionId(value) == module_1.ExpressionId.Const);\n                    util_1.writeF32(module_1.getConstValueF32(value), buf, pos);\n                    pos += 4;\n                }\n                break;\n            }\n            case module_1.NativeType.F64: {\n                for (let i = 0; i < length; ++i) {\n                    let value = values[i];\n                    assert(module_1.getExpressionType(value) == nativeType);\n                    assert(module_1.getExpressionId(value) == module_1.ExpressionId.Const);\n                    util_1.writeF64(module_1.getConstValueF64(value), buf, pos);\n                    pos += 8;\n                }\n                break;\n            }\n            default: assert(false);\n        }\n        return pos;\n    }\n    /** Adds a buffer to static memory and returns the created segment. */\n    addStaticBuffer(elementType, values, id = this.program.arrayBufferInstance.id) {\n        var program = this.program;\n        var arrayBufferInstance = program.arrayBufferInstance;\n        var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n        this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n        this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n        return this.addRuntimeMemorySegment(buf);\n    }\n    /** Adds an array header to static memory and returns the created segment. */\n    addStaticArrayHeader(elementType, bufferSegment) {\n        var program = this.program;\n        var arrayPrototype = assert(program.arrayPrototype);\n        var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [elementType]));\n        var bufferLength = util_1.readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n        var arrayLength = i32(bufferLength / elementType.byteSize);\n        var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n        var buf = arrayInstance.createBuffer();\n        assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n        assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n        assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n        assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n        return this.addRuntimeMemorySegment(buf);\n    }\n    // === Table ====================================================================================\n    /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n    ensureRuntimeFunction(instance) {\n        assert(instance.is(common_1.CommonFlags.COMPILED) && !instance.is(common_1.CommonFlags.STUB));\n        var program = this.program;\n        var memorySegment = instance.memorySegment;\n        if (!memorySegment) {\n            // Add to the function table\n            let functionTable = this.functionTable;\n            let tableBase = this.options.tableBase;\n            if (!tableBase)\n                tableBase = 1; // leave first elem blank\n            let index = tableBase + functionTable.length;\n            functionTable.push(instance);\n            // Create runtime function\n            let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [instance.type]));\n            let buf = rtInstance.createBuffer();\n            assert(rtInstance.writeField(\"_index\", index, buf));\n            assert(rtInstance.writeField(\"_env\", 0, buf));\n            instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n        }\n        return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n    }\n    // === Statements ===============================================================================\n    /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n    compileTopLevelStatement(statement, body) {\n        switch (statement.kind) {\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                let memberStatements = statement.members;\n                for (let i = 0, k = memberStatements.length; i < k; ++i) {\n                    this.compileTopLevelStatement(memberStatements[i], body);\n                }\n                break;\n            }\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                let element = this.program.getElementByDeclaration(statement);\n                if (element) {\n                    assert(element.kind == program_1.ElementKind.ENUM);\n                    if (!element.hasDecorator(program_1.DecoratorFlags.LAZY))\n                        this.compileEnum(element);\n                }\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                let declaration = statement;\n                let element = this.program.getElementByDeclaration(declaration);\n                if (element) {\n                    // any potentiall merged element\n                    let previousParent = this.currentParent;\n                    this.currentParent = element;\n                    let memberStatements = declaration.members;\n                    for (let i = 0, k = memberStatements.length; i < k; ++i) {\n                        this.compileTopLevelStatement(memberStatements[i], body);\n                    }\n                    this.currentParent = previousParent;\n                }\n                break;\n            }\n            case ast_1.NodeKind.VARIABLE: {\n                let declarations = statement.declarations;\n                for (let i = 0, k = declarations.length; i < k; ++i) {\n                    let element = this.program.getElementByDeclaration(declarations[i]);\n                    if (element) {\n                        assert(element.kind == program_1.ElementKind.GLOBAL);\n                        if (!element.is(common_1.CommonFlags.AMBIENT) && // delay imports\n                            !element.hasDecorator(program_1.DecoratorFlags.LAZY))\n                            this.compileGlobal(element);\n                    }\n                }\n                break;\n            }\n            case ast_1.NodeKind.FIELDDECLARATION: {\n                let element = this.program.getElementByDeclaration(statement);\n                if (element !== null && element.kind == program_1.ElementKind.GLOBAL) { // static\n                    if (!element.hasDecorator(program_1.DecoratorFlags.LAZY))\n                        this.compileGlobal(element);\n                }\n                break;\n            }\n            case ast_1.NodeKind.EXPORT: {\n                let exportStatement = statement;\n                let internalPath = exportStatement.internalPath;\n                if (internalPath !== null) {\n                    this.compileFileByPath(internalPath, assert(exportStatement.path));\n                }\n                break;\n            }\n            case ast_1.NodeKind.EXPORTDEFAULT: {\n                this.compileTopLevelStatement(statement.declaration, body);\n                break;\n            }\n            case ast_1.NodeKind.IMPORT: {\n                let importStatement = statement;\n                this.compileFileByPath(importStatement.internalPath, importStatement.path);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION:\n            case ast_1.NodeKind.METHODDECLARATION:\n            case ast_1.NodeKind.INTERFACEDECLARATION:\n            case ast_1.NodeKind.INDEXSIGNATURE:\n            case ast_1.NodeKind.TYPEDECLARATION: break;\n            default: { // otherwise a top-level statement that is part of the start function's body\n                let stmt = this.compileStatement(statement);\n                if (module_1.getExpressionId(stmt) != module_1.ExpressionId.Nop)\n                    body.push(stmt);\n                break;\n            }\n        }\n    }\n    /** Compiles a statement. */\n    compileStatement(\n    /** Statement to compile. */\n    statement, \n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody = false) {\n        var module = this.module;\n        var stmt;\n        switch (statement.kind) {\n            case ast_1.NodeKind.BLOCK: {\n                stmt = this.compileBlockStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.BREAK: {\n                stmt = this.compileBreakStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.CONTINUE: {\n                stmt = this.compileContinueStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.DO: {\n                stmt = this.compileDoStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.EMPTY: {\n                stmt = this.compileEmptyStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.EXPRESSION: {\n                stmt = this.compileExpressionStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.FOR: {\n                stmt = this.compileForStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.FOROF: {\n                stmt = this.compileForOfStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.IF: {\n                stmt = this.compileIfStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.RETURN: {\n                stmt = this.compileReturnStatement(statement, isLastInBody);\n                break;\n            }\n            case ast_1.NodeKind.SWITCH: {\n                stmt = this.compileSwitchStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.THROW: {\n                stmt = this.compileThrowStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.TRY: {\n                stmt = this.compileTryStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLE: {\n                stmt = this.compileVariableStatement(statement);\n                if (!stmt)\n                    stmt = module.nop();\n                break;\n            }\n            case ast_1.NodeKind.VOID: {\n                stmt = this.compileVoidStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.WHILE: {\n                stmt = this.compileWhileStatement(statement);\n                break;\n            }\n            case ast_1.NodeKind.TYPEDECLARATION: {\n                // TODO: integrate inner type declaration into flow\n                this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, statement.range, \"Inner type alias\");\n                stmt = module.unreachable();\n                break;\n            }\n            default: {\n                assert(false);\n                stmt = module.unreachable();\n            }\n        }\n        if (this.options.sourceMap)\n            this.addDebugLocation(stmt, statement.range);\n        return stmt;\n    }\n    /** Compiles a series of statements. */\n    compileStatements(\n    /** Statements to compile. */\n    statements, \n    /** Whether this is an immediate body statement. */\n    isBody = false, \n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts = null) {\n        var numStatements = statements.length;\n        if (!stmts) {\n            stmts = new Array(numStatements);\n            stmts.length = 0;\n        }\n        var module = this.module;\n        var flow = this.currentFlow;\n        for (let i = 0; i < numStatements; ++i) {\n            let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n            switch (module_1.getExpressionId(stmt)) {\n                case module_1.ExpressionId.Block: {\n                    if (!module_1.getBlockName(stmt)) {\n                        for (let j = 0, k = module_1.getBlockChildCount(stmt); j < k; ++j)\n                            stmts.push(module_1.getBlockChildAt(stmt, j));\n                        break;\n                    }\n                    // fall-through\n                }\n                default: stmts.push(stmt);\n                case module_1.ExpressionId.Nop:\n            }\n            if (flow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */)) {\n                if (module_1.needsExplicitUnreachable(stmt))\n                    stmts.push(module.unreachable());\n                break;\n            }\n        }\n        return stmts;\n    }\n    compileBlockStatement(statement) {\n        var statements = statement.statements;\n        var outerFlow = this.currentFlow;\n        var innerFlow = outerFlow.fork();\n        this.currentFlow = innerFlow;\n        var stmts = this.compileStatements(statements);\n        innerFlow.freeScopedLocals();\n        outerFlow.inherit(innerFlow);\n        this.currentFlow = outerFlow;\n        return this.module.flatten(stmts);\n    }\n    compileBreakStatement(statement) {\n        var module = this.module;\n        var labelNode = statement.label;\n        if (labelNode) {\n            this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, labelNode.range, \"Break label\");\n            return module.unreachable();\n        }\n        var flow = this.currentFlow;\n        var breakLabel = flow.breakLabel;\n        if (breakLabel == null) {\n            this.error(diagnostics_1.DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement, statement.range);\n            return module.unreachable();\n        }\n        flow.freeScopedLocals();\n        flow.set(16 /* BREAKS */);\n        return module.br(breakLabel);\n    }\n    compileContinueStatement(statement) {\n        var module = this.module;\n        var label = statement.label;\n        if (label) {\n            this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, label.range, \"Continue label\");\n            return module.unreachable();\n        }\n        // Check if 'continue' is allowed here\n        var flow = this.currentFlow;\n        var continueLabel = flow.continueLabel;\n        if (continueLabel == null) {\n            this.error(diagnostics_1.DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement, statement.range);\n            return module.unreachable();\n        }\n        flow.set(32 /* CONTINUES */ | 256 /* TERMINATES */);\n        flow.freeScopedLocals();\n        return module.br(continueLabel);\n    }\n    compileDoStatement(\n    /** Statement to compile. */\n    statement) {\n        return this.doCompileDoStatement(statement, null);\n    }\n    doCompileDoStatement(\n    /** Statement to compile. */\n    statement, \n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter) {\n        var module = this.module;\n        var outerFlow = this.currentFlow;\n        // (block $break                          └►┐ flow\n        //  (loop $continue                         ├◄───────────┐ recompile?\n        //   (body)                                 └─┐ bodyFlow │\n        //                                          ┌─┘          │\n        //                                        ┌◄┼►╢          │ breaks or terminates?\n        //   (local.set $tcond (condition))       │ └─┐ condFlow │\n        //                                        │ ┌─┘          │\n        //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n        //  )                                     └─┐\n        // )                                      ┌─┘\n        var label = outerFlow.pushBreakLabel();\n        var flow = outerFlow.fork(/* resetBreakContext */ true);\n        if (flowAfter)\n            flow.unifyLocalFlags(flowAfter);\n        var flowBefore = flow.fork();\n        this.currentFlow = flow;\n        var breakLabel = \"do-break|\" + label;\n        flow.breakLabel = breakLabel;\n        var continueLabel = \"do-continue|\" + label;\n        flow.continueLabel = continueLabel;\n        // Compile the body (always executes)\n        var bodyFlow = flow.fork();\n        this.currentFlow = bodyFlow;\n        var bodyStmts = new Array();\n        var body = statement.statement;\n        if (body.kind == ast_1.NodeKind.BLOCK) {\n            this.compileStatements(body.statements, false, bodyStmts);\n        }\n        else {\n            bodyStmts.push(this.compileStatement(body));\n        }\n        // Shortcut if body never falls through\n        if (bodyFlow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */)) {\n            bodyStmts.push(module.unreachable());\n            flow.inherit(bodyFlow);\n            // Otherwise evaluate the condition\n        }\n        else {\n            let condFlow = flow.fork();\n            this.currentFlow = condFlow;\n            let condExpr = this.makeIsTrueish(this.compileExpression(statement.condition, types_1.Type.i32), this.currentType, statement.condition);\n            let condKind = this.evaluateCondition(condExpr);\n            // Shortcut if condition is always false\n            if (condKind == 2 /* FALSE */) {\n                bodyStmts.push(module.drop(condExpr));\n                flow.inherit(bodyFlow);\n                // Terminate if condition is always true and body never breaks\n            }\n            else if (condKind == 1 /* TRUE */ && !bodyFlow.isAny(16 /* BREAKS */ | 2048 /* CONDITIONALLY_BREAKS */)) {\n                bodyStmts.push(module.drop(condExpr));\n                bodyStmts.push(module.br(continueLabel));\n                flow.set(256 /* TERMINATES */);\n            }\n            else {\n                let tcond = condFlow.getTempLocal(types_1.Type.bool);\n                bodyStmts.push(module.local_set(tcond.index, condExpr, false) // bool\n                );\n                bodyStmts.push(module.br(continueLabel, module.local_get(tcond.index, module_1.NativeType.I32)));\n                condFlow.freeTempLocal(tcond);\n                flow.inherit(condFlow);\n                // Detect if local flags are incompatible before and after looping, and\n                // if so recompile by unifying local flags between iterations. Note that\n                // this may be necessary multiple times where locals depend on each other.\n                if (flow_1.Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n                    outerFlow.popBreakLabel();\n                    this.currentFlow = outerFlow;\n                    return this.doCompileDoStatement(statement, flow);\n                }\n            }\n        }\n        // Finalize\n        assert(!flow.hasScopedLocals);\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        var expr = module.block(breakLabel, [\n            module.loop(continueLabel, module.flatten(bodyStmts))\n        ]);\n        if (outerFlow.is(256 /* TERMINATES */)) {\n            expr = module.block(null, [expr, module.unreachable()]);\n        }\n        return expr;\n    }\n    compileEmptyStatement(statement) {\n        return this.module.nop();\n    }\n    compileExpressionStatement(statement) {\n        return this.compileExpression(statement.expression, types_1.Type.void, 1 /* CONV_IMPLICIT */);\n    }\n    compileForStatement(\n    /** Statement to compile. */\n    statement) {\n        return this.doCompileForStatement(statement, null);\n    }\n    doCompileForStatement(\n    /** Statement to compile. */\n    statement, \n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter) {\n        var module = this.module;\n        var outerFlow = this.currentFlow;\n        // (initializer)                  └►┐ flow\n        // (block $break                    │\n        //  (loop $loop                     ├◄───────────┐ recompile?\n        //   (local.set $tcond (condition)) └─┐ condFlow │\n        //                                  ┌─┘          │\n        //   (if (local.get $tcond)       ┌◄┤            │ condition?\n        //    (block $continue            │ │            │\n        //     (body)                     │ └─┐ bodyFlow │\n        //                                │ ┌─┘          │\n        //    )                           ├◄┼►╢          │ breaks or terminates?\n        //    (incrementor)               │ └─┐ incrFlow │\n        //                                │ ┌─┘          │\n        //                                │ └────────────┘\n        //    (br $loop)                  └─┐\n        //   )                              │\n        //  )                               │\n        // )                                │\n        //                                ┌─┘\n        var label = outerFlow.pushBreakLabel();\n        var stmts = new Array();\n        var flow = outerFlow.fork(/* resetBreakContext */ true);\n        this.currentFlow = flow;\n        var breakLabel = \"for-break\" + label;\n        flow.breakLabel = breakLabel;\n        var continueLabel = \"for-continue|\" + label;\n        flow.continueLabel = continueLabel;\n        var loopLabel = \"for-loop|\" + label;\n        // Compile initializer if present\n        var initializer = statement.initializer;\n        if (initializer) {\n            assert(initializer.kind == ast_1.NodeKind.EXPRESSION ||\n                initializer.kind == ast_1.NodeKind.VARIABLE);\n            stmts.push(this.compileStatement(initializer));\n        }\n        if (flowAfter)\n            flow.unifyLocalFlags(flowAfter);\n        var flowBefore = flow.fork();\n        // Precompute the condition\n        var condFlow = flow.fork();\n        this.currentFlow = condFlow;\n        var condExpr;\n        var condKind;\n        var condition = statement.condition;\n        if (condition) {\n            condExpr = this.makeIsTrueish(this.compileExpression(condition, types_1.Type.bool), this.currentType, condition);\n            condKind = this.evaluateCondition(condExpr);\n            // Shortcut if condition is always false (body never runs)\n            if (condKind == 2 /* FALSE */) {\n                stmts.push(module.drop(condExpr));\n                condFlow.freeScopedLocals();\n                flow.inherit(condFlow);\n                flow.freeScopedLocals();\n                outerFlow.inherit(flow);\n                outerFlow.popBreakLabel();\n                this.currentFlow = outerFlow;\n                return module.flatten(stmts);\n            }\n        }\n        else {\n            condExpr = module.i32(1);\n            condKind = 1 /* TRUE */;\n        }\n        // From here on condition is either always true or unknown\n        // Store condition result in a temp\n        var tcond = flow.getTempLocal(types_1.Type.bool);\n        var loopStmts = new Array();\n        loopStmts.push(module.local_set(tcond.index, condExpr, false) // bool\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow); // always executes\n        this.currentFlow = flow;\n        // Compile the body assuming the condition turned out true\n        var bodyFlow = flow.fork();\n        bodyFlow.inheritNonnullIfTrue(condExpr);\n        this.currentFlow = bodyFlow;\n        var bodyStmts = new Array();\n        var body = statement.statement;\n        if (body.kind == ast_1.NodeKind.BLOCK) {\n            this.compileStatements(body.statements, false, bodyStmts);\n        }\n        else {\n            bodyStmts.push(this.compileStatement(body));\n        }\n        // Check if body terminates\n        if (bodyFlow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */)) {\n            bodyStmts.push(module.unreachable());\n        }\n        if (condKind == 1 /* TRUE */)\n            flow.inherit(bodyFlow);\n        else\n            flow.inheritBranch(bodyFlow);\n        bodyFlow.freeScopedLocals();\n        var ifStmts = new Array();\n        ifStmts.push(module.block(continueLabel, bodyStmts));\n        // Compile the incrementor if it runs\n        // Can still fall through to here if body continues, hence is already known to terminate\n        if (!bodyFlow.is(256 /* TERMINATES */) || bodyFlow.isAny(32 /* CONTINUES */ | 4096 /* CONDITIONALLY_CONTINUES */)) {\n            let incrementor = statement.incrementor;\n            if (incrementor) {\n                let incrFlow = flow.fork();\n                this.currentFlow = incrFlow;\n                ifStmts.push(this.compileExpression(incrementor, types_1.Type.void, 1 /* CONV_IMPLICIT */ | 8 /* WILL_DROP */));\n                incrFlow.freeScopedLocals();\n                flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n                this.currentFlow = flow;\n            }\n            ifStmts.push(module.br(loopLabel));\n            // Detect if local flags are incompatible before and after looping, and if\n            // so recompile by unifying local flags between iterations. Note that this\n            // may be necessary multiple times where locals depend on each other.\n            if (flow_1.Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n                assert(!bodyFlow.hasScopedLocals);\n                flow.freeScopedLocals();\n                outerFlow.popBreakLabel();\n                this.currentFlow = outerFlow;\n                return this.doCompileForStatement(statement, flow);\n            }\n        }\n        loopStmts.push(module.if(module.local_get(tcond.index, module_1.NativeType.I32), module.flatten(ifStmts)));\n        stmts.push(module.block(breakLabel, [\n            module.loop(loopLabel, module.flatten(loopStmts))\n        ]));\n        flow.freeTempLocal(tcond);\n        this.currentFlow = flow;\n        // Finalize\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        if (outerFlow.is(256 /* TERMINATES */)) {\n            stmts.push(module.unreachable());\n        }\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n    }\n    compileForOfStatement(statement) {\n        this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, statement.range, \"Iterators\");\n        return this.module.unreachable();\n    }\n    compileIfStatement(statement) {\n        var module = this.module;\n        var ifTrue = statement.ifTrue;\n        var ifFalse = statement.ifFalse;\n        // (if              └►┐ flow\n        //  (condition)      ┌┴───────────┐ condition?\n        //  (block           │            │\n        //   (ifTrue)        └►┐ thenFlow │\n        //                   ┌─┘          │\n        //  )                ├─╢          │\n        //  (block           │          ┌◄┤ present?\n        //   (ifFalse)       │          │ └►┐ elseFlow\n        //                   │          │ ┌─┘\n        //  )                │          │ ├─╢\n        // )                 └┬─────────┴─┘\n        // ...              ┌◄┘\n        // Precompute the condition (always executes)\n        var condExpr = this.makeIsTrueish(this.compileExpression(statement.condition, types_1.Type.bool), this.currentType, statement.condition);\n        var condKind = this.evaluateCondition(condExpr);\n        // Shortcut if the condition is constant\n        switch (condKind) {\n            case 1 /* TRUE */: {\n                return module.block(null, [\n                    module.drop(condExpr),\n                    this.compileStatement(ifTrue)\n                ]);\n            }\n            case 2 /* FALSE */: {\n                return ifFalse\n                    ? module.block(null, [\n                        module.drop(condExpr),\n                        this.compileStatement(ifFalse)\n                    ])\n                    : module.drop(condExpr);\n            }\n        }\n        // From here on condition is always unknown\n        var flow = this.currentFlow;\n        // Compile ifTrue assuming the condition turned out true\n        var thenStmts = new Array();\n        var thenFlow = flow.fork();\n        this.currentFlow = thenFlow;\n        thenFlow.inheritNonnullIfTrue(condExpr);\n        if (ifTrue.kind == ast_1.NodeKind.BLOCK) {\n            this.compileStatements(ifTrue.statements, false, thenStmts);\n        }\n        else {\n            thenStmts.push(this.compileStatement(ifTrue));\n        }\n        var thenTerminates = thenFlow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */);\n        if (thenTerminates) {\n            thenStmts.push(module.unreachable());\n        }\n        thenFlow.freeScopedLocals();\n        this.currentFlow = flow;\n        // Compile ifFalse assuming the condition turned out false, if present\n        if (ifFalse) {\n            let elseStmts = new Array();\n            let elseFlow = flow.fork();\n            this.currentFlow = elseFlow;\n            elseFlow.inheritNonnullIfFalse(condExpr);\n            if (ifFalse.kind == ast_1.NodeKind.BLOCK) {\n                this.compileStatements(ifFalse.statements, false, elseStmts);\n            }\n            else {\n                elseStmts.push(this.compileStatement(ifFalse));\n            }\n            let elseTerminates = elseFlow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */);\n            if (elseTerminates) {\n                elseStmts.push(module.unreachable());\n            }\n            elseFlow.freeScopedLocals();\n            this.currentFlow = flow;\n            flow.inheritMutual(thenFlow, elseFlow);\n            return module.if(condExpr, module.flatten(thenStmts), module.flatten(elseStmts));\n        }\n        else {\n            flow.inheritBranch(thenFlow);\n            flow.inheritNonnullIfFalse(condExpr, thenFlow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */)\n                ? null // thenFlow terminates: just inherit\n                : thenFlow // must become nonnull in thenFlow otherwise\n            );\n            return module.if(condExpr, module.flatten(thenStmts));\n        }\n    }\n    compileReturnStatement(statement, isLastInBody) {\n        var module = this.module;\n        var expr = 0;\n        var flow = this.currentFlow;\n        var returnType = flow.returnType;\n        var valueExpression = statement.value;\n        if (valueExpression) {\n            if (returnType == types_1.Type.void) {\n                this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, valueExpression.range, this.currentType.toString(), returnType.toString());\n                this.currentType = types_1.Type.void;\n                return module.unreachable();\n            }\n            let constraints = 1 /* CONV_IMPLICIT */;\n            if (flow.actualFunction.is(common_1.CommonFlags.MODULE_EXPORT))\n                constraints |= 4 /* MUST_WRAP */;\n            expr = this.compileExpression(valueExpression, returnType, constraints);\n            if (!flow.canOverflow(expr, returnType))\n                flow.set(2 /* RETURNS_WRAPPED */);\n            if (flow.isNonnull(expr, returnType))\n                flow.set(4 /* RETURNS_NONNULL */);\n            if (flow.actualFunction.is(common_1.CommonFlags.CONSTRUCTOR) && valueExpression.kind != ast_1.NodeKind.THIS) {\n                flow.set(16384 /* MAY_RETURN_NONTHIS */);\n            }\n        }\n        else if (returnType != types_1.Type.void) {\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, statement.range, \"void\", returnType.toString());\n            this.currentType = returnType;\n            return module.unreachable();\n        }\n        flow.freeScopedLocals();\n        // Remember that this flow returns\n        flow.set(1 /* RETURNS */ | 256 /* TERMINATES */);\n        // Handle inline return\n        if (flow.isInline) {\n            return isLastInBody && expr != 0\n                ? expr\n                : module.br(assert(flow.inlineReturnLabel), 0, expr);\n        }\n        // Otherwise emit a normal return\n        return isLastInBody && expr != 0\n            ? expr\n            : module.return(expr);\n    }\n    compileSwitchStatement(statement) {\n        var module = this.module;\n        var cases = statement.cases;\n        var numCases = cases.length;\n        if (!numCases) {\n            return this.compileExpression(statement.condition, types_1.Type.void, 1 /* CONV_IMPLICIT */);\n        }\n        // Everything within a switch uses the same break context\n        var outerFlow = this.currentFlow;\n        var context = outerFlow.pushBreakLabel();\n        // introduce a local for evaluating the condition (exactly once)\n        var tempLocal = outerFlow.getTempLocal(types_1.Type.u32);\n        var tempLocalIndex = tempLocal.index;\n        // Prepend initializer to inner block. Does not initiate a new branch, yet.\n        var breaks = new Array(1 + numCases);\n        breaks[0] = module.local_set(// initializer\n        tempLocalIndex, this.compileExpression(statement.condition, types_1.Type.u32, 1 /* CONV_IMPLICIT */), false // u32\n        );\n        // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n        var breakIndex = 1;\n        var defaultIndex = -1;\n        for (let i = 0; i < numCases; ++i) {\n            let case_ = cases[i];\n            let label = case_.label;\n            if (label) {\n                breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context, module.binary(module_1.BinaryOp.EqI32, module.local_get(tempLocalIndex, module_1.NativeType.I32), this.compileExpression(label, types_1.Type.u32, 1 /* CONV_IMPLICIT */)));\n            }\n            else {\n                defaultIndex = i;\n            }\n        }\n        outerFlow.freeTempLocal(tempLocal);\n        // otherwise br to default respectively out of the switch if there is no default case\n        breaks[breakIndex] = module.br((defaultIndex >= 0\n            ? \"case\" + defaultIndex.toString()\n            : \"break\") + \"|\" + context);\n        // nest blocks in order\n        var currentBlock = module.block(\"case0|\" + context, breaks, module_1.NativeType.None);\n        var commonCategorical = 511 /* ANY_CATEGORICAL */;\n        var commonConditional = 0;\n        for (let i = 0; i < numCases; ++i) {\n            let case_ = cases[i];\n            let statements = case_.statements;\n            let numStatements = statements.length;\n            // Each switch case initiates a new branch\n            let innerFlow = outerFlow.fork();\n            this.currentFlow = innerFlow;\n            let breakLabel = \"break|\" + context;\n            innerFlow.breakLabel = breakLabel;\n            let isLast = i == numCases - 1;\n            let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n            let stmts = new Array(1 + numStatements);\n            stmts[0] = currentBlock;\n            let count = 1;\n            let terminates = false;\n            for (let j = 0; j < numStatements; ++j) {\n                let stmt = this.compileStatement(statements[j]);\n                if (module_1.getExpressionId(stmt) != module_1.ExpressionId.Nop) {\n                    stmts[count++] = stmt;\n                }\n                if (innerFlow.isAny(256 /* TERMINATES */ | 16 /* BREAKS */)) {\n                    if (innerFlow.is(256 /* TERMINATES */))\n                        terminates = true;\n                    break;\n                }\n            }\n            stmts.length = count;\n            if (terminates || isLast || innerFlow.isAny(16 /* BREAKS */ | 2048 /* CONDITIONALLY_BREAKS */)) {\n                commonCategorical &= innerFlow.flags;\n            }\n            commonConditional |= innerFlow.flags & 15872 /* ANY_CONDITIONAL */;\n            // Switch back to the parent flow\n            innerFlow.unset(16 /* BREAKS */ |\n                2048 /* CONDITIONALLY_BREAKS */);\n            innerFlow.freeScopedLocals();\n            this.currentFlow = outerFlow;\n            currentBlock = module.block(nextLabel, stmts, module_1.NativeType.None); // must be a labeled block\n        }\n        outerFlow.popBreakLabel();\n        // If the switch has a default (guaranteed to handle any value), propagate common flags\n        if (defaultIndex >= 0)\n            outerFlow.flags |= commonCategorical & ~16 /* BREAKS */;\n        outerFlow.flags |= commonConditional & ~2048 /* CONDITIONALLY_BREAKS */;\n        // TODO: what about local states?\n        return currentBlock;\n    }\n    compileThrowStatement(statement) {\n        // TODO: requires exception-handling spec.\n        var flow = this.currentFlow;\n        // Remember that this branch throws\n        flow.set(8 /* THROWS */ | 256 /* TERMINATES */);\n        var stmts = new Array();\n        var value = statement.value;\n        var message = null;\n        if (value.kind == ast_1.NodeKind.NEW) {\n            let newArgs = value.args;\n            if (newArgs.length)\n                message = newArgs[0]; // FIXME: naively assumes type string\n        }\n        stmts.push(this.makeAbort(message, statement));\n        flow.freeScopedLocals();\n        return this.module.flatten(stmts);\n    }\n    compileTryStatement(statement) {\n        // TODO: can't yet support something like: try { return ... } finally { ... }\n        // worthwhile to investigate lowering returns to block results (here)?\n        this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, statement.range, \"Exceptions\");\n        return this.module.unreachable();\n    }\n    /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n    compileVariableStatement(statement) {\n        var module = this.module;\n        var declarations = statement.declarations;\n        var numDeclarations = declarations.length;\n        var flow = this.currentFlow;\n        var initializers = new Array();\n        var resolver = this.resolver;\n        for (let i = 0; i < numDeclarations; ++i) {\n            let declaration = declarations[i];\n            let name = declaration.name.text;\n            let type = null;\n            let initExpr = 0;\n            // Resolve type if annotated\n            let typeNode = declaration.type;\n            let initializerNode = declaration.initializer;\n            if (typeNode) {\n                type = resolver.resolveType(// reports\n                typeNode, flow.actualFunction, util_1.uniqueMap(flow.contextualTypeArguments));\n                if (!type)\n                    continue;\n                this.checkTypeSupported(type, typeNode);\n                if (initializerNode) {\n                    let pendingElements = this.pendingElements;\n                    let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n                    pendingElements.add(dummy);\n                    initExpr = this.compileExpression(initializerNode, type, // reports\n                    1 /* CONV_IMPLICIT */);\n                    pendingElements.delete(dummy);\n                    flow.freeScopedDummyLocal(name);\n                }\n                // Otherwise infer type from initializer\n            }\n            else if (initializerNode) {\n                let pendingElements = this.pendingElements;\n                let temp = flow.addScopedDummyLocal(name, types_1.Type.auto); // pending dummy\n                pendingElements.add(temp);\n                initExpr = this.compileExpression(initializerNode, types_1.Type.auto); // reports\n                pendingElements.delete(temp);\n                flow.freeScopedDummyLocal(name);\n                if (this.currentType == types_1.Type.void) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.range, this.currentType.toString(), \"<auto>\");\n                    continue;\n                }\n                type = this.currentType;\n                // Error if there's neither a type nor an initializer\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, declaration.name.range.atEnd);\n                continue;\n            }\n            // Handle constants, and try to inline if value is static\n            let isConst = declaration.is(common_1.CommonFlags.CONST);\n            let isStatic = false;\n            if (isConst) {\n                if (initExpr) {\n                    let precomp = module.runExpression(initExpr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                    if (precomp) {\n                        initExpr = precomp; // always use precomputed initExpr\n                        let local = null;\n                        switch (module_1.getExpressionType(initExpr)) {\n                            case module_1.NativeType.I32: {\n                                local = new program_1.Local(name, -1, type, flow.parentFunction);\n                                local.setConstantIntegerValue(i64_new(module_1.getConstValueI32(initExpr), 0), type);\n                                break;\n                            }\n                            case module_1.NativeType.I64: {\n                                local = new program_1.Local(name, -1, type, flow.parentFunction);\n                                local.setConstantIntegerValue(i64_new(module_1.getConstValueI64Low(initExpr), module_1.getConstValueI64High(initExpr)), type);\n                                break;\n                            }\n                            case module_1.NativeType.F32: {\n                                local = new program_1.Local(name, -1, type, flow.parentFunction);\n                                local.setConstantFloatValue(module_1.getConstValueF32(initExpr), type);\n                                break;\n                            }\n                            case module_1.NativeType.F64: {\n                                local = new program_1.Local(name, -1, type, flow.parentFunction);\n                                local.setConstantFloatValue(module_1.getConstValueF64(initExpr), type);\n                                break;\n                            }\n                        }\n                        if (local) {\n                            // Add as a virtual local that doesn't actually exist in WebAssembly\n                            let scopedLocals = flow.scopedLocals;\n                            if (!scopedLocals)\n                                flow.scopedLocals = scopedLocals = new Map();\n                            else if (scopedLocals.has(name)) {\n                                let existing = assert(scopedLocals.get(name));\n                                this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, existing.declaration.name.range, name);\n                                return this.module.unreachable();\n                            }\n                            scopedLocals.set(name, local);\n                            isStatic = true;\n                        }\n                    }\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._const_declarations_must_be_initialized, declaration.range);\n                }\n            }\n            // Otherwise compile as mutable\n            if (!isStatic) {\n                let local;\n                if (declaration.isAny(common_1.CommonFlags.LET | common_1.CommonFlags.CONST) ||\n                    flow.isInline) { // here: not top-level\n                    let existingLocal = flow.getScopedLocal(name);\n                    if (existingLocal) {\n                        if (!existingLocal.declaration.range.source.isNative) {\n                            this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, existingLocal.declaration.name.range, name);\n                        }\n                        else { // scoped locals are shared temps that don't track declarations\n                            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, name);\n                        }\n                        local = existingLocal;\n                    }\n                    else {\n                        local = flow.addScopedLocal(name, type);\n                    }\n                    if (isConst)\n                        flow.setLocalFlag(local.index, flow_1.LocalFlags.CONSTANT);\n                }\n                else {\n                    let existing = flow.lookupLocal(name);\n                    if (existing) {\n                        this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, existing.declaration.name.range, name);\n                        continue;\n                    }\n                    local = flow.parentFunction.addLocal(type, name, declaration);\n                    if (isConst)\n                        flow.setLocalFlag(local.index, flow_1.LocalFlags.CONSTANT);\n                }\n                if (initExpr) {\n                    initializers.push(this.makeLocalAssignment(local, initExpr, type, false));\n                }\n                else {\n                    // no need to assign zero\n                    if (local.type.isShortIntegerValue) {\n                        flow.setLocalFlag(local.index, flow_1.LocalFlags.WRAPPED);\n                    }\n                }\n            }\n        }\n        this.currentType = types_1.Type.void;\n        return initializers.length == 0\n            ? 0\n            : module.flatten(initializers);\n    }\n    compileVoidStatement(statement) {\n        return this.compileExpression(statement.expression, types_1.Type.void, 2 /* CONV_EXPLICIT */ | 8 /* WILL_DROP */);\n    }\n    compileWhileStatement(\n    /** Statement to compile. */\n    statement) {\n        return this.doCompileWhileStatement(statement, null);\n    }\n    doCompileWhileStatement(\n    /** Statement to compile. */\n    statement, \n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter) {\n        var module = this.module;\n        var outerFlow = this.currentFlow;\n        // (block $break                  └►┐ flow\n        //  (loop $continue                 ├◄───────────┐ recompile?\n        //   (local.set $tcond (condition)) └─┐ condFlow │\n        //                                  ┌─┘          │\n        //   (if (local.get $tcond)       ┌◄┤            │ condition?\n        //    (body)                      │ └─┐ bodyFlow │\n        //                                │ ┌─┘          │\n        //                                ├◄┼►╢          │ breaks or terminates?\n        //    (br $continue)              │ └────────────┘\n        //   )                            └─┐\n        //  )                               │\n        // )                              ┌─┘\n        var label = outerFlow.pushBreakLabel();\n        var stmts = new Array();\n        var flow = outerFlow.fork(/* resetBreakContext */ true);\n        if (flowAfter)\n            flow.unifyLocalFlags(flowAfter);\n        var flowBefore = flow.fork();\n        this.currentFlow = flow;\n        var breakLabel = \"while-break|\" + label;\n        flow.breakLabel = breakLabel;\n        var continueLabel = \"while-continue|\" + label;\n        flow.continueLabel = continueLabel;\n        // Precompute the condition\n        var condFlow = flow.fork();\n        this.currentFlow = condFlow;\n        var condExpr = this.makeIsTrueish(this.compileExpression(statement.condition, types_1.Type.bool), this.currentType, statement.condition);\n        var condKind = this.evaluateCondition(condExpr);\n        // Shortcut if condition is always false (body never runs)\n        if (condKind == 2 /* FALSE */) {\n            stmts.push(module.drop(condExpr));\n            assert(!flow.hasScopedLocals);\n            outerFlow.popBreakLabel();\n            this.currentFlow = outerFlow;\n            return module.flatten(stmts);\n        }\n        // From here on condition is either always true or unknown\n        // Store condition result in a temp\n        var tcond = flow.getTempLocal(types_1.Type.bool);\n        stmts.push(module.local_set(tcond.index, condExpr, false) // bool\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow); // always executes\n        this.currentFlow = flow;\n        // Compile the body assuming the condition turned out true\n        var bodyFlow = flow.fork();\n        bodyFlow.inheritNonnullIfTrue(condExpr);\n        this.currentFlow = bodyFlow;\n        var bodyStmts = new Array();\n        var body = statement.statement;\n        if (body.kind == ast_1.NodeKind.BLOCK) {\n            this.compileStatements(body.statements, false, bodyStmts);\n        }\n        else {\n            bodyStmts.push(this.compileStatement(body));\n        }\n        // Simplify if body always terminates\n        if (bodyFlow.is(256 /* TERMINATES */)) {\n            bodyStmts.push(module.unreachable());\n            if (condKind == 1 /* TRUE */)\n                flow.inherit(bodyFlow);\n            else\n                flow.inheritBranch(bodyFlow);\n            // Terminate if condition is always true and body never breaks\n        }\n        else if (condKind == 1 /* TRUE */ && !bodyFlow.isAny(16 /* BREAKS */ | 2048 /* CONDITIONALLY_BREAKS */)) {\n            bodyStmts.push(module.br(continueLabel));\n            flow.set(256 /* TERMINATES */);\n        }\n        else {\n            let breaks = bodyFlow.is(16 /* BREAKS */);\n            if (breaks) {\n                bodyStmts.push(module.unreachable());\n            }\n            else {\n                bodyStmts.push(module.br(continueLabel));\n            }\n            if (condKind == 1 /* TRUE */)\n                flow.inherit(bodyFlow);\n            else\n                flow.inheritBranch(bodyFlow);\n            // Detect if local flags are incompatible before and after looping, and\n            // if so recompile by unifying local flags between iterations. Note that\n            // this may be necessary multiple times where locals depend on each other.\n            // Here: Only relevant if flow does not always break.\n            if (!breaks && flow_1.Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n                flow.freeTempLocal(tcond);\n                outerFlow.popBreakLabel();\n                this.currentFlow = outerFlow;\n                return this.doCompileWhileStatement(statement, flow);\n            }\n        }\n        stmts.push(module.if(module.local_get(tcond.index, module_1.NativeType.I32), module.flatten(bodyStmts)));\n        flow.freeTempLocal(tcond);\n        this.currentFlow = flow;\n        // Finalize\n        assert(!flow.hasScopedLocals);\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        var expr = module.block(breakLabel, [\n            module.loop(continueLabel, module.flatten(stmts))\n        ]);\n        if (condKind == 1 /* TRUE */ && outerFlow.is(256 /* TERMINATES */)) {\n            expr = module.block(null, [expr, module.unreachable()]);\n        }\n        return expr;\n    }\n    // === Expressions ==============================================================================\n    /** Compiles the value of an inlined constant element. */\n    compileInlineConstant(element, contextualType, constraints) {\n        assert(element.is(common_1.CommonFlags.INLINED | common_1.CommonFlags.RESOLVED));\n        var type = element.type;\n        switch (!(constraints & (1 /* CONV_IMPLICIT */ | 2 /* CONV_EXPLICIT */)) &&\n            type.isIntegerValue &&\n            contextualType.isIntegerValue &&\n            type.size < contextualType.size\n            ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n            : (this.currentType = type).kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                let shift = type.computeSmallIntegerShift(types_1.Type.i32);\n                return this.module.i32(element.constantValueKind == 1 /* INTEGER */\n                    ? i64_low(element.constantIntegerValue) << shift >> shift\n                    : 0); // recognized by canOverflow\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                let mask = element.type.computeSmallIntegerMask(types_1.Type.i32);\n                return this.module.i32(element.constantValueKind == 1 /* INTEGER */\n                    ? i64_low(element.constantIntegerValue) & mask\n                    : 0); // recognized by canOverflow\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return this.module.i32(element.constantValueKind == 1 /* INTEGER */\n                    ? i64_low(element.constantIntegerValue)\n                    : 0);\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                if (!element.program.options.isWasm64) {\n                    return this.module.i32(element.constantValueKind == 1 /* INTEGER */\n                        ? i64_low(element.constantIntegerValue)\n                        : 0);\n                }\n                // fall-through\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return element.constantValueKind == 1 /* INTEGER */\n                    ? this.module.i64(i64_low(element.constantIntegerValue), i64_high(element.constantIntegerValue))\n                    : this.module.i64(0);\n            }\n            case 12 /* F64 */: {\n                // monkey-patch for converting built-in floats to f32 implicitly\n                if (!(element.hasDecorator(program_1.DecoratorFlags.BUILTIN) && contextualType == types_1.Type.f32)) {\n                    return this.module.f64(element.constantFloatValue);\n                }\n                // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n                this.currentType = types_1.Type.f32;\n            }\n            case 11 /* F32 */: {\n                return this.module.f32(element.constantFloatValue);\n            }\n            default: {\n                assert(false);\n                return this.module.unreachable();\n            }\n        }\n    }\n    compileExpression(expression, contextualType, constraints = 0 /* NONE */) {\n        while (expression.kind == ast_1.NodeKind.PARENTHESIZED) { // skip\n            expression = expression.expression;\n        }\n        this.currentType = contextualType;\n        if (contextualType == types_1.Type.void)\n            constraints |= 8 /* WILL_DROP */;\n        var expr;\n        switch (expression.kind) {\n            case ast_1.NodeKind.ASSERTION: {\n                expr = this.compileAssertionExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.BINARY: {\n                expr = this.compileBinaryExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.CALL: {\n                expr = this.compileCallExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.COMMA: {\n                expr = this.compileCommaExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                expr = this.compileElementAccessExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                expr = this.compileFunctionExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.IDENTIFIER:\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.THIS:\n            case ast_1.NodeKind.SUPER:\n            case ast_1.NodeKind.TRUE: {\n                expr = this.compileIdentifierExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                expr = this.compileInstanceOfExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.LITERAL: {\n                expr = this.compileLiteralExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.NEW: {\n                expr = this.compileNewExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                expr = this.compilePropertyAccessExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.TERNARY: {\n                expr = this.compileTernaryExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                expr = this.compileUnaryPostfixExpression(expression, contextualType, constraints);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                expr = this.compileUnaryPrefixExpression(expression, contextualType, constraints);\n                break;\n            }\n            default: {\n                assert(false);\n                expr = this.module.unreachable();\n            }\n        }\n        // ensure conversion and wrapping in case the respective function doesn't on its own\n        var currentType = this.currentType;\n        var wrap = (constraints & 4 /* MUST_WRAP */) != 0;\n        if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n            if (constraints & 2 /* CONV_EXPLICIT */) {\n                expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n                this.currentType = contextualType;\n            }\n            else if (constraints & 1 /* CONV_IMPLICIT */) {\n                expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n                this.currentType = contextualType;\n            }\n        }\n        if (wrap)\n            expr = this.ensureSmallIntegerWrap(expr, currentType);\n        // debug location is added here so the caller doesn't have to. means: compilation of an expression\n        // must go through this function, with the respective per-kind functions not being used directly.\n        if (this.options.sourceMap)\n            this.addDebugLocation(expr, expression.range);\n        return expr;\n    }\n    /** Converts an expression's result from one type to another. */\n    convertExpression(expr, \n    /** Original type. */\n    fromType, \n    /** New type. */\n    toType, \n    /** Whether the conversion is explicit. */\n    explicit, \n    /** Report node. */\n    reportNode) {\n        var module = this.module;\n        // void to any\n        if (fromType.kind == 18 /* VOID */) {\n            assert(toType.kind != 18 /* VOID */); // convertExpression should not be called with void -> void\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, reportNode.range, fromType.toString(), toType.toString());\n            return module.unreachable();\n        }\n        // any to void\n        if (toType.kind == 18 /* VOID */)\n            return module.drop(expr);\n        // reference involved\n        if (fromType.isReference || toType.isReference) {\n            if (this.currentFlow.isNonnull(expr, fromType)) {\n                fromType = fromType.nonNullableType;\n            }\n            else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n                // explicit conversion from nullable to non-nullable requires a runtime\n                // check here because nonnull state above already didn't know better\n                if (!this.options.noAssert) {\n                    expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n                }\n                fromType = fromType.nonNullableType;\n            }\n            if (fromType.isAssignableTo(toType)) { // downcast or same\n                assert(toType.isExternalReference || fromType.kind == toType.kind);\n                this.currentType = toType;\n                return expr;\n            }\n            if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n                // <Cat | null>(<Animal>maybeCat)\n                if (toType.isExternalReference) {\n                    this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, reportNode.range, \"ref.cast\");\n                    this.currentType = toType;\n                    return module.unreachable();\n                }\n                assert(fromType.kind == toType.kind);\n                if (!this.options.noAssert) {\n                    expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n                }\n                this.currentType = toType;\n                return expr;\n            }\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, reportNode.range, fromType.toString(), toType.toString());\n            this.currentType = toType;\n            return module.unreachable();\n        }\n        // not dealing with references from here on\n        assert(!fromType.isReference && !toType.isReference);\n        if (!fromType.isAssignableTo(toType)) {\n            if (!explicit) {\n                this.error(diagnostics_1.DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast, reportNode.range, fromType.toString(), toType.toString()); // recoverable\n            }\n        }\n        if (fromType.isFloatValue) {\n            // float to float\n            if (toType.isFloatValue) {\n                if (fromType.kind == 11 /* F32 */) {\n                    // f32 to f64\n                    if (toType.kind == 12 /* F64 */) {\n                        expr = module.unary(module_1.UnaryOp.PromoteF32, expr);\n                    }\n                    // otherwise f32 to f32\n                    // f64 to f32\n                }\n                else if (toType.kind == 11 /* F32 */) {\n                    expr = module.unary(module_1.UnaryOp.DemoteF64, expr);\n                }\n                // otherwise f64 to f64\n                // float to int\n            }\n            else if (toType.isIntegerValue) {\n                // f32 to int\n                if (fromType.kind == 11 /* F32 */) {\n                    if (toType.isBooleanValue) {\n                        expr = this.makeIsTrueish(expr, types_1.Type.f32, reportNode);\n                    }\n                    else if (toType.isSignedIntegerValue) {\n                        let saturating = this.options.hasFeature(4 /* NONTRAPPING_F2I */);\n                        if (toType.isLongIntegerValue) {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF32ToI64Sat : module_1.UnaryOp.TruncF32ToI64, expr);\n                        }\n                        else {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF32ToI32Sat : module_1.UnaryOp.TruncF32ToI32, expr);\n                        }\n                    }\n                    else {\n                        let saturating = this.options.hasFeature(4 /* NONTRAPPING_F2I */);\n                        if (toType.isLongIntegerValue) {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF32ToU64Sat : module_1.UnaryOp.TruncF32ToU64, expr);\n                        }\n                        else {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF32ToU32Sat : module_1.UnaryOp.TruncF32ToU32, expr);\n                        }\n                    }\n                    // f64 to int\n                }\n                else {\n                    if (toType.isBooleanValue) {\n                        expr = this.makeIsTrueish(expr, types_1.Type.f64, reportNode);\n                    }\n                    else if (toType.isSignedIntegerValue) {\n                        let saturating = this.options.hasFeature(4 /* NONTRAPPING_F2I */);\n                        if (toType.isLongIntegerValue) {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF64ToI64Sat : module_1.UnaryOp.TruncF64ToI64, expr);\n                        }\n                        else {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF64ToI32Sat : module_1.UnaryOp.TruncF64ToI32, expr);\n                        }\n                    }\n                    else {\n                        let saturating = this.options.hasFeature(4 /* NONTRAPPING_F2I */);\n                        if (toType.isLongIntegerValue) {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF64ToU64Sat : module_1.UnaryOp.TruncF64ToU64, expr);\n                        }\n                        else {\n                            expr = module.unary(saturating ? module_1.UnaryOp.TruncF64ToU32Sat : module_1.UnaryOp.TruncF64ToU32, expr);\n                        }\n                    }\n                }\n                // float to void\n            }\n            else {\n                assert(toType.flags == 0 /* NONE */, \"void type expected\");\n                expr = module.drop(expr);\n            }\n            // int to float\n        }\n        else if (fromType.isIntegerValue && toType.isFloatValue) {\n            // int to f32\n            if (toType.kind == 11 /* F32 */) {\n                if (fromType.isLongIntegerValue) {\n                    expr = module.unary(fromType.isSignedIntegerValue\n                        ? module_1.UnaryOp.ConvertI64ToF32\n                        : module_1.UnaryOp.ConvertU64ToF32, expr);\n                }\n                else {\n                    expr = module.unary(fromType.isSignedIntegerValue\n                        ? module_1.UnaryOp.ConvertI32ToF32\n                        : module_1.UnaryOp.ConvertU32ToF32, expr);\n                }\n                // int to f64\n            }\n            else {\n                if (fromType.isLongIntegerValue) {\n                    expr = module.unary(fromType.isSignedIntegerValue\n                        ? module_1.UnaryOp.ConvertI64ToF64\n                        : module_1.UnaryOp.ConvertU64ToF64, expr);\n                }\n                else {\n                    expr = module.unary(fromType.isSignedIntegerValue\n                        ? module_1.UnaryOp.ConvertI32ToF64\n                        : module_1.UnaryOp.ConvertU32ToF64, expr);\n                }\n            }\n            // int to int\n        }\n        else {\n            // i64 to ...\n            if (fromType.isLongIntegerValue) {\n                // i64 to i32 or smaller\n                if (toType.isBooleanValue) {\n                    expr = module.binary(module_1.BinaryOp.NeI64, expr, module.i64(0));\n                }\n                else if (!toType.isLongIntegerValue) {\n                    expr = module.unary(module_1.UnaryOp.WrapI64, expr); // discards upper bits\n                }\n                // i32 or smaller to i64\n            }\n            else if (toType.isLongIntegerValue) {\n                expr = module.unary(fromType.isSignedIntegerValue ? module_1.UnaryOp.ExtendI32 : module_1.UnaryOp.ExtendU32, this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n                );\n                // i32 to i32\n            }\n            else {\n                // small i32 to ...\n                if (fromType.isShortIntegerValue) {\n                    // small i32 to larger i32\n                    if (fromType.size < toType.size) {\n                        expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n                    }\n                    // same size\n                }\n                else {\n                    if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n                        this.warning(diagnostics_1.DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit, reportNode.range, fromType.toString(), toType.toString());\n                    }\n                }\n            }\n        }\n        this.currentType = toType;\n        return expr;\n    }\n    compileAssertionExpression(expression, contextualType, constraints) {\n        var inheritedConstraints = constraints & ~(1 /* CONV_IMPLICIT */ | 2 /* CONV_EXPLICIT */);\n        switch (expression.assertionKind) {\n            case ast_1.AssertionKind.PREFIX:\n            case ast_1.AssertionKind.AS: {\n                let flow = this.currentFlow;\n                let toType = this.resolver.resolveType(// reports\n                assert(expression.toType), flow.actualFunction, util_1.uniqueMap(flow.contextualTypeArguments));\n                if (!toType)\n                    return this.module.unreachable();\n                return this.compileExpression(expression.expression, toType, inheritedConstraints | 2 /* CONV_EXPLICIT */);\n            }\n            case ast_1.AssertionKind.NONNULL: {\n                assert(!expression.toType);\n                let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n                let type = this.currentType;\n                if (this.currentFlow.isNonnull(expr, type)) {\n                    this.info(diagnostics_1.DiagnosticCode.Expression_is_never_null, expression.expression.range);\n                }\n                else if (!this.options.noAssert) {\n                    expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n                }\n                this.currentType = type.nonNullableType;\n                return expr;\n            }\n            case ast_1.AssertionKind.CONST: {\n                // TODO: decide on the layout of ReadonlyArray first\n                // let operand = expression.expression;\n                // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n                //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n                //   if (!element) return this.module.unreachable();\n                //   if (element.kind == ElementKind.CLASS) {\n                //     let arrayInstance = <Class>element;\n                //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n                //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n                //     }\n                //   }\n                // }\n                this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, expression.range, \"Const assertion\");\n                return this.module.unreachable();\n            }\n            default: assert(false);\n        }\n        return this.module.unreachable();\n    }\n    compileBinaryExpression(expression, contextualType, constraints) {\n        var module = this.module;\n        var left = expression.left;\n        var right = expression.right;\n        var leftExpr;\n        var leftType;\n        var rightExpr;\n        var rightType;\n        var commonType;\n        var expr;\n        var compound = false;\n        var operator = expression.operator;\n        switch (operator) {\n            case tokenizer_1.Token.LESSTHAN: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.LT);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                rightExpr = this.compileExpression(right, leftType);\n                rightType = this.currentType;\n                commonType = types_1.Type.commonDenominator(leftType, rightType, true);\n                if (!commonType || !commonType.isNumericValue) {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"<\", leftType.toString(), rightType.toString());\n                    this.currentType = contextualType;\n                    return module.unreachable();\n                }\n                leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                leftType = commonType;\n                rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                rightType = commonType;\n                expr = this.makeLt(leftExpr, rightExpr, commonType);\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.GREATERTHAN: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.GT);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                rightExpr = this.compileExpression(right, leftType);\n                rightType = this.currentType;\n                commonType = types_1.Type.commonDenominator(leftType, rightType, true);\n                if (!commonType || !commonType.isNumericValue) {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \">\", leftType.toString(), rightType.toString());\n                    this.currentType = contextualType;\n                    return module.unreachable();\n                }\n                leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                leftType = commonType;\n                rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                rightType = commonType;\n                expr = this.makeGt(leftExpr, rightExpr, commonType);\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.LESSTHAN_EQUALS: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.LE);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                rightExpr = this.compileExpression(right, leftType);\n                rightType = this.currentType;\n                commonType = types_1.Type.commonDenominator(leftType, rightType, true);\n                if (!commonType || !commonType.isNumericValue) {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"<=\", leftType.toString(), rightType.toString());\n                    this.currentType = contextualType;\n                    return module.unreachable();\n                }\n                leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                leftType = commonType;\n                rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                rightType = commonType;\n                expr = this.makeLe(leftExpr, rightExpr, commonType);\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.GREATERTHAN_EQUALS: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.GE);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                rightExpr = this.compileExpression(right, leftType);\n                rightType = this.currentType;\n                commonType = types_1.Type.commonDenominator(leftType, rightType, true);\n                if (!commonType || !commonType.isNumericValue) {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \">=\", leftType.toString(), rightType.toString());\n                    this.currentType = contextualType;\n                    return module.unreachable();\n                }\n                leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                leftType = commonType;\n                rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                rightType = commonType;\n                expr = this.makeGe(leftExpr, rightExpr, commonType);\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.EQUALS_EQUALS_EQUALS:\n            case tokenizer_1.Token.EQUALS_EQUALS: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                if (operator == tokenizer_1.Token.EQUALS_EQUALS) { // can't overload '==='\n                    let classReference = leftType.getClassOrWrapper(this.program);\n                    if (classReference) {\n                        let overload = classReference.lookupOverload(program_1.OperatorKind.EQ);\n                        if (overload) {\n                            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                            break;\n                        }\n                    }\n                    // fall back to compare by value\n                }\n                rightExpr = this.compileExpression(right, leftType);\n                rightType = this.currentType;\n                commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                if (!commonType) {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, tokenizer_1.operatorTokenToString(expression.operator), leftType.toString(), rightType.toString());\n                    this.currentType = contextualType;\n                    return module.unreachable();\n                }\n                leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                leftType = commonType;\n                rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                rightType = commonType;\n                expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.EXCLAMATION_EQUALS_EQUALS:\n            case tokenizer_1.Token.EXCLAMATION_EQUALS: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                if (operator == tokenizer_1.Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n                    let classReference = leftType.getClass();\n                    if (classReference) {\n                        let overload = classReference.lookupOverload(program_1.OperatorKind.NE);\n                        if (overload) {\n                            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                            break;\n                        }\n                    }\n                    // fall back to compare by value\n                }\n                rightExpr = this.compileExpression(right, leftType);\n                rightType = this.currentType;\n                commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                if (!commonType) {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, tokenizer_1.operatorTokenToString(expression.operator), leftType.toString(), rightType.toString());\n                    this.currentType = contextualType;\n                    return module.unreachable();\n                }\n                leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                leftType = commonType;\n                rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                rightType = commonType;\n                expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.EQUALS: {\n                return this.compileAssignment(left, right, contextualType);\n            }\n            case tokenizer_1.Token.PLUS_EQUALS: compound = true;\n            case tokenizer_1.Token.PLUS: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.ADD);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"+\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"+\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeAdd(leftExpr, rightExpr, commonType);\n                break;\n            }\n            case tokenizer_1.Token.MINUS_EQUALS: compound = true;\n            case tokenizer_1.Token.MINUS: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.SUB);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"-\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"-\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeSub(leftExpr, rightExpr, commonType);\n                break;\n            }\n            case tokenizer_1.Token.ASTERISK_EQUALS: compound = true;\n            case tokenizer_1.Token.ASTERISK: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.MUL);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"*\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"*\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeMul(leftExpr, rightExpr, commonType);\n                break;\n            }\n            case tokenizer_1.Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n            case tokenizer_1.Token.ASTERISK_ASTERISK: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.POW);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"**\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"**\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n                break;\n            }\n            case tokenizer_1.Token.SLASH_EQUALS: compound = true;\n            case tokenizer_1.Token.SLASH: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.DIV);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"/\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"/\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeDiv(leftExpr, rightExpr, commonType);\n                break;\n            }\n            case tokenizer_1.Token.PERCENT_EQUALS: compound = true;\n            case tokenizer_1.Token.PERCENT: {\n                leftExpr = this.compileExpression(left, contextualType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.REM);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"%\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isNumericValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"%\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n                break;\n            }\n            case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n            case tokenizer_1.Token.LESSTHAN_LESSTHAN: {\n                leftExpr = this.compileExpression(left, contextualType.intType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_SHL);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (!leftType.isIntegerValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"<<\", leftType.toString());\n                    return module.unreachable();\n                }\n                rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                rightType = this.currentType;\n                expr = this.makeShl(leftExpr, rightExpr, rightType);\n                break;\n            }\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN: {\n                leftExpr = this.compileExpression(left, contextualType.intType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_SHR);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (!leftType.isIntegerValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \">>\", leftType.toString());\n                    return this.module.unreachable();\n                }\n                rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                rightType = this.currentType;\n                expr = this.makeShr(leftExpr, rightExpr, rightType);\n                break;\n            }\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n                leftExpr = this.compileExpression(left, contextualType.intType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_SHR_U);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (!leftType.isIntegerValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \">>>\", leftType.toString());\n                    return module.unreachable();\n                }\n                rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                rightType = this.currentType;\n                expr = this.makeShru(leftExpr, rightExpr, rightType);\n                break;\n            }\n            case tokenizer_1.Token.AMPERSAND_EQUALS: compound = true;\n            case tokenizer_1.Token.AMPERSAND: {\n                leftExpr = this.compileExpression(left, contextualType.intType);\n                leftType = this.currentType;\n                // check operator overloadd\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_AND);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isIntegerValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"&\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isIntegerValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"&\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeAnd(leftExpr, rightExpr, commonType);\n                break;\n            }\n            case tokenizer_1.Token.BAR_EQUALS: compound = true;\n            case tokenizer_1.Token.BAR: {\n                leftExpr = this.compileExpression(left, contextualType.intType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_OR);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isIntegerValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"|\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isIntegerValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"|\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeOr(leftExpr, rightExpr, commonType);\n                break;\n            }\n            case tokenizer_1.Token.CARET_EQUALS: compound = true;\n            case tokenizer_1.Token.CARET: {\n                leftExpr = this.compileExpression(left, contextualType.intType);\n                leftType = this.currentType;\n                // check operator overload\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_XOR);\n                    if (overload) {\n                        expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n                        break;\n                    }\n                }\n                if (compound) {\n                    if (!leftType.isIntegerValue) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"^\", leftType.toString());\n                        return module.unreachable();\n                    }\n                    rightExpr = this.compileExpression(right, leftType, 1 /* CONV_IMPLICIT */);\n                    rightType = commonType = this.currentType;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType);\n                    rightType = this.currentType;\n                    commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                    if (!commonType || !commonType.isIntegerValue) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"^\", leftType.toString(), rightType.toString());\n                        this.currentType = contextualType;\n                        return module.unreachable();\n                    }\n                    leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n                    leftType = commonType;\n                    rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n                    rightType = commonType;\n                }\n                expr = this.makeXor(leftExpr, rightExpr, commonType);\n                break;\n            }\n            // logical (no overloading)\n            case tokenizer_1.Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n                let flow = this.currentFlow;\n                let inheritedConstraints = constraints & 4 /* MUST_WRAP */;\n                leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n                leftType = this.currentType;\n                let rightFlow = flow.fork();\n                this.currentFlow = rightFlow;\n                rightFlow.inheritNonnullIfTrue(leftExpr);\n                // simplify if only interested in true or false\n                if (contextualType == types_1.Type.bool || contextualType == types_1.Type.void) {\n                    rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n                    rightType = this.currentType;\n                    rightFlow.freeScopedLocals();\n                    this.currentFlow = flow;\n                    expr = module.if(this.makeIsTrueish(leftExpr, leftType, left), this.makeIsTrueish(rightExpr, rightType, right), module.i32(0));\n                    this.currentType = types_1.Type.bool;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType, inheritedConstraints | 1 /* CONV_IMPLICIT */);\n                    rightType = this.currentType;\n                    rightFlow.freeScopedLocals();\n                    this.currentFlow = flow;\n                    // simplify if cloning left without side effects is possible\n                    if (expr = module.cloneExpression(leftExpr, true, 0)) {\n                        expr = module.if(this.makeIsTrueish(leftExpr, this.currentType, left), rightExpr, expr);\n                        // if not possible, tee left to a temp\n                    }\n                    else {\n                        let tempLocal = flow.getTempLocal(leftType);\n                        if (!flow.canOverflow(leftExpr, leftType))\n                            flow.setLocalFlag(tempLocal.index, flow_1.LocalFlags.WRAPPED);\n                        if (flow.isNonnull(leftExpr, leftType))\n                            flow.setLocalFlag(tempLocal.index, flow_1.LocalFlags.NONNULL);\n                        expr = module.if(this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr, leftType.isManaged), leftType, left), rightExpr, module.local_get(tempLocal.index, leftType.toNativeType()));\n                        flow.freeTempLocal(tempLocal);\n                    }\n                    this.currentType = leftType;\n                }\n                break;\n            }\n            case tokenizer_1.Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n                let flow = this.currentFlow;\n                let inheritedConstraints = constraints & 4 /* MUST_WRAP */;\n                leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n                leftType = this.currentType;\n                let rightFlow = flow.fork();\n                this.currentFlow = rightFlow;\n                rightFlow.inheritNonnullIfFalse(leftExpr);\n                // simplify if only interested in true or false\n                if (contextualType == types_1.Type.bool || contextualType == types_1.Type.void) {\n                    rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n                    rightType = this.currentType;\n                    rightFlow.freeScopedLocals();\n                    this.currentFlow = flow;\n                    expr = module.if(this.makeIsTrueish(leftExpr, leftType, left), module.i32(1), this.makeIsTrueish(rightExpr, rightType, right));\n                    this.currentType = types_1.Type.bool;\n                }\n                else {\n                    rightExpr = this.compileExpression(right, leftType, inheritedConstraints | 1 /* CONV_IMPLICIT */);\n                    rightType = this.currentType;\n                    rightFlow.freeScopedLocals();\n                    this.currentFlow = flow;\n                    // simplify if cloning left without side effects is possible\n                    if (expr = module.cloneExpression(leftExpr, true, 0)) {\n                        expr = module.if(this.makeIsTrueish(leftExpr, leftType, left), expr, rightExpr);\n                        // if not possible, tee left to a temp. local\n                    }\n                    else {\n                        let temp = flow.getTempLocal(leftType);\n                        if (!flow.canOverflow(leftExpr, leftType))\n                            flow.setLocalFlag(temp.index, flow_1.LocalFlags.WRAPPED);\n                        if (flow.isNonnull(leftExpr, leftType))\n                            flow.setLocalFlag(temp.index, flow_1.LocalFlags.NONNULL);\n                        expr = module.if(this.makeIsTrueish(module.local_tee(temp.index, leftExpr, leftType.isManaged), leftType, left), module.local_get(temp.index, leftType.toNativeType()), rightExpr);\n                        flow.freeTempLocal(temp);\n                    }\n                    this.currentType = leftType;\n                }\n                break;\n            }\n            default: {\n                assert(false);\n                expr = this.module.unreachable();\n            }\n        }\n        if (!compound)\n            return expr;\n        var resolver = this.resolver;\n        var target = resolver.lookupExpression(left, this.currentFlow);\n        if (!target)\n            return module.unreachable();\n        var targetType = resolver.getTypeOfElement(target);\n        if (!targetType)\n            targetType = types_1.Type.void;\n        if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, expression.range, this.currentType.toString(), targetType.toString());\n            return module.unreachable();\n        }\n        return this.makeAssignment(target, expr, this.currentType, right, resolver.currentThisExpression, resolver.currentElementExpression, contextualType != types_1.Type.void);\n    }\n    makeLt(leftExpr, rightExpr, type) {\n        // Cares about garbage bits and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.LtI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.LtI64, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.LtI64\n                    : module_1.BinaryOp.LtI32, leftExpr, rightExpr);\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.LtU32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.LtU64\n                    : module_1.BinaryOp.LtU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.LtU64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.LtF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.LtF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeGt(leftExpr, rightExpr, type) {\n        // Cares about garbage bits and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.GtI32, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.GtI64\n                    : module_1.BinaryOp.GtI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.GtI64, leftExpr, rightExpr);\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.GtU32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.GtU64\n                    : module_1.BinaryOp.GtU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.GtU64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.GtF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.GtF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeLe(leftExpr, rightExpr, type) {\n        // Cares about garbage bits and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.LeI32, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.LeI64\n                    : module_1.BinaryOp.LeI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.LeI64, leftExpr, rightExpr);\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.LeU32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.LeU64\n                    : module_1.BinaryOp.LeU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.LeU64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.LeF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.LeF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeGe(leftExpr, rightExpr, type) {\n        // Cares about garbage bits and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.GeI32, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.GeI64\n                    : module_1.BinaryOp.GeI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.GeI64, leftExpr, rightExpr);\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.GeU32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.GeU64\n                    : module_1.BinaryOp.GeU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.GeU64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.GeF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.GeF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeEq(leftExpr, rightExpr, type, reportNode) {\n        // Cares about garbage bits\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.EqI32, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.EqI64\n                    : module_1.BinaryOp.EqI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.EqI64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.EqF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.EqF64, leftExpr, rightExpr);\n            }\n            case 13 /* V128 */: {\n                return module.unary(module_1.UnaryOp.AllTrueI8x16, module.binary(module_1.BinaryOp.EqI8x16, leftExpr, rightExpr));\n            }\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n            case 16 /* EXNREF */:\n            case 17 /* ANYREF */: {\n                this.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, reportNode.range, \"ref.eq\", type.toString());\n                return module.unreachable();\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeNe(leftExpr, rightExpr, type, reportNode) {\n        // Cares about garbage bits\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.NeI32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.NeI64\n                    : module_1.BinaryOp.NeI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.NeI64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.NeF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.NeF64, leftExpr, rightExpr);\n            }\n            case 13 /* V128 */: {\n                return module.unary(module_1.UnaryOp.AnyTrueI8x16, module.binary(module_1.BinaryOp.NeI8x16, leftExpr, rightExpr));\n            }\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n            case 16 /* EXNREF */:\n            case 17 /* ANYREF */: {\n                this.error(diagnostics_1.DiagnosticCode.Operation_0_cannot_be_applied_to_type_1, reportNode.range, \"ref.eq\", type.toString());\n                return module.unreachable();\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeAdd(leftExpr, rightExpr, type) {\n        // Does not care about garbage bits or signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */:\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.AddI32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.AddI64\n                    : module_1.BinaryOp.AddI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.AddI64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.AddF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.AddF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeSub(leftExpr, rightExpr, type) {\n        // Does not care about garbage bits or signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */:\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.SubI32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.SubI64\n                    : module_1.BinaryOp.SubI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.SubI64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.SubF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.SubF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeMul(leftExpr, rightExpr, type) {\n        // Does not care about garbage bits or signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */:\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.MulI32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.MulI64\n                    : module_1.BinaryOp.MulI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.MulI64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.MulF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.MulF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makePow(leftExpr, rightExpr, type, reportNode) {\n        // Cares about garbage bits\n        let module = this.module;\n        switch (type.kind) {\n            case 10 /* BOOL */: {\n                return module.select(module.i32(1), module.binary(module_1.BinaryOp.EqI32, rightExpr, module.i32(0)), leftExpr);\n            }\n            case 0 /* I8 */:\n            case 5 /* U8 */:\n            case 1 /* I16 */:\n            case 6 /* U16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                let instance = this.i32PowInstance;\n                if (!instance) {\n                    let prototype = this.program.lookup(common_1.CommonNames.ipow32);\n                    if (!prototype) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"ipow32\");\n                        return module.unreachable();\n                    }\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    this.i32PowInstance = instance = this.resolver.resolveFunction(prototype, null);\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                let expr = this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n                if (type.size < 32) {\n                    // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n                    // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n                    expr = this.ensureSmallIntegerWrap(expr, type);\n                }\n                return expr;\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                let instance = this.i64PowInstance;\n                if (!instance) {\n                    let prototype = this.program.lookup(common_1.CommonNames.ipow64);\n                    if (!prototype) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"ipow64\");\n                        return module.unreachable();\n                    }\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    this.i64PowInstance = instance = this.resolver.resolveFunction(prototype, null);\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                return this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                let isWasm64 = this.options.isWasm64;\n                let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n                if (!instance) {\n                    let prototype = this.program.lookup(isWasm64 ? common_1.CommonNames.ipow64 : common_1.CommonNames.ipow32);\n                    if (!prototype) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\");\n                        return module.unreachable();\n                    }\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    instance = this.resolver.resolveFunction(prototype, null);\n                    if (isWasm64) {\n                        this.i64PowInstance = instance;\n                    }\n                    else {\n                        this.i32PowInstance = instance;\n                    }\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                return this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n            }\n            case 11 /* F32 */: {\n                let instance = this.f32PowInstance;\n                if (!instance) {\n                    let namespace = this.program.lookup(common_1.CommonNames.Mathf);\n                    if (!namespace) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Mathf\");\n                        return module.unreachable();\n                    }\n                    let namespaceMembers = namespace.members;\n                    if (!namespaceMembers || !namespaceMembers.has(common_1.CommonNames.pow)) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Mathf.pow\");\n                        return module.unreachable();\n                    }\n                    let prototype = assert(namespaceMembers.get(common_1.CommonNames.pow));\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    this.f32PowInstance = instance = this.resolver.resolveFunction(prototype, null);\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                return this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n            }\n            // Math.pow otherwise (result is f64)\n            case 12 /* F64 */: {\n                let instance = this.f64PowInstance;\n                if (!instance) {\n                    let namespace = this.program.lookup(common_1.CommonNames.Math);\n                    if (!namespace) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Math\");\n                        return module.unreachable();\n                    }\n                    let namespaceMembers = namespace.members;\n                    if (!namespaceMembers || !namespaceMembers.has(common_1.CommonNames.pow)) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Math.pow\");\n                        return module.unreachable();\n                    }\n                    let prototype = assert(namespaceMembers.get(common_1.CommonNames.pow));\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    this.f64PowInstance = instance = this.resolver.resolveFunction(prototype, null);\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                return this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeDiv(leftExpr, rightExpr, type) {\n        // Cares about garbage bits and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.DivI32, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.DivI64\n                    : module_1.BinaryOp.DivI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.DivI64, leftExpr, rightExpr);\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.DivU32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.DivU64\n                    : module_1.BinaryOp.DivU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.DivU64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                return module.binary(module_1.BinaryOp.DivF32, leftExpr, rightExpr);\n            }\n            case 12 /* F64 */: {\n                return module.binary(module_1.BinaryOp.DivF64, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeRem(leftExpr, rightExpr, type, reportNode) {\n        // Cares about garbage bits and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.RemI32, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.RemI64\n                    : module_1.BinaryOp.RemI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.RemI64, leftExpr, rightExpr);\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n                rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n                // falls through\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.RemU32, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.RemU64\n                    : module_1.BinaryOp.RemU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.RemU64, leftExpr, rightExpr);\n            }\n            case 11 /* F32 */: {\n                let instance = this.f32ModInstance;\n                if (!instance) {\n                    let namespace = this.program.lookup(common_1.CommonNames.Mathf);\n                    if (!namespace) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Mathf\");\n                        return module.unreachable();\n                    }\n                    let namespaceMembers = namespace.members;\n                    if (!namespaceMembers || !namespaceMembers.has(common_1.CommonNames.mod)) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Mathf.mod\");\n                        return module.unreachable();\n                    }\n                    let prototype = assert(namespaceMembers.get(common_1.CommonNames.mod));\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    this.f32ModInstance = instance = this.resolver.resolveFunction(prototype, null);\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                return this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n            }\n            case 12 /* F64 */: {\n                let instance = this.f64ModInstance;\n                if (!instance) {\n                    let namespace = this.program.lookup(common_1.CommonNames.Math);\n                    if (!namespace) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Math\");\n                        return module.unreachable();\n                    }\n                    let namespaceMembers = namespace.members;\n                    if (!namespaceMembers || !namespaceMembers.has(common_1.CommonNames.mod)) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, \"Math.mod\");\n                        return module.unreachable();\n                    }\n                    let prototype = assert(namespaceMembers.get(common_1.CommonNames.mod));\n                    assert(prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    this.f64ModInstance = instance = this.resolver.resolveFunction(prototype, null);\n                }\n                if (!instance || !this.compileFunction(instance)) {\n                    return module.unreachable();\n                }\n                return this.makeCallDirect(instance, [leftExpr, rightExpr], reportNode);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeShl(leftExpr, rightExpr, type) {\n        // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n        var module = this.module;\n        switch (type.kind) {\n            case 10 /* BOOL */: return leftExpr;\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */: {\n                // leftExpr << (rightExpr & (7|15))\n                return module.binary(module_1.BinaryOp.ShlI32, leftExpr, module.binary(module_1.BinaryOp.AndI32, rightExpr, module.i32(type.size - 1)));\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.ShlI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.ShlI64, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.ShlI64\n                    : module_1.BinaryOp.ShlI32, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeShr(leftExpr, rightExpr, type) {\n        // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n        // and signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 10 /* BOOL */: return leftExpr;\n            case 0 /* I8 */:\n            case 1 /* I16 */: {\n                // leftExpr >> (rightExpr & (7|15))\n                return module.binary(module_1.BinaryOp.ShrI32, this.ensureSmallIntegerWrap(leftExpr, type), module.binary(module_1.BinaryOp.AndI32, rightExpr, module.i32(type.size - 1)));\n            }\n            case 5 /* U8 */:\n            case 6 /* U16 */: {\n                // leftExpr >>> (rightExpr & (7|15))\n                return module.binary(module_1.BinaryOp.ShrU32, this.ensureSmallIntegerWrap(leftExpr, type), module.binary(module_1.BinaryOp.AndI32, rightExpr, module.i32(type.size - 1)));\n            }\n            case 2 /* I32 */: {\n                return module.binary(module_1.BinaryOp.ShrI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */: {\n                return module.binary(module_1.BinaryOp.ShrI64, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.ShrI64\n                    : module_1.BinaryOp.ShrI32, leftExpr, rightExpr);\n            }\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.ShrU32, leftExpr, rightExpr);\n            }\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.ShrU64, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.ShrU64\n                    : module_1.BinaryOp.ShrU32, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeShru(leftExpr, rightExpr, type) {\n        // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n        var module = this.module;\n        switch (type.kind) {\n            case 10 /* BOOL */: return leftExpr;\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */: {\n                // leftExpr >>> (rightExpr & (7|15))\n                return module.binary(module_1.BinaryOp.ShrU32, this.ensureSmallIntegerWrap(leftExpr, type), module.binary(module_1.BinaryOp.AndI32, rightExpr, module.i32(type.size - 1)));\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.ShrU32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.ShrU64, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.ShrU64\n                    : module_1.BinaryOp.ShrU32, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeAnd(leftExpr, rightExpr, type) {\n        // Does not care about garbage bits or signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.AndI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.AndI64, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.AndI64\n                    : module_1.BinaryOp.AndI32, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeOr(leftExpr, rightExpr, type) {\n        // Does not care about garbage bits or signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                return module.binary(module_1.BinaryOp.OrI32, leftExpr, rightExpr);\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.OrI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.OrI64, leftExpr, rightExpr);\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.OrI64\n                    : module_1.BinaryOp.OrI32, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    makeXor(leftExpr, rightExpr, type) {\n        // Does not care about garbage bits or signedness\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 10 /* BOOL */: {\n                return module.binary(module_1.BinaryOp.XorI32, leftExpr, rightExpr);\n            }\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return module.binary(module_1.BinaryOp.XorI32, leftExpr, rightExpr);\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.XorI64, leftExpr, rightExpr);\n            }\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: {\n                return module.binary(this.options.isWasm64\n                    ? module_1.BinaryOp.XorI64\n                    : module_1.BinaryOp.XorI32, leftExpr, rightExpr);\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    compileUnaryOverload(operatorInstance, value, valueExpr, reportNode) {\n        // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n        // is a bad idea currently. so this assumes that the type matches.\n        return this.makeCallDirect(operatorInstance, [valueExpr], reportNode, false);\n    }\n    compileBinaryOverload(operatorInstance, left, leftExpr, right, reportNode) {\n        var rightType;\n        if (operatorInstance.is(common_1.CommonFlags.INSTANCE)) {\n            let classInstance = assert(operatorInstance.parent);\n            assert(classInstance.kind == program_1.ElementKind.CLASS);\n            rightType = operatorInstance.signature.parameterTypes[0];\n        }\n        else {\n            // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n            // local states, like having local flags that actually do not even exist, possibly\n            // releasing something random in that local before and evil things like that. Hence this\n            // assumes that LHS type matches, which in turn means that static overloads must be\n            // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n            // things like multiple static overloads for different combinations of LHS/RHS types.\n            // We might want that at some point of course, but requires to complete the resolver so\n            // it can actually resolve every kind of expression without ever having to recompile.\n            rightType = operatorInstance.signature.parameterTypes[1];\n        }\n        var rightExpr = this.compileExpression(right, rightType, 1 /* CONV_IMPLICIT */);\n        return this.makeCallDirect(operatorInstance, [leftExpr, rightExpr], reportNode);\n    }\n    compileAssignment(expression, valueExpression, contextualType) {\n        var program = this.program;\n        var resolver = program.resolver;\n        var flow = this.currentFlow;\n        var target = resolver.lookupExpression(expression, flow); // reports\n        if (!target)\n            return this.module.unreachable();\n        var thisExpression = resolver.currentThisExpression;\n        var elementExpression = resolver.currentElementExpression;\n        // to compile just the value, we need to know the target's type\n        var targetType;\n        switch (target.kind) {\n            case program_1.ElementKind.GLOBAL: {\n                // not yet compiled if a static field compiled as a global\n                if (!this.compileGlobal(target))\n                    return this.module.unreachable(); // reports\n                // fall-through\n            }\n            case program_1.ElementKind.LOCAL:\n            case program_1.ElementKind.FIELD: {\n                if (this.pendingElements.has(target)) {\n                    this.error(diagnostics_1.DiagnosticCode.Variable_0_used_before_its_declaration, expression.range, target.internalName);\n                    return this.module.unreachable();\n                }\n                targetType = target.type;\n                if (target.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n                    this.checkUnsafe(expression);\n                break;\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyPrototype = target;\n                let propertyInstance = resolver.resolveProperty(propertyPrototype);\n                if (!propertyInstance)\n                    return this.module.unreachable();\n                target = propertyInstance;\n                // fall-through\n            }\n            case program_1.ElementKind.PROPERTY: {\n                let propertyInstance = target;\n                let setterInstance = propertyInstance.setterInstance;\n                if (!setterInstance) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, propertyInstance.internalName);\n                    return this.module.unreachable();\n                }\n                assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n                targetType = setterInstance.signature.parameterTypes[0];\n                if (setterInstance.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n                    this.checkUnsafe(expression);\n                break;\n            }\n            case program_1.ElementKind.INDEXSIGNATURE: {\n                let parent = target.parent;\n                assert(parent.kind == program_1.ElementKind.CLASS);\n                let classInstance = parent;\n                let isUnchecked = flow.is(32768 /* UNCHECKED_CONTEXT */);\n                let indexedSet = classInstance.lookupOverload(program_1.OperatorKind.INDEXED_SET, isUnchecked);\n                if (!indexedSet) {\n                    let indexedGet = classInstance.lookupOverload(program_1.OperatorKind.INDEXED_GET, isUnchecked);\n                    if (!indexedGet) {\n                        this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, expression.range, classInstance.internalName);\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode.Index_signature_in_type_0_only_permits_reading, expression.range, classInstance.internalName);\n                    }\n                    return this.module.unreachable();\n                }\n                assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n                targetType = indexedSet.signature.parameterTypes[1]; // 2nd parameter is the element\n                if (indexedSet.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n                    this.checkUnsafe(expression);\n                if (!isUnchecked && this.options.pedantic) {\n                    this.pedantic(diagnostics_1.DiagnosticCode.Indexed_access_may_involve_bounds_checking, expression.range);\n                }\n                break;\n            }\n            default: {\n                assert(false);\n                return this.module.unreachable();\n            }\n        }\n        // compile the value and do the assignment\n        assert(targetType != types_1.Type.void);\n        var valueExpr = this.compileExpression(valueExpression, targetType);\n        var valueType = this.currentType;\n        return this.makeAssignment(target, this.convertExpression(valueExpr, valueType, targetType, false, valueExpression), valueType, valueExpression, thisExpression, elementExpression, contextualType != types_1.Type.void);\n    }\n    /** Makes an assignment expression or block, assigning a value to a target. */\n    makeAssignment(\n    /** Target element, e.g. a Local. */\n    target, \n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr, \n    /** Value expression type. */\n    valueType, \n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression, \n    /** `this` expression reference if a field or property set. */\n    thisExpression, \n    /** Index expression reference if an indexed set. */\n    indexExpression, \n    /** Whether to tee the value. */\n    tee) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        switch (target.kind) {\n            case program_1.ElementKind.LOCAL: {\n                let local = target;\n                if (flow.isLocalFlag(local.index, flow_1.LocalFlags.CONSTANT, true)) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, valueExpression.range, target.internalName);\n                    this.currentType = tee ? local.type : types_1.Type.void;\n                    return module.unreachable();\n                }\n                return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n            }\n            case program_1.ElementKind.GLOBAL: {\n                let global = target;\n                if (!this.compileGlobal(global))\n                    return module.unreachable();\n                if (target.isAny(common_1.CommonFlags.CONST | common_1.CommonFlags.READONLY)) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, valueExpression.range, target.internalName);\n                    this.currentType = tee ? global.type : types_1.Type.void;\n                    return module.unreachable();\n                }\n                return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n            }\n            case program_1.ElementKind.FIELD: {\n                let fieldInstance = target;\n                let initializerNode = fieldInstance.initializerNode;\n                let isConstructor = flow.actualFunction.is(common_1.CommonFlags.CONSTRUCTOR);\n                // Cannot assign to readonly fields except in constructors if there's no initializer\n                if (fieldInstance.is(common_1.CommonFlags.READONLY)) {\n                    if (!isConstructor || initializerNode !== null) {\n                        this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, valueExpression.range, fieldInstance.internalName);\n                        return module.unreachable();\n                    }\n                }\n                // Mark initialized fields in constructors\n                thisExpression = assert(thisExpression);\n                if (isConstructor && thisExpression.kind == ast_1.NodeKind.THIS) {\n                    flow.setThisFieldFlag(fieldInstance, flow_1.FieldFlags.INITIALIZED);\n                }\n                let fieldParent = fieldInstance.parent;\n                assert(fieldParent.kind == program_1.ElementKind.CLASS);\n                return this.makeFieldAssignment(fieldInstance, valueExpr, valueType, this.compileExpression(thisExpression, fieldParent.type, 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */), tee);\n            }\n            case program_1.ElementKind.PROPERTY: {\n                let propertyInstance = target;\n                let setterInstance = propertyInstance.setterInstance;\n                if (!setterInstance) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, valueExpression.range, target.internalName);\n                    return module.unreachable();\n                }\n                assert(setterInstance.signature.parameterTypes.length == 1);\n                if (propertyInstance.is(common_1.CommonFlags.INSTANCE)) {\n                    let thisType = assert(setterInstance.signature.thisType);\n                    let thisExpr = this.compileExpression(assert(thisExpression), thisType, 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */);\n                    if (!tee)\n                        return this.makeCallDirect(setterInstance, [thisExpr, valueExpr], valueExpression);\n                    let getterInstance = assert(target.getterInstance);\n                    assert(getterInstance.signature.thisType == thisType);\n                    let returnType = getterInstance.signature.returnType;\n                    let nativeReturnType = returnType.toNativeType();\n                    let tempThis = flow.getTempLocal(returnType);\n                    let ret = module.block(null, [\n                        this.makeCallDirect(setterInstance, [\n                            module.local_tee(tempThis.index, thisExpr, returnType.isManaged),\n                            valueExpr\n                        ], valueExpression),\n                        this.makeCallDirect(getterInstance, [\n                            module.local_get(tempThis.index, nativeReturnType)\n                        ], valueExpression)\n                    ], nativeReturnType);\n                    flow.freeTempLocal(tempThis);\n                    return ret;\n                }\n                else {\n                    if (!tee)\n                        return this.makeCallDirect(setterInstance, [valueExpr], valueExpression);\n                    let getterInstance = assert(target.getterInstance);\n                    return module.block(null, [\n                        this.makeCallDirect(setterInstance, [valueExpr], valueExpression),\n                        this.makeCallDirect(getterInstance, null, valueExpression)\n                    ], getterInstance.signature.returnType.toNativeType());\n                }\n            }\n            case program_1.ElementKind.INDEXSIGNATURE: {\n                let indexSignature = target;\n                let parent = indexSignature.parent;\n                assert(parent.kind == program_1.ElementKind.CLASS);\n                let classInstance = parent;\n                assert(classInstance.kind == program_1.ElementKind.CLASS);\n                let isUnchecked = flow.is(32768 /* UNCHECKED_CONTEXT */);\n                let getterInstance = classInstance.lookupOverload(program_1.OperatorKind.INDEXED_GET, isUnchecked);\n                if (!getterInstance) {\n                    this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, valueExpression.range, classInstance.internalName);\n                    return module.unreachable();\n                }\n                let setterInstance = classInstance.lookupOverload(program_1.OperatorKind.INDEXED_SET, isUnchecked);\n                if (!setterInstance) {\n                    this.error(diagnostics_1.DiagnosticCode.Index_signature_in_type_0_only_permits_reading, valueExpression.range, classInstance.internalName);\n                    this.currentType = tee ? getterInstance.signature.returnType : types_1.Type.void;\n                    return module.unreachable();\n                }\n                assert(setterInstance.signature.parameterTypes.length == 2);\n                let thisType = classInstance.type;\n                let thisExpr = this.compileExpression(assert(thisExpression), thisType, 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */);\n                let elementExpr = this.compileExpression(assert(indexExpression), types_1.Type.i32, 1 /* CONV_IMPLICIT */);\n                let elementType = this.currentType;\n                if (tee) {\n                    let tempTarget = flow.getTempLocal(thisType);\n                    let tempElement = flow.getTempLocal(elementType);\n                    let returnType = getterInstance.signature.returnType;\n                    flow.freeTempLocal(tempTarget);\n                    let ret = module.block(null, [\n                        this.makeCallDirect(setterInstance, [\n                            module.local_tee(tempTarget.index, thisExpr, thisType.isManaged),\n                            module.local_tee(tempElement.index, elementExpr, elementType.isManaged),\n                            valueExpr\n                        ], valueExpression),\n                        this.makeCallDirect(getterInstance, [\n                            module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n                            module.local_get(tempElement.index, tempElement.type.toNativeType())\n                        ], valueExpression)\n                    ], returnType.toNativeType());\n                    flow.freeTempLocal(tempElement);\n                    flow.freeTempLocal(tempTarget);\n                    return ret;\n                }\n                else {\n                    return this.makeCallDirect(setterInstance, [\n                        thisExpr,\n                        elementExpr,\n                        valueExpr\n                    ], valueExpression);\n                }\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    /** Makes an assignment to a local, keeping track of wrap and null states. */\n    makeLocalAssignment(\n    /** Local to assign to. */\n    local, \n    /** Value to assign. */\n    valueExpr, \n    /** Value type. */\n    valueType, \n    /** Whether to tee the value. */\n    tee) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var type = local.type;\n        assert(type != types_1.Type.void);\n        var localIndex = local.index;\n        if (type.isNullableReference) {\n            if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type))\n                flow.setLocalFlag(localIndex, flow_1.LocalFlags.NONNULL);\n            else\n                flow.unsetLocalFlag(localIndex, flow_1.LocalFlags.NONNULL);\n        }\n        flow.setLocalFlag(localIndex, flow_1.LocalFlags.INITIALIZED);\n        if (type.isShortIntegerValue) {\n            if (!flow.canOverflow(valueExpr, type))\n                flow.setLocalFlag(localIndex, flow_1.LocalFlags.WRAPPED);\n            else\n                flow.unsetLocalFlag(localIndex, flow_1.LocalFlags.WRAPPED);\n        }\n        if (tee) { // local = value\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr, type.isManaged);\n        }\n        else { // void(local = value)\n            this.currentType = types_1.Type.void;\n            return module.local_set(localIndex, valueExpr, type.isManaged);\n        }\n    }\n    /** Makes an assignment to a global. */\n    makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global, \n    /** The value to assign. */\n    valueExpr, \n    /** The type of the value to assign. */\n    valueType, \n    /** Whether to tee the value. */\n    tee) {\n        var module = this.module;\n        var type = global.type;\n        assert(type != types_1.Type.void);\n        var nativeType = type.toNativeType();\n        valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n        if (tee) { // (global = value), global\n            this.currentType = type;\n            return module.block(null, [\n                module.global_set(global.internalName, valueExpr),\n                module.global_get(global.internalName, nativeType)\n            ], nativeType);\n        }\n        else { // global = value\n            this.currentType = types_1.Type.void;\n            return module.global_set(global.internalName, valueExpr);\n        }\n    }\n    /** Makes an assignment to a field. */\n    makeFieldAssignment(\n    /** The field to assign to. */\n    field, \n    /** The value to assign. */\n    valueExpr, \n    /** The type of the value to assign. */\n    valueType, \n    /** The value of `this`. */\n    thisExpr, \n    /** Whether to tee the value. */\n    tee) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var fieldType = field.type;\n        var nativeFieldType = fieldType.toNativeType();\n        assert(field.parent.kind == program_1.ElementKind.CLASS);\n        var thisType = field.parent.type;\n        if (!field.is(common_1.CommonFlags.COMPILED)) {\n            field.set(common_1.CommonFlags.COMPILED);\n            let typeNode = field.typeNode;\n            if (typeNode)\n                this.checkTypeSupported(field.type, typeNode);\n        }\n        if (tee) {\n            this.compileField(field);\n            let tempThis = flow.getTempLocal(thisType);\n            let expr = module.block(null, [\n                module.call(field.internalSetterName, [module.local_tee(tempThis.index, thisExpr, thisType.isManaged), valueExpr], module_1.NativeType.None),\n                module.call(field.internalGetterName, [module.local_get(tempThis.index, thisType.toNativeType())], nativeFieldType)\n            ], nativeFieldType);\n            flow.freeTempLocal(tempThis);\n            this.currentType = fieldType;\n            return expr;\n        }\n        else {\n            this.compileFieldSetter(field);\n            let expr = module.call(field.internalSetterName, [thisExpr, valueExpr], module_1.NativeType.None);\n            this.currentType = types_1.Type.void;\n            return expr;\n        }\n    }\n    /** Compiles a call expression according to the specified context. */\n    compileCallExpression(\n    /** Call expression to compile. */\n    expression, \n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType, \n    /** Constraints indicating contextual conditions. */\n    constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        // handle call to super\n        if (expression.expression.kind == ast_1.NodeKind.SUPER) {\n            let flow = this.currentFlow;\n            let actualFunction = flow.actualFunction;\n            if (!actualFunction.is(common_1.CommonFlags.CONSTRUCTOR)) {\n                this.error(diagnostics_1.DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors, expression.range);\n                return module.unreachable();\n            }\n            let parent = assert(actualFunction.parent);\n            assert(parent.kind == program_1.ElementKind.CLASS);\n            let classInstance = parent;\n            let baseClassInstance = classInstance.base;\n            if (!baseClassInstance) {\n                this.error(diagnostics_1.DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, expression.expression.range);\n                return module.unreachable();\n            }\n            let thisLocal = assert(flow.lookupLocal(common_1.CommonNames.this_));\n            let nativeSizeType = this.options.nativeSizeType;\n            let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n            this.checkFieldInitialization(baseClassInstance, expression);\n            let superCall = this.compileCallDirect(baseCtorInstance, expression.args, expression, module.local_get(thisLocal.index, nativeSizeType));\n            // check that super had been called before accessing `this`\n            if (flow.isAny(64 /* ACCESSES_THIS */ |\n                8192 /* CONDITIONALLY_ACCESSES_THIS */)) {\n                this.error(diagnostics_1.DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class, expression.range);\n                return module.unreachable();\n            }\n            flow.set(64 /* ACCESSES_THIS */ | 128 /* CALLS_SUPER */);\n            this.currentType = types_1.Type.void;\n            return module.local_set(thisLocal.index, superCall, classInstance.type.isManaged);\n        }\n        // otherwise resolve normally\n        var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n        if (!target)\n            return module.unreachable();\n        var thisExpression = this.resolver.currentThisExpression;\n        var signature;\n        var functionArg;\n        switch (target.kind) {\n            // direct call: concrete function\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                let functionPrototype = target;\n                if (functionPrototype.hasDecorator(program_1.DecoratorFlags.BUILTIN)) {\n                    // builtins handle present respectively omitted type arguments on their own\n                    return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n                }\n                let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n                if (!functionInstance)\n                    return this.module.unreachable();\n                target = functionInstance;\n                // fall-through\n            }\n            case program_1.ElementKind.FUNCTION: {\n                let functionInstance = target;\n                let thisArg = 0;\n                if (functionInstance.is(common_1.CommonFlags.INSTANCE)) {\n                    thisArg = this.compileExpression(assert(thisExpression), assert(functionInstance.signature.thisType), 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */);\n                }\n                return this.compileCallDirect(functionInstance, expression.args, expression, thisArg, constraints);\n            }\n            // indirect call: first-class function (non-generic, can't be inlined)\n            case program_1.ElementKind.LOCAL: {\n                let local = target;\n                signature = local.type.signatureReference;\n                if (signature) {\n                    if (local.is(common_1.CommonFlags.INLINED)) {\n                        let inlinedValue = local.constantIntegerValue;\n                        if (this.options.isWasm64) {\n                            functionArg = module.i64(i64_low(inlinedValue), i64_high(inlinedValue));\n                        }\n                        else {\n                            assert(!i64_high(inlinedValue));\n                            functionArg = module.i32(i64_low(inlinedValue));\n                        }\n                    }\n                    else {\n                        functionArg = module.local_get(local.index, this.options.nativeSizeType);\n                    }\n                    break;\n                }\n                this.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, expression.range, local.type.toString());\n                return module.unreachable();\n            }\n            case program_1.ElementKind.GLOBAL: {\n                let global = target;\n                signature = global.type.signatureReference;\n                if (signature) {\n                    functionArg = module.global_get(global.internalName, global.type.toNativeType());\n                    break;\n                }\n                this.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, expression.range, global.type.toString());\n                return module.unreachable();\n            }\n            case program_1.ElementKind.FIELD: {\n                let fieldInstance = target;\n                let fieldType = fieldInstance.type;\n                signature = fieldType.signatureReference;\n                if (signature) {\n                    let fieldParent = fieldInstance.parent;\n                    assert(fieldParent.kind == program_1.ElementKind.CLASS);\n                    let usizeType = this.options.usizeType;\n                    functionArg = module.load(usizeType.byteSize, false, this.compileExpression(assert(thisExpression), fieldParent.type, 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */), usizeType.toNativeType(), fieldInstance.memoryOffset);\n                    break;\n                }\n                this.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, expression.range, fieldType.toString());\n                return module.unreachable();\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyInstance = this.resolver.resolveProperty(target);\n                if (!propertyInstance)\n                    return module.unreachable();\n                target = propertyInstance;\n                // fall-through\n            }\n            case program_1.ElementKind.PROPERTY: {\n                let propertyInstance = target;\n                let getterInstance = assert(propertyInstance.getterInstance);\n                let thisArg = 0;\n                if (propertyInstance.is(common_1.CommonFlags.INSTANCE)) {\n                    thisArg = this.compileExpression(assert(thisExpression), assert(getterInstance.signature.thisType), 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */);\n                }\n                functionArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n                signature = this.currentType.signatureReference;\n                if (!signature) {\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, expression.range, this.currentType.toString());\n                    return module.unreachable();\n                }\n                break;\n            }\n            case program_1.ElementKind.CLASS: {\n                let classInstance = target;\n                let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n                if (typeArguments !== null && typeArguments.length > 0) {\n                    let ftype = typeArguments[0];\n                    signature = ftype.getSignature();\n                    functionArg = this.compileExpression(expression.expression, ftype, 1 /* CONV_IMPLICIT */);\n                    break;\n                }\n                // fall-through\n            }\n            // not supported\n            default: {\n                let type = this.resolver.getTypeOfElement(target);\n                if (type) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_has_no_call_signatures, expression.range, type.toString());\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, expression.range);\n                }\n                return module.unreachable();\n            }\n        }\n        return this.compileCallIndirect(assert(signature), // FIXME: bootstrap can't see this yet\n        functionArg, expression.args, expression, 0, contextualType == types_1.Type.void);\n    }\n    compileCallExpressionBuiltin(prototype, expression, contextualType) {\n        if (prototype.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n            this.checkUnsafe(expression);\n        var typeArguments = null;\n        // builtins handle omitted type arguments on their own. if present, however, resolve them here\n        // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n        var typeParameterNodes = prototype.typeParameterNodes;\n        var typeArgumentNodes = expression.typeArguments;\n        if (expression.typeArguments) {\n            if (!prototype.is(common_1.CommonFlags.GENERIC)) {\n                this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, expression.range, prototype.internalName);\n            }\n            typeArguments = this.resolver.resolveTypeArguments(assert(typeParameterNodes), typeArgumentNodes, this.currentFlow.actualFunction.parent, util_1.uniqueMap(this.currentFlow.contextualTypeArguments), expression);\n        }\n        var callee = expression.expression;\n        var ctx = new builtins_1.BuiltinContext(this, prototype, typeArguments, expression.args, callee.kind == ast_1.NodeKind.PROPERTYACCESS\n            ? callee.expression\n            : null, contextualType, expression, false);\n        // global builtins\n        var internalName = prototype.internalName;\n        if (builtins_1.builtins.has(internalName)) {\n            let fn = assert(builtins_1.builtins.get(internalName));\n            return fn(ctx);\n        }\n        // class builtins\n        var parent = prototype.parent;\n        if (parent.kind == program_1.ElementKind.CLASS) {\n            let classPrototype = parent.prototype;\n            if (classPrototype == this.program.functionPrototype) {\n                let methodName = prototype.name;\n                if (builtins_1.function_builtins.has(methodName)) {\n                    let fn = assert(builtins_1.function_builtins.get(methodName));\n                    return fn(ctx);\n                }\n            }\n        }\n        assert(false);\n        return this.module.unreachable();\n    }\n    /**\n     * Checks that a call with the given number as arguments can be performed according to the\n     * specified signature.\n     */\n    checkCallSignature(signature, numArguments, hasThis, reportNode) {\n        // cannot call an instance method without a `this` argument (TODO: `.call`?)\n        var thisType = signature.thisType;\n        if (hasThis != (thisType != null)) {\n            this.error(diagnostics_1.DiagnosticCode.The_this_types_of_each_signature_are_incompatible, reportNode.range);\n            return false;\n        }\n        // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n        var hasRest = signature.hasRest;\n        if (hasRest) {\n            this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, reportNode.range, \"Rest parameters\");\n            return false;\n        }\n        var minimum = signature.requiredParameters;\n        var maximum = signature.parameterTypes.length;\n        // must at least be called with required arguments\n        if (numArguments < minimum) {\n            this.error(minimum < maximum\n                ? diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n                : diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, minimum.toString(), numArguments.toString());\n            return false;\n        }\n        // must not be called with more than the maximum arguments\n        if (numArguments > maximum && !hasRest) {\n            this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, maximum.toString(), numArguments.toString());\n            return false;\n        }\n        return true;\n    }\n    /** Checks that an unsafe expression is allowed. */\n    checkUnsafe(reportNode, relatedReportNode = null) {\n        // Library files may always use unsafe features\n        if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n            if (relatedReportNode) {\n                this.errorRelated(diagnostics_1.DiagnosticCode.Operation_is_unsafe, reportNode.range, relatedReportNode.range);\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Operation_is_unsafe, reportNode.range);\n            }\n        }\n    }\n    /** Compiles a direct call to a concrete function. */\n    compileCallDirect(instance, argumentExpressions, reportNode, thisArg = 0, constraints = 0 /* NONE */) {\n        var numArguments = argumentExpressions.length;\n        var signature = instance.signature;\n        if (!this.checkCallSignature(// reports\n        signature, numArguments, thisArg != 0, reportNode)) {\n            this.currentType = signature.returnType;\n            return this.module.unreachable();\n        }\n        if (instance.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n            this.checkUnsafe(reportNode);\n        // handle call on `this` in constructors\n        let actualFunction = this.currentFlow.actualFunction;\n        if (actualFunction.is(common_1.CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n            let parent = actualFunction.parent;\n            assert(parent.kind == program_1.ElementKind.CLASS);\n            this.checkFieldInitialization(parent, reportNode);\n        }\n        // Inline if explicitly requested\n        if (instance.hasDecorator(program_1.DecoratorFlags.INLINE) && (!instance.is(common_1.CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n            assert(!instance.is(common_1.CommonFlags.STUB)); // doesn't make sense\n            let inlineStack = this.inlineStack;\n            if (inlineStack.includes(instance)) {\n                this.warning(diagnostics_1.DiagnosticCode.Function_0_cannot_be_inlined_into_itself, reportNode.range, instance.internalName);\n            }\n            else {\n                inlineStack.push(instance);\n                let parameterTypes = signature.parameterTypes;\n                assert(numArguments <= parameterTypes.length);\n                // compile argument expressions\n                let args = new Array(numArguments);\n                for (let i = 0; i < numArguments; ++i) {\n                    args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i], 1 /* CONV_IMPLICIT */);\n                }\n                // make the inlined call\n                let expr = this.makeCallInline(instance, args, thisArg, (constraints & 8 /* WILL_DROP */) != 0);\n                inlineStack.pop();\n                return expr;\n            }\n        }\n        // Otherwise compile to just a call\n        var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n        var operands = new Array(numArgumentsInclThis);\n        var index = 0;\n        if (thisArg) {\n            operands[0] = thisArg;\n            index = 1;\n        }\n        var parameterTypes = signature.parameterTypes;\n        for (let i = 0; i < numArguments; ++i, ++index) {\n            let paramType = parameterTypes[i];\n            let paramExpr = this.compileExpression(argumentExpressions[i], paramType, 1 /* CONV_IMPLICIT */);\n            operands[index] = paramExpr;\n        }\n        assert(index == numArgumentsInclThis);\n        return this.makeCallDirect(instance, operands, reportNode, (constraints & 8 /* WILL_DROP */) != 0);\n    }\n    makeCallInline(instance, operands, thisArg = 0, immediatelyDropped = false) {\n        var module = this.module;\n        var numArguments = operands ? operands.length : 0;\n        var signature = instance.signature;\n        var parameterTypes = signature.parameterTypes;\n        var numParameters = parameterTypes.length;\n        // Create a new inline flow and use it to compile the function as a block\n        var previousFlow = this.currentFlow;\n        var flow = flow_1.Flow.createInline(previousFlow.parentFunction, instance);\n        var body = [];\n        var usedLocals = new Set();\n        // Prepare compiled arguments right to left, keeping track of used locals.\n        for (let i = numArguments - 1; i >= 0; --i) {\n            // This is necessary because a later expression must not set an earlier argument local, which\n            // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n            // the right expression would reassign the foregoing argument local. So, we iterate from right\n            // to left, remembering what's used later, and don't use these for earlier arguments, making\n            // the example above essentially `t2=1, t1=(t1 = 2)`.\n            let paramExpr = operands[i];\n            let paramType = parameterTypes[i];\n            let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n            flow_1.findUsedLocals(paramExpr, usedLocals);\n            // inlining is aware of wrap/nonnull states:\n            if (!previousFlow.canOverflow(paramExpr, paramType))\n                flow.setLocalFlag(argumentLocal.index, flow_1.LocalFlags.WRAPPED);\n            if (flow.isNonnull(paramExpr, paramType))\n                flow.setLocalFlag(argumentLocal.index, flow_1.LocalFlags.NONNULL);\n            body.unshift(module.local_set(argumentLocal.index, paramExpr, paramType.isManaged));\n        }\n        if (thisArg) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == program_1.ElementKind.CLASS);\n            let classInstance = parent;\n            let thisType = assert(instance.signature.thisType);\n            let thisLocal = flow.addScopedLocal(common_1.CommonNames.this_, thisType, usedLocals);\n            body.unshift(module.local_set(thisLocal.index, thisArg, thisType.isManaged));\n            let base = classInstance.base;\n            if (base)\n                flow.addScopedAlias(common_1.CommonNames.super_, base.type, thisLocal.index);\n        }\n        else {\n            assert(!instance.signature.thisType);\n        }\n        // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n        // side-effects within earlier expressions because these already happened on set.\n        this.currentFlow = flow;\n        for (let i = numArguments; i < numParameters; ++i) {\n            let initType = parameterTypes[i];\n            let initExpr = this.compileExpression(assert(instance.prototype.functionTypeNode.parameters[i].initializer), initType, 1 /* CONV_IMPLICIT */);\n            let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n            body.push(this.makeLocalAssignment(argumentLocal, initExpr, initType, false));\n        }\n        // Compile the called function's body in the scope of the inlined flow\n        this.compileFunctionBody(instance, body);\n        // If a constructor, perform field init checks on its flow directly\n        if (instance.is(common_1.CommonFlags.CONSTRUCTOR)) {\n            let parent = instance.parent;\n            assert(parent.kind == program_1.ElementKind.CLASS);\n            this.checkFieldInitializationInFlow(parent, flow);\n        }\n        // Free any new scoped locals and reset to the original flow\n        flow.freeScopedLocals();\n        var returnType = flow.returnType;\n        this.currentFlow = previousFlow;\n        // Create an outer block that we can break to when returning a value out of order\n        this.currentType = returnType;\n        return module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    }\n    /** Makes sure that the arguments length helper global is present. */\n    ensureArgumentsLength() {\n        var name = builtins_1.BuiltinNames.argumentsLength;\n        if (!this.builtinArgumentsLength) {\n            let module = this.module;\n            this.builtinArgumentsLength = module.addGlobal(name, module_1.NativeType.I32, true, module.i32(0));\n        }\n        return name;\n    }\n    /** Ensures compilation of the varargs stub for the specified function. */\n    ensureVarargsStub(original) {\n        // A varargs stub is a function called with omitted arguments being zeroed,\n        // reading the `argumentsLength` helper global to decide which initializers\n        // to inject before calling the original function. It is typically attempted\n        // to circumvent the varargs stub where possible, for example where omitted\n        // arguments are constants and can be inlined into the original call.\n        var stub = original.varargsStub;\n        if (stub)\n            return stub;\n        var originalSignature = original.signature;\n        var originalParameterTypes = originalSignature.parameterTypes;\n        var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n        var returnType = originalSignature.returnType;\n        var isInstance = original.is(common_1.CommonFlags.INSTANCE);\n        // arguments excl. `this`, operands incl. `this`\n        var minArguments = originalSignature.requiredParameters;\n        var minOperands = minArguments;\n        var maxArguments = originalParameterTypes.length;\n        var maxOperands = maxArguments;\n        if (isInstance) {\n            ++minOperands;\n            ++maxOperands;\n        }\n        var numOptional = assert(maxOperands - minOperands);\n        var forwardedOperands = new Array(minOperands);\n        var operandIndex = 0;\n        var stmts = new Array();\n        // forward `this` if applicable\n        var module = this.module;\n        var thisType = originalSignature.thisType;\n        if (thisType) {\n            forwardedOperands[0] = module.local_get(0, thisType.toNativeType());\n            operandIndex = 1;\n        }\n        // forward required arguments\n        for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n            let paramType = originalParameterTypes[i];\n            forwardedOperands[operandIndex] = module.local_get(operandIndex, paramType.toNativeType());\n        }\n        assert(operandIndex == minOperands);\n        // create the varargs stub\n        stub = original.newStub(\"varargs\");\n        stub.signature.requiredParameters = maxArguments;\n        original.varargsStub = stub;\n        // compile initializers of omitted arguments in the scope of the stub,\n        // accounting for additional locals and a proper `this` context.\n        var previousFlow = this.currentFlow;\n        var flow = stub.flow;\n        this.currentFlow = flow;\n        // create a br_table switching over the number of optional parameters provided\n        var numNames = numOptional + 1; // incl. outer block\n        var names = new Array(numNames);\n        var ofN = \"of\" + numOptional.toString();\n        for (let i = 0; i < numNames; ++i) {\n            let label = i.toString() + ofN;\n            names[i] = label;\n        }\n        var argumentsLength = this.ensureArgumentsLength();\n        var table = module.block(names[0], [\n            module.block(\"outOfRange\", [\n                module.switch(names, \"outOfRange\", \n                // condition is number of provided optional arguments, so subtract required arguments\n                minArguments\n                    ? module.binary(module_1.BinaryOp.SubI32, module.global_get(argumentsLength, module_1.NativeType.I32), module.i32(minArguments))\n                    : module.global_get(argumentsLength, module_1.NativeType.I32))\n            ]),\n            module.unreachable()\n        ]);\n        for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n            let type = originalParameterTypes[minArguments + i];\n            let declaration = originalParameterDeclarations[minArguments + i];\n            let initializer = declaration.initializer;\n            let initExpr;\n            if (initializer) {\n                initExpr = this.compileExpression(initializer, type, 1 /* CONV_IMPLICIT */);\n                initExpr = module.local_set(operandIndex, initExpr, type.isManaged);\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Optional_parameter_must_have_an_initializer, declaration.range);\n                initExpr = module.unreachable();\n            }\n            table = module.block(names[i + 1], [\n                table,\n                initExpr,\n            ]);\n            forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n        }\n        assert(operandIndex == maxOperands);\n        stmts.push(table);\n        stmts.push(module.call(original.internalName, forwardedOperands, returnType.toNativeType()));\n        flow.freeScopedLocals();\n        this.currentFlow = previousFlow;\n        var funcRef = module.addFunction(stub.internalName, stub.signature.nativeParams, stub.signature.nativeResults, types_1.typesToNativeTypes(stub.additionalLocals), module.flatten(stmts, returnType.toNativeType()));\n        stub.set(common_1.CommonFlags.COMPILED);\n        stub.finalize(module, funcRef);\n        return stub;\n    }\n    /** Ensures compilation of the virtual stub for the specified function. */\n    ensureVirtualStub(original) {\n        // A virtual stub is a function redirecting virtual calls to the actual\n        // overload targeted by the call. It utilizes varargs stubs where necessary\n        // and as such has the same semantics as one. Here, we only make sure that\n        // a placeholder exist, with actual code being generated as a finalization\n        // step once module compilation is otherwise complete.\n        var stub = original.virtualStub;\n        if (stub)\n            return stub;\n        stub = original.newStub(\"virtual\");\n        original.virtualStub = stub;\n        var module = this.module;\n        stub.ref = module.addFunction(stub.internalName, stub.signature.nativeParams, stub.signature.nativeResults, null, module.unreachable());\n        this.virtualCalls.add(original);\n        return stub;\n    }\n    /** Finalizes the virtual stub of the specified function. */\n    finalizeVirtualStub(instance) {\n        var stub = this.ensureVirtualStub(instance);\n        if (stub.is(common_1.CommonFlags.COMPILED))\n            return;\n        // Wouldn't be here if there wasn't at least one overload\n        var overloadPrototypes = assert(instance.prototype.overloads);\n        var module = this.module;\n        var usizeType = this.options.usizeType;\n        var nativeSizeType = usizeType.toNativeType();\n        var parameterTypes = instance.signature.parameterTypes;\n        var returnType = instance.signature.returnType;\n        var numParameters = parameterTypes.length;\n        var tempIndex = 1 + parameterTypes.length; // incl. `this`\n        // Switch over this's rtId and map it to the respective overload\n        var builder = new module_1.SwitchBuilder(this.module, module.load(4, false, module.binary(nativeSizeType == module_1.NativeType.I64\n            ? module_1.BinaryOp.SubI64\n            : module_1.BinaryOp.SubI32, module.local_get(0, nativeSizeType), nativeSizeType == module_1.NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)), module_1.NativeType.I32));\n        // A method's `overloads` property contains its unbound overload prototypes\n        // so we first have to find the concrete classes it became bound to, obtain\n        // their bound prototypes and make sure these are resolved and compiled as\n        // we are going to call them conditionally based on this's class id.\n        for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n            let unboundOverloadPrototype = _values[i];\n            assert(!unboundOverloadPrototype.isBound);\n            let unboundOverloadParent = unboundOverloadPrototype.parent;\n            let isProperty = unboundOverloadParent.kind == program_1.ElementKind.PROPERTY_PROTOTYPE;\n            let classInstances;\n            if (isProperty) {\n                let propertyParent = unboundOverloadParent.parent;\n                assert(propertyParent.kind == program_1.ElementKind.CLASS_PROTOTYPE);\n                classInstances = propertyParent.instances;\n            }\n            else {\n                assert(unboundOverloadParent.kind == program_1.ElementKind.CLASS_PROTOTYPE);\n                classInstances = unboundOverloadParent.instances;\n            }\n            if (classInstances) {\n                for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n                    let classInstance = _values[j];\n                    let overloadInstance;\n                    if (isProperty) {\n                        let boundProperty = assert(classInstance.members.get(unboundOverloadParent.name));\n                        assert(boundProperty.kind == program_1.ElementKind.PROPERTY_PROTOTYPE);\n                        let boundPropertyInstance = this.resolver.resolveProperty(boundProperty);\n                        if (!boundPropertyInstance)\n                            continue;\n                        if (instance.is(common_1.CommonFlags.GET)) {\n                            overloadInstance = boundPropertyInstance.getterInstance;\n                        }\n                        else {\n                            assert(instance.is(common_1.CommonFlags.SET));\n                            overloadInstance = boundPropertyInstance.setterInstance;\n                        }\n                    }\n                    else {\n                        let boundPrototype = assert(classInstance.members.get(unboundOverloadPrototype.name));\n                        assert(boundPrototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                        overloadInstance = this.resolver.resolveFunction(boundPrototype, instance.typeArguments);\n                    }\n                    if (!overloadInstance || !this.compileFunction(overloadInstance))\n                        continue;\n                    let overloadType = overloadInstance.type;\n                    let originalType = instance.type;\n                    if (!overloadType.isAssignableTo(originalType)) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString());\n                        continue;\n                    }\n                    // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n                    let overloadSignature = overloadInstance.signature;\n                    let overloadParameterTypes = overloadSignature.parameterTypes;\n                    let overloadNumParameters = overloadParameterTypes.length;\n                    let paramExprs = new Array(1 + overloadNumParameters);\n                    paramExprs[0] = module.local_get(0, nativeSizeType); // this\n                    for (let n = 1; n <= numParameters; ++n) {\n                        paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n                    }\n                    let needsVarargsStub = false;\n                    for (let n = numParameters; n < overloadNumParameters; ++n) {\n                        // TODO: inline constant initializers and skip varargs stub\n                        paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n                        needsVarargsStub = true;\n                    }\n                    let calledName = needsVarargsStub\n                        ? this.ensureVarargsStub(overloadInstance).internalName\n                        : overloadInstance.internalName;\n                    let nativeReturnType = overloadSignature.returnType.toNativeType();\n                    let stmts = new Array();\n                    if (needsVarargsStub) {\n                        // Safe to prepend since paramExprs are local.get's\n                        stmts.push(module.global_set(this.ensureArgumentsLength(), module.i32(numParameters)));\n                    }\n                    if (returnType == types_1.Type.void) {\n                        stmts.push(module.call(calledName, paramExprs, nativeReturnType));\n                        stmts.push(module.return());\n                    }\n                    else {\n                        stmts.push(module.return(module.call(calledName, paramExprs, nativeReturnType)));\n                    }\n                    builder.addCase(classInstance.id, stmts);\n                    // Also alias each extendee inheriting this exact overload\n                    let extendees = classInstance.getAllExtendees(isProperty\n                        ? unboundOverloadParent.name\n                        : instance.prototype.name);\n                    for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n                        let extendee = _values[a];\n                        builder.addCase(extendee.id, stmts);\n                    }\n                }\n            }\n        }\n        // Call the original function if no other id matches and the method is not\n        // abstract or part of an interface. Note that doing so will not catch an\n        // invalid id, but can reduce code size significantly since we also don't\n        // have to add branches for extendees inheriting the original function.\n        var body;\n        if (instance.prototype.bodyNode) {\n            let paramExprs = new Array(numParameters);\n            paramExprs[0] = module.local_get(0, nativeSizeType); // this\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n                paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n            }\n            body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n            // Otherwise trap\n        }\n        else {\n            body = module.unreachable();\n        }\n        // Create the virtual stub function\n        var ref = stub.ref;\n        if (ref)\n            module.removeFunction(stub.internalName);\n        stub.ref = module.addFunction(stub.internalName, stub.signature.nativeParams, stub.signature.nativeResults, [module_1.NativeType.I32], module.block(null, [\n            builder.render(tempIndex),\n            body\n        ], returnType.toNativeType()));\n        stub.set(common_1.CommonFlags.COMPILED);\n    }\n    /** Marks managed call operands for the shadow stack. */\n    operandsTostack(signature, operands) {\n        if (!this.options.stackSize)\n            return;\n        var module = this.module;\n        var operandIndex = 0;\n        var thisType = signature.thisType;\n        if (thisType) {\n            if (thisType.isManaged) {\n                let operand = operands[0];\n                let precomp = module.runExpression(operand, module_1.ExpressionRunnerFlags.Default);\n                if (!module_1.isConstZero(precomp)) { // otherwise unnecessary\n                    operands[operandIndex] = module.tostack(operand);\n                }\n            }\n            ++operandIndex;\n        }\n        var parameterIndex = 0;\n        var parameterTypes = signature.parameterTypes;\n        assert(parameterTypes.length >= operands.length - operandIndex);\n        while (operandIndex < operands.length) {\n            let paramType = parameterTypes[parameterIndex];\n            if (paramType.isManaged) {\n                let operand = operands[operandIndex];\n                let precomp = module.runExpression(operand, module_1.ExpressionRunnerFlags.Default);\n                if (!module_1.isConstZero(precomp)) { // otherwise unnecessary\n                    operands[operandIndex] = module.tostack(operand);\n                }\n            }\n            ++operandIndex;\n            ++parameterIndex;\n        }\n    }\n    /** Creates a direct call to the specified function. */\n    makeCallDirect(instance, operands, reportNode, immediatelyDropped = false) {\n        if (instance.hasDecorator(program_1.DecoratorFlags.INLINE)) {\n            if (!instance.is(common_1.CommonFlags.VIRTUAL)) {\n                assert(!instance.is(common_1.CommonFlags.STUB)); // doesn't make sense\n                let inlineStack = this.inlineStack;\n                if (inlineStack.includes(instance)) {\n                    this.warning(diagnostics_1.DiagnosticCode.Function_0_cannot_be_inlined_into_itself, reportNode.range, instance.internalName);\n                }\n                else {\n                    inlineStack.push(instance);\n                    let expr;\n                    if (instance.is(common_1.CommonFlags.INSTANCE)) {\n                        let theOperands = assert(operands);\n                        assert(theOperands.length);\n                        expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n                    }\n                    else {\n                        expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n                    }\n                    inlineStack.pop();\n                    return expr;\n                }\n            }\n            else {\n                this.warning(diagnostics_1.DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined, reportNode.range, instance.internalName);\n            }\n        }\n        var module = this.module;\n        var numOperands = operands ? operands.length : 0;\n        var numArguments = numOperands;\n        var minArguments = instance.signature.requiredParameters;\n        var minOperands = minArguments;\n        var parameterTypes = instance.signature.parameterTypes;\n        var maxArguments = parameterTypes.length;\n        var maxOperands = maxArguments;\n        if (instance.is(common_1.CommonFlags.INSTANCE)) {\n            ++minOperands;\n            ++maxOperands;\n            --numArguments;\n        }\n        assert(numOperands >= minOperands);\n        if (!this.compileFunction(instance))\n            return module.unreachable();\n        var returnType = instance.signature.returnType;\n        // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n        if (numOperands < maxOperands) {\n            if (!operands) {\n                operands = new Array(maxOperands);\n                operands.length = 0;\n            }\n            let parameterNodes = instance.prototype.functionTypeNode.parameters;\n            assert(parameterNodes.length == parameterTypes.length);\n            let allOptionalsAreConstant = true;\n            for (let i = numArguments; i < maxArguments; ++i) {\n                let initializer = parameterNodes[i].initializer;\n                if (initializer) {\n                    if (initializer.compilesToConst) {\n                        operands.push(this.compileExpression(initializer, parameterTypes[i], 1 /* CONV_IMPLICIT */));\n                        continue;\n                    }\n                    let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], resolver_1.ReportMode.SWALLOW);\n                    if (resolved) {\n                        if (resolved.kind == program_1.ElementKind.GLOBAL) {\n                            let global = resolved;\n                            if (this.compileGlobal(global)) {\n                                if (global.is(common_1.CommonFlags.INLINED)) {\n                                    operands.push(this.compileInlineConstant(global, parameterTypes[i], 1 /* CONV_IMPLICIT */));\n                                }\n                                else {\n                                    operands.push(this.convertExpression(module.global_get(global.internalName, global.type.toNativeType()), global.type, parameterTypes[i], false, initializer));\n                                }\n                                continue;\n                            }\n                        }\n                    }\n                }\n                operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n                allOptionalsAreConstant = false;\n            }\n            if (!allOptionalsAreConstant && !instance.is(common_1.CommonFlags.MODULE_IMPORT)) {\n                let original = instance;\n                instance = this.ensureVarargsStub(instance);\n                if (!this.compileFunction(instance))\n                    return module.unreachable();\n                instance.flow.flags = original.flow.flags;\n                let nativeReturnType = returnType.toNativeType();\n                // We know the last operand is optional and omitted, so inject setting\n                // ~argumentsLength into that operand, which is always safe.\n                let lastOperand = operands[maxOperands - 1];\n                assert(!(module_1.getSideEffects(lastOperand) & module_1.SideEffects.WritesGlobal));\n                let lastOperandType = parameterTypes[maxArguments - 1];\n                operands[maxOperands - 1] = module.block(null, [\n                    module.global_set(this.ensureArgumentsLength(), module.i32(numArguments)),\n                    lastOperand\n                ], lastOperandType.toNativeType());\n                this.operandsTostack(instance.signature, operands);\n                let expr = module.call(instance.internalName, operands, nativeReturnType);\n                if (returnType != types_1.Type.void && immediatelyDropped) {\n                    expr = module.drop(expr);\n                    this.currentType = types_1.Type.void;\n                }\n                else {\n                    this.currentType = returnType;\n                }\n                return expr;\n            }\n        }\n        // Call the virtual stub with the vtable if the function has overloads\n        if (instance.is(common_1.CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n            instance = this.ensureVirtualStub(instance);\n        }\n        if (operands)\n            this.operandsTostack(instance.signature, operands);\n        var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n        this.currentType = returnType;\n        return expr;\n    }\n    /** Compiles an indirect call to a first-class function. */\n    compileCallIndirect(signature, functionArg, argumentExpressions, reportNode, thisArg = 0, immediatelyDropped = false) {\n        var numArguments = argumentExpressions.length;\n        if (!this.checkCallSignature(// reports\n        signature, numArguments, thisArg != 0, reportNode)) {\n            return this.module.unreachable();\n        }\n        var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n        var operands = new Array(numArgumentsInclThis);\n        var index = 0;\n        if (thisArg) {\n            operands[0] = thisArg;\n            index = 1;\n        }\n        var parameterTypes = signature.parameterTypes;\n        for (let i = 0; i < numArguments; ++i, ++index) {\n            operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i], 1 /* CONV_IMPLICIT */);\n        }\n        assert(index == numArgumentsInclThis);\n        return this.makeCallIndirect(signature, functionArg, reportNode, operands, immediatelyDropped);\n    }\n    /** Creates an indirect call to a first-class function. */\n    makeCallIndirect(signature, functionArg, reportNode, operands = null, immediatelyDropped = false) {\n        var module = this.module;\n        var numOperands = operands ? operands.length : 0;\n        var numArguments = numOperands;\n        var minArguments = signature.requiredParameters;\n        var minOperands = minArguments;\n        var parameterTypes = signature.parameterTypes;\n        var returnType = signature.returnType;\n        var maxArguments = parameterTypes.length;\n        var maxOperands = maxArguments;\n        if (signature.thisType) {\n            ++minOperands;\n            ++maxOperands;\n            --numArguments;\n        }\n        assert(numOperands >= minOperands);\n        // fill up omitted arguments with zeroes\n        if (numOperands < maxOperands) {\n            if (!operands) {\n                operands = new Array(maxOperands);\n                operands.length = 0;\n            }\n            let parameterTypes = signature.parameterTypes;\n            for (let i = numArguments; i < maxArguments; ++i) {\n                operands.push(this.makeZero(parameterTypes[i], reportNode));\n            }\n        }\n        // We might be calling a varargs stub here, even if all operands have been\n        // provided, so we must set `argumentsLength` in any case. Inject setting it\n        // into the index argument, which becomes executed last after any operands.\n        var argumentsLength = this.ensureArgumentsLength();\n        var nativeSizeType = this.options.nativeSizeType;\n        if (module_1.getSideEffects(functionArg) & module_1.SideEffects.WritesGlobal) {\n            let flow = this.currentFlow;\n            let temp = flow.getTempLocal(this.options.usizeType, flow_1.findUsedLocals(functionArg));\n            functionArg = module.block(null, [\n                module.local_set(temp.index, functionArg, true),\n                module.global_set(argumentsLength, module.i32(numArguments)),\n                module.local_get(temp.index, nativeSizeType)\n            ], nativeSizeType);\n            flow.freeTempLocal(temp);\n        }\n        else { // simplify\n            functionArg = module.block(null, [\n                module.global_set(argumentsLength, module.i32(numArguments)),\n                functionArg\n            ], nativeSizeType);\n        }\n        if (operands)\n            this.operandsTostack(signature, operands);\n        var expr = module.call_indirect(module.load(4, false, functionArg, module_1.NativeType.I32), // ._index\n        operands, signature.nativeParams, signature.nativeResults);\n        this.currentType = returnType;\n        return expr;\n    }\n    compileCommaExpression(expression, contextualType, constraints) {\n        var expressions = expression.expressions;\n        var numExpressions = expressions.length;\n        var exprs = new Array(numExpressions--);\n        for (let i = 0; i < numExpressions; ++i) {\n            exprs[i] = this.compileExpression(expressions[i], types_1.Type.void, // drop all except last\n            1 /* CONV_IMPLICIT */ | 8 /* WILL_DROP */);\n        }\n        exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n        return this.module.flatten(exprs, this.currentType.toNativeType());\n    }\n    compileElementAccessExpression(expression, contextualType, constraints) {\n        var module = this.module;\n        var targetExpression = expression.expression;\n        var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n        if (targetType) {\n            let classReference = targetType.getClassOrWrapper(this.program);\n            if (classReference) {\n                let isUnchecked = this.currentFlow.is(32768 /* UNCHECKED_CONTEXT */);\n                let indexedGet = classReference.lookupOverload(program_1.OperatorKind.INDEXED_GET, isUnchecked);\n                if (indexedGet) {\n                    let thisType = assert(indexedGet.signature.thisType);\n                    let thisArg = this.compileExpression(targetExpression, thisType, 1 /* CONV_IMPLICIT */);\n                    if (!isUnchecked && this.options.pedantic) {\n                        this.pedantic(diagnostics_1.DiagnosticCode.Indexed_access_may_involve_bounds_checking, expression.range);\n                    }\n                    return this.compileCallDirect(indexedGet, [\n                        expression.elementExpression\n                    ], expression, thisArg, constraints);\n                }\n            }\n            this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, expression.expression.range, targetType.toString());\n        }\n        return module.unreachable();\n    }\n    compileFunctionExpression(expression, contextualType, constraints) {\n        var declaration = expression.declaration.clone(); // generic contexts can have multiple\n        assert(!declaration.typeParameters); // function expression cannot be generic\n        var flow = this.currentFlow;\n        var actualFunction = flow.actualFunction;\n        var isNamed = declaration.name.text.length > 0;\n        var isSemanticallyAnonymous = !isNamed || contextualType != types_1.Type.void;\n        var prototype = new program_1.FunctionPrototype(isSemanticallyAnonymous\n            ? (isNamed ? declaration.name.text + \"|\" : \"anonymous|\") + (actualFunction.nextAnonymousId++).toString()\n            : declaration.name.text, actualFunction, declaration, program_1.DecoratorFlags.NONE);\n        var instance;\n        var contextualTypeArguments = util_1.uniqueMap(flow.contextualTypeArguments);\n        var module = this.module;\n        // compile according to context. this differs from a normal function in that omitted parameter\n        // and return types can be inferred and omitted arguments can be replaced with dummies.\n        var contextualSignature = contextualType.signatureReference;\n        if (contextualSignature) {\n            let signatureNode = prototype.functionTypeNode;\n            let parameterNodes = signatureNode.parameters;\n            let numPresentParameters = parameterNodes.length;\n            // must not require more than the maximum number of parameters\n            let parameterTypes = contextualSignature.parameterTypes;\n            let numParameters = parameterTypes.length;\n            if (numPresentParameters > numParameters) {\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, expression.range, numParameters.toString(), numPresentParameters.toString());\n                return module.unreachable();\n            }\n            // check non-omitted parameter types\n            for (let i = 0; i < numPresentParameters; ++i) {\n                let parameterNode = parameterNodes[i];\n                if (!ast_1.isTypeOmitted(parameterNode.type)) {\n                    let resolvedType = this.resolver.resolveType(parameterNode.type, actualFunction.parent, contextualTypeArguments);\n                    if (!resolvedType)\n                        return module.unreachable();\n                    if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, parameterNode.range, parameterTypes[i].toString(), resolvedType.toString());\n                        return module.unreachable();\n                    }\n                }\n                // any unused parameters are inherited but ignored\n            }\n            // check non-omitted return type\n            let returnType = contextualSignature.returnType;\n            if (!ast_1.isTypeOmitted(signatureNode.returnType)) {\n                let resolvedType = this.resolver.resolveType(signatureNode.returnType, actualFunction.parent, contextualTypeArguments);\n                if (!resolvedType)\n                    return module.unreachable();\n                if (returnType == types_1.Type.void\n                    ? resolvedType != types_1.Type.void\n                    : !resolvedType.isStrictlyAssignableTo(returnType)) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, signatureNode.returnType.range, resolvedType.toString(), returnType.toString());\n                    return module.unreachable();\n                }\n            }\n            // check explicit this type\n            let thisType = contextualSignature.thisType;\n            let thisTypeNode = signatureNode.explicitThisType;\n            if (thisTypeNode) {\n                if (!thisType) {\n                    this.error(diagnostics_1.DiagnosticCode._this_cannot_be_referenced_in_current_location, thisTypeNode.range);\n                    return module.unreachable();\n                }\n                let resolvedType = this.resolver.resolveType(thisTypeNode, actualFunction.parent, contextualTypeArguments);\n                if (!resolvedType)\n                    return module.unreachable();\n                if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, thisTypeNode.range, thisType.toString(), resolvedType.toString());\n                    return module.unreachable();\n                }\n            }\n            let signature = new types_1.Signature(this.program, parameterTypes, returnType, thisType);\n            signature.requiredParameters = numParameters; // !\n            instance = new program_1.Function(prototype.name, prototype, null, signature, contextualTypeArguments);\n            instance.flow.outer = flow;\n            let worked = this.compileFunction(instance);\n            this.currentType = contextualSignature.type;\n            if (!worked)\n                return module.unreachable();\n            // otherwise compile like a normal function\n        }\n        else {\n            instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n            if (!instance)\n                return this.module.unreachable();\n            instance.flow.outer = flow;\n            let worked = this.compileFunction(instance);\n            this.currentType = instance.signature.type;\n            if (!worked)\n                return module.unreachable();\n        }\n        var offset = this.ensureRuntimeFunction(instance); // reports\n        var expr = this.options.isWasm64\n            ? module.i64(i64_low(offset), i64_high(offset))\n            : module.i32(i64_low(offset));\n        // add a constant local referring to the function if applicable\n        if (!isSemanticallyAnonymous) {\n            let fname = instance.name;\n            let existingLocal = flow.getScopedLocal(fname);\n            if (existingLocal) {\n                if (!existingLocal.declaration.range.source.isNative) {\n                    this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, existingLocal.declaration.name.range, fname);\n                }\n                else { // scoped locals are shared temps that don't track declarations\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, fname);\n                }\n            }\n            else {\n                let ftype = instance.type;\n                let local = flow.addScopedLocal(instance.name, ftype);\n                flow.setLocalFlag(local.index, flow_1.LocalFlags.CONSTANT);\n                expr = module.local_tee(local.index, expr, ftype.isManaged);\n            }\n        }\n        return expr;\n    }\n    /** Makes sure the enclosing source file of the specified expression has been compiled. */\n    maybeCompileEnclosingSource(expression) {\n        var internalPath = expression.range.source.internalPath;\n        var filesByName = this.program.filesByName;\n        assert(filesByName.has(internalPath));\n        var enclosingFile = assert(filesByName.get(internalPath));\n        if (!enclosingFile.is(common_1.CommonFlags.COMPILED)) {\n            this.compileFileByPath(internalPath, expression);\n        }\n    }\n    compileIdentifierExpression(expression, contextualType, constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var actualFunction = flow.actualFunction;\n        // check special keywords first\n        switch (expression.kind) {\n            case ast_1.NodeKind.NULL: {\n                let options = this.options;\n                if (contextualType.isReference) {\n                    let classReference = contextualType.getClass();\n                    if (classReference) {\n                        this.currentType = classReference.type.asNullable();\n                        return options.isWasm64 ? module.i64(0) : module.i32(0);\n                    }\n                    let signatureReference = contextualType.getSignature();\n                    if (signatureReference) {\n                        this.currentType = signatureReference.type.asNullable();\n                        return options.isWasm64 ? module.i64(0) : module.i32(0);\n                    }\n                    return this.makeZero(contextualType, expression);\n                }\n                this.currentType = options.usizeType;\n                this.warning(diagnostics_1.DiagnosticCode.Expression_resolves_to_unusual_type_0, expression.range, this.currentType.toString());\n                return options.isWasm64\n                    ? module.i64(0)\n                    : module.i32(0);\n            }\n            case ast_1.NodeKind.TRUE: {\n                this.currentType = types_1.Type.bool;\n                return module.i32(1);\n            }\n            case ast_1.NodeKind.FALSE: {\n                this.currentType = types_1.Type.bool;\n                return module.i32(0);\n            }\n            case ast_1.NodeKind.THIS: {\n                let thisType = actualFunction.signature.thisType;\n                if (!thisType) {\n                    this.error(diagnostics_1.DiagnosticCode._this_cannot_be_referenced_in_current_location, expression.range);\n                    this.currentType = this.options.usizeType;\n                    return module.unreachable();\n                }\n                if (actualFunction.is(common_1.CommonFlags.CONSTRUCTOR) && !(constraints & 32 /* IS_THIS */)) {\n                    let parent = actualFunction.parent;\n                    assert(parent.kind == program_1.ElementKind.CLASS);\n                    this.checkFieldInitialization(parent, expression);\n                }\n                let thisLocal = assert(flow.lookupLocal(common_1.CommonNames.this_));\n                flow.set(64 /* ACCESSES_THIS */);\n                this.currentType = thisType;\n                return module.local_get(thisLocal.index, thisType.toNativeType());\n            }\n            case ast_1.NodeKind.SUPER: {\n                let flow = this.currentFlow;\n                let actualFunction = flow.actualFunction;\n                if (actualFunction.is(common_1.CommonFlags.CONSTRUCTOR)) {\n                    if (!flow.is(128 /* CALLS_SUPER */)) {\n                        // TS1034 in the parser effectively limits this to property accesses\n                        this.error(diagnostics_1.DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class, expression.range);\n                    }\n                }\n                if (flow.isInline) {\n                    let scopedThis = flow.lookupLocal(common_1.CommonNames.this_);\n                    if (scopedThis) {\n                        let scopedThisClass = assert(scopedThis.type.getClass());\n                        let base = scopedThisClass.base;\n                        if (base) {\n                            this.currentType = base.type;\n                            return module.local_get(scopedThis.index, base.type.toNativeType());\n                        }\n                    }\n                }\n                if (actualFunction.is(common_1.CommonFlags.INSTANCE)) {\n                    let parent = assert(actualFunction.parent);\n                    assert(parent.kind == program_1.ElementKind.CLASS);\n                    let classInstance = parent;\n                    let baseClassInstance = classInstance.base;\n                    if (baseClassInstance) {\n                        let superType = baseClassInstance.type;\n                        this.currentType = superType;\n                        return module.local_get(0, superType.toNativeType());\n                    }\n                }\n                this.error(diagnostics_1.DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, expression.range);\n                this.currentType = this.options.usizeType;\n                return module.unreachable();\n            }\n        }\n        this.maybeCompileEnclosingSource(expression);\n        // otherwise resolve\n        var currentParent = this.currentParent;\n        if (!currentParent)\n            currentParent = actualFunction;\n        var target = this.resolver.lookupIdentifierExpression(// reports\n        expression, flow, currentParent);\n        if (!target) {\n            // make a guess to avoid assertions in calling code\n            if (this.currentType == types_1.Type.void)\n                this.currentType = types_1.Type.i32;\n            return module.unreachable();\n        }\n        switch (target.kind) {\n            case program_1.ElementKind.LOCAL: {\n                let local = target;\n                let localType = local.type;\n                assert(localType != types_1.Type.void);\n                if (this.pendingElements.has(local)) {\n                    this.error(diagnostics_1.DiagnosticCode.Variable_0_used_before_its_declaration, expression.range, local.internalName);\n                    this.currentType = localType;\n                    return module.unreachable();\n                }\n                if (local.is(common_1.CommonFlags.INLINED)) {\n                    return this.compileInlineConstant(local, contextualType, constraints);\n                }\n                let localIndex = local.index;\n                assert(localIndex >= 0);\n                if (localType.isNullableReference && flow.isLocalFlag(localIndex, flow_1.LocalFlags.NONNULL, false)) {\n                    localType = localType.nonNullableType;\n                }\n                this.currentType = localType;\n                if (target.parent != flow.parentFunction) {\n                    // TODO: closures\n                    this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, expression.range, \"Closures\");\n                    return module.unreachable();\n                }\n                return module.local_get(localIndex, localType.toNativeType());\n            }\n            case program_1.ElementKind.GLOBAL: {\n                let global = target;\n                if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n                    return module.unreachable();\n                }\n                let globalType = global.type;\n                if (this.pendingElements.has(global)) {\n                    this.error(diagnostics_1.DiagnosticCode.Variable_0_used_before_its_declaration, expression.range, global.internalName);\n                    this.currentType = globalType;\n                    return module.unreachable();\n                }\n                assert(globalType != types_1.Type.void);\n                if (global.is(common_1.CommonFlags.INLINED)) {\n                    return this.compileInlineConstant(global, contextualType, constraints);\n                }\n                this.currentType = globalType;\n                return module.global_get(global.internalName, globalType.toNativeType());\n            }\n            case program_1.ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n                let enumValue = target;\n                if (!target.is(common_1.CommonFlags.COMPILED)) {\n                    this.error(diagnostics_1.DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums, expression.range);\n                    this.currentType = types_1.Type.i32;\n                    return module.unreachable();\n                }\n                this.currentType = types_1.Type.i32;\n                if (enumValue.is(common_1.CommonFlags.INLINED)) {\n                    assert(enumValue.constantValueKind == 1 /* INTEGER */);\n                    return module.i32(i64_low(enumValue.constantIntegerValue));\n                }\n                return module.global_get(enumValue.internalName, module_1.NativeType.I32);\n            }\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                let functionPrototype = target;\n                let typeParameterNodes = functionPrototype.typeParameterNodes;\n                if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n                    this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, expression.range, typeParameterNodes.length.toString(), \"0\");\n                    return module.unreachable();\n                }\n                let functionInstance = this.resolver.resolveFunction(functionPrototype, null, util_1.uniqueMap(flow.contextualTypeArguments));\n                if (!functionInstance || !this.compileFunction(functionInstance))\n                    return module.unreachable();\n                if (contextualType.isExternalReference) {\n                    this.currentType = types_1.Type.funcref;\n                    return module.ref_func(functionInstance.internalName, module_1.NativeType.Funcref); // TODO\n                }\n                let offset = this.ensureRuntimeFunction(functionInstance);\n                this.currentType = functionInstance.signature.type;\n                return this.options.isWasm64\n                    ? module.i64(i64_low(offset), i64_high(offset))\n                    : module.i32(i64_low(offset));\n            }\n        }\n        this.error(diagnostics_1.DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime, expression.range);\n        return this.module.unreachable();\n    }\n    compileInstanceOfExpression(expression, contextualType, constraints) {\n        var flow = this.currentFlow;\n        var isType = expression.isType;\n        // Mimic `instanceof CLASS`\n        if (isType.kind == ast_1.NodeKind.NAMEDTYPE) {\n            let namedType = isType;\n            if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n                let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, resolver_1.ReportMode.SWALLOW);\n                if (element !== null && element.kind == program_1.ElementKind.CLASS_PROTOTYPE) {\n                    let prototype = element;\n                    if (prototype.is(common_1.CommonFlags.GENERIC)) {\n                        return this.makeInstanceofClass(expression, prototype);\n                    }\n                }\n            }\n        }\n        // Fall back to `instanceof TYPE`\n        var expectedType = this.resolver.resolveType(expression.isType, flow.actualFunction, util_1.uniqueMap(flow.contextualTypeArguments));\n        if (!expectedType) {\n            this.currentType = types_1.Type.bool;\n            return this.module.unreachable();\n        }\n        return this.makeInstanceofType(expression, expectedType);\n    }\n    makeInstanceofType(expression, expectedType) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var expr = this.compileExpression(expression.expression, expectedType);\n        var actualType = this.currentType;\n        this.currentType = types_1.Type.bool;\n        // instanceof <value> - must be exact\n        if (expectedType.isValue) {\n            return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n        }\n        // <value> instanceof <nonValue> - always false\n        if (actualType.isValue) {\n            return module.maybeDropCondition(expr, module.i32(0));\n        }\n        // both LHS and RHS are references now\n        var nativeSizeType = actualType.toNativeType();\n        // <nullable> instanceof <nonNullable> - LHS must be != 0\n        if (actualType.isNullableReference && !expectedType.isNullableReference) {\n            // downcast - check statically\n            if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n                return module.binary(nativeSizeType == module_1.NativeType.I64\n                    ? module_1.BinaryOp.NeI64\n                    : module_1.BinaryOp.NeI32, expr, this.makeZero(actualType, expression.expression));\n            }\n            // upcast - check dynamically\n            if (expectedType.isAssignableTo(actualType)) {\n                let program = this.program;\n                if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n                    let temp = flow.getTempLocal(actualType);\n                    let instanceofInstance = assert(program.instanceofInstance);\n                    this.compileFunction(instanceofInstance);\n                    let ret = module.if(module.unary(nativeSizeType == module_1.NativeType.I64\n                        ? module_1.UnaryOp.EqzI64\n                        : module_1.UnaryOp.EqzI32, module.local_tee(temp.index, expr, actualType.isManaged)), module.i32(0), this.makeCallDirect(instanceofInstance, [\n                        module.local_get(temp.index, nativeSizeType),\n                        module.i32(expectedType.classReference.id)\n                    ], expression));\n                    flow.freeTempLocal(temp);\n                    if (this.options.pedantic) {\n                        this.pedantic(diagnostics_1.DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime, expression.range);\n                    }\n                    return ret;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"instanceof\", actualType.toString(), expectedType.toString());\n                }\n            }\n            // either none or both nullable\n        }\n        else {\n            // downcast - check statically\n            if (actualType.isAssignableTo(expectedType)) {\n                return module.maybeDropCondition(expr, module.i32(1));\n                // upcast - check dynamically\n            }\n            else if (expectedType.isAssignableTo(actualType)) {\n                let program = this.program;\n                if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n                    // FIXME: the temp local and the if can be removed here once flows\n                    // perform null checking, which would error earlier when checking\n                    // uninitialized (thus zero) `var a: A` to be an instance of something.\n                    let temp = flow.getTempLocal(actualType);\n                    let instanceofInstance = assert(program.instanceofInstance);\n                    this.compileFunction(instanceofInstance);\n                    let ret = module.if(module.unary(nativeSizeType == module_1.NativeType.I64\n                        ? module_1.UnaryOp.EqzI64\n                        : module_1.UnaryOp.EqzI32, module.local_tee(temp.index, expr, actualType.isManaged)), module.i32(0), this.makeCallDirect(instanceofInstance, [\n                        module.local_get(temp.index, nativeSizeType),\n                        module.i32(expectedType.classReference.id)\n                    ], expression));\n                    flow.freeTempLocal(temp);\n                    return ret;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, expression.range, \"instanceof\", actualType.toString(), expectedType.toString());\n                }\n            }\n        }\n        // false\n        return module.maybeDropCondition(expr, module.i32(0));\n    }\n    makeInstanceofClass(expression, prototype) {\n        var module = this.module;\n        var expr = this.compileExpression(expression.expression, types_1.Type.auto);\n        var actualType = this.currentType;\n        var nativeSizeType = actualType.toNativeType();\n        this.currentType = types_1.Type.bool;\n        // exclusively interested in class references here\n        var classReference = actualType.getClass();\n        if (classReference) {\n            // static check\n            if (classReference.extends(prototype)) {\n                // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n                if (actualType.isNullableReference) {\n                    return module.binary(nativeSizeType == module_1.NativeType.I64\n                        ? module_1.BinaryOp.NeI64\n                        : module_1.BinaryOp.NeI32, expr, this.makeZero(actualType, expression.expression));\n                    // <nonNullable> is just `true`\n                }\n                else {\n                    return module.maybeDropCondition(expr, module.i32(1));\n                }\n                // dynamic check against all possible concrete ids\n            }\n            else if (prototype.extends(classReference.prototype)) {\n                this.pendingClassInstanceOf.add(prototype);\n                return module.call(prototype.internalName + \"~instanceof\", [expr], module_1.NativeType.I32);\n            }\n        }\n        // false\n        return module.maybeDropCondition(expr, module.i32(0));\n    }\n    compileLiteralExpression(expression, contextualType, constraints, implicitlyNegate = false) {\n        var module = this.module;\n        switch (expression.literalKind) {\n            case ast_1.LiteralKind.ARRAY: {\n                assert(!implicitlyNegate);\n                return this.compileArrayLiteral(expression, contextualType, constraints);\n            }\n            case ast_1.LiteralKind.FLOAT: {\n                let floatValue = expression.value;\n                if (implicitlyNegate) {\n                    floatValue = -floatValue;\n                }\n                if (contextualType == types_1.Type.f32) {\n                    return module.f32(floatValue);\n                }\n                this.currentType = types_1.Type.f64;\n                return module.f64(floatValue);\n            }\n            case ast_1.LiteralKind.INTEGER: {\n                let intValue = expression.value;\n                if (implicitlyNegate) {\n                    intValue = i64_sub(i64_new(0), intValue);\n                }\n                let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n                this.currentType = type;\n                switch (type.kind) {\n                    case 4 /* ISIZE */: if (!this.options.isWasm64)\n                        return module.i32(i64_low(intValue));\n                    case 3 /* I64 */: return module.i64(i64_low(intValue), i64_high(intValue));\n                    case 9 /* USIZE */: if (!this.options.isWasm64)\n                        return module.i32(i64_low(intValue));\n                    case 8 /* U64 */: return module.i64(i64_low(intValue), i64_high(intValue));\n                    case 11 /* F32 */: return module.f32(i64_to_f32(intValue));\n                    case 12 /* F64 */: return module.f64(i64_to_f64(intValue));\n                    default: return module.i32(i64_low(intValue));\n                }\n            }\n            case ast_1.LiteralKind.STRING: {\n                assert(!implicitlyNegate);\n                return this.compileStringLiteral(expression, constraints);\n            }\n            case ast_1.LiteralKind.OBJECT: {\n                assert(!implicitlyNegate);\n                return this.compileObjectLiteral(expression, contextualType);\n            }\n            case ast_1.LiteralKind.REGEXP: {\n                this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, expression.range, \"Regular expressions\");\n                this.currentType = contextualType;\n                return module.unreachable();\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    compileStringLiteral(expression, constraints) {\n        return this.ensureStaticString(expression.value);\n    }\n    compileArrayLiteral(expression, contextualType, constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var program = this.program;\n        // handle static arrays\n        let contextualClass = contextualType.getClass();\n        if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n            return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n        }\n        // handle normal arrays\n        var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n        if (!element)\n            return module.unreachable();\n        assert(element.kind == program_1.ElementKind.CLASS);\n        var arrayInstance = element;\n        var arrayType = arrayInstance.type;\n        var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)[0];\n        var arrayBufferInstance = assert(program.arrayBufferInstance);\n        // block those here so compiling expressions doesn't conflict\n        var tempThis = flow.getTempLocal(this.options.usizeType);\n        var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n        // compile value expressions and find out whether all are constant\n        var expressions = expression.elementExpressions;\n        var length = expressions.length;\n        var values = new Array(length);\n        var isStatic = !elementType.isExternalReference;\n        for (let i = 0; i < length; ++i) {\n            let elementExpression = expressions[i];\n            if (elementExpression.kind != ast_1.NodeKind.OMITTED) {\n                let expr = this.compileExpression(elementExpression, elementType, 1 /* CONV_IMPLICIT */);\n                let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                if (precomp) {\n                    expr = precomp;\n                }\n                else {\n                    isStatic = false;\n                }\n                values[i] = expr;\n            }\n            else {\n                values[i] = this.makeZero(elementType, elementExpression);\n            }\n        }\n        // if the array is static, make a static arraybuffer segment\n        if (isStatic) {\n            flow.freeTempLocal(tempThis);\n            flow.freeTempLocal(tempDataStart);\n            let totalOverhead = program.totalOverhead;\n            let bufferSegment = this.addStaticBuffer(elementType, values);\n            let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n            // make both the buffer and array header static if assigned to a global. this can't be done\n            // if inside of a function because each invocation must create a new array reference then.\n            if (constraints & 16 /* PREFER_STATIC */) {\n                let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n                let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n                this.currentType = arrayType;\n                return program.options.isWasm64\n                    ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n                    : this.module.i32(i64_low(arrayAddress));\n                // otherwise allocate a new array header and make it wrap a copy of the static buffer\n            }\n            else {\n                // __newArray(length, alignLog2, classId, staticBuffer)\n                let expr = this.makeCallDirect(program.newArrayInstance, [\n                    module.i32(length),\n                    program.options.isWasm64\n                        ? module.i64(elementType.alignLog2)\n                        : module.i32(elementType.alignLog2),\n                    module.i32(arrayInstance.id),\n                    program.options.isWasm64\n                        ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n                        : module.i32(i64_low(bufferAddress))\n                ], expression);\n                this.currentType = arrayType;\n                return expr;\n            }\n        }\n        // otherwise compile an explicit instantiation with indexed sets\n        var indexedSet = arrayInstance.lookupOverload(program_1.OperatorKind.INDEXED_SET, true);\n        if (!indexedSet) {\n            flow.freeTempLocal(tempThis);\n            flow.freeTempLocal(tempDataStart);\n            this.error(diagnostics_1.DiagnosticCode.Index_signature_in_type_0_only_permits_reading, expression.range, arrayInstance.internalName);\n            this.currentType = arrayType;\n            return module.unreachable();\n        }\n        var nativeArrayType = arrayType.toNativeType();\n        var stmts = new Array();\n        // tempThis = __newArray(length, alignLog2, classId, source = 0)\n        stmts.push(module.local_set(tempThis.index, this.makeCallDirect(program.newArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n                ? module.i64(elementType.alignLog2)\n                : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n                ? module.i64(0)\n                : module.i32(0)\n        ], expression), arrayType.isManaged));\n        // tempData = tempThis.dataStart\n        var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n        assert(dataStartMember.kind == program_1.ElementKind.FIELD);\n        stmts.push(module.local_set(tempDataStart.index, module.load(arrayType.byteSize, false, module.local_get(tempThis.index, nativeArrayType), nativeArrayType, dataStartMember.memoryOffset), true // ArrayBuffer\n        ));\n        for (let i = 0; i < length; ++i) {\n            // this[i] = value\n            stmts.push(module.call(indexedSet.internalName, [\n                module.local_get(tempThis.index, nativeArrayType),\n                module.i32(i),\n                values[i]\n            ], module_1.NativeType.None));\n        }\n        // -> tempThis\n        stmts.push(module.local_get(tempThis.index, nativeArrayType));\n        flow.freeTempLocal(tempThis);\n        flow.freeTempLocal(tempDataStart);\n        if (length)\n            this.compileFunction(indexedSet);\n        this.currentType = arrayType;\n        return module.flatten(stmts, nativeArrayType);\n    }\n    /** Compiles a special `fixed` array literal. */\n    compileStaticArrayLiteral(expression, contextualType, constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var program = this.program;\n        // make sure this method is only called with a valid contextualType\n        var arrayInstance = assert(contextualType.getClass());\n        var arrayType = arrayInstance.type;\n        var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n        var elementType = typeArguments[0];\n        // block those here so compiling expressions doesn't conflict\n        var tempThis = flow.getTempLocal(this.options.usizeType);\n        // compile value expressions and check if all are compile-time constants\n        var expressions = expression.elementExpressions;\n        var length = expressions.length;\n        var values = new Array(length);\n        var isStatic = !elementType.isExternalReference;\n        for (let i = 0; i < length; ++i) {\n            let elementExpression = expressions[i];\n            if (elementExpression.kind != ast_1.NodeKind.OMITTED) {\n                let expr = this.compileExpression(elementExpression, elementType, 1 /* CONV_IMPLICIT */);\n                let precomp = module.runExpression(expr, module_1.ExpressionRunnerFlags.PreserveSideeffects);\n                if (precomp) {\n                    expr = precomp;\n                }\n                else {\n                    isStatic = false;\n                }\n                values[i] = expr;\n            }\n            else {\n                values[i] = this.makeZero(elementType, elementExpression);\n            }\n        }\n        var isWasm64 = this.options.isWasm64;\n        var bufferSize = values.length << elementType.alignLog2;\n        // if the array is static, make a static arraybuffer segment\n        if (isStatic) {\n            flow.freeTempLocal(tempThis);\n            let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n            let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n            // return the static buffer directly if assigned to a global\n            if (constraints & 16 /* PREFER_STATIC */) {\n                let expr = this.options.isWasm64\n                    ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n                    : module.i32(i64_low(bufferAddress));\n                this.currentType = arrayType;\n                return expr;\n                // otherwise allocate a new chunk of memory and return a copy of the buffer\n            }\n            else {\n                // __newBuffer(bufferSize, id, buffer)\n                let expr = this.makeCallDirect(program.newBufferInstance, [\n                    isWasm64\n                        ? module.i64(bufferSize)\n                        : module.i32(bufferSize),\n                    module.i32(arrayInstance.id),\n                    isWasm64\n                        ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n                        : module.i32(i64_low(bufferAddress))\n                ], expression);\n                this.currentType = arrayType;\n                return expr;\n            }\n        }\n        // otherwise compile an explicit instantiation with indexed sets\n        var indexedSet = arrayInstance.lookupOverload(program_1.OperatorKind.INDEXED_SET, true);\n        if (!indexedSet) {\n            flow.freeTempLocal(tempThis);\n            this.error(diagnostics_1.DiagnosticCode.Index_signature_in_type_0_only_permits_reading, expression.range, arrayInstance.internalName);\n            this.currentType = arrayType;\n            return module.unreachable();\n        }\n        var nativeArrayType = arrayType.toNativeType();\n        var stmts = new Array();\n        // tempThis = __newBuffer(bufferSize, classId)\n        stmts.push(module.local_set(tempThis.index, this.makeCallDirect(program.newBufferInstance, [\n            isWasm64\n                ? module.i64(bufferSize)\n                : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n        ], expression), arrayType.isManaged));\n        for (let i = 0; i < length; ++i) {\n            // array[i] = value\n            stmts.push(module.call(indexedSet.internalName, [\n                module.local_get(tempThis.index, nativeArrayType),\n                module.i32(i),\n                values[i]\n            ], module_1.NativeType.None));\n        }\n        // -> tempThis\n        stmts.push(module.local_get(tempThis.index, nativeArrayType));\n        flow.freeTempLocal(tempThis);\n        if (length)\n            this.compileFunction(indexedSet);\n        this.currentType = arrayType;\n        return module.flatten(stmts, nativeArrayType);\n    }\n    compileObjectLiteral(expression, contextualType) {\n        var module = this.module;\n        // Check that contextual type is a class (TODO: hidden class for interfaces?)\n        var classReference = contextualType.getClass();\n        if (!classReference) {\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, expression.range, \"<object>\", contextualType.toString());\n            return module.unreachable();\n        }\n        var classType = classReference.type;\n        this.currentType = classType.nonNullableType;\n        if (classReference.is(common_1.CommonFlags.ABSTRACT)) {\n            this.error(diagnostics_1.DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class, expression.range);\n            return module.unreachable();\n        }\n        // Check that the class is compatible with object literals\n        var ctorPrototype = classReference.prototype.constructorPrototype;\n        if (ctorPrototype) {\n            this.errorRelated(diagnostics_1.DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal, expression.range, ctorPrototype.identifierNode.range, classType.toString());\n            return module.unreachable();\n        }\n        var isManaged = classType.isManaged;\n        if (!isManaged) {\n            this.checkUnsafe(expression, ast_1.findDecorator(ast_1.DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n        }\n        // check and compile field values\n        var names = expression.names;\n        var numNames = names.length;\n        var values = expression.values;\n        var members = classReference.members;\n        var hasErrors = false;\n        var exprs = new Array();\n        var flow = this.currentFlow;\n        var tempLocal = flow.getTempLocal(classType);\n        var nativeClassType = classType.toNativeType();\n        assert(numNames == values.length);\n        // Assume all class fields will be omitted, and add them to our omitted list\n        var omittedFields = new Set();\n        if (members) {\n            for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n                let memberKey = _keys[i];\n                let member = assert(members.get(memberKey));\n                if (member !== null && member.kind == program_1.ElementKind.FIELD) {\n                    omittedFields.add(member); // incl. private/protected\n                }\n            }\n        }\n        // Iterate through the members defined in our expression\n        for (let i = 0; i < numNames; ++i) {\n            let memberName = names[i].text;\n            let member;\n            if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != program_1.ElementKind.FIELD) {\n                this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, names[i].range, memberName, classType.toString());\n                hasErrors = true;\n                continue;\n            }\n            if (member.is(common_1.CommonFlags.PRIVATE)) {\n                this.error(diagnostics_1.DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1, names[i].range, memberName, classType.toString());\n                hasErrors = true;\n                continue;\n            }\n            if (member.is(common_1.CommonFlags.PROTECTED)) {\n                this.error(diagnostics_1.DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, names[i].range, memberName, classType.toString());\n                hasErrors = true;\n                continue;\n            }\n            let fieldInstance = member;\n            let fieldType = fieldInstance.type;\n            let expr = this.compileExpression(values[i], fieldType, 1 /* CONV_IMPLICIT */);\n            exprs.push(module.call(fieldInstance.internalSetterName, [\n                module.local_get(tempLocal.index, nativeClassType),\n                expr\n            ], module_1.NativeType.None));\n            this.compileFieldSetter(fieldInstance);\n            // This member is no longer omitted, so delete from our omitted fields\n            omittedFields.delete(fieldInstance);\n        }\n        this.currentType = classType.nonNullableType;\n        if (hasErrors)\n            return module.unreachable();\n        // Check remaining omitted fields\n        for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n            let fieldInstance = _values[j];\n            let fieldType = fieldInstance.type;\n            if (fieldInstance.initializerNode) {\n                continue; // set by generated ctor\n            }\n            if (fieldType.isReference) {\n                if (!fieldType.isNullableReference) {\n                    this.error(diagnostics_1.DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2, expression.range, fieldInstance.name, \"<object>\", classType.toString());\n                    hasErrors = true;\n                    continue;\n                }\n            }\n            switch (fieldType.kind) {\n                // Number Types (and Number alias types)\n                case 0 /* I8 */:\n                case 1 /* I16 */:\n                case 2 /* I32 */:\n                case 3 /* I64 */:\n                case 4 /* ISIZE */:\n                case 5 /* U8 */:\n                case 6 /* U16 */:\n                case 7 /* U32 */:\n                case 8 /* U64 */:\n                case 9 /* USIZE */:\n                case 10 /* BOOL */:\n                case 11 /* F32 */:\n                case 12 /* F64 */: {\n                    exprs.push(module.call(fieldInstance.internalSetterName, [\n                        module.local_get(tempLocal.index, nativeClassType),\n                        this.makeZero(fieldType, expression)\n                    ], module_1.NativeType.None));\n                    this.compileFieldSetter(fieldInstance);\n                    continue;\n                }\n            }\n            // Otherwise error\n            this.error(diagnostics_1.DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2, expression.range, fieldInstance.name, \"<object>\", classType.toString());\n            hasErrors = true;\n        }\n        if (hasErrors)\n            return module.unreachable();\n        // generate the default constructor\n        var ctor = this.ensureConstructor(classReference, expression);\n        // note that this is not checking field initialization within the ctor, but\n        // instead checks conditions above with provided fields taken into account.\n        // allocate a new instance first and assign 'this' to the temp. local\n        exprs.unshift(module.local_set(tempLocal.index, this.compileInstantiate(ctor, [], 0 /* NONE */, expression), classType.isManaged));\n        // once all field values have been set, return 'this'\n        exprs.push(module.local_get(tempLocal.index, nativeClassType));\n        if (!isManaged)\n            flow.freeTempLocal(tempLocal);\n        this.currentType = classType.nonNullableType;\n        return module.flatten(exprs, nativeClassType);\n    }\n    compileNewExpression(expression, contextualType, constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        // obtain the class being instantiated\n        var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n        if (!target)\n            return module.unreachable();\n        if (target.kind != program_1.ElementKind.CLASS_PROTOTYPE) {\n            this.error(diagnostics_1.DiagnosticCode.This_expression_is_not_constructable, expression.typeName.range);\n            return this.module.unreachable();\n        }\n        if (target.is(common_1.CommonFlags.ABSTRACT)) {\n            this.error(diagnostics_1.DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class, expression.typeName.range);\n            return this.module.unreachable();\n        }\n        var classPrototype = target;\n        var classInstance = null;\n        var typeArguments = expression.typeArguments;\n        var classReference;\n        if (!typeArguments &&\n            (classReference = contextualType.classReference) !== null &&\n            classReference.prototype == classPrototype &&\n            classReference.is(common_1.CommonFlags.GENERIC)) {\n            // e.g. `arr: Array<T> = new Array()`\n            classInstance = this.resolver.resolveClass(classPrototype, classReference.typeArguments, util_1.uniqueMap(flow.contextualTypeArguments));\n        }\n        else {\n            classInstance = this.resolver.resolveClassInclTypeArguments(classPrototype, typeArguments, flow.actualFunction.parent, // relative to caller\n            util_1.uniqueMap(flow.contextualTypeArguments), expression);\n        }\n        if (!classInstance)\n            return module.unreachable();\n        if (contextualType == types_1.Type.void)\n            constraints |= 8 /* WILL_DROP */;\n        var ctor = this.ensureConstructor(classInstance, expression);\n        if (!ctor.hasDecorator(program_1.DecoratorFlags.INLINE)) {\n            // Inlined ctors haven't been compiled yet and are checked upon inline\n            // compilation of their body instead.\n            this.checkFieldInitialization(classInstance, expression);\n        }\n        return this.compileInstantiate(ctor, expression.args, constraints, expression);\n    }\n    /** Gets the compiled constructor of the specified class or generates one if none is present. */\n    ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance, \n    /** Report node. */\n    reportNode) {\n        var instance = classInstance.constructorInstance;\n        if (instance) {\n            // shortcut if already compiled\n            if (instance.is(common_1.CommonFlags.COMPILED))\n                return instance;\n            // do not attempt to compile if inlined anyway\n            if (!instance.hasDecorator(program_1.DecoratorFlags.INLINE))\n                this.compileFunction(instance);\n        }\n        else {\n            // clone base constructor if a derived class. note that we cannot just\n            // call the base ctor since the derived class may have additional fields.\n            let baseClass = classInstance.base;\n            let contextualTypeArguments = util_1.uniqueMap(classInstance.contextualTypeArguments);\n            if (baseClass) {\n                let baseCtor = this.ensureConstructor(baseClass, reportNode);\n                this.checkFieldInitialization(baseClass, reportNode);\n                instance = new program_1.Function(common_1.CommonNames.constructor, new program_1.FunctionPrototype(common_1.CommonNames.constructor, classInstance, \n                // declaration is important, i.e. to access optional parameter initializers\n                baseCtor.declaration.clone()), null, baseCtor.signature, contextualTypeArguments);\n                // otherwise make a default constructor\n            }\n            else {\n                instance = new program_1.Function(common_1.CommonNames.constructor, new program_1.FunctionPrototype(common_1.CommonNames.constructor, classInstance, // bound\n                this.program.makeNativeFunctionDeclaration(common_1.CommonNames.constructor, common_1.CommonFlags.INSTANCE | common_1.CommonFlags.CONSTRUCTOR)), null, new types_1.Signature(this.program, null, classInstance.type, classInstance.type), contextualTypeArguments);\n            }\n            instance.set(common_1.CommonFlags.COMPILED);\n            instance.prototype.setResolvedInstance(\"\", instance);\n            if (classInstance.is(common_1.CommonFlags.MODULE_EXPORT)) {\n                instance.set(common_1.CommonFlags.MODULE_EXPORT);\n            }\n            classInstance.constructorInstance = instance;\n            let members = classInstance.members;\n            if (!members)\n                classInstance.members = members = new Map();\n            members.set(\"constructor\", instance.prototype);\n            let previousFlow = this.currentFlow;\n            let flow = instance.flow;\n            this.currentFlow = flow;\n            // generate body\n            let signature = instance.signature;\n            let module = this.module;\n            let nativeSizeType = this.options.nativeSizeType;\n            let stmts = new Array();\n            // {\n            //   this = <COND_ALLOC>\n            //   IF_DERIVED: this = super(this, ...args)\n            //   this.a = X\n            //   this.b = Y\n            //   return this\n            // }\n            stmts.push(this.makeConditionalAllocation(classInstance, 0));\n            if (baseClass) {\n                let parameterTypes = signature.parameterTypes;\n                let numParameters = parameterTypes.length;\n                let operands = new Array(1 + numParameters);\n                operands[0] = module.local_get(0, nativeSizeType);\n                for (let i = 1; i <= numParameters; ++i) {\n                    operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n                }\n                stmts.push(module.local_set(0, this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false), baseClass.type.isManaged));\n            }\n            this.makeFieldInitializationInConstructor(classInstance, stmts);\n            stmts.push(module.local_get(0, nativeSizeType));\n            flow.freeScopedLocals();\n            this.currentFlow = previousFlow;\n            // make the function\n            let locals = instance.localsByIndex;\n            let varTypes = new Array(); // of temp. vars added while compiling initializers\n            let numOperands = 1 + signature.parameterTypes.length;\n            let numLocals = locals.length;\n            if (numLocals > numOperands) {\n                for (let i = numOperands; i < numLocals; ++i)\n                    varTypes.push(locals[i].type.toNativeType());\n            }\n            let funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, module.flatten(stmts, nativeSizeType));\n            instance.finalize(module, funcRef);\n        }\n        return instance;\n    }\n    /** Checks that all class fields have been initialized. */\n    checkFieldInitialization(classInstance, relatedNode = null) {\n        if (classInstance.didCheckFieldInitialization)\n            return;\n        classInstance.didCheckFieldInitialization = true;\n        var ctor = assert(classInstance.constructorInstance);\n        this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n    }\n    /** Checks that all class fields have been initialized in the specified flow. */\n    checkFieldInitializationInFlow(classInstance, flow, relatedNode = null) {\n        var members = classInstance.members;\n        if (members) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let element = _values[i];\n                if (element.kind == program_1.ElementKind.FIELD && element.parent == classInstance) {\n                    let field = element;\n                    if (!field.initializerNode && !flow.isThisFieldFlag(field, flow_1.FieldFlags.INITIALIZED)) {\n                        if (!field.is(common_1.CommonFlags.DEFINITELY_ASSIGNED)) {\n                            if (relatedNode) {\n                                this.errorRelated(diagnostics_1.DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned, field.declaration.name.range, relatedNode.range, field.internalName);\n                            }\n                            else {\n                                this.error(diagnostics_1.DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned, field.declaration.name.range, field.internalName);\n                            }\n                        }\n                    }\n                    else if (field.is(common_1.CommonFlags.DEFINITELY_ASSIGNED)) {\n                        if (field.type.isReference) {\n                            this.warning(// involves a runtime check\n                            diagnostics_1.DiagnosticCode.Property_0_is_always_assigned_before_being_used, field.identifierNode.range, field.internalName);\n                        }\n                        else {\n                            this.pedantic(// is a nop anyway\n                            diagnostics_1.DiagnosticCode.Unnecessary_definite_assignment, field.identifierNode.range);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance, \n    /** Constructor arguments. */\n    argumentExpressions, \n    /** Contextual flags. */\n    constraints, \n    /** Node to report on. */\n    reportNode) {\n        assert(ctorInstance.is(common_1.CommonFlags.CONSTRUCTOR));\n        var parent = ctorInstance.parent;\n        assert(parent.kind == program_1.ElementKind.CLASS);\n        var classInstance = parent;\n        if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n            this.checkUnsafe(reportNode);\n        var expr = this.compileCallDirect(ctorInstance, argumentExpressions, reportNode, this.makeZero(this.options.usizeType, reportNode), constraints);\n        if (module_1.getExpressionType(expr) != module_1.NativeType.None) { // possibly WILL_DROP\n            this.currentType = classInstance.type; // important because a super ctor could be called\n        }\n        return expr;\n    }\n    compilePropertyAccessExpression(expression, ctxType, constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        this.maybeCompileEnclosingSource(expression);\n        var resolver = this.resolver;\n        var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n        if (!target)\n            return module.unreachable();\n        var thisExpression = resolver.currentThisExpression;\n        if (target.hasDecorator(program_1.DecoratorFlags.UNSAFE))\n            this.checkUnsafe(expression);\n        switch (target.kind) {\n            case program_1.ElementKind.GLOBAL: { // static field\n                let global = target;\n                if (!this.compileGlobal(global))\n                    return module.unreachable(); // reports\n                let globalType = global.type;\n                assert(globalType != types_1.Type.void);\n                if (this.pendingElements.has(global)) {\n                    this.error(diagnostics_1.DiagnosticCode.Variable_0_used_before_its_declaration, expression.range, global.internalName);\n                    this.currentType = globalType;\n                    return module.unreachable();\n                }\n                if (global.is(common_1.CommonFlags.INLINED)) {\n                    return this.compileInlineConstant(global, ctxType, constraints);\n                }\n                this.currentType = globalType;\n                return module.global_get(global.internalName, globalType.toNativeType());\n            }\n            case program_1.ElementKind.ENUMVALUE: { // enum value\n                let enumValue = target;\n                let parent = assert(enumValue.parent);\n                assert(parent.kind == program_1.ElementKind.ENUM);\n                let parentEnum = parent;\n                if (!this.compileEnum(parentEnum)) {\n                    this.currentType = types_1.Type.i32;\n                    return this.module.unreachable();\n                }\n                this.currentType = types_1.Type.i32;\n                if (enumValue.is(common_1.CommonFlags.INLINED)) {\n                    assert(enumValue.constantValueKind == 1 /* INTEGER */);\n                    return this.compileInlineConstant(enumValue, ctxType, constraints);\n                }\n                assert(enumValue.type == types_1.Type.i32);\n                return module.global_get(enumValue.internalName, module_1.NativeType.I32);\n            }\n            case program_1.ElementKind.FIELD: {\n                let fieldInstance = target;\n                let fieldType = fieldInstance.type;\n                assert(fieldInstance.memoryOffset >= 0);\n                let fieldParent = fieldInstance.parent;\n                assert(fieldParent.kind == program_1.ElementKind.CLASS);\n                thisExpression = assert(thisExpression);\n                let thisExpr = this.compileExpression(thisExpression, fieldParent.type, 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */);\n                let thisType = this.currentType;\n                if (flow.actualFunction.is(common_1.CommonFlags.CONSTRUCTOR) &&\n                    thisExpression.kind == ast_1.NodeKind.THIS &&\n                    !flow.isThisFieldFlag(fieldInstance, flow_1.FieldFlags.INITIALIZED) &&\n                    !fieldInstance.is(common_1.CommonFlags.DEFINITELY_ASSIGNED)) {\n                    this.errorRelated(diagnostics_1.DiagnosticCode.Property_0_is_used_before_being_assigned, expression.range, fieldInstance.identifierNode.range, fieldInstance.internalName);\n                }\n                if (thisType.isNullableReference) {\n                    if (!flow.isNonnull(thisExpr, thisType)) {\n                        this.error(diagnostics_1.DiagnosticCode.Object_is_possibly_null, thisExpression.range);\n                    }\n                }\n                if (!fieldInstance.is(common_1.CommonFlags.COMPILED)) {\n                    fieldInstance.set(common_1.CommonFlags.COMPILED);\n                    let typeNode = fieldInstance.typeNode;\n                    if (typeNode)\n                        this.checkTypeSupported(fieldInstance.type, typeNode);\n                }\n                this.currentType = fieldType;\n                let ret = module.load(fieldType.byteSize, fieldType.isSignedIntegerValue, thisExpr, fieldType.toNativeType(), fieldInstance.memoryOffset);\n                if (fieldInstance.is(common_1.CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n                    ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n                }\n                return ret;\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyPrototype = target;\n                let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n                if (!propertyInstance)\n                    return module.unreachable();\n                target = propertyInstance;\n                // fall-through\n            }\n            case program_1.ElementKind.PROPERTY: {\n                let propertyInstance = target;\n                let getterInstance = assert(propertyInstance.getterInstance);\n                let thisArg = 0;\n                if (getterInstance.is(common_1.CommonFlags.INSTANCE)) {\n                    thisArg = this.compileExpression(assert(thisExpression), assert(getterInstance.signature.thisType), 1 /* CONV_IMPLICIT */ | 32 /* IS_THIS */);\n                }\n                return this.compileCallDirect(getterInstance, [], expression, thisArg);\n            }\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                let functionPrototype = target;\n                let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n                if (!functionInstance)\n                    return module.unreachable();\n                if (!this.compileFunction(functionInstance))\n                    return module.unreachable();\n                this.currentType = functionInstance.type;\n                let offset = this.ensureRuntimeFunction(functionInstance);\n                return this.options.isWasm64\n                    ? module.i64(i64_low(offset), i64_high(offset))\n                    : module.i32(i64_low(offset));\n            }\n        }\n        assert(false);\n        return module.unreachable();\n    }\n    compileTernaryExpression(expression, ctxType, constraints) {\n        var module = this.module;\n        var ifThen = expression.ifThen;\n        var ifElse = expression.ifElse;\n        var condExpr = this.makeIsTrueish(this.compileExpression(expression.condition, types_1.Type.bool), this.currentType, expression.condition);\n        // Try to eliminate unnecesssary branches if the condition is constant\n        // FIXME: skips common denominator, inconsistently picking branch type\n        var condKind = this.evaluateCondition(condExpr);\n        if (condKind == 1 /* TRUE */) {\n            return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n        }\n        if (condKind == 2 /* FALSE */) {\n            return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n        }\n        var outerFlow = this.currentFlow;\n        var ifThenFlow = outerFlow.fork();\n        ifThenFlow.inheritNonnullIfTrue(condExpr);\n        this.currentFlow = ifThenFlow;\n        var ifThenExpr = this.compileExpression(ifThen, ctxType);\n        var ifThenType = this.currentType;\n        var ifElseFlow = outerFlow.fork();\n        ifElseFlow.inheritNonnullIfFalse(condExpr);\n        this.currentFlow = ifElseFlow;\n        var ifElseExpr = this.compileExpression(ifElse, ctxType == types_1.Type.auto ? ifThenType : ctxType);\n        var ifElseType = this.currentType;\n        var commonType = types_1.Type.commonDenominator(ifThenType, ifElseType, false);\n        if (!commonType) {\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, ifElse.range, ifElseType.toString(), ifThenType.toString());\n            this.currentType = ctxType;\n            return module.unreachable();\n        }\n        ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n        ifThenType = commonType;\n        ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n        ifElseType = commonType;\n        this.currentType = commonType;\n        ifThenFlow.freeScopedLocals();\n        ifElseFlow.freeScopedLocals();\n        this.currentFlow = outerFlow;\n        outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n        return module.if(condExpr, ifThenExpr, ifElseExpr);\n    }\n    compileUnaryPostfixExpression(expression, contextualType, constraints) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        // make a getter for the expression (also obtains the type)\n        var getValue = this.compileExpression(// reports\n        expression.operand, contextualType.exceptVoid, 0 /* NONE */);\n        // shortcut if compiling the getter already failed\n        if (module_1.getExpressionId(getValue) == module_1.ExpressionId.Unreachable)\n            return getValue;\n        // if the value isn't dropped, a temp. local is required to remember the original value,\n        // except if a static overload is found, which reverses the use of a temp. (see below)\n        var tempLocal = null;\n        if (contextualType != types_1.Type.void) {\n            tempLocal = flow.getTempLocal(this.currentType);\n            getValue = module.local_tee(tempLocal.index, getValue, this.currentType.isManaged);\n        }\n        var expr;\n        switch (expression.operator) {\n            case tokenizer_1.Token.PLUS_PLUS: {\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.POSTFIX_INC);\n                    if (overload) {\n                        let isInstance = overload.is(common_1.CommonFlags.INSTANCE);\n                        if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                            getValue = module_1.getLocalSetValue(getValue);\n                            flow.freeTempLocal(tempLocal);\n                            tempLocal = null;\n                        }\n                        expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                        if (isInstance)\n                            break;\n                        return expr; // here\n                    }\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"++\", this.currentType.toString());\n                    if (tempLocal)\n                        flow.freeTempLocal(tempLocal);\n                    return module.unreachable();\n                }\n                switch (this.currentType.kind) {\n                    case 0 /* I8 */:\n                    case 1 /* I16 */:\n                    case 2 /* I32 */:\n                    case 5 /* U8 */:\n                    case 6 /* U16 */:\n                    case 7 /* U32 */:\n                    case 10 /* BOOL */: {\n                        expr = module.binary(module_1.BinaryOp.AddI32, getValue, module.i32(1));\n                        break;\n                    }\n                    case 9 /* USIZE */:\n                    case 4 /* ISIZE */: {\n                        let options = this.options;\n                        expr = module.binary(options.isWasm64\n                            ? module_1.BinaryOp.AddI64\n                            : module_1.BinaryOp.AddI32, getValue, this.makeOne(this.currentType));\n                        break;\n                    }\n                    case 3 /* I64 */:\n                    case 8 /* U64 */: {\n                        expr = module.binary(module_1.BinaryOp.AddI64, getValue, module.i64(1));\n                        break;\n                    }\n                    case 11 /* F32 */: {\n                        expr = module.binary(module_1.BinaryOp.AddF32, getValue, module.f32(1));\n                        break;\n                    }\n                    case 12 /* F64 */: {\n                        expr = module.binary(module_1.BinaryOp.AddF64, getValue, module.f64(1));\n                        break;\n                    }\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"++\", this.currentType.toString());\n                        return module.unreachable();\n                    }\n                }\n                break;\n            }\n            case tokenizer_1.Token.MINUS_MINUS: {\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.POSTFIX_DEC);\n                    if (overload) {\n                        let isInstance = overload.is(common_1.CommonFlags.INSTANCE);\n                        if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                            getValue = module_1.getLocalSetValue(getValue);\n                            flow.freeTempLocal(tempLocal);\n                            tempLocal = null;\n                        }\n                        expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                        if (overload.is(common_1.CommonFlags.INSTANCE))\n                            break;\n                        return expr; // here\n                    }\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"--\", this.currentType.toString());\n                    if (tempLocal)\n                        flow.freeTempLocal(tempLocal);\n                    return module.unreachable();\n                }\n                switch (this.currentType.kind) {\n                    case 0 /* I8 */:\n                    case 1 /* I16 */:\n                    case 2 /* I32 */:\n                    case 5 /* U8 */:\n                    case 6 /* U16 */:\n                    case 7 /* U32 */:\n                    case 10 /* BOOL */: {\n                        expr = module.binary(module_1.BinaryOp.SubI32, getValue, module.i32(1));\n                        break;\n                    }\n                    case 9 /* USIZE */:\n                    case 4 /* ISIZE */: {\n                        let options = this.options;\n                        expr = module.binary(options.isWasm64\n                            ? module_1.BinaryOp.SubI64\n                            : module_1.BinaryOp.SubI32, getValue, this.makeOne(this.currentType));\n                        break;\n                    }\n                    case 3 /* I64 */:\n                    case 8 /* U64 */: {\n                        expr = module.binary(module_1.BinaryOp.SubI64, getValue, module.i64(1));\n                        break;\n                    }\n                    case 11 /* F32 */: {\n                        expr = module.binary(module_1.BinaryOp.SubF32, getValue, module.f32(1));\n                        break;\n                    }\n                    case 12 /* F64 */: {\n                        expr = module.binary(module_1.BinaryOp.SubF64, getValue, module.f64(1));\n                        break;\n                    }\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"--\", this.currentType.toString());\n                        return module.unreachable();\n                    }\n                }\n                break;\n            }\n            default: {\n                assert(false);\n                return module.unreachable();\n            }\n        }\n        var resolver = this.resolver;\n        var target = resolver.lookupExpression(expression.operand, flow); // reports\n        if (!target) {\n            if (tempLocal)\n                flow.freeTempLocal(tempLocal);\n            return module.unreachable();\n        }\n        // simplify if dropped anyway\n        if (!tempLocal) {\n            return this.makeAssignment(target, expr, this.currentType, expression.operand, resolver.currentThisExpression, resolver.currentElementExpression, false);\n        }\n        // otherwise use the temp. local for the intermediate value (always possibly overflows)\n        var setValue = this.makeAssignment(target, expr, // includes a tee of getValue to tempLocal\n        this.currentType, expression.operand, resolver.currentThisExpression, resolver.currentElementExpression, false);\n        this.currentType = tempLocal.type;\n        flow.freeTempLocal(tempLocal);\n        var nativeType = tempLocal.type.toNativeType();\n        return module.block(null, [\n            setValue,\n            module.local_get(tempLocal.index, nativeType)\n        ], nativeType); // result of 'x++' / 'x--' might overflow\n    }\n    compileUnaryPrefixExpression(expression, contextualType, constraints) {\n        var module = this.module;\n        var compound = false;\n        var expr;\n        switch (expression.operator) {\n            case tokenizer_1.Token.PLUS: {\n                expr = this.compileExpression(expression.operand, contextualType.exceptVoid, 0 /* NONE */);\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.PLUS);\n                    if (overload)\n                        return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"+\", this.currentType.toString());\n                    return module.unreachable();\n                }\n                // nop\n                break;\n            }\n            case tokenizer_1.Token.MINUS: {\n                let operand = expression.operand;\n                if (operand.isNumericLiteral) {\n                    // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n                    expr = this.compileLiteralExpression(operand, contextualType, 0 /* NONE */, true);\n                    // compileExpression normally does this:\n                    if (this.options.sourceMap)\n                        this.addDebugLocation(expr, expression.range);\n                    break;\n                }\n                expr = this.compileExpression(expression.operand, contextualType.exceptVoid, 0 /* NONE */);\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.MINUS);\n                    if (overload)\n                        return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"-\", this.currentType.toString());\n                    return module.unreachable();\n                }\n                switch (this.currentType.kind) {\n                    case 0 /* I8 */:\n                    case 1 /* I16 */:\n                    case 2 /* I32 */:\n                    case 5 /* U8 */:\n                    case 6 /* U16 */:\n                    case 7 /* U32 */:\n                    case 10 /* BOOL */: {\n                        expr = module.binary(module_1.BinaryOp.SubI32, module.i32(0), expr);\n                        break;\n                    }\n                    case 9 /* USIZE */:\n                    case 4 /* ISIZE */: {\n                        expr = module.binary(this.options.isWasm64\n                            ? module_1.BinaryOp.SubI64\n                            : module_1.BinaryOp.SubI32, this.makeZero(this.currentType, expression.operand), expr);\n                        break;\n                    }\n                    case 3 /* I64 */:\n                    case 8 /* U64 */: {\n                        expr = module.binary(module_1.BinaryOp.SubI64, module.i64(0), expr);\n                        break;\n                    }\n                    case 11 /* F32 */: {\n                        expr = module.unary(module_1.UnaryOp.NegF32, expr);\n                        break;\n                    }\n                    case 12 /* F64 */: {\n                        expr = module.unary(module_1.UnaryOp.NegF64, expr);\n                        break;\n                    }\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"-\", this.currentType.toString());\n                        expr = module.unreachable();\n                    }\n                }\n                break;\n            }\n            case tokenizer_1.Token.PLUS_PLUS: {\n                compound = true;\n                expr = this.compileExpression(expression.operand, contextualType.exceptVoid, 0 /* NONE */);\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.PREFIX_INC);\n                    if (overload) {\n                        expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n                        if (overload.is(common_1.CommonFlags.INSTANCE))\n                            break; // re-assign\n                        return expr; // skip re-assign\n                    }\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"++\", this.currentType.toString());\n                    return module.unreachable();\n                }\n                switch (this.currentType.kind) {\n                    case 0 /* I8 */:\n                    case 1 /* I16 */:\n                    case 2 /* I32 */:\n                    case 5 /* U8 */:\n                    case 6 /* U16 */:\n                    case 7 /* U32 */:\n                    case 10 /* BOOL */: {\n                        expr = module.binary(module_1.BinaryOp.AddI32, expr, this.module.i32(1));\n                        break;\n                    }\n                    case 9 /* USIZE */:\n                    case 4 /* ISIZE */: {\n                        expr = module.binary(this.options.isWasm64\n                            ? module_1.BinaryOp.AddI64\n                            : module_1.BinaryOp.AddI32, expr, this.makeOne(this.currentType));\n                        break;\n                    }\n                    case 3 /* I64 */:\n                    case 8 /* U64 */: {\n                        expr = module.binary(module_1.BinaryOp.AddI64, expr, module.i64(1));\n                        break;\n                    }\n                    case 11 /* F32 */: {\n                        expr = module.binary(module_1.BinaryOp.AddF32, expr, module.f32(1));\n                        break;\n                    }\n                    case 12 /* F64 */: {\n                        expr = module.binary(module_1.BinaryOp.AddF64, expr, module.f64(1));\n                        break;\n                    }\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"++\", this.currentType.toString());\n                        expr = module.unreachable();\n                    }\n                }\n                break;\n            }\n            case tokenizer_1.Token.MINUS_MINUS: {\n                compound = true;\n                expr = this.compileExpression(expression.operand, contextualType.exceptVoid, 0 /* NONE */);\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.PREFIX_DEC);\n                    if (overload) {\n                        expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n                        if (overload.is(common_1.CommonFlags.INSTANCE))\n                            break; // re-assign\n                        return expr; // skip re-assign\n                    }\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"--\", this.currentType.toString());\n                    return module.unreachable();\n                }\n                switch (this.currentType.kind) {\n                    case 0 /* I8 */:\n                    case 1 /* I16 */:\n                    case 2 /* I32 */:\n                    case 5 /* U8 */:\n                    case 6 /* U16 */:\n                    case 7 /* U32 */:\n                    case 10 /* BOOL */: {\n                        expr = module.binary(module_1.BinaryOp.SubI32, expr, module.i32(1));\n                        break;\n                    }\n                    case 9 /* USIZE */:\n                    case 4 /* ISIZE */: {\n                        expr = module.binary(this.options.isWasm64\n                            ? module_1.BinaryOp.SubI64\n                            : module_1.BinaryOp.SubI32, expr, this.makeOne(this.currentType));\n                        break;\n                    }\n                    case 3 /* I64 */:\n                    case 8 /* U64 */: {\n                        expr = module.binary(module_1.BinaryOp.SubI64, expr, module.i64(1));\n                        break;\n                    }\n                    case 11 /* F32 */: {\n                        expr = module.binary(module_1.BinaryOp.SubF32, expr, module.f32(1));\n                        break;\n                    }\n                    case 12 /* F64 */: {\n                        expr = module.binary(module_1.BinaryOp.SubF64, expr, module.f64(1));\n                        break;\n                    }\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"--\", this.currentType.toString());\n                        expr = module.unreachable();\n                    }\n                }\n                break;\n            }\n            case tokenizer_1.Token.EXCLAMATION: {\n                expr = this.compileExpression(expression.operand, contextualType.exceptVoid, 0 /* NONE */);\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.NOT);\n                    if (overload)\n                        return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n                    // fall back to compare by value\n                }\n                expr = module.unary(module_1.UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n                this.currentType = types_1.Type.bool;\n                break;\n            }\n            case tokenizer_1.Token.TILDE: {\n                expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void\n                    ? types_1.Type.i32\n                    : contextualType.isFloatValue\n                        ? types_1.Type.i64\n                        : contextualType, 0 /* NONE */);\n                // check operator overload\n                let classReference = this.currentType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_NOT);\n                    if (overload)\n                        return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n                }\n                if (!this.currentType.isValue) {\n                    this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"~\", this.currentType.toString());\n                    return module.unreachable();\n                }\n                expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n                switch (this.currentType.kind) {\n                    case 0 /* I8 */:\n                    case 1 /* I16 */:\n                    case 2 /* I32 */:\n                    case 5 /* U8 */:\n                    case 6 /* U16 */:\n                    case 7 /* U32 */:\n                    case 10 /* BOOL */: {\n                        expr = module.binary(module_1.BinaryOp.XorI32, expr, module.i32(-1));\n                        break;\n                    }\n                    case 9 /* USIZE */:\n                    case 4 /* ISIZE */: {\n                        expr = module.binary(this.options.isWasm64\n                            ? module_1.BinaryOp.XorI64\n                            : module_1.BinaryOp.XorI32, expr, this.makeNegOne(this.currentType));\n                        break;\n                    }\n                    case 3 /* I64 */:\n                    case 8 /* U64 */: {\n                        expr = module.binary(module_1.BinaryOp.XorI64, expr, module.i64(-1, -1));\n                        break;\n                    }\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, expression.range, \"~\", this.currentType.toString());\n                        expr = module.unreachable();\n                    }\n                }\n                break;\n            }\n            case tokenizer_1.Token.TYPEOF: {\n                return this.compileTypeof(expression, contextualType, constraints);\n            }\n            default: {\n                assert(false);\n                return module.unreachable();\n            }\n        }\n        if (!compound)\n            return expr;\n        var resolver = this.resolver;\n        var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n        if (!target)\n            return module.unreachable();\n        return this.makeAssignment(target, expr, this.currentType, expression.operand, resolver.currentThisExpression, resolver.currentElementExpression, contextualType != types_1.Type.void);\n    }\n    compileTypeof(expression, contextualType, constraints) {\n        var operand = expression.operand;\n        var expr = 0;\n        var stringInstance = this.program.stringInstance;\n        var typeString;\n        if (operand.kind == ast_1.NodeKind.NULL) {\n            typeString = \"object\"; // special since `null` without type context is usize\n        }\n        else {\n            let element = this.resolver.lookupExpression(operand, this.currentFlow, types_1.Type.auto, resolver_1.ReportMode.SWALLOW);\n            if (!element) {\n                switch (operand.kind) {\n                    case ast_1.NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n                    case ast_1.NodeKind.PROPERTYACCESS:\n                    case ast_1.NodeKind.ELEMENTACCESS: {\n                        operand = operand.kind == ast_1.NodeKind.PROPERTYACCESS\n                            ? operand.expression\n                            : operand.expression;\n                        let targetType = this.resolver.resolveExpression(operand, this.currentFlow, types_1.Type.auto, resolver_1.ReportMode.REPORT);\n                        if (!targetType) { // access on non-object\n                            this.currentType = stringInstance.type;\n                            return this.module.unreachable();\n                        }\n                        // fall-through\n                    }\n                    default: {\n                        expr = this.compileExpression(operand, types_1.Type.auto); // may trigger an error\n                        expr = this.convertExpression(expr, this.currentType, types_1.Type.void, true, operand);\n                    }\n                }\n                typeString = \"undefined\";\n            }\n            else {\n                switch (element.kind) {\n                    case program_1.ElementKind.CLASS_PROTOTYPE:\n                    case program_1.ElementKind.NAMESPACE:\n                    case program_1.ElementKind.ENUM: {\n                        typeString = \"object\";\n                        break;\n                    }\n                    case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                        typeString = \"function\";\n                        break;\n                    }\n                    default: {\n                        expr = this.compileExpression(operand, types_1.Type.auto);\n                        let type = this.currentType;\n                        expr = this.convertExpression(expr, type, types_1.Type.void, true, operand);\n                        if (type.isReference) {\n                            let signatureReference = type.getSignature();\n                            if (signatureReference) {\n                                typeString = \"function\";\n                            }\n                            else {\n                                let classReference = type.getClass();\n                                if (classReference) {\n                                    if (classReference.prototype === stringInstance.prototype) {\n                                        typeString = \"string\";\n                                    }\n                                    else {\n                                        typeString = \"object\";\n                                    }\n                                }\n                                else {\n                                    typeString = \"externref\"; // TODO?\n                                }\n                            }\n                        }\n                        else if (type == types_1.Type.bool) {\n                            typeString = \"boolean\";\n                        }\n                        else if (type.isNumericValue) {\n                            typeString = \"number\";\n                        }\n                        else {\n                            typeString = \"undefined\"; // failed to compile?\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        this.currentType = stringInstance.type;\n        return expr\n            ? this.module.block(null, [expr, this.ensureStaticString(typeString)], this.options.nativeSizeType)\n            : this.ensureStaticString(typeString);\n    }\n    /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n    ensureSmallIntegerWrap(expr, type) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        switch (type.kind) {\n            case 0 /* I8 */: {\n                if (flow.canOverflow(expr, type)) {\n                    expr = this.options.hasFeature(1 /* SIGN_EXTENSION */)\n                        ? module.unary(module_1.UnaryOp.ExtendI8ToI32, expr)\n                        : module.binary(module_1.BinaryOp.ShrI32, module.binary(module_1.BinaryOp.ShlI32, expr, module.i32(24)), module.i32(24));\n                }\n                break;\n            }\n            case 1 /* I16 */: {\n                if (flow.canOverflow(expr, type)) {\n                    expr = this.options.hasFeature(1 /* SIGN_EXTENSION */)\n                        ? module.unary(module_1.UnaryOp.ExtendI16ToI32, expr)\n                        : module.binary(module_1.BinaryOp.ShrI32, module.binary(module_1.BinaryOp.ShlI32, expr, module.i32(16)), module.i32(16));\n                }\n                break;\n            }\n            case 5 /* U8 */: {\n                if (flow.canOverflow(expr, type)) {\n                    expr = module.binary(module_1.BinaryOp.AndI32, expr, module.i32(0xff));\n                }\n                break;\n            }\n            case 6 /* U16 */: {\n                if (flow.canOverflow(expr, type)) {\n                    expr = module.binary(module_1.BinaryOp.AndI32, expr, module.i32(0xffff));\n                }\n                break;\n            }\n            case 10 /* BOOL */: {\n                if (flow.canOverflow(expr, type)) {\n                    // bool is special in that it compares to 0 instead of masking with 0x1\n                    expr = module.binary(module_1.BinaryOp.NeI32, expr, module.i32(0));\n                }\n                break;\n            }\n        }\n        return expr;\n    }\n    /** Adds the debug location of the specified expression at the specified range to the source map. */\n    addDebugLocation(expr, range) {\n        var parentFunction = this.currentFlow.parentFunction;\n        var source = range.source;\n        if (source.debugInfoIndex < 0)\n            source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n        range.debugInfoRef = expr;\n        parentFunction.debugLocations.push(range);\n    }\n    /** Checks whether a particular feature is enabled. */\n    checkFeatureEnabled(feature, reportNode) {\n        if (!this.options.hasFeature(feature)) {\n            this.error(diagnostics_1.DiagnosticCode.Feature_0_is_not_enabled, reportNode.range, common_1.featureToString(feature));\n            return false;\n        }\n        return true;\n    }\n    /** Checks whether a particular type is supported. */\n    checkTypeSupported(type, reportNode) {\n        switch (type.kind) {\n            case 13 /* V128 */: return this.checkFeatureEnabled(16 /* SIMD */, reportNode);\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n                return this.checkFeatureEnabled(256 /* REFERENCE_TYPES */, reportNode);\n            case 16 /* EXNREF */: {\n                return this.checkFeatureEnabled(256 /* REFERENCE_TYPES */, reportNode)\n                    && this.checkFeatureEnabled(64 /* EXCEPTION_HANDLING */, reportNode);\n            }\n            case 17 /* ANYREF */: {\n                return this.checkFeatureEnabled(256 /* REFERENCE_TYPES */, reportNode)\n                    && this.checkFeatureEnabled(1024 /* GC */, reportNode);\n            }\n        }\n        let classReference = type.getClass();\n        if (classReference) {\n            do {\n                let typeArguments = classReference.typeArguments;\n                if (typeArguments) {\n                    for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                        if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n                            return false;\n                        }\n                    }\n                }\n                classReference = classReference.base;\n            } while (classReference);\n        }\n        else {\n            let signatureReference = type.getSignature();\n            if (signatureReference) {\n                let thisType = signatureReference.thisType;\n                if (thisType) {\n                    if (!this.checkTypeSupported(thisType, reportNode)) {\n                        return false;\n                    }\n                }\n                let parameterTypes = signatureReference.parameterTypes;\n                for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n                    if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n                        return false;\n                    }\n                }\n                let returnType = signatureReference.returnType;\n                if (!this.checkTypeSupported(returnType, reportNode)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /** Checks whether a particular function signature is supported. */\n    checkSignatureSupported(signature, reportNode) {\n        var supported = true;\n        var explicitThisType = reportNode.explicitThisType;\n        if (explicitThisType) {\n            if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n                supported = false;\n            }\n        }\n        var parameterTypes = signature.parameterTypes;\n        var parameterNodes = reportNode.parameters;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n            let parameterReportNode;\n            if (parameterNodes.length > i)\n                parameterReportNode = parameterNodes[i];\n            else\n                parameterReportNode = reportNode;\n            if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n                supported = false;\n            }\n        }\n        if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n            supported = false;\n        }\n        return supported;\n    }\n    /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n    evaluateCondition(expr) {\n        var module = this.module;\n        var evaled = module.runExpression(expr, module_1.ExpressionRunnerFlags.Default);\n        if (evaled) {\n            return module_1.getConstValueI32(evaled)\n                ? 1 /* TRUE */\n                : 2 /* FALSE */;\n        }\n        return 0 /* UNKNOWN */;\n    }\n    // === Specialized code generation ==============================================================\n    /** Makes a constant zero of the specified type. */\n    makeZero(type, reportNode) {\n        var module = this.module;\n        switch (type.kind) {\n            default: assert(false);\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: return module.i32(0);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: if (type.size != 64)\n                return module.i32(0);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.i64(0);\n            case 11 /* F32 */: return module.f32(0);\n            case 12 /* F64 */: return module.f64(0);\n            case 13 /* V128 */: return module.v128(util_1.v128_zero);\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n            case 16 /* EXNREF */:\n            case 17 /* ANYREF */:\n                return module.ref_null(type.toNativeType());\n        }\n    }\n    /** Makes a constant one of the specified type. */\n    makeOne(type) {\n        var module = this.module;\n        switch (type.kind) {\n            default: assert(false);\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: return module.i32(1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: if (type.size != 64)\n                return module.i32(1);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.i64(1);\n            case 11 /* F32 */: return module.f32(1);\n            case 12 /* F64 */: return module.f64(1);\n        }\n    }\n    /** Makes a constant negative one of the specified type. */\n    makeNegOne(type) {\n        var module = this.module;\n        switch (type.kind) {\n            default: assert(false);\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */: return module.i32(-1);\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: if (type.size != 64)\n                return module.i32(-1);\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module.i64(-1, -1);\n            case 11 /* F32 */: return module.f32(-1);\n            case 12 /* F64 */: return module.f64(-1);\n        }\n    }\n    /** Creates a comparison whether an expression is 'true' in a broader sense. */\n    makeIsTrueish(expr, type, reportNode) {\n        var module = this.module;\n        switch (type.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */: {\n                expr = this.ensureSmallIntegerWrap(expr, type);\n                // fall-through\n            }\n            case 10 /* BOOL */: // not a mask, just != 0\n            case 2 /* I32 */:\n            case 7 /* U32 */: {\n                return expr;\n            }\n            case 3 /* I64 */:\n            case 8 /* U64 */: {\n                return module.binary(module_1.BinaryOp.NeI64, expr, module.i64(0));\n            }\n            case 9 /* USIZE */:\n            case 4 /* ISIZE */: {\n                return type.size == 64\n                    ? module.binary(module_1.BinaryOp.NeI64, expr, module.i64(0))\n                    : expr;\n            }\n            case 11 /* F32 */: {\n                // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n                // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n                //\n                // and finally:\n                // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n                return module.binary(module_1.BinaryOp.LeU32, module.binary(module_1.BinaryOp.SubI32, module.binary(module_1.BinaryOp.ShlI32, module.unary(module_1.UnaryOp.ReinterpretF32, expr), module.i32(1)), module.i32(2) // 1 << 1\n                ), module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n                );\n            }\n            case 12 /* F64 */: {\n                // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n                // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n                //\n                // and finally:\n                // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n                return module.binary(module_1.BinaryOp.LeU64, module.binary(module_1.BinaryOp.SubI64, module.binary(module_1.BinaryOp.ShlI64, module.unary(module_1.UnaryOp.ReinterpretF64, expr), module.i64(1)), module.i64(2) // 1 << 1\n                ), module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n                );\n            }\n            case 14 /* FUNCREF */:\n            case 15 /* EXTERNREF */:\n            case 16 /* EXNREF */:\n            case 17 /* ANYREF */: {\n                return module.ref_is_null(expr);\n            }\n            default: {\n                assert(false);\n                return module.i32(0);\n            }\n        }\n    }\n    /** Makes an allocation suitable to hold the data of an instance of the given class. */\n    makeAllocation(classInstance) {\n        var program = this.program;\n        assert(classInstance.program == program);\n        var module = this.module;\n        var options = this.options;\n        this.currentType = classInstance.type;\n        if (classInstance.hasDecorator(program_1.DecoratorFlags.UNMANAGED)) {\n            let allocInstance = program.allocInstance;\n            this.compileFunction(allocInstance);\n            return module.call(allocInstance.internalName, [\n                options.isWasm64\n                    ? module.i64(classInstance.nextMemoryOffset)\n                    : module.i32(classInstance.nextMemoryOffset)\n            ], options.nativeSizeType);\n        }\n        else {\n            let newInstance = program.newInstance;\n            this.compileFunction(newInstance);\n            return module.call(newInstance.internalName, [\n                options.isWasm64\n                    ? module.i64(classInstance.nextMemoryOffset)\n                    : module.i32(classInstance.nextMemoryOffset),\n                module.i32(classInstance.id)\n            ], options.nativeSizeType);\n        }\n    }\n    /** Makes a conditional allocation where `this` might not have been initialized yet. */\n    makeConditionalAllocation(classInstance, thisIndex) {\n        var module = this.module;\n        var classType = classInstance.type;\n        var nativeClassType = classType.toNativeType();\n        assert(nativeClassType == this.options.nativeSizeType);\n        return module.if(module.unary(nativeClassType == module_1.NativeType.I64 ? module_1.UnaryOp.EqzI64 : module_1.UnaryOp.EqzI32, module.local_get(thisIndex, nativeClassType)), module.local_set(thisIndex, this.makeAllocation(classInstance), classInstance.type.isManaged));\n    }\n    /** Makes the initializers for a class's fields within the constructor. */\n    makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance, \n    /** Statements to append to also being returned. Created if omitted. */\n    stmts = []) {\n        var members = classInstance.members;\n        if (!members)\n            return stmts;\n        var module = this.module;\n        var flow = this.currentFlow;\n        var isInline = flow.isInline;\n        var thisLocalIndex = isInline\n            ? flow.lookupLocal(common_1.CommonNames.this_).index\n            : 0;\n        var nativeSizeType = this.options.nativeSizeType;\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            if (member.kind != program_1.ElementKind.FIELD || // not a field\n                member.parent != classInstance // inherited field\n            )\n                continue;\n            let field = member;\n            assert(!field.isAny(common_1.CommonFlags.CONST));\n            let fieldType = field.type;\n            let nativeFieldType = fieldType.toNativeType();\n            let fieldPrototype = field.prototype;\n            let initializerNode = fieldPrototype.initializerNode;\n            let parameterIndex = fieldPrototype.parameterIndex;\n            let initExpr;\n            let typeNode = field.typeNode;\n            if (typeNode)\n                this.checkTypeSupported(fieldType, typeNode);\n            // if declared as a constructor parameter, use its value\n            if (parameterIndex >= 0) {\n                initExpr = module.local_get(isInline\n                    ? flow.lookupLocal(field.name).index\n                    : 1 + parameterIndex, // this is local 0\n                nativeFieldType);\n                // fall back to use initializer if present\n            }\n            else if (initializerNode) {\n                initExpr = this.compileExpression(initializerNode, fieldType, 1 /* CONV_IMPLICIT */);\n                // otherwise initialize with zero\n            }\n            else {\n                initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n            }\n            this.compileFieldSetter(field);\n            stmts.push(module.call(field.internalSetterName, [\n                module.local_get(thisLocalIndex, nativeSizeType),\n                initExpr\n            ], module_1.NativeType.None));\n        }\n        return stmts;\n    }\n    /** Makes a call to `abort`, if present, otherwise creates a trap. */\n    makeAbort(\n    /** Message argument of type string, if any. */\n    message, \n    /** Code location to report when aborting. */\n    codeLocation) {\n        var program = this.program;\n        var abortInstance = program.abortInstance;\n        if (!abortInstance || !this.compileFunction(abortInstance))\n            return this.module.unreachable();\n        var stringInstance = program.stringInstance;\n        var messageArg;\n        if (message !== null) {\n            messageArg = this.compileExpression(message, stringInstance.type, 1 /* CONV_IMPLICIT */);\n        }\n        else {\n            messageArg = this.makeZero(stringInstance.type, codeLocation);\n        }\n        return this.makeStaticAbort(messageArg, codeLocation);\n    }\n    /** Makes a call to `abort`, if present, otherwise creates a trap. */\n    makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr, \n    /** Code location to report when aborting. */\n    codeLocation) {\n        var program = this.program;\n        var module = this.module;\n        var abortInstance = program.abortInstance;\n        if (!abortInstance || !this.compileFunction(abortInstance))\n            return module.unreachable();\n        var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n        var range = codeLocation.range;\n        var source = range.source;\n        return module.block(null, [\n            module.call(abortInstance.internalName, [\n                messageExpr,\n                filenameExpr,\n                module.i32(source.lineAt(range.start)),\n                module.i32(source.columnAt())\n            ], module_1.NativeType.None),\n            module.unreachable()\n        ]);\n    }\n    /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n    makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr, \n    /** Type of the expression. */\n    type, \n    /** Report node. */\n    reportNode) {\n        var module = this.module;\n        var flow = this.currentFlow;\n        var temp = flow.getTempLocal(type);\n        if (!flow.canOverflow(expr, type))\n            flow.setLocalFlag(temp.index, flow_1.LocalFlags.WRAPPED);\n        flow.setLocalFlag(temp.index, flow_1.LocalFlags.NONNULL);\n        expr = module.if(module.local_tee(temp.index, expr, type.isManaged), module.local_get(temp.index, type.toNativeType()), this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n        );\n        flow.freeTempLocal(temp);\n        this.currentType = type.nonNullableType;\n        return expr;\n    }\n    /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n    makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr, \n    /** Type of the expression. */\n    type, \n    /** Type casting to. */\n    toType, \n    /** Report node. */\n    reportNode) {\n        assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n        var module = this.module;\n        var flow = this.currentFlow;\n        var temp = flow.getTempLocal(type);\n        var instanceofInstance = this.program.instanceofInstance;\n        assert(this.compileFunction(instanceofInstance));\n        expr = module.if(module.call(instanceofInstance.internalName, [\n            module.local_tee(temp.index, expr, type.isManaged),\n            module.i32(toType.classReference.id)\n        ], module_1.NativeType.I32), module.local_get(temp.index, type.toNativeType()), this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n        );\n        flow.freeTempLocal(temp);\n        this.currentType = toType;\n        return expr;\n    }\n}\nexports.Compiler = Compiler;\n// helpers\nfunction mangleImportName(element, declaration) {\n    // by default, use the file name as the module name\n    mangleImportName_moduleName = declaration.range.source.simplePath;\n    // and the internal name of the element within that file as the element name\n    mangleImportName_elementName = program_1.mangleInternalName(element.name, element.parent, element.is(common_1.CommonFlags.INSTANCE), true);\n    if (!element.hasDecorator(program_1.DecoratorFlags.EXTERNAL))\n        return;\n    var program = element.program;\n    var decorator = assert(ast_1.findDecorator(ast_1.DecoratorKind.EXTERNAL, declaration.decorators));\n    var args = decorator.args;\n    if (args !== null && args.length > 0) {\n        let arg = args[0];\n        // if one argument is given, override just the element name\n        // if two arguments are given, override both module and element name\n        if (arg.isLiteralKind(ast_1.LiteralKind.STRING)) {\n            mangleImportName_elementName = arg.value;\n            if (args.length >= 2) {\n                arg = args[1];\n                if (arg.isLiteralKind(ast_1.LiteralKind.STRING)) {\n                    mangleImportName_moduleName = mangleImportName_elementName;\n                    mangleImportName_elementName = arg.value;\n                    if (args.length > 2) {\n                        program.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, decorator.range, \"2\", args.length.toString());\n                    }\n                }\n                else {\n                    program.error(diagnostics_1.DiagnosticCode.String_literal_expected, arg.range);\n                }\n            }\n        }\n        else {\n            program.error(diagnostics_1.DiagnosticCode.String_literal_expected, arg.range);\n        }\n    }\n    else {\n        program.error(diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1, decorator.range, \"1\", \"0\");\n    }\n}\nvar mangleImportName_moduleName;\nvar mangleImportName_elementName;\n\n\n/***/ }),\n\n/***/ 317:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TSDBuilder = exports.IDLBuilder = exports.ExportsWalker = void 0;\nconst common_1 = __webpack_require__(200);\nconst program_1 = __webpack_require__(974);\nconst ast_1 = __webpack_require__(60);\nconst util_1 = __webpack_require__(910);\n/** Walker base class. */\nclass ExportsWalker {\n    /** Constructs a new Element walker. */\n    constructor(program, includePrivate = false) {\n        /** Already seen elements. */\n        this.seen = new Map();\n        this.program = program;\n        this.includePrivate = includePrivate;\n    }\n    /** Walks all elements and calls the respective handlers. */\n    walk() {\n        // TODO: for (let file of this.program.filesByName.values()) {\n        for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n            let file = unchecked(_values[i]);\n            if (file.source.sourceKind == ast_1.SourceKind.USER_ENTRY)\n                this.visitFile(file);\n        }\n    }\n    /** Visits all exported elements of a file. */\n    visitFile(file) {\n        var exports = file.exports;\n        if (exports) {\n            // TODO: for (let [memberName, member] of exports) {\n            for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n                let memberName = unchecked(_keys[i]);\n                let member = assert(exports.get(memberName));\n                this.visitElement(memberName, member);\n            }\n        }\n        var exportsStar = file.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                let exportStar = unchecked(exportsStar[i]);\n                this.visitFile(exportStar);\n            }\n        }\n    }\n    /** Visits an element.*/\n    visitElement(name, element) {\n        if (element.is(common_1.CommonFlags.PRIVATE) && !this.includePrivate)\n            return;\n        var seen = this.seen;\n        if (!element.is(common_1.CommonFlags.INSTANCE) && seen.has(element)) {\n            this.visitAlias(name, element, assert(seen.get(element)));\n            return;\n        }\n        seen.set(element, name);\n        switch (element.kind) {\n            case program_1.ElementKind.GLOBAL: {\n                if (element.is(common_1.CommonFlags.COMPILED))\n                    this.visitGlobal(name, element);\n                break;\n            }\n            case program_1.ElementKind.ENUM: {\n                if (element.is(common_1.CommonFlags.COMPILED))\n                    this.visitEnum(name, element);\n                break;\n            }\n            case program_1.ElementKind.ENUMVALUE: break; // handled by visitEnum\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                this.visitFunctionInstances(name, element);\n                break;\n            }\n            case program_1.ElementKind.CLASS_PROTOTYPE: {\n                this.visitClassInstances(name, element);\n                break;\n            }\n            case program_1.ElementKind.FIELD: {\n                let fieldInstance = element;\n                if (fieldInstance.is(common_1.CommonFlags.COMPILED))\n                    this.visitField(name, fieldInstance);\n                break;\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyInstance = element.instance;\n                if (!propertyInstance)\n                    break;\n                element = propertyInstance;\n                // fall-through\n                break;\n            }\n            case program_1.ElementKind.PROPERTY: {\n                let propertyInstance = element;\n                let getterInstance = propertyInstance.getterInstance;\n                if (getterInstance)\n                    this.visitFunction(name, getterInstance);\n                let setterInstance = propertyInstance.setterInstance;\n                if (setterInstance)\n                    this.visitFunction(name, setterInstance);\n                break;\n            }\n            case program_1.ElementKind.NAMESPACE: {\n                if (hasCompiledMember(element))\n                    this.visitNamespace(name, element);\n                break;\n            }\n            case program_1.ElementKind.TYPEDEFINITION: break;\n            default: assert(false);\n        }\n    }\n    visitFunctionInstances(name, element) {\n        var instances = element.instances;\n        if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n                let instance = unchecked(_values[i]);\n                if (instance.is(common_1.CommonFlags.COMPILED))\n                    this.visitFunction(name, instance);\n            }\n        }\n    }\n    visitClassInstances(name, element) {\n        var instances = element.instances;\n        if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n                let instance = unchecked(_values[i]);\n                if (instance.is(common_1.CommonFlags.COMPILED))\n                    this.visitClass(name, instance);\n            }\n        }\n    }\n}\nexports.ExportsWalker = ExportsWalker;\n/** A WebIDL definitions builder. */\nclass IDLBuilder extends ExportsWalker {\n    /** Constructs a new WebIDL builder. */\n    constructor(program, includePrivate = false) {\n        super(program, includePrivate);\n        this.sb = [];\n        this.indentLevel = 0;\n    }\n    /** Builds WebIDL definitions for the specified program. */\n    static build(program) {\n        return new IDLBuilder(program).build();\n    }\n    visitGlobal(name, element) {\n        var sb = this.sb;\n        var isConst = element.is(common_1.CommonFlags.INLINED);\n        util_1.indent(sb, this.indentLevel);\n        if (isConst)\n            sb.push(\"const \");\n        sb.push(this.typeToString(element.type));\n        sb.push(\" \");\n        sb.push(name);\n        if (isConst) {\n            switch (element.constantValueKind) {\n                case 1 /* INTEGER */: {\n                    sb.push(\" = \");\n                    sb.push(i64_to_string(element.constantIntegerValue));\n                    break;\n                }\n                case 2 /* FLOAT */: {\n                    sb.push(\" = \");\n                    sb.push(element.constantFloatValue.toString());\n                    break;\n                }\n                default: assert(false);\n            }\n        }\n        sb.push(\";\\n\");\n    }\n    visitEnum(name, element) {\n        var sb = this.sb;\n        util_1.indent(sb, this.indentLevel++);\n        sb.push(\"interface \");\n        sb.push(name);\n        sb.push(\" {\\n\");\n        var members = element.members;\n        if (members) {\n            // TODO: for (let [memberName, member] of members) {\n            for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n                let memberName = unchecked(_keys[i]);\n                let member = assert(members.get(memberName));\n                if (member.kind == program_1.ElementKind.ENUMVALUE) {\n                    let enumValue = member;\n                    let isConst = enumValue.is(common_1.CommonFlags.INLINED);\n                    util_1.indent(sb, this.indentLevel);\n                    if (isConst)\n                        sb.push(\"const \");\n                    else\n                        sb.push(\"readonly \");\n                    sb.push(\"unsigned long \");\n                    sb.push(memberName);\n                    if (isConst) {\n                        sb.push(\" = \");\n                        assert(enumValue.constantValueKind == 1 /* INTEGER */);\n                        sb.push(i64_low(enumValue.constantIntegerValue).toString());\n                    }\n                    sb.push(\";\\n\");\n                }\n            }\n            // TODO: for (let member of members.values()) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                if (member.kind != program_1.ElementKind.ENUMVALUE)\n                    this.visitElement(member.name, member);\n            }\n        }\n        util_1.indent(sb, --this.indentLevel);\n        sb.push(\"}\\n\");\n    }\n    visitFunction(name, element) {\n        var sb = this.sb;\n        var signature = element.signature;\n        util_1.indent(sb, this.indentLevel);\n        sb.push(this.typeToString(signature.returnType));\n        sb.push(\" \");\n        sb.push(name);\n        sb.push(\"(\");\n        var parameters = signature.parameterTypes;\n        var numParameters = parameters.length;\n        // var requiredParameters = signature.requiredParameters;\n        for (let i = 0; i < numParameters; ++i) {\n            if (i)\n                sb.push(\", \");\n            // if (i >= requiredParameters) sb.push(\"optional \");\n            sb.push(this.typeToString(parameters[i]));\n            sb.push(\" \");\n            sb.push(element.getParameterName(i));\n        }\n        sb.push(\");\\n\");\n        var members = element.members;\n        if (members !== null && members.size > 0) {\n            util_1.indent(sb, this.indentLevel);\n            sb.push(\"interface \");\n            sb.push(element.name);\n            sb.push(\" {\\n\");\n            // TODO: for (let member of members.values()) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                this.visitElement(member.name, member);\n            }\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\\n\");\n        }\n    }\n    visitClass(name, element) {\n        var sb = this.sb;\n        util_1.indent(sb, this.indentLevel++);\n        sb.push(\"interface \");\n        sb.push(name);\n        sb.push(\" {\\n\");\n        // TODO\n        util_1.indent(sb, --this.indentLevel);\n        sb.push(\"}\\n\");\n    }\n    visitInterface(name, element) {\n        this.visitClass(name, element);\n    }\n    visitField(name, element) {\n        // TODO\n    }\n    visitNamespace(name, element) {\n        var sb = this.sb;\n        util_1.indent(sb, this.indentLevel++);\n        sb.push(\"interface \");\n        sb.push(name);\n        sb.push(\" {\\n\");\n        var members = element.members;\n        if (members) {\n            // TODO: for (let member of members.values()) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                this.visitElement(member.name, member);\n            }\n        }\n        util_1.indent(sb, --this.indentLevel);\n        sb.push(\"}\\n\");\n    }\n    visitAlias(name, element, originalName) {\n        // TODO\n    }\n    typeToString(type) {\n        switch (type.kind) {\n            case 0 /* I8 */: return \"byte\";\n            case 1 /* I16 */: return \"short\";\n            case 2 /* I32 */: return \"long\";\n            case 3 /* I64 */: return \"long long\";\n            case 4 /* ISIZE */: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n            case 5 /* U8 */: return \"octet\";\n            case 6 /* U16 */: return \"unsigned short\";\n            case 7 /* U32 */: return \"unsigned long\";\n            // ^ TODO: function types\n            case 8 /* U64 */: return \"unsigned long long\";\n            case 9 /* USIZE */: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n            // ^ TODO: class types\n            case 10 /* BOOL */: return \"boolean\";\n            case 11 /* F32 */: return \"unrestricted float\";\n            case 12 /* F64 */: return \"unrestricted double\";\n            case 18 /* VOID */: return \"void\";\n            default: {\n                assert(false);\n                return \"\";\n            }\n        }\n    }\n    build() {\n        var sb = this.sb;\n        sb.push(\"interface ASModule {\\n\");\n        ++this.indentLevel;\n        this.walk();\n        --this.indentLevel;\n        sb.push(\"}\\n\");\n        return sb.join(\"\");\n    }\n}\nexports.IDLBuilder = IDLBuilder;\n/** A TypeScript definitions builder. */\nclass TSDBuilder extends ExportsWalker {\n    /** Constructs a new WebIDL builder. */\n    constructor(program, includePrivate = false) {\n        super(program, includePrivate);\n        this.sb = [];\n        this.indentLevel = 0;\n    }\n    /** Builds TypeScript definitions for the specified program. */\n    static build(program) {\n        return new TSDBuilder(program).build();\n    }\n    visitGlobal(name, element) {\n        var sb = this.sb;\n        var isConst = element.is(common_1.CommonFlags.INLINED);\n        util_1.indent(sb, this.indentLevel);\n        if (element.is(common_1.CommonFlags.STATIC)) {\n            if (isConst)\n                sb.push(\"static readonly \");\n            else\n                sb.push(\"static \");\n        }\n        else {\n            if (isConst)\n                sb.push(\"export const \");\n            else\n                sb.push(\"export var \");\n        }\n        sb.push(name);\n        sb.push(\": \");\n        sb.push(this.typeToString(element.type));\n        sb.push(\";\\n\");\n        this.visitNamespace(name, element);\n    }\n    visitEnum(name, element) {\n        var sb = this.sb;\n        util_1.indent(sb, this.indentLevel++);\n        sb.push(\"export \");\n        if (element.is(common_1.CommonFlags.CONST))\n            sb.push(\"const \");\n        sb.push(\"enum \");\n        sb.push(name);\n        sb.push(\" {\\n\");\n        var members = element.members;\n        var remainingMembers = 0;\n        if (members) {\n            remainingMembers = members.size;\n            // TODO: for (let [memberName, member] of members) {\n            for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n                let memberName = unchecked(_keys[i]);\n                let member = assert(members.get(memberName));\n                if (member.kind == program_1.ElementKind.ENUMVALUE) {\n                    let enumValue = member;\n                    util_1.indent(sb, this.indentLevel);\n                    sb.push(memberName);\n                    if (member.is(common_1.CommonFlags.INLINED)) {\n                        sb.push(\" = \");\n                        assert(enumValue.constantValueKind == 1 /* INTEGER */);\n                        sb.push(i64_low(enumValue.constantIntegerValue).toString());\n                    }\n                    sb.push(\",\\n\");\n                    --remainingMembers;\n                }\n            }\n        }\n        util_1.indent(sb, --this.indentLevel);\n        sb.push(\"}\\n\");\n        if (remainingMembers)\n            this.visitNamespace(name, element);\n    }\n    visitFunction(name, element) {\n        if (element.isAny(common_1.CommonFlags.PRIVATE | common_1.CommonFlags.SET))\n            return;\n        var sb = this.sb;\n        var signature = element.signature;\n        util_1.indent(sb, this.indentLevel);\n        if (element.is(common_1.CommonFlags.PROTECTED))\n            sb.push(\"protected \");\n        if (element.is(common_1.CommonFlags.STATIC))\n            sb.push(\"static \");\n        if (element.is(common_1.CommonFlags.GET)) {\n            sb.push(\"get \");\n            sb.push(name); // 'get:funcName' internally\n            sb.push(\"(): \");\n            sb.push(this.typeToString(signature.returnType));\n            sb.push(\";\\n\");\n            return;\n        }\n        else {\n            if (!element.isAny(common_1.CommonFlags.STATIC | common_1.CommonFlags.INSTANCE))\n                sb.push(\"export function \");\n            sb.push(name);\n        }\n        sb.push(\"(\");\n        var parameters = signature.parameterTypes;\n        var numParameters = parameters.length;\n        var requiredParameters = signature.requiredParameters;\n        for (let i = 0; i < numParameters; ++i) {\n            if (i)\n                sb.push(\", \");\n            sb.push(element.getParameterName(i));\n            if (i >= requiredParameters)\n                sb.push(\"?\");\n            sb.push(\": \");\n            sb.push(this.typeToString(parameters[i]));\n        }\n        if (element.isAny(common_1.CommonFlags.CONSTRUCTOR | common_1.CommonFlags.SET)) {\n            sb.push(\")\");\n        }\n        else {\n            sb.push(\"): \");\n            sb.push(this.typeToString(signature.returnType));\n        }\n        sb.push(\";\\n\");\n        this.visitNamespace(name, element);\n    }\n    visitClass(name, element) {\n        var sb = this.sb;\n        var isInterface = element.kind == program_1.ElementKind.INTERFACE;\n        util_1.indent(sb, this.indentLevel++);\n        if (isInterface) {\n            sb.push(\"export interface \");\n        }\n        else {\n            sb.push(\"export \");\n            if (element.is(common_1.CommonFlags.ABSTRACT))\n                sb.push(\"abstract \");\n            sb.push(\"class \");\n        }\n        sb.push(name);\n        var base = element.base;\n        if (base !== null && base.is(common_1.CommonFlags.COMPILED | common_1.CommonFlags.MODULE_EXPORT)) {\n            sb.push(\" extends \");\n            let extendsNode = assert(element.prototype.extendsNode);\n            sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n        }\n        sb.push(\" {\\n\");\n        if (!isInterface) {\n            util_1.indent(sb, this.indentLevel);\n            sb.push(\"static wrap(ptr: usize): \");\n            sb.push(name);\n            sb.push(\";\\n\");\n            util_1.indent(sb, this.indentLevel);\n            sb.push(\"valueOf(): usize;\\n\");\n        }\n        var staticMembers = element.prototype.members;\n        if (staticMembers) {\n            // TODO: for (let member of staticMembers.values()) {\n            for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                this.visitElement(member.name, member);\n            }\n        }\n        var instanceMembers = element.members;\n        if (instanceMembers) {\n            // TODO: for (let member of instanceMembers.values()) {\n            for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                if (member.parent == element) { // own member\n                    this.visitElement(member.name, member);\n                }\n            }\n        }\n        util_1.indent(sb, --this.indentLevel);\n        sb.push(\"}\\n\");\n    }\n    visitInterface(name, element) {\n        this.visitClass(name, element);\n    }\n    visitField(name, element) {\n        if (element.is(common_1.CommonFlags.PRIVATE))\n            return;\n        var sb = this.sb;\n        util_1.indent(sb, this.indentLevel);\n        if (element.is(common_1.CommonFlags.PROTECTED))\n            sb.push(\"protected \");\n        if (element.is(common_1.CommonFlags.STATIC))\n            sb.push(\"static \");\n        if (element.is(common_1.CommonFlags.READONLY))\n            sb.push(\"readonly \");\n        sb.push(name);\n        sb.push(\": \");\n        sb.push(this.typeToString(element.type));\n        sb.push(\";\\n\");\n    }\n    visitNamespace(name, element) {\n        var members = element.members;\n        if (members !== null && members.size > 0) {\n            let sb = this.sb;\n            util_1.indent(sb, this.indentLevel++);\n            sb.push(\"export namespace \");\n            sb.push(name);\n            sb.push(\" {\\n\");\n            // TODO: for (let member of members.values()) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                this.visitElement(member.name, member);\n            }\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\\n\");\n        }\n    }\n    visitAlias(name, element, originalName) {\n        var sb = this.sb;\n        util_1.indent(sb, this.indentLevel);\n        sb.push(\"export const \");\n        sb.push(name);\n        sb.push(\": typeof \");\n        sb.push(originalName);\n        sb.push(\";\\n\");\n    }\n    typeToString(type) {\n        switch (type.kind) {\n            case 0 /* I8 */: return \"i8\";\n            case 1 /* I16 */: return \"i16\";\n            case 2 /* I32 */: return \"i32\";\n            case 3 /* I64 */: return \"i64\";\n            case 4 /* ISIZE */: return \"isize\";\n            case 5 /* U8 */: return \"u8\";\n            case 6 /* U16 */: return \"u16\";\n            case 7 /* U32 */: return \"u32\";\n            // ^ TODO: function types\n            case 8 /* U64 */: return \"u64\";\n            case 9 /* USIZE */: return \"usize\";\n            // ^ TODO: class types\n            case 10 /* BOOL */: return \"bool\";\n            case 11 /* F32 */: return \"f32\";\n            case 12 /* F64 */: return \"f64\";\n            case 13 /* V128 */: return \"v128\";\n            case 18 /* VOID */: return \"void\";\n            case 14 /* FUNCREF */: return \"funcref\";\n            case 15 /* EXTERNREF */: return \"externref\";\n            case 16 /* EXNREF */: return \"exnref\";\n            case 17 /* ANYREF */: return \"anyref\";\n            default: {\n                assert(false);\n                return \"any\";\n            }\n        }\n    }\n    build() {\n        var sb = this.sb;\n        var isWasm64 = this.program.options.isWasm64;\n        sb.push(\"declare module ASModule {\\n\");\n        sb.push(\"  type i8 = number;\\n\");\n        sb.push(\"  type i16 = number;\\n\");\n        sb.push(\"  type i32 = number;\\n\");\n        sb.push(\"  type i64 = bigint;\\n\");\n        if (isWasm64) {\n            sb.push(\"  type isize = bigint;\\n\");\n        }\n        else {\n            sb.push(\"  type isize = number;\\n\");\n        }\n        sb.push(\"  type u8 = number;\\n\");\n        sb.push(\"  type u16 = number;\\n\");\n        sb.push(\"  type u32 = number;\\n\");\n        sb.push(\"  type u64 = bigint;\\n\");\n        if (isWasm64) {\n            sb.push(\"  type usize = bigint;\\n\");\n        }\n        else {\n            sb.push(\"  type usize = number;\\n\");\n        }\n        sb.push(\"  type f32 = number;\\n\");\n        sb.push(\"  type f64 = number;\\n\");\n        sb.push(\"  type bool = boolean | number;\\n\");\n        ++this.indentLevel;\n        this.walk();\n        --this.indentLevel;\n        sb.push(\"}\\n\");\n        sb.push(\"export default ASModule;\\n\");\n        return this.sb.join(\"\");\n    }\n}\nexports.TSDBuilder = TSDBuilder;\n// helpers\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element) {\n    var members = element.members;\n    if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            switch (member.kind) {\n                case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                    let instances = member.instances;\n                    if (instances) {\n                        // TODO: for (let instance of instances.values()) {\n                        for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n                            let instance = unchecked(_values[j]);\n                            if (instance.is(common_1.CommonFlags.COMPILED))\n                                return true;\n                        }\n                    }\n                    break;\n                }\n                case program_1.ElementKind.CLASS_PROTOTYPE: {\n                    let instances = member.instances;\n                    if (instances) {\n                        // TODO: for (let instance of instances.values()) {\n                        for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n                            let instance = unchecked(_values[j]);\n                            if (instance.is(common_1.CommonFlags.COMPILED))\n                                return true;\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    if (member.is(common_1.CommonFlags.COMPILED) || hasCompiledMember(member))\n                        return true;\n                    break;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n/***/ }),\n\n/***/ 252:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.diagnosticCodeToString = exports.DiagnosticCode = void 0;\n/** Enum of available diagnostic codes. */\nvar DiagnosticCode;\n(function (DiagnosticCode) {\n    DiagnosticCode[DiagnosticCode[\"Not_implemented_0\"] = 100] = \"Not_implemented_0\";\n    DiagnosticCode[DiagnosticCode[\"Operation_is_unsafe\"] = 101] = \"Operation_is_unsafe\";\n    DiagnosticCode[DiagnosticCode[\"User_defined_0\"] = 102] = \"User_defined_0\";\n    DiagnosticCode[DiagnosticCode[\"Feature_0_is_not_enabled\"] = 103] = \"Feature_0_is_not_enabled\";\n    DiagnosticCode[DiagnosticCode[\"Low_memory_limit_exceeded_by_static_data_0_1\"] = 104] = \"Low_memory_limit_exceeded_by_static_data_0_1\";\n    DiagnosticCode[DiagnosticCode[\"Module_requires_at_least_0_pages_of_initial_memory\"] = 105] = \"Module_requires_at_least_0_pages_of_initial_memory\";\n    DiagnosticCode[DiagnosticCode[\"Module_requires_at_least_0_pages_of_maximum_memory\"] = 106] = \"Module_requires_at_least_0_pages_of_maximum_memory\";\n    DiagnosticCode[DiagnosticCode[\"Shared_memory_requires_maximum_memory_to_be_defined\"] = 107] = \"Shared_memory_requires_maximum_memory_to_be_defined\";\n    DiagnosticCode[DiagnosticCode[\"Shared_memory_requires_feature_threads_to_be_enabled\"] = 108] = \"Shared_memory_requires_feature_threads_to_be_enabled\";\n    DiagnosticCode[DiagnosticCode[\"Conversion_from_type_0_to_1_requires_an_explicit_cast\"] = 200] = \"Conversion_from_type_0_to_1_requires_an_explicit_cast\";\n    DiagnosticCode[DiagnosticCode[\"Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit\"] = 201] = \"Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_cannot_be_changed_to_type_1\"] = 202] = \"Type_0_cannot_be_changed_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Operation_0_cannot_be_applied_to_type_1\"] = 203] = \"Operation_0_cannot_be_applied_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_cannot_be_nullable\"] = 204] = \"Type_0_cannot_be_nullable\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_export_a_mutable_global\"] = 205] = \"Cannot_export_a_mutable_global\";\n    DiagnosticCode[DiagnosticCode[\"Mutable_value_cannot_be_inlined\"] = 206] = \"Mutable_value_cannot_be_inlined\";\n    DiagnosticCode[DiagnosticCode[\"Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa\"] = 207] = \"Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa\";\n    DiagnosticCode[DiagnosticCode[\"Unmanaged_classes_cannot_implement_interfaces\"] = 208] = \"Unmanaged_classes_cannot_implement_interfaces\";\n    DiagnosticCode[DiagnosticCode[\"Invalid_regular_expression_flags\"] = 209] = \"Invalid_regular_expression_flags\";\n    DiagnosticCode[DiagnosticCode[\"Expression_is_never_null\"] = 210] = \"Expression_is_never_null\";\n    DiagnosticCode[DiagnosticCode[\"Class_0_is_final_and_cannot_be_extended\"] = 211] = \"Class_0_is_final_and_cannot_be_extended\";\n    DiagnosticCode[DiagnosticCode[\"Decorator_0_is_not_valid_here\"] = 212] = \"Decorator_0_is_not_valid_here\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_decorator\"] = 213] = \"Duplicate_decorator\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_illegal_in_this_context\"] = 214] = \"Type_0_is_illegal_in_this_context\";\n    DiagnosticCode[DiagnosticCode[\"Optional_parameter_must_have_an_initializer\"] = 215] = \"Optional_parameter_must_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal\"] = 216] = \"Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal\";\n    DiagnosticCode[DiagnosticCode[\"Function_0_cannot_be_inlined_into_itself\"] = 217] = \"Function_0_cannot_be_inlined_into_itself\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set\"] = 218] = \"Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set\";\n    DiagnosticCode[DiagnosticCode[\"Optional_properties_are_not_supported\"] = 219] = \"Optional_properties_are_not_supported\";\n    DiagnosticCode[DiagnosticCode[\"Expression_must_be_a_compile_time_constant\"] = 220] = \"Expression_must_be_a_compile_time_constant\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_a_function_index_or_function_reference\"] = 221] = \"Type_0_is_not_a_function_index_or_function_reference\";\n    DiagnosticCode[DiagnosticCode[\"_0_must_be_a_value_between_1_and_2_inclusive\"] = 222] = \"_0_must_be_a_value_between_1_and_2_inclusive\";\n    DiagnosticCode[DiagnosticCode[\"_0_must_be_a_power_of_two\"] = 223] = \"_0_must_be_a_power_of_two\";\n    DiagnosticCode[DiagnosticCode[\"_0_is_not_a_valid_operator\"] = 224] = \"_0_is_not_a_valid_operator\";\n    DiagnosticCode[DiagnosticCode[\"Expression_cannot_be_represented_by_a_type\"] = 225] = \"Expression_cannot_be_represented_by_a_type\";\n    DiagnosticCode[DiagnosticCode[\"Expression_resolves_to_unusual_type_0\"] = 226] = \"Expression_resolves_to_unusual_type_0\";\n    DiagnosticCode[DiagnosticCode[\"Array_literal_expected\"] = 227] = \"Array_literal_expected\";\n    DiagnosticCode[DiagnosticCode[\"Function_0_is_virtual_and_will_not_be_inlined\"] = 228] = \"Function_0_is_virtual_and_will_not_be_inlined\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_only_has_a_setter_and_is_missing_a_getter\"] = 229] = \"Property_0_only_has_a_setter_and_is_missing_a_getter\";\n    DiagnosticCode[DiagnosticCode[\"_0_keyword_cannot_be_used_here\"] = 230] = \"_0_keyword_cannot_be_used_here\";\n    DiagnosticCode[DiagnosticCode[\"A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final\"] = 231] = \"A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final\";\n    DiagnosticCode[DiagnosticCode[\"Exported_generic_function_or_class_has_no_concrete_instances\"] = 232] = \"Exported_generic_function_or_class_has_no_concrete_instances\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_is_always_assigned_before_being_used\"] = 233] = \"Property_0_is_always_assigned_before_being_used\";\n    DiagnosticCode[DiagnosticCode[\"Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime\"] = 234] = \"Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime\";\n    DiagnosticCode[DiagnosticCode[\"Importing_the_table_disables_some_indirect_call_optimizations\"] = 901] = \"Importing_the_table_disables_some_indirect_call_optimizations\";\n    DiagnosticCode[DiagnosticCode[\"Exporting_the_table_disables_some_indirect_call_optimizations\"] = 902] = \"Exporting_the_table_disables_some_indirect_call_optimizations\";\n    DiagnosticCode[DiagnosticCode[\"Expression_compiles_to_a_dynamic_check_at_runtime\"] = 903] = \"Expression_compiles_to_a_dynamic_check_at_runtime\";\n    DiagnosticCode[DiagnosticCode[\"Indexed_access_may_involve_bounds_checking\"] = 904] = \"Indexed_access_may_involve_bounds_checking\";\n    DiagnosticCode[DiagnosticCode[\"Explicitly_returning_constructor_drops_this_allocation\"] = 905] = \"Explicitly_returning_constructor_drops_this_allocation\";\n    DiagnosticCode[DiagnosticCode[\"Unnecessary_definite_assignment\"] = 906] = \"Unnecessary_definite_assignment\";\n    DiagnosticCode[DiagnosticCode[\"Unterminated_string_literal\"] = 1002] = \"Unterminated_string_literal\";\n    DiagnosticCode[DiagnosticCode[\"Identifier_expected\"] = 1003] = \"Identifier_expected\";\n    DiagnosticCode[DiagnosticCode[\"_0_expected\"] = 1005] = \"_0_expected\";\n    DiagnosticCode[DiagnosticCode[\"A_file_cannot_have_a_reference_to_itself\"] = 1006] = \"A_file_cannot_have_a_reference_to_itself\";\n    DiagnosticCode[DiagnosticCode[\"Trailing_comma_not_allowed\"] = 1009] = \"Trailing_comma_not_allowed\";\n    DiagnosticCode[DiagnosticCode[\"Unexpected_token\"] = 1012] = \"Unexpected_token\";\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_must_be_last_in_a_parameter_list\"] = 1014] = \"A_rest_parameter_must_be_last_in_a_parameter_list\";\n    DiagnosticCode[DiagnosticCode[\"Parameter_cannot_have_question_mark_and_initializer\"] = 1015] = \"Parameter_cannot_have_question_mark_and_initializer\";\n    DiagnosticCode[DiagnosticCode[\"A_required_parameter_cannot_follow_an_optional_parameter\"] = 1016] = \"A_required_parameter_cannot_follow_an_optional_parameter\";\n    DiagnosticCode[DiagnosticCode[\"Statements_are_not_allowed_in_ambient_contexts\"] = 1036] = \"Statements_are_not_allowed_in_ambient_contexts\";\n    DiagnosticCode[DiagnosticCode[\"Initializers_are_not_allowed_in_ambient_contexts\"] = 1039] = \"Initializers_are_not_allowed_in_ambient_contexts\";\n    DiagnosticCode[DiagnosticCode[\"_0_modifier_cannot_be_used_here\"] = 1042] = \"_0_modifier_cannot_be_used_here\";\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_cannot_be_optional\"] = 1047] = \"A_rest_parameter_cannot_be_optional\";\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_cannot_have_an_initializer\"] = 1048] = \"A_rest_parameter_cannot_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_must_have_exactly_one_parameter\"] = 1049] = \"A_set_accessor_must_have_exactly_one_parameter\";\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_parameter_cannot_have_an_initializer\"] = 1052] = \"A_set_accessor_parameter_cannot_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"A_get_accessor_cannot_have_parameters\"] = 1054] = \"A_get_accessor_cannot_have_parameters\";\n    DiagnosticCode[DiagnosticCode[\"Enum_member_must_have_initializer\"] = 1061] = \"Enum_member_must_have_initializer\";\n    DiagnosticCode[DiagnosticCode[\"Type_parameters_cannot_appear_on_a_constructor_declaration\"] = 1092] = \"Type_parameters_cannot_appear_on_a_constructor_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Type_annotation_cannot_appear_on_a_constructor_declaration\"] = 1093] = \"Type_annotation_cannot_appear_on_a_constructor_declaration\";\n    DiagnosticCode[DiagnosticCode[\"An_accessor_cannot_have_type_parameters\"] = 1094] = \"An_accessor_cannot_have_type_parameters\";\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_cannot_have_a_return_type_annotation\"] = 1095] = \"A_set_accessor_cannot_have_a_return_type_annotation\";\n    DiagnosticCode[DiagnosticCode[\"Type_parameter_list_cannot_be_empty\"] = 1098] = \"Type_parameter_list_cannot_be_empty\";\n    DiagnosticCode[DiagnosticCode[\"Type_argument_list_cannot_be_empty\"] = 1099] = \"Type_argument_list_cannot_be_empty\";\n    DiagnosticCode[DiagnosticCode[\"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement\"] = 1104] = \"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement\";\n    DiagnosticCode[DiagnosticCode[\"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\"] = 1105] = \"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\";\n    DiagnosticCode[DiagnosticCode[\"A_return_statement_can_only_be_used_within_a_function_body\"] = 1108] = \"A_return_statement_can_only_be_used_within_a_function_body\";\n    DiagnosticCode[DiagnosticCode[\"Expression_expected\"] = 1109] = \"Expression_expected\";\n    DiagnosticCode[DiagnosticCode[\"Type_expected\"] = 1110] = \"Type_expected\";\n    DiagnosticCode[DiagnosticCode[\"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement\"] = 1113] = \"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_label_0\"] = 1114] = \"Duplicate_label_0\";\n    DiagnosticCode[DiagnosticCode[\"An_export_assignment_cannot_have_modifiers\"] = 1120] = \"An_export_assignment_cannot_have_modifiers\";\n    DiagnosticCode[DiagnosticCode[\"Octal_literals_are_not_allowed_in_strict_mode\"] = 1121] = \"Octal_literals_are_not_allowed_in_strict_mode\";\n    DiagnosticCode[DiagnosticCode[\"Digit_expected\"] = 1124] = \"Digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"Hexadecimal_digit_expected\"] = 1125] = \"Hexadecimal_digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"Unexpected_end_of_text\"] = 1126] = \"Unexpected_end_of_text\";\n    DiagnosticCode[DiagnosticCode[\"Invalid_character\"] = 1127] = \"Invalid_character\";\n    DiagnosticCode[DiagnosticCode[\"_case_or_default_expected\"] = 1130] = \"_case_or_default_expected\";\n    DiagnosticCode[DiagnosticCode[\"_super_must_be_followed_by_an_argument_list_or_member_access\"] = 1034] = \"_super_must_be_followed_by_an_argument_list_or_member_access\";\n    DiagnosticCode[DiagnosticCode[\"A_declare_modifier_cannot_be_used_in_an_already_ambient_context\"] = 1038] = \"A_declare_modifier_cannot_be_used_in_an_already_ambient_context\";\n    DiagnosticCode[DiagnosticCode[\"Type_argument_expected\"] = 1140] = \"Type_argument_expected\";\n    DiagnosticCode[DiagnosticCode[\"String_literal_expected\"] = 1141] = \"String_literal_expected\";\n    DiagnosticCode[DiagnosticCode[\"Line_break_not_permitted_here\"] = 1142] = \"Line_break_not_permitted_here\";\n    DiagnosticCode[DiagnosticCode[\"Declaration_expected\"] = 1146] = \"Declaration_expected\";\n    DiagnosticCode[DiagnosticCode[\"_const_declarations_must_be_initialized\"] = 1155] = \"_const_declarations_must_be_initialized\";\n    DiagnosticCode[DiagnosticCode[\"Unterminated_regular_expression_literal\"] = 1161] = \"Unterminated_regular_expression_literal\";\n    DiagnosticCode[DiagnosticCode[\"Interface_declaration_cannot_have_implements_clause\"] = 1176] = \"Interface_declaration_cannot_have_implements_clause\";\n    DiagnosticCode[DiagnosticCode[\"Binary_digit_expected\"] = 1177] = \"Binary_digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"Octal_digit_expected\"] = 1178] = \"Octal_digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"An_implementation_cannot_be_declared_in_ambient_contexts\"] = 1183] = \"An_implementation_cannot_be_declared_in_ambient_contexts\";\n    DiagnosticCode[DiagnosticCode[\"The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer\"] = 1190] = \"The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive\"] = 1198] = \"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive\";\n    DiagnosticCode[DiagnosticCode[\"Unterminated_Unicode_escape_sequence\"] = 1199] = \"Unterminated_Unicode_escape_sequence\";\n    DiagnosticCode[DiagnosticCode[\"Decorators_are_not_valid_here\"] = 1206] = \"Decorators_are_not_valid_here\";\n    DiagnosticCode[DiagnosticCode[\"_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration\"] = 1242] = \"_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Method_0_cannot_have_an_implementation_because_it_is_marked_abstract\"] = 1245] = \"Method_0_cannot_have_an_implementation_because_it_is_marked_abstract\";\n    DiagnosticCode[DiagnosticCode[\"A_definite_assignment_assertion_is_not_permitted_in_this_context\"] = 1255] = \"A_definite_assignment_assertion_is_not_permitted_in_this_context\";\n    DiagnosticCode[DiagnosticCode[\"A_class_may_only_extend_another_class\"] = 1311] = \"A_class_may_only_extend_another_class\";\n    DiagnosticCode[DiagnosticCode[\"A_parameter_property_cannot_be_declared_using_a_rest_parameter\"] = 1317] = \"A_parameter_property_cannot_be_declared_using_a_rest_parameter\";\n    DiagnosticCode[DiagnosticCode[\"An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal\"] = 1351] = \"An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_identifier_0\"] = 2300] = \"Duplicate_identifier_0\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_find_name_0\"] = 2304] = \"Cannot_find_name_0\";\n    DiagnosticCode[DiagnosticCode[\"Module_0_has_no_exported_member_1\"] = 2305] = \"Module_0_has_no_exported_member_1\";\n    DiagnosticCode[DiagnosticCode[\"An_interface_can_only_extend_an_interface\"] = 2312] = \"An_interface_can_only_extend_an_interface\";\n    DiagnosticCode[DiagnosticCode[\"Generic_type_0_requires_1_type_argument_s\"] = 2314] = \"Generic_type_0_requires_1_type_argument_s\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_generic\"] = 2315] = \"Type_0_is_not_generic\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_assignable_to_type_1\"] = 2322] = \"Type_0_is_not_assignable_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Index_signature_is_missing_in_type_0\"] = 2329] = \"Index_signature_is_missing_in_type_0\";\n    DiagnosticCode[DiagnosticCode[\"_this_cannot_be_referenced_in_current_location\"] = 2332] = \"_this_cannot_be_referenced_in_current_location\";\n    DiagnosticCode[DiagnosticCode[\"_super_can_only_be_referenced_in_a_derived_class\"] = 2335] = \"_super_can_only_be_referenced_in_a_derived_class\";\n    DiagnosticCode[DiagnosticCode[\"Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors\"] = 2337] = \"Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_does_not_exist_on_type_1\"] = 2339] = \"Property_0_does_not_exist_on_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_is_private_and_only_accessible_within_class_1\"] = 2341] = \"Property_0_is_private_and_only_accessible_within_class_1\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures\"] = 2349] = \"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures\";\n    DiagnosticCode[DiagnosticCode[\"This_expression_is_not_constructable\"] = 2351] = \"This_expression_is_not_constructable\";\n    DiagnosticCode[DiagnosticCode[\"A_function_whose_declared_type_is_not_void_must_return_a_value\"] = 2355] = \"A_function_whose_declared_type_is_not_void_must_return_a_value\";\n    DiagnosticCode[DiagnosticCode[\"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access\"] = 2357] = \"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access\";\n    DiagnosticCode[DiagnosticCode[\"The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access\"] = 2364] = \"The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access\";\n    DiagnosticCode[DiagnosticCode[\"Operator_0_cannot_be_applied_to_types_1_and_2\"] = 2365] = \"Operator_0_cannot_be_applied_to_types_1_and_2\";\n    DiagnosticCode[DiagnosticCode[\"A_super_call_must_be_the_first_statement_in_the_constructor\"] = 2376] = \"A_super_call_must_be_the_first_statement_in_the_constructor\";\n    DiagnosticCode[DiagnosticCode[\"Constructors_for_derived_classes_must_contain_a_super_call\"] = 2377] = \"Constructors_for_derived_classes_must_contain_a_super_call\";\n    DiagnosticCode[DiagnosticCode[\"Getter_and_setter_accessors_do_not_agree_in_visibility\"] = 2379] = \"Getter_and_setter_accessors_do_not_agree_in_visibility\";\n    DiagnosticCode[DiagnosticCode[\"_get_and_set_accessor_must_have_the_same_type\"] = 2380] = \"_get_and_set_accessor_must_have_the_same_type\";\n    DiagnosticCode[DiagnosticCode[\"Overload_signatures_must_all_be_public_private_or_protected\"] = 2385] = \"Overload_signatures_must_all_be_public_private_or_protected\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_implementation_is_missing\"] = 2390] = \"Constructor_implementation_is_missing\";\n    DiagnosticCode[DiagnosticCode[\"Function_implementation_is_missing_or_not_immediately_following_the_declaration\"] = 2391] = \"Function_implementation_is_missing_or_not_immediately_following_the_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Multiple_constructor_implementations_are_not_allowed\"] = 2392] = \"Multiple_constructor_implementations_are_not_allowed\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_function_implementation\"] = 2393] = \"Duplicate_function_implementation\";\n    DiagnosticCode[DiagnosticCode[\"This_overload_signature_is_not_compatible_with_its_implementation_signature\"] = 2394] = \"This_overload_signature_is_not_compatible_with_its_implementation_signature\";\n    DiagnosticCode[DiagnosticCode[\"Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local\"] = 2395] = \"Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local\";\n    DiagnosticCode[DiagnosticCode[\"A_class_can_only_implement_an_interface\"] = 2422] = \"A_class_can_only_implement_an_interface\";\n    DiagnosticCode[DiagnosticCode[\"A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged\"] = 2434] = \"A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses\"] = 2445] = \"Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses\";\n    DiagnosticCode[DiagnosticCode[\"Variable_0_used_before_its_declaration\"] = 2448] = \"Variable_0_used_before_its_declaration\";\n    DiagnosticCode[DiagnosticCode[\"The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly\"] = 2453] = \"The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_has_no_property_1\"] = 2460] = \"Type_0_has_no_property_1\";\n    DiagnosticCode[DiagnosticCode[\"The_0_operator_cannot_be_applied_to_type_1\"] = 2469] = \"The_0_operator_cannot_be_applied_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"In_const_enum_declarations_member_initializer_must_be_constant_expression\"] = 2474] = \"In_const_enum_declarations_member_initializer_must_be_constant_expression\";\n    DiagnosticCode[DiagnosticCode[\"Export_declaration_conflicts_with_exported_declaration_of_0\"] = 2484] = \"Export_declaration_conflicts_with_exported_declaration_of_0\";\n    DiagnosticCode[DiagnosticCode[\"_0_is_referenced_directly_or_indirectly_in_its_own_base_expression\"] = 2506] = \"_0_is_referenced_directly_or_indirectly_in_its_own_base_expression\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_create_an_instance_of_an_abstract_class\"] = 2511] = \"Cannot_create_an_instance_of_an_abstract_class\";\n    DiagnosticCode[DiagnosticCode[\"Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2\"] = 2515] = \"Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2\";\n    DiagnosticCode[DiagnosticCode[\"Object_is_possibly_null\"] = 2531] = \"Object_is_possibly_null\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property\"] = 2540] = \"Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property\";\n    DiagnosticCode[DiagnosticCode[\"The_target_of_an_assignment_must_be_a_variable_or_a_property_access\"] = 2541] = \"The_target_of_an_assignment_must_be_a_variable_or_a_property_access\";\n    DiagnosticCode[DiagnosticCode[\"Index_signature_in_type_0_only_permits_reading\"] = 2542] = \"Index_signature_in_type_0_only_permits_reading\";\n    DiagnosticCode[DiagnosticCode[\"Expected_0_arguments_but_got_1\"] = 2554] = \"Expected_0_arguments_but_got_1\";\n    DiagnosticCode[DiagnosticCode[\"Expected_at_least_0_arguments_but_got_1\"] = 2555] = \"Expected_at_least_0_arguments_but_got_1\";\n    DiagnosticCode[DiagnosticCode[\"Expected_0_type_arguments_but_got_1\"] = 2558] = \"Expected_0_type_arguments_but_got_1\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned\"] = 2564] = \"Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_is_used_before_being_assigned\"] = 2565] = \"Property_0_is_used_before_being_assigned\";\n    DiagnosticCode[DiagnosticCode[\"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums\"] = 2651] = \"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration\"] = 2673] = \"Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration\"] = 2674] = \"Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration\";\n    DiagnosticCode[DiagnosticCode[\"The_this_types_of_each_signature_are_incompatible\"] = 2685] = \"The_this_types_of_each_signature_are_incompatible\";\n    DiagnosticCode[DiagnosticCode[\"Namespace_0_has_no_exported_member_1\"] = 2694] = \"Namespace_0_has_no_exported_member_1\";\n    DiagnosticCode[DiagnosticCode[\"Required_type_parameters_may_not_follow_optional_type_parameters\"] = 2706] = \"Required_type_parameters_may_not_follow_optional_type_parameters\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_property_0\"] = 2718] = \"Duplicate_property_0\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_is_missing_in_type_1_but_required_in_type_2\"] = 2741] = \"Property_0_is_missing_in_type_1_but_required_in_type_2\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_has_no_call_signatures\"] = 2757] = \"Type_0_has_no_call_signatures\";\n    DiagnosticCode[DiagnosticCode[\"File_0_not_found\"] = 6054] = \"File_0_not_found\";\n    DiagnosticCode[DiagnosticCode[\"Numeric_separators_are_not_allowed_here\"] = 6188] = \"Numeric_separators_are_not_allowed_here\";\n    DiagnosticCode[DiagnosticCode[\"Multiple_consecutive_numeric_separators_are_not_permitted\"] = 6189] = \"Multiple_consecutive_numeric_separators_are_not_permitted\";\n    DiagnosticCode[DiagnosticCode[\"_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class\"] = 17009] = \"_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class\";\n    DiagnosticCode[DiagnosticCode[\"_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class\"] = 17011] = \"_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class\";\n})(DiagnosticCode = exports.DiagnosticCode || (exports.DiagnosticCode = {}));\n/** Translates a diagnostic code to its respective string. */\nfunction diagnosticCodeToString(code) {\n    switch (code) {\n        case 100: return \"Not implemented: {0}\";\n        case 101: return \"Operation is unsafe.\";\n        case 102: return \"User-defined: {0}\";\n        case 103: return \"Feature '{0}' is not enabled.\";\n        case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n        case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n        case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n        case 107: return \"Shared memory requires maximum memory to be defined.\";\n        case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n        case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n        case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n        case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n        case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n        case 204: return \"Type '{0}' cannot be nullable.\";\n        case 205: return \"Cannot export a mutable global.\";\n        case 206: return \"Mutable value cannot be inlined.\";\n        case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n        case 208: return \"Unmanaged classes cannot implement interfaces.\";\n        case 209: return \"Invalid regular expression flags.\";\n        case 210: return \"Expression is never 'null'.\";\n        case 211: return \"Class '{0}' is final and cannot be extended.\";\n        case 212: return \"Decorator '{0}' is not valid here.\";\n        case 213: return \"Duplicate decorator.\";\n        case 214: return \"Type '{0}' is illegal in this context.\";\n        case 215: return \"Optional parameter must have an initializer.\";\n        case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n        case 217: return \"Function '{0}' cannot be inlined into itself.\";\n        case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n        case 219: return \"Optional properties are not supported.\";\n        case 220: return \"Expression must be a compile-time constant.\";\n        case 221: return \"Type '{0}' is not a function index or function reference.\";\n        case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n        case 223: return \"'{0}' must be a power of two.\";\n        case 224: return \"'{0}' is not a valid operator.\";\n        case 225: return \"Expression cannot be represented by a type.\";\n        case 226: return \"Expression resolves to unusual type '{0}'.\";\n        case 227: return \"Array literal expected.\";\n        case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n        case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n        case 230: return \"'{0}' keyword cannot be used here.\";\n        case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n        case 232: return \"Exported generic function or class has no concrete instances.\";\n        case 233: return \"Property '{0}' is always assigned before being used.\";\n        case 234: return \"Expression refers to a static element that does not compile to a value at runtime.\";\n        case 901: return \"Importing the table disables some indirect call optimizations.\";\n        case 902: return \"Exporting the table disables some indirect call optimizations.\";\n        case 903: return \"Expression compiles to a dynamic check at runtime.\";\n        case 904: return \"Indexed access may involve bounds checking.\";\n        case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n        case 906: return \"Unnecessary definite assignment.\";\n        case 1002: return \"Unterminated string literal.\";\n        case 1003: return \"Identifier expected.\";\n        case 1005: return \"'{0}' expected.\";\n        case 1006: return \"A file cannot have a reference to itself.\";\n        case 1009: return \"Trailing comma not allowed.\";\n        case 1012: return \"Unexpected token.\";\n        case 1014: return \"A rest parameter must be last in a parameter list.\";\n        case 1015: return \"Parameter cannot have question mark and initializer.\";\n        case 1016: return \"A required parameter cannot follow an optional parameter.\";\n        case 1036: return \"Statements are not allowed in ambient contexts.\";\n        case 1039: return \"Initializers are not allowed in ambient contexts.\";\n        case 1042: return \"'{0}' modifier cannot be used here.\";\n        case 1047: return \"A rest parameter cannot be optional.\";\n        case 1048: return \"A rest parameter cannot have an initializer.\";\n        case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n        case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n        case 1054: return \"A 'get' accessor cannot have parameters.\";\n        case 1061: return \"Enum member must have initializer.\";\n        case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n        case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n        case 1094: return \"An accessor cannot have type parameters.\";\n        case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n        case 1098: return \"Type parameter list cannot be empty.\";\n        case 1099: return \"Type argument list cannot be empty.\";\n        case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n        case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n        case 1108: return \"A 'return' statement can only be used within a function body.\";\n        case 1109: return \"Expression expected.\";\n        case 1110: return \"Type expected.\";\n        case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n        case 1114: return \"Duplicate label '{0}'.\";\n        case 1120: return \"An export assignment cannot have modifiers.\";\n        case 1121: return \"Octal literals are not allowed in strict mode.\";\n        case 1124: return \"Digit expected.\";\n        case 1125: return \"Hexadecimal digit expected.\";\n        case 1126: return \"Unexpected end of text.\";\n        case 1127: return \"Invalid character.\";\n        case 1130: return \"'case' or 'default' expected.\";\n        case 1034: return \"'super' must be followed by an argument list or member access.\";\n        case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n        case 1140: return \"Type argument expected.\";\n        case 1141: return \"String literal expected.\";\n        case 1142: return \"Line break not permitted here.\";\n        case 1146: return \"Declaration expected.\";\n        case 1155: return \"'const' declarations must be initialized.\";\n        case 1161: return \"Unterminated regular expression literal.\";\n        case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n        case 1177: return \"Binary digit expected.\";\n        case 1178: return \"Octal digit expected.\";\n        case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n        case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n        case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n        case 1199: return \"Unterminated Unicode escape sequence.\";\n        case 1206: return \"Decorators are not valid here.\";\n        case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n        case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n        case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n        case 1311: return \"A class may only extend another class.\";\n        case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n        case 1351: return \"An identifier or keyword cannot immediately follow a numeric literal.\";\n        case 2300: return \"Duplicate identifier '{0}'.\";\n        case 2304: return \"Cannot find name '{0}'.\";\n        case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n        case 2312: return \"An interface can only extend an interface.\";\n        case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n        case 2315: return \"Type '{0}' is not generic.\";\n        case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n        case 2329: return \"Index signature is missing in type '{0}'.\";\n        case 2332: return \"'this' cannot be referenced in current location.\";\n        case 2335: return \"'super' can only be referenced in a derived class.\";\n        case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n        case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n        case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n        case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n        case 2351: return \"This expression is not constructable.\";\n        case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n        case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n        case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n        case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n        case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n        case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n        case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n        case 2380: return \"'get' and 'set' accessor must have the same type.\";\n        case 2385: return \"Overload signatures must all be public, private or protected.\";\n        case 2390: return \"Constructor implementation is missing.\";\n        case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n        case 2392: return \"Multiple constructor implementations are not allowed.\";\n        case 2393: return \"Duplicate function implementation.\";\n        case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n        case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n        case 2422: return \"A class can only implement an interface.\";\n        case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n        case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n        case 2448: return \"Variable '{0}' used before its declaration.\";\n        case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n        case 2460: return \"Type '{0}' has no property '{1}'.\";\n        case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n        case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n        case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n        case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n        case 2511: return \"Cannot create an instance of an abstract class.\";\n        case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n        case 2531: return \"Object is possibly 'null'.\";\n        case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n        case 2541: return \"The target of an assignment must be a variable or a property access.\";\n        case 2542: return \"Index signature in type '{0}' only permits reading.\";\n        case 2554: return \"Expected {0} arguments, but got {1}.\";\n        case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n        case 2558: return \"Expected {0} type arguments, but got {1}.\";\n        case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n        case 2565: return \"Property '{0}' is used before being assigned.\";\n        case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n        case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n        case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n        case 2685: return \"The 'this' types of each signature are incompatible.\";\n        case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n        case 2706: return \"Required type parameters may not follow optional type parameters.\";\n        case 2718: return \"Duplicate property '{0}'.\";\n        case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n        case 2757: return \"Type '{0}' has no call signatures.\";\n        case 6054: return \"File '{0}' not found.\";\n        case 6188: return \"Numeric separators are not allowed here.\";\n        case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n        case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n        case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n        default: return \"\";\n    }\n}\nexports.diagnosticCodeToString = diagnosticCodeToString;\n\n\n/***/ }),\n\n/***/ 256:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DiagnosticEmitter = exports.formatDiagnosticMessage = exports.DiagnosticMessage = exports.diagnosticCategoryToColor = exports.diagnosticCategoryToString = exports.DiagnosticCategory = exports.diagnosticCodeToString = exports.DiagnosticCode = void 0;\nconst diagnosticMessages_generated_1 = __webpack_require__(252);\nconst util_1 = __webpack_require__(910);\nvar diagnosticMessages_generated_2 = __webpack_require__(252);\nObject.defineProperty(exports, \"DiagnosticCode\", ({ enumerable: true, get: function () { return diagnosticMessages_generated_2.DiagnosticCode; } }));\nObject.defineProperty(exports, \"diagnosticCodeToString\", ({ enumerable: true, get: function () { return diagnosticMessages_generated_2.diagnosticCodeToString; } }));\n/** Indicates the category of a {@link DiagnosticMessage}. */\nvar DiagnosticCategory;\n(function (DiagnosticCategory) {\n    /** Overly pedantic message. */\n    DiagnosticCategory[DiagnosticCategory[\"PEDANTIC\"] = 0] = \"PEDANTIC\";\n    /** Informatory message. */\n    DiagnosticCategory[DiagnosticCategory[\"INFO\"] = 1] = \"INFO\";\n    /** Warning message. */\n    DiagnosticCategory[DiagnosticCategory[\"WARNING\"] = 2] = \"WARNING\";\n    /** Error message. */\n    DiagnosticCategory[DiagnosticCategory[\"ERROR\"] = 3] = \"ERROR\";\n})(DiagnosticCategory = exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));\n/** Returns the string representation of the specified diagnostic category. */\nfunction diagnosticCategoryToString(category) {\n    switch (category) {\n        case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n        case DiagnosticCategory.INFO: return \"INFO\";\n        case DiagnosticCategory.WARNING: return \"WARNING\";\n        case DiagnosticCategory.ERROR: return \"ERROR\";\n        default: {\n            assert(false);\n            return \"\";\n        }\n    }\n}\nexports.diagnosticCategoryToString = diagnosticCategoryToString;\n/** Returns the ANSI escape sequence for the specified category. */\nfunction diagnosticCategoryToColor(category) {\n    switch (category) {\n        case DiagnosticCategory.PEDANTIC: return util_1.COLOR_MAGENTA;\n        case DiagnosticCategory.INFO: return util_1.COLOR_CYAN;\n        case DiagnosticCategory.WARNING: return util_1.COLOR_YELLOW;\n        case DiagnosticCategory.ERROR: return util_1.COLOR_RED;\n        default: {\n            assert(false);\n            return \"\";\n        }\n    }\n}\nexports.diagnosticCategoryToColor = diagnosticCategoryToColor;\n/** Represents a diagnostic message. */\nclass DiagnosticMessage {\n    /** Constructs a new diagnostic message. */\n    constructor(code, category, message) {\n        /** Respective source range, if any. */\n        this.range = null;\n        /** Related range, if any. */\n        this.relatedRange = null; // TODO: Make this a related message for chains?\n        this.code = code;\n        this.category = category;\n        this.message = message;\n    }\n    /** Creates a new diagnostic message of the specified category. */\n    static create(code, category, arg0 = null, arg1 = null, arg2 = null) {\n        var message = diagnosticMessages_generated_1.diagnosticCodeToString(code);\n        if (arg0 !== null)\n            message = message.replace(\"{0}\", arg0);\n        if (arg1 !== null)\n            message = message.replace(\"{1}\", arg1);\n        if (arg2 !== null)\n            message = message.replace(\"{2}\", arg2);\n        return new DiagnosticMessage(code, category, message);\n    }\n    /** Tests if this message equals the specified. */\n    equals(other) {\n        if (this.code != other.code)\n            return false;\n        var thisRange = this.range;\n        var otherRange = other.range;\n        if (thisRange) {\n            if (!otherRange || !thisRange.equals(otherRange))\n                return false;\n        }\n        else if (otherRange) {\n            return false;\n        }\n        var thisRelatedRange = this.relatedRange;\n        var otherRelatedRange = other.relatedRange;\n        if (thisRelatedRange) {\n            if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange))\n                return false;\n        }\n        else if (otherRange) {\n            return false;\n        }\n        return this.message == other.message;\n    }\n    /** Adds a source range to this message. */\n    withRange(range) {\n        this.range = range;\n        return this;\n    }\n    /** Adds a related source range to this message. */\n    withRelatedRange(range) {\n        this.relatedRange = range;\n        return this;\n    }\n    /** Converts this message to a string. */\n    toString() {\n        var range = this.range;\n        if (range) {\n            let source = range.source;\n            return (diagnosticCategoryToString(this.category) +\n                \" \" +\n                this.code.toString() +\n                \": \\\"\" +\n                this.message +\n                \"\\\" in \" +\n                source.normalizedPath +\n                \"(\" +\n                source.lineAt(range.start).toString() +\n                \",\" +\n                source.columnAt().toString() +\n                \"+\" +\n                (range.end - range.start).toString() +\n                \")\");\n        }\n        return (diagnosticCategoryToString(this.category) +\n            \" \" +\n            this.code.toString() +\n            \": \" +\n            this.message);\n    }\n}\nexports.DiagnosticMessage = DiagnosticMessage;\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nfunction formatDiagnosticMessage(message, useColors = false, showContext = false) {\n    var wasColorsEnabled = util_1.setColorsEnabled(useColors);\n    // general information\n    var sb = [];\n    if (util_1.isColorsEnabled())\n        sb.push(diagnosticCategoryToColor(message.category));\n    sb.push(diagnosticCategoryToString(message.category));\n    if (util_1.isColorsEnabled())\n        sb.push(util_1.COLOR_RESET);\n    sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n    sb.push(message.code.toString());\n    sb.push(\": \");\n    sb.push(message.message);\n    // include range information if available\n    var range = message.range;\n    if (range) {\n        let source = range.source;\n        // include context information if requested\n        if (showContext) {\n            sb.push(\"\\n\");\n            sb.push(formatDiagnosticContext(range));\n        }\n        sb.push(\"\\n\");\n        sb.push(\" in \");\n        sb.push(source.normalizedPath);\n        sb.push(\"(\");\n        sb.push(source.lineAt(range.start).toString());\n        sb.push(\",\");\n        sb.push(source.columnAt().toString());\n        sb.push(\")\");\n        let relatedRange = message.relatedRange;\n        if (relatedRange) {\n            let relatedSource = relatedRange.source;\n            if (showContext) {\n                sb.push(\"\\n\");\n                sb.push(formatDiagnosticContext(relatedRange));\n            }\n            sb.push(\"\\n\");\n            sb.push(\" in \");\n            sb.push(relatedSource.normalizedPath);\n            sb.push(\"(\");\n            sb.push(relatedSource.lineAt(relatedRange.start).toString());\n            sb.push(\",\");\n            sb.push(relatedSource.columnAt().toString());\n            sb.push(\")\");\n        }\n    }\n    util_1.setColorsEnabled(wasColorsEnabled);\n    return sb.join(\"\");\n}\nexports.formatDiagnosticMessage = formatDiagnosticMessage;\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range) {\n    var text = range.source.text;\n    var len = text.length;\n    var start = range.start;\n    var end = range.end;\n    while (start > 0 && !util_1.isLineBreak(text.charCodeAt(start - 1)))\n        start--;\n    while (end < len && !util_1.isLineBreak(text.charCodeAt(end)))\n        end++;\n    var sb = [\n        \"\\n \",\n        text.substring(start, end),\n        \"\\n \"\n    ];\n    while (start < range.start) {\n        sb.push(\" \");\n        start++;\n    }\n    if (util_1.isColorsEnabled())\n        sb.push(util_1.COLOR_RED);\n    if (range.start == range.end) {\n        sb.push(\"^\");\n    }\n    else {\n        while (start++ < range.end) {\n            if (util_1.isLineBreak(text.charCodeAt(start))) {\n                sb.push(start == range.start + 1 ? \"^\" : \"~\");\n                break;\n            }\n            sb.push(\"~\");\n        }\n    }\n    if (util_1.isColorsEnabled())\n        sb.push(util_1.COLOR_RESET);\n    return sb.join(\"\");\n}\n/** Base class of all diagnostic emitters. */\nclass DiagnosticEmitter {\n    /** Initializes this diagnostic emitter. */\n    constructor(diagnostics = null) {\n        /** Diagnostic messages already seen, by range. */\n        this.seen = new Map();\n        if (!diagnostics)\n            diagnostics = [];\n        this.diagnostics = diagnostics;\n    }\n    /** Emits a diagnostic message of the specified category. */\n    emitDiagnostic(code, category, range, relatedRange, arg0 = null, arg1 = null, arg2 = null) {\n        var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n        if (range)\n            message = message.withRange(range);\n        if (relatedRange)\n            message.relatedRange = relatedRange;\n        // It is possible that the same diagnostic is emitted twice, for example\n        // when compiling generics with different types or when recompiling a loop\n        // because our initial assumptions didn't hold. It is even possible to get\n        // multiple instances of the same range during parsing. Deduplicate these.\n        if (range) {\n            let seen = this.seen;\n            if (seen.has(range.source)) {\n                let seenInSource = assert(seen.get(range.source));\n                if (seenInSource.has(range.start)) {\n                    let seenMessagesAtPos = assert(seenInSource.get(range.start));\n                    for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n                        if (seenMessagesAtPos[i].equals(message))\n                            return;\n                    }\n                    seenMessagesAtPos.push(message);\n                }\n                else {\n                    seenInSource.set(range.start, [message]);\n                }\n            }\n            else {\n                let seenInSource = new Map();\n                seenInSource.set(range.start, [message]);\n                seen.set(range.source, seenInSource);\n            }\n        }\n        this.diagnostics.push(message);\n        // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n        // console.log(<string>new Error(\"stack\").stack);\n    }\n    /** Emits an overly pedantic diagnostic message. */\n    pedantic(code, range, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n    }\n    /** Emits an overly pedantic diagnostic message with a related range. */\n    pedanticRelated(code, range, relatedRange, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n    }\n    /** Emits an informatory diagnostic message. */\n    info(code, range, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n    }\n    /** Emits an informatory diagnostic message with a related range. */\n    infoRelated(code, range, relatedRange, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n    }\n    /** Emits a warning diagnostic message. */\n    warning(code, range, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n    }\n    /** Emits a warning diagnostic message with a related range. */\n    warningRelated(code, range, relatedRange, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n    }\n    /** Emits an error diagnostic message. */\n    error(code, range, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n    }\n    /** Emits an error diagnostic message with a related range. */\n    errorRelated(code, range, relatedRange, arg0 = null, arg1 = null, arg2 = null) {\n        this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n    }\n}\nexports.DiagnosticEmitter = DiagnosticEmitter;\n\n\n/***/ }),\n\n/***/ 393:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ASTBuilder = void 0;\nconst ast_1 = __webpack_require__(60);\nconst tokenizer_1 = __webpack_require__(411);\nconst util_1 = __webpack_require__(910);\nconst common_1 = __webpack_require__(200);\n/** An AST builder. */\nclass ASTBuilder {\n    constructor() {\n        this.sb = [];\n        this.indentLevel = 0;\n    }\n    /** Rebuilds the textual source from the specified AST, as far as possible. */\n    static build(node) {\n        var builder = new ASTBuilder();\n        builder.visitNode(node);\n        return builder.finish();\n    }\n    visitNode(node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.SOURCE: {\n                this.visitSource(node);\n                break;\n            }\n            // types\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEPARAMETER: {\n                this.visitTypeParameter(node);\n                break;\n            }\n            // expressions\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.SUPER:\n            case ast_1.NodeKind.THIS:\n            case ast_1.NodeKind.TRUE:\n            case ast_1.NodeKind.CONSTRUCTOR:\n            case ast_1.NodeKind.IDENTIFIER: {\n                this.visitIdentifierExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ASSERTION: {\n                this.visitAssertionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.BINARY: {\n                this.visitBinaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CALL: {\n                this.visitCallExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CLASS: {\n                this.visitClassExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.COMMA: {\n                this.visitCommaExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                this.visitElementAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                this.visitFunctionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                this.visitInstanceOfExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.LITERAL: {\n                this.visitLiteralExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.NEW: {\n                this.visitNewExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PARENTHESIZED: {\n                this.visitParenthesizedExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                this.visitPropertyAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.TERNARY: {\n                this.visitTernaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            // statements\n            case ast_1.NodeKind.BLOCK: {\n                this.visitBlockStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.BREAK: {\n                this.visitBreakStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.CONTINUE: {\n                this.visitContinueStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.DO: {\n                this.visitDoStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EMPTY: {\n                this.visitEmptyStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORT: {\n                this.visitExportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTDEFAULT: {\n                this.visitExportDefaultStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTIMPORT: {\n                this.visitExportImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPRESSION: {\n                this.visitExpressionStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.FOR: {\n                this.visitForStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.FOROF: {\n                this.visitForOfStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IF: {\n                this.visitIfStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORT: {\n                this.visitImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.RETURN: {\n                this.visitReturnStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCH: {\n                this.visitSwitchStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.THROW: {\n                this.visitThrowStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.TRY: {\n                this.visitTryStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLE: {\n                this.visitVariableStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.WHILE: {\n                this.visitWhileStatement(node);\n                break;\n            }\n            // declaration statements\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMVALUEDECLARATION: {\n                this.visitEnumValueDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FIELDDECLARATION: {\n                this.visitFieldDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORTDECLARATION: {\n                this.visitImportDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.METHODDECLARATION: {\n                this.visitMethodDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEDECLARATION: {\n                this.visitTypeDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLEDECLARATION: {\n                this.visitVariableDeclaration(node);\n                break;\n            }\n            // other\n            case ast_1.NodeKind.DECORATOR: {\n                this.serializeDecorator(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTMEMBER: {\n                this.visitExportMember(node);\n                break;\n            }\n            case ast_1.NodeKind.PARAMETER: {\n                this.serializeParameter(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCHCASE: {\n                this.visitSwitchCase(node);\n                break;\n            }\n            case ast_1.NodeKind.INDEXSIGNATURE: {\n                this.visitIndexSignature(node);\n                break;\n            }\n            default: assert(false);\n        }\n    }\n    visitSource(source) {\n        var statements = source.statements;\n        for (let i = 0, k = statements.length; i < k; ++i) {\n            this.visitNodeAndTerminate(statements[i]);\n        }\n    }\n    // types\n    visitTypeNode(node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            default: assert(false);\n        }\n    }\n    visitTypeName(node) {\n        this.visitIdentifierExpression(node.identifier);\n        var sb = this.sb;\n        var current = node.next;\n        while (current) {\n            sb.push(\".\");\n            this.visitIdentifierExpression(current.identifier);\n            current = current.next;\n        }\n    }\n    visitNamedTypeNode(node) {\n        this.visitTypeName(node.name);\n        var typeArguments = node.typeArguments;\n        if (typeArguments) {\n            let numTypeArguments = typeArguments.length;\n            let sb = this.sb;\n            if (numTypeArguments) {\n                sb.push(\"<\");\n                this.visitTypeNode(typeArguments[0]);\n                for (let i = 1; i < numTypeArguments; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(typeArguments[i]);\n                }\n                sb.push(\">\");\n            }\n            if (node.isNullable)\n                sb.push(\" | null\");\n        }\n    }\n    visitFunctionTypeNode(node) {\n        var isNullable = node.isNullable;\n        var sb = this.sb;\n        sb.push(isNullable ? \"((\" : \"(\");\n        var explicitThisType = node.explicitThisType;\n        if (explicitThisType) {\n            sb.push(\"this: \");\n            this.visitTypeNode(explicitThisType);\n        }\n        var parameters = node.parameters;\n        var numParameters = parameters.length;\n        if (numParameters) {\n            if (explicitThisType)\n                sb.push(\", \");\n            this.serializeParameter(parameters[0]);\n            for (let i = 1; i < numParameters; ++i) {\n                sb.push(\", \");\n                this.serializeParameter(parameters[i]);\n            }\n        }\n        var returnType = node.returnType;\n        if (returnType) {\n            sb.push(\") => \");\n            this.visitTypeNode(returnType);\n        }\n        else {\n            sb.push(\") => void\");\n        }\n        if (isNullable)\n            sb.push(\") | null\");\n    }\n    visitTypeParameter(node) {\n        this.visitIdentifierExpression(node.name);\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            this.sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        var defaultType = node.defaultType;\n        if (defaultType) {\n            this.sb.push(\"=\");\n            this.visitTypeNode(defaultType);\n        }\n    }\n    // expressions\n    visitIdentifierExpression(node) {\n        if (node.isQuoted)\n            this.visitStringLiteral(node.text);\n        else\n            this.sb.push(node.text);\n    }\n    visitArrayLiteralExpression(node) {\n        var sb = this.sb;\n        sb.push(\"[\");\n        var elements = node.elementExpressions;\n        var numElements = elements.length;\n        if (numElements) {\n            let element = elements[0];\n            if (element)\n                this.visitNode(element);\n            for (let i = 1; i < numElements; ++i) {\n                element = elements[i];\n                sb.push(\", \");\n                if (element)\n                    this.visitNode(element);\n            }\n        }\n        sb.push(\"]\");\n    }\n    visitObjectLiteralExpression(node) {\n        var sb = this.sb;\n        var names = node.names;\n        var values = node.values;\n        var numElements = names.length;\n        assert(numElements == values.length);\n        if (numElements) {\n            sb.push(\"{\\n\");\n            util_1.indent(sb, ++this.indentLevel);\n            this.visitNode(names[0]);\n            sb.push(\": \");\n            this.visitNode(values[0]);\n            for (let i = 1; i < numElements; ++i) {\n                sb.push(\",\\n\");\n                util_1.indent(sb, this.indentLevel);\n                let name = names[i];\n                let value = values[i];\n                if (name === value) {\n                    this.visitNode(name);\n                }\n                else {\n                    this.visitNode(name);\n                    sb.push(\": \");\n                    this.visitNode(value);\n                }\n            }\n            sb.push(\"\\n\");\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\"{}\");\n        }\n    }\n    visitAssertionExpression(node) {\n        var sb = this.sb;\n        switch (node.assertionKind) {\n            case ast_1.AssertionKind.PREFIX: {\n                sb.push(\"<\");\n                this.visitTypeNode(assert(node.toType));\n                sb.push(\">\");\n                this.visitNode(node.expression);\n                break;\n            }\n            case ast_1.AssertionKind.AS: {\n                this.visitNode(node.expression);\n                sb.push(\" as \");\n                this.visitTypeNode(assert(node.toType));\n                break;\n            }\n            case ast_1.AssertionKind.NONNULL: {\n                this.visitNode(node.expression);\n                sb.push(\"!\");\n                break;\n            }\n            case ast_1.AssertionKind.CONST: {\n                this.visitNode(node.expression);\n                sb.push(\" as const\");\n                break;\n            }\n            default: assert(false);\n        }\n    }\n    visitBinaryExpression(node) {\n        var sb = this.sb;\n        this.visitNode(node.left);\n        sb.push(\" \");\n        sb.push(tokenizer_1.operatorTokenToString(node.operator));\n        sb.push(\" \");\n        this.visitNode(node.right);\n    }\n    visitCallExpression(node) {\n        this.visitNode(node.expression);\n        this.visitArguments(node.typeArguments, node.args);\n    }\n    visitArguments(typeArguments, args) {\n        var sb = this.sb;\n        if (typeArguments) {\n            let numTypeArguments = typeArguments.length;\n            if (numTypeArguments) {\n                sb.push(\"<\");\n                this.visitTypeNode(typeArguments[0]);\n                for (let i = 1; i < numTypeArguments; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(typeArguments[i]);\n                }\n                sb.push(\">(\");\n            }\n        }\n        else {\n            sb.push(\"(\");\n        }\n        var numArgs = args.length;\n        if (numArgs) {\n            this.visitNode(args[0]);\n            for (let i = 1; i < numArgs; ++i) {\n                sb.push(\", \");\n                this.visitNode(args[i]);\n            }\n        }\n        sb.push(\")\");\n    }\n    visitClassExpression(node) {\n        var declaration = node.declaration;\n        this.visitClassDeclaration(declaration);\n    }\n    visitCommaExpression(node) {\n        var expressions = node.expressions;\n        var numExpressions = assert(expressions.length);\n        this.visitNode(expressions[0]);\n        var sb = this.sb;\n        for (let i = 1; i < numExpressions; ++i) {\n            sb.push(\",\");\n            this.visitNode(expressions[i]);\n        }\n    }\n    visitElementAccessExpression(node) {\n        var sb = this.sb;\n        this.visitNode(node.expression);\n        sb.push(\"[\");\n        this.visitNode(node.elementExpression);\n        sb.push(\"]\");\n    }\n    visitFunctionExpression(node) {\n        var declaration = node.declaration;\n        if (!declaration.arrowKind) {\n            if (declaration.name.text.length) {\n                this.sb.push(\"function \");\n            }\n            else {\n                this.sb.push(\"function\");\n            }\n        }\n        else {\n            assert(declaration.name.text.length == 0);\n        }\n        this.visitFunctionCommon(declaration);\n    }\n    visitLiteralExpression(node) {\n        switch (node.literalKind) {\n            case ast_1.LiteralKind.FLOAT: {\n                this.visitFloatLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.INTEGER: {\n                this.visitIntegerLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.STRING: {\n                this.visitStringLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.REGEXP: {\n                this.visitRegexpLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.ARRAY: {\n                this.visitArrayLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.OBJECT: {\n                this.visitObjectLiteralExpression(node);\n                break;\n            }\n            default: {\n                assert(false);\n                break;\n            }\n        }\n    }\n    visitFloatLiteralExpression(node) {\n        this.sb.push(node.value.toString());\n    }\n    visitInstanceOfExpression(node) {\n        this.visitNode(node.expression);\n        this.sb.push(\" instanceof \");\n        this.visitTypeNode(node.isType);\n    }\n    visitIntegerLiteralExpression(node) {\n        this.sb.push(i64_to_string(node.value));\n    }\n    visitStringLiteral(str, singleQuoted = false) {\n        var sb = this.sb;\n        var off = 0;\n        var quote = singleQuoted ? \"'\" : \"\\\"\";\n        sb.push(quote);\n        var i = 0;\n        for (let k = str.length; i < k;) {\n            switch (str.charCodeAt(i)) {\n                case 0 /* NULL */: {\n                    if (i > off)\n                        sb.push(str.substring(off, off = i + 1));\n                    sb.push(\"\\\\0\");\n                    off = ++i;\n                    break;\n                }\n                case 8 /* BACKSPACE */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\b\");\n                    break;\n                }\n                case 9 /* TAB */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\t\");\n                    break;\n                }\n                case 10 /* LINEFEED */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\n\");\n                    break;\n                }\n                case 11 /* VERTICALTAB */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\v\");\n                    break;\n                }\n                case 12 /* FORMFEED */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\f\");\n                    break;\n                }\n                case 13 /* CARRIAGERETURN */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    sb.push(\"\\\\r\");\n                    off = ++i;\n                    break;\n                }\n                case 34 /* DOUBLEQUOTE */: {\n                    if (!singleQuoted) {\n                        if (i > off)\n                            sb.push(str.substring(off, i));\n                        sb.push(\"\\\\\\\"\");\n                        off = ++i;\n                    }\n                    else {\n                        ++i;\n                    }\n                    break;\n                }\n                case 39 /* SINGLEQUOTE */: {\n                    if (singleQuoted) {\n                        if (i > off)\n                            sb.push(str.substring(off, i));\n                        sb.push(\"\\\\'\");\n                        off = ++i;\n                    }\n                    else {\n                        ++i;\n                    }\n                    break;\n                }\n                case 92 /* BACKSLASH */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    sb.push(\"\\\\\\\\\");\n                    off = ++i;\n                    break;\n                }\n                default: {\n                    ++i;\n                    break;\n                }\n            }\n        }\n        if (i > off)\n            sb.push(str.substring(off, i));\n        sb.push(quote);\n    }\n    visitStringLiteralExpression(node) {\n        this.visitStringLiteral(node.value);\n    }\n    visitRegexpLiteralExpression(node) {\n        var sb = this.sb;\n        sb.push(\"/\");\n        sb.push(node.pattern);\n        sb.push(\"/\");\n        sb.push(node.patternFlags);\n    }\n    visitNewExpression(node) {\n        this.sb.push(\"new \");\n        this.visitTypeName(node.typeName);\n        this.visitArguments(node.typeArguments, node.args);\n    }\n    visitParenthesizedExpression(node) {\n        var sb = this.sb;\n        sb.push(\"(\");\n        this.visitNode(node.expression);\n        sb.push(\")\");\n    }\n    visitPropertyAccessExpression(node) {\n        this.visitNode(node.expression);\n        this.sb.push(\".\");\n        this.visitIdentifierExpression(node.property);\n    }\n    visitTernaryExpression(node) {\n        var sb = this.sb;\n        this.visitNode(node.condition);\n        sb.push(\" ? \");\n        this.visitNode(node.ifThen);\n        sb.push(\" : \");\n        this.visitNode(node.ifElse);\n    }\n    visitUnaryExpression(node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            default: assert(false);\n        }\n    }\n    visitUnaryPostfixExpression(node) {\n        this.visitNode(node.operand);\n        this.sb.push(tokenizer_1.operatorTokenToString(node.operator));\n    }\n    visitUnaryPrefixExpression(node) {\n        this.sb.push(tokenizer_1.operatorTokenToString(node.operator));\n        this.visitNode(node.operand);\n    }\n    // statements\n    visitNodeAndTerminate(node) {\n        this.visitNode(node);\n        var sb = this.sb;\n        if (!sb.length || // leading EmptyStatement\n            node.kind == ast_1.NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n            node.kind == ast_1.NodeKind.EXPRESSION // potentially assigns a FunctionExpression\n        ) {\n            sb.push(\";\\n\");\n        }\n        else {\n            let last = sb[sb.length - 1];\n            let lastCharPos = last.length - 1;\n            if (lastCharPos >= 0 && (last.charCodeAt(lastCharPos) == 125 /* CLOSEBRACE */ ||\n                last.charCodeAt(lastCharPos) == 59 /* SEMICOLON */)) {\n                sb.push(\"\\n\");\n            }\n            else {\n                sb.push(\";\\n\");\n            }\n        }\n    }\n    visitBlockStatement(node) {\n        var sb = this.sb;\n        var statements = node.statements;\n        var numStatements = statements.length;\n        if (numStatements) {\n            sb.push(\"{\\n\");\n            let indentLevel = ++this.indentLevel;\n            for (let i = 0; i < numStatements; ++i) {\n                util_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(statements[i]);\n            }\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\"{}\");\n        }\n    }\n    visitBreakStatement(node) {\n        var label = node.label;\n        if (label) {\n            this.sb.push(\"break \");\n            this.visitIdentifierExpression(label);\n        }\n        else {\n            this.sb.push(\"break\");\n        }\n    }\n    visitContinueStatement(node) {\n        var label = node.label;\n        if (label) {\n            this.sb.push(\"continue \");\n            this.visitIdentifierExpression(label);\n        }\n        else {\n            this.sb.push(\"continue\");\n        }\n    }\n    visitClassDeclaration(node, isDefault = false) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        if (node.is(common_1.CommonFlags.ABSTRACT))\n            sb.push(\"abstract \");\n        if (node.name.text.length) {\n            sb.push(\"class \");\n            this.visitIdentifierExpression(node.name);\n        }\n        else {\n            sb.push(\"class\");\n        }\n        var typeParameters = node.typeParameters;\n        if (typeParameters != null && typeParameters.length > 0) {\n            sb.push(\"<\");\n            this.visitTypeParameter(typeParameters[0]);\n            for (let i = 1, k = typeParameters.length; i < k; ++i) {\n                sb.push(\", \");\n                this.visitTypeParameter(typeParameters[i]);\n            }\n            sb.push(\">\");\n        }\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        var implementsTypes = node.implementsTypes;\n        if (implementsTypes) {\n            let numImplementsTypes = implementsTypes.length;\n            if (numImplementsTypes) {\n                sb.push(\" implements \");\n                this.visitTypeNode(implementsTypes[0]);\n                for (let i = 1; i < numImplementsTypes; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(implementsTypes[i]);\n                }\n            }\n        }\n        var indexSignature = node.indexSignature;\n        var members = node.members;\n        var numMembers = members.length;\n        if (indexSignature !== null || numMembers) {\n            sb.push(\" {\\n\");\n            let indentLevel = ++this.indentLevel;\n            if (indexSignature) {\n                util_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(indexSignature);\n            }\n            for (let i = 0, k = members.length; i < k; ++i) {\n                let member = members[i];\n                if (member.kind != ast_1.NodeKind.FIELDDECLARATION || member.parameterIndex < 0) {\n                    util_1.indent(sb, indentLevel);\n                    this.visitNodeAndTerminate(member);\n                }\n            }\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    }\n    visitDoStatement(node) {\n        var sb = this.sb;\n        sb.push(\"do \");\n        this.visitNode(node.statement);\n        if (node.statement.kind == ast_1.NodeKind.BLOCK) {\n            sb.push(\" while (\");\n        }\n        else {\n            sb.push(\";\\n\");\n            util_1.indent(sb, this.indentLevel);\n            sb.push(\"while (\");\n        }\n        this.visitNode(node.condition);\n        sb.push(\")\");\n    }\n    visitEmptyStatement(node) {\n        /* nop */\n    }\n    visitEnumDeclaration(node, isDefault = false) {\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        if (node.is(common_1.CommonFlags.CONST))\n            sb.push(\"const \");\n        sb.push(\"enum \");\n        this.visitIdentifierExpression(node.name);\n        var values = node.values;\n        var numValues = values.length;\n        if (numValues) {\n            sb.push(\" {\\n\");\n            let indentLevel = ++this.indentLevel;\n            util_1.indent(sb, indentLevel);\n            this.visitEnumValueDeclaration(node.values[0]);\n            for (let i = 1; i < numValues; ++i) {\n                sb.push(\",\\n\");\n                util_1.indent(sb, indentLevel);\n                this.visitEnumValueDeclaration(node.values[i]);\n            }\n            sb.push(\"\\n\");\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    }\n    visitEnumValueDeclaration(node) {\n        this.visitIdentifierExpression(node.name);\n        var initializer = node.initializer;\n        if (initializer) {\n            this.sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    }\n    visitExportImportStatement(node) {\n        var sb = this.sb;\n        sb.push(\"export import \");\n        this.visitIdentifierExpression(node.externalName);\n        sb.push(\" = \");\n        this.visitIdentifierExpression(node.name);\n    }\n    visitExportMember(node) {\n        this.visitIdentifierExpression(node.localName);\n        if (node.exportedName.text != node.localName.text) {\n            this.sb.push(\" as \");\n            this.visitIdentifierExpression(node.exportedName);\n        }\n    }\n    visitExportStatement(node) {\n        var sb = this.sb;\n        if (node.isDeclare) {\n            sb.push(\"declare \");\n        }\n        var members = node.members;\n        if (members != null && members.length > 0) {\n            let numMembers = members.length;\n            sb.push(\"export {\\n\");\n            let indentLevel = ++this.indentLevel;\n            util_1.indent(sb, indentLevel);\n            this.visitExportMember(members[0]);\n            for (let i = 1; i < numMembers; ++i) {\n                sb.push(\",\\n\");\n                util_1.indent(sb, indentLevel);\n                this.visitExportMember(members[i]);\n            }\n            --this.indentLevel;\n            sb.push(\"\\n}\");\n        }\n        else {\n            sb.push(\"export {}\");\n        }\n        var path = node.path;\n        if (path) {\n            sb.push(\" from \");\n            this.visitStringLiteralExpression(path);\n        }\n        sb.push(\";\");\n    }\n    visitExportDefaultStatement(node) {\n        var declaration = node.declaration;\n        switch (declaration.kind) {\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(declaration, true);\n                break;\n            }\n            default: assert(false);\n        }\n    }\n    visitExpressionStatement(node) {\n        this.visitNode(node.expression);\n    }\n    visitFieldDeclaration(node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        this.serializeAccessModifiers(node);\n        this.visitIdentifierExpression(node.name);\n        var sb = this.sb;\n        if (node.flags & common_1.CommonFlags.DEFINITELY_ASSIGNED) {\n            sb.push(\"!\");\n        }\n        var type = node.type;\n        if (type) {\n            sb.push(\": \");\n            this.visitTypeNode(type);\n        }\n        var initializer = node.initializer;\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    }\n    visitForStatement(node) {\n        var sb = this.sb;\n        sb.push(\"for (\");\n        var initializer = node.initializer;\n        if (initializer) {\n            this.visitNode(initializer);\n        }\n        var condition = node.condition;\n        if (condition) {\n            sb.push(\"; \");\n            this.visitNode(condition);\n        }\n        else {\n            sb.push(\";\");\n        }\n        var incrementor = node.incrementor;\n        if (incrementor) {\n            sb.push(\"; \");\n            this.visitNode(incrementor);\n        }\n        else {\n            sb.push(\";\");\n        }\n        sb.push(\") \");\n        this.visitNode(node.statement);\n    }\n    visitForOfStatement(node) {\n        var sb = this.sb;\n        sb.push(\"for (\");\n        this.visitNode(node.variable);\n        sb.push(\" of \");\n        this.visitNode(node.iterable);\n        sb.push(\") \");\n        this.visitNode(node.statement);\n    }\n    visitFunctionDeclaration(node, isDefault = false) {\n        var sb = this.sb;\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n            this.serializeAccessModifiers(node);\n        }\n        if (node.name.text.length) {\n            sb.push(\"function \");\n        }\n        else {\n            sb.push(\"function\");\n        }\n        this.visitFunctionCommon(node);\n    }\n    visitFunctionCommon(node) {\n        var sb = this.sb;\n        this.visitIdentifierExpression(node.name);\n        var signature = node.signature;\n        var typeParameters = node.typeParameters;\n        if (typeParameters) {\n            let numTypeParameters = typeParameters.length;\n            if (numTypeParameters) {\n                sb.push(\"<\");\n                this.visitTypeParameter(typeParameters[0]);\n                for (let i = 1; i < numTypeParameters; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeParameter(typeParameters[i]);\n                }\n                sb.push(\">\");\n            }\n        }\n        if (node.arrowKind == 2 /* ARROW_SINGLE */) {\n            let parameters = signature.parameters;\n            assert(parameters.length == 1);\n            assert(!signature.explicitThisType);\n            this.serializeParameter(parameters[0]);\n        }\n        else {\n            sb.push(\"(\");\n            let parameters = signature.parameters;\n            let numParameters = parameters.length;\n            let explicitThisType = signature.explicitThisType;\n            if (explicitThisType) {\n                sb.push(\"this: \");\n                this.visitTypeNode(explicitThisType);\n            }\n            if (numParameters) {\n                if (explicitThisType)\n                    sb.push(\", \");\n                this.serializeParameter(parameters[0]);\n                for (let i = 1; i < numParameters; ++i) {\n                    sb.push(\", \");\n                    this.serializeParameter(parameters[i]);\n                }\n            }\n        }\n        var body = node.body;\n        var returnType = signature.returnType;\n        if (node.arrowKind) {\n            if (body) {\n                if (node.arrowKind == 2 /* ARROW_SINGLE */) {\n                    assert(ast_1.isTypeOmitted(returnType));\n                }\n                else {\n                    if (ast_1.isTypeOmitted(returnType)) {\n                        sb.push(\")\");\n                    }\n                    else {\n                        sb.push(\"): \");\n                        this.visitTypeNode(returnType);\n                    }\n                }\n                sb.push(\" => \");\n                this.visitNode(body);\n            }\n            else {\n                assert(!ast_1.isTypeOmitted(returnType));\n                sb.push(\" => \");\n                this.visitTypeNode(returnType);\n            }\n        }\n        else {\n            if (!ast_1.isTypeOmitted(returnType) &&\n                !node.isAny(common_1.CommonFlags.CONSTRUCTOR | common_1.CommonFlags.SET)) {\n                sb.push(\"): \");\n                this.visitTypeNode(returnType);\n            }\n            else {\n                sb.push(\")\");\n            }\n            if (body) {\n                sb.push(\" \");\n                this.visitNode(body);\n            }\n        }\n    }\n    visitIfStatement(node) {\n        var sb = this.sb;\n        sb.push(\"if (\");\n        this.visitNode(node.condition);\n        sb.push(\") \");\n        var ifTrue = node.ifTrue;\n        this.visitNode(ifTrue);\n        if (ifTrue.kind != ast_1.NodeKind.BLOCK) {\n            sb.push(\";\\n\");\n        }\n        var ifFalse = node.ifFalse;\n        if (ifFalse) {\n            if (ifTrue.kind == ast_1.NodeKind.BLOCK) {\n                sb.push(\" else \");\n            }\n            else {\n                sb.push(\"else \");\n            }\n            this.visitNode(ifFalse);\n        }\n    }\n    visitImportDeclaration(node) {\n        var externalName = node.foreignName;\n        var name = node.name;\n        this.visitIdentifierExpression(externalName);\n        if (externalName.text != name.text) {\n            this.sb.push(\" as \");\n            this.visitIdentifierExpression(name);\n        }\n    }\n    visitImportStatement(node) {\n        var sb = this.sb;\n        sb.push(\"import \");\n        var declarations = node.declarations;\n        var namespaceName = node.namespaceName;\n        if (declarations) {\n            let numDeclarations = declarations.length;\n            if (numDeclarations) {\n                sb.push(\"{\\n\");\n                let indentLevel = ++this.indentLevel;\n                util_1.indent(sb, indentLevel);\n                this.visitImportDeclaration(declarations[0]);\n                for (let i = 1; i < numDeclarations; ++i) {\n                    sb.push(\",\\n\");\n                    util_1.indent(sb, indentLevel);\n                    this.visitImportDeclaration(declarations[i]);\n                }\n                --this.indentLevel;\n                sb.push(\"\\n} from \");\n            }\n            else {\n                sb.push(\"{} from \");\n            }\n        }\n        else if (namespaceName) {\n            sb.push(\"* as \");\n            this.visitIdentifierExpression(namespaceName);\n            sb.push(\" from \");\n        }\n        this.visitStringLiteralExpression(node.path);\n    }\n    visitIndexSignature(node) {\n        var sb = this.sb;\n        sb.push(\"[key: \");\n        this.visitTypeNode(node.keyType);\n        sb.push(\"]: \");\n        this.visitTypeNode(node.valueType);\n    }\n    visitInterfaceDeclaration(node, isDefault = false) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        sb.push(\"interface \");\n        this.visitIdentifierExpression(node.name);\n        var typeParameters = node.typeParameters;\n        if (typeParameters != null && typeParameters.length > 0) {\n            sb.push(\"<\");\n            this.visitTypeParameter(typeParameters[0]);\n            for (let i = 1, k = typeParameters.length; i < k; ++i) {\n                sb.push(\", \");\n                this.visitTypeParameter(typeParameters[i]);\n            }\n            sb.push(\">\");\n        }\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        // must not have implementsTypes\n        sb.push(\" {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var members = node.members;\n        for (let i = 0, k = members.length; i < k; ++i) {\n            util_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(members[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"}\");\n    }\n    visitMethodDeclaration(node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        this.serializeAccessModifiers(node);\n        if (node.is(common_1.CommonFlags.GET)) {\n            this.sb.push(\"get \");\n        }\n        else if (node.is(common_1.CommonFlags.SET)) {\n            this.sb.push(\"set \");\n        }\n        this.visitFunctionCommon(node);\n    }\n    visitNamespaceDeclaration(node, isDefault = false) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        sb.push(\"namespace \");\n        this.visitIdentifierExpression(node.name);\n        var members = node.members;\n        var numMembers = members.length;\n        if (numMembers) {\n            sb.push(\" {\\n\");\n            let indentLevel = ++this.indentLevel;\n            for (let i = 0, k = members.length; i < k; ++i) {\n                util_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(members[i]);\n            }\n            util_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    }\n    visitReturnStatement(node) {\n        var value = node.value;\n        if (value) {\n            this.sb.push(\"return \");\n            this.visitNode(value);\n        }\n        else {\n            this.sb.push(\"return\");\n        }\n    }\n    visitSwitchCase(node) {\n        var sb = this.sb;\n        var label = node.label;\n        if (label) {\n            sb.push(\"case \");\n            this.visitNode(label);\n            sb.push(\":\\n\");\n        }\n        else {\n            sb.push(\"default:\\n\");\n        }\n        var statements = node.statements;\n        var numStatements = statements.length;\n        if (numStatements) {\n            let indentLevel = ++this.indentLevel;\n            util_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(statements[0]);\n            for (let i = 1; i < numStatements; ++i) {\n                util_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(statements[i]);\n            }\n            --this.indentLevel;\n        }\n    }\n    visitSwitchStatement(node) {\n        var sb = this.sb;\n        sb.push(\"switch (\");\n        this.visitNode(node.condition);\n        sb.push(\") {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var cases = node.cases;\n        for (let i = 0, k = cases.length; i < k; ++i) {\n            util_1.indent(sb, indentLevel);\n            this.visitSwitchCase(cases[i]);\n            sb.push(\"\\n\");\n        }\n        --this.indentLevel;\n        sb.push(\"}\");\n    }\n    visitThrowStatement(node) {\n        this.sb.push(\"throw \");\n        this.visitNode(node.value);\n    }\n    visitTryStatement(node) {\n        var sb = this.sb;\n        sb.push(\"try {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var statements = node.statements;\n        for (let i = 0, k = statements.length; i < k; ++i) {\n            util_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(statements[i]);\n        }\n        var catchVariable = node.catchVariable;\n        if (catchVariable) {\n            util_1.indent(sb, indentLevel - 1);\n            sb.push(\"} catch (\");\n            this.visitIdentifierExpression(catchVariable);\n            sb.push(\") {\\n\");\n            let catchStatements = node.catchStatements;\n            if (catchStatements) {\n                for (let i = 0, k = catchStatements.length; i < k; ++i) {\n                    util_1.indent(sb, indentLevel);\n                    this.visitNodeAndTerminate(catchStatements[i]);\n                }\n            }\n        }\n        var finallyStatements = node.finallyStatements;\n        if (finallyStatements) {\n            util_1.indent(sb, indentLevel - 1);\n            sb.push(\"} finally {\\n\");\n            for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n                util_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(finallyStatements[i]);\n            }\n        }\n        util_1.indent(sb, indentLevel - 1);\n        sb.push(\"}\");\n    }\n    visitTypeDeclaration(node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        this.serializeExternalModifiers(node);\n        sb.push(\"type \");\n        this.visitIdentifierExpression(node.name);\n        var typeParameters = node.typeParameters;\n        if (typeParameters) {\n            let numTypeParameters = typeParameters.length;\n            if (numTypeParameters) {\n                sb.push(\"<\");\n                for (let i = 0; i < numTypeParameters; ++i) {\n                    this.visitTypeParameter(typeParameters[i]);\n                }\n                sb.push(\">\");\n            }\n        }\n        sb.push(\" = \");\n        this.visitTypeNode(node.type);\n    }\n    visitVariableDeclaration(node) {\n        this.visitIdentifierExpression(node.name);\n        var type = node.type;\n        var sb = this.sb;\n        if (node.flags & common_1.CommonFlags.DEFINITELY_ASSIGNED) {\n            sb.push(\"!\");\n        }\n        if (type) {\n            sb.push(\": \");\n            this.visitTypeNode(type);\n        }\n        var initializer = node.initializer;\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    }\n    visitVariableStatement(node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        var declarations = node.declarations;\n        var numDeclarations = assert(declarations.length);\n        var firstDeclaration = declarations[0];\n        this.serializeExternalModifiers(firstDeclaration);\n        sb.push(firstDeclaration.is(common_1.CommonFlags.CONST) ? \"const \" : firstDeclaration.is(common_1.CommonFlags.LET) ? \"let \" : \"var \");\n        this.visitVariableDeclaration(node.declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n            sb.push(\", \");\n            this.visitVariableDeclaration(node.declarations[i]);\n        }\n    }\n    visitWhileStatement(node) {\n        var sb = this.sb;\n        sb.push(\"while (\");\n        this.visitNode(node.condition);\n        var statement = node.statement;\n        if (statement.kind == ast_1.NodeKind.EMPTY) {\n            sb.push(\")\");\n        }\n        else {\n            sb.push(\") \");\n            this.visitNode(node.statement);\n        }\n    }\n    // other\n    serializeDecorator(node) {\n        var sb = this.sb;\n        sb.push(\"@\");\n        this.visitNode(node.name);\n        var args = node.args;\n        if (args) {\n            sb.push(\"(\");\n            let numArgs = args.length;\n            if (numArgs) {\n                this.visitNode(args[0]);\n                for (let i = 1; i < numArgs; ++i) {\n                    sb.push(\", \");\n                    this.visitNode(args[i]);\n                }\n            }\n            sb.push(\")\\n\");\n        }\n        else {\n            sb.push(\"\\n\");\n        }\n        util_1.indent(sb, this.indentLevel);\n    }\n    serializeParameter(node) {\n        var sb = this.sb;\n        var kind = node.parameterKind;\n        var implicitFieldDeclaration = node.implicitFieldDeclaration;\n        if (implicitFieldDeclaration) {\n            this.serializeAccessModifiers(implicitFieldDeclaration);\n        }\n        if (kind == ast_1.ParameterKind.REST) {\n            sb.push(\"...\");\n        }\n        this.visitIdentifierExpression(node.name);\n        var type = node.type;\n        var initializer = node.initializer;\n        if (type) {\n            if (kind == ast_1.ParameterKind.OPTIONAL && !initializer)\n                sb.push(\"?\");\n            if (!ast_1.isTypeOmitted(type)) {\n                sb.push(\": \");\n                this.visitTypeNode(type);\n            }\n        }\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    }\n    serializeExternalModifiers(node) {\n        var sb = this.sb;\n        if (node.is(common_1.CommonFlags.EXPORT)) {\n            sb.push(\"export \");\n        }\n        else if (node.is(common_1.CommonFlags.IMPORT)) {\n            sb.push(\"import \");\n        }\n        else if (node.is(common_1.CommonFlags.DECLARE)) {\n            sb.push(\"declare \");\n        }\n    }\n    serializeAccessModifiers(node) {\n        var sb = this.sb;\n        if (node.is(common_1.CommonFlags.PUBLIC)) {\n            sb.push(\"public \");\n        }\n        else if (node.is(common_1.CommonFlags.PRIVATE)) {\n            sb.push(\"private \");\n        }\n        else if (node.is(common_1.CommonFlags.PROTECTED)) {\n            sb.push(\"protected \");\n        }\n        if (node.is(common_1.CommonFlags.STATIC)) {\n            sb.push(\"static \");\n        }\n        else if (node.is(common_1.CommonFlags.ABSTRACT)) {\n            sb.push(\"abstract \");\n        }\n        if (node.is(common_1.CommonFlags.READONLY)) {\n            sb.push(\"readonly \");\n        }\n    }\n    finish() {\n        var ret = this.sb.join(\"\");\n        this.sb = [];\n        return ret;\n    }\n}\nexports.ASTBuilder = ASTBuilder;\n\n\n/***/ }),\n\n/***/ 154:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findUsedLocals = exports.Flow = exports.ConditionKind = exports.FieldFlags = exports.LocalFlags = exports.FlowFlags = void 0;\nconst types_1 = __webpack_require__(699);\nconst program_1 = __webpack_require__(974);\nconst module_1 = __webpack_require__(656);\nconst common_1 = __webpack_require__(200);\nconst diagnostics_1 = __webpack_require__(256);\nconst util_1 = __webpack_require__(910);\n/** Control flow flags indicating specific conditions. */\nvar FlowFlags;\n(function (FlowFlags) {\n    /** No specific conditions. */\n    FlowFlags[FlowFlags[\"NONE\"] = 0] = \"NONE\";\n    // categorical\n    /** This flow always returns. */\n    FlowFlags[FlowFlags[\"RETURNS\"] = 1] = \"RETURNS\";\n    /** This flow always returns a wrapped value. */\n    FlowFlags[FlowFlags[\"RETURNS_WRAPPED\"] = 2] = \"RETURNS_WRAPPED\";\n    /** This flow always returns a non-null value. */\n    FlowFlags[FlowFlags[\"RETURNS_NONNULL\"] = 4] = \"RETURNS_NONNULL\";\n    /** This flow always throws. */\n    FlowFlags[FlowFlags[\"THROWS\"] = 8] = \"THROWS\";\n    /** This flow always breaks. */\n    FlowFlags[FlowFlags[\"BREAKS\"] = 16] = \"BREAKS\";\n    /** This flow always continues. */\n    FlowFlags[FlowFlags[\"CONTINUES\"] = 32] = \"CONTINUES\";\n    /** This flow always accesses `this`. Constructors only. */\n    FlowFlags[FlowFlags[\"ACCESSES_THIS\"] = 64] = \"ACCESSES_THIS\";\n    /** This flow always calls `super`. Constructors only. */\n    FlowFlags[FlowFlags[\"CALLS_SUPER\"] = 128] = \"CALLS_SUPER\";\n    /** This flow always terminates (returns, throws or continues). */\n    FlowFlags[FlowFlags[\"TERMINATES\"] = 256] = \"TERMINATES\";\n    // conditional\n    /** This flow conditionally returns in a child flow. */\n    FlowFlags[FlowFlags[\"CONDITIONALLY_RETURNS\"] = 512] = \"CONDITIONALLY_RETURNS\";\n    /** This flow conditionally throws in a child flow. */\n    FlowFlags[FlowFlags[\"CONDITIONALLY_THROWS\"] = 1024] = \"CONDITIONALLY_THROWS\";\n    /** This flow conditionally breaks in a child flow. */\n    FlowFlags[FlowFlags[\"CONDITIONALLY_BREAKS\"] = 2048] = \"CONDITIONALLY_BREAKS\";\n    /** This flow conditionally continues in a child flow. */\n    FlowFlags[FlowFlags[\"CONDITIONALLY_CONTINUES\"] = 4096] = \"CONDITIONALLY_CONTINUES\";\n    /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n    FlowFlags[FlowFlags[\"CONDITIONALLY_ACCESSES_THIS\"] = 8192] = \"CONDITIONALLY_ACCESSES_THIS\";\n    /** This flow may return a non-this value. Constructors only. */\n    FlowFlags[FlowFlags[\"MAY_RETURN_NONTHIS\"] = 16384] = \"MAY_RETURN_NONTHIS\";\n    // other\n    /** This is a flow with explicitly disabled bounds checking. */\n    FlowFlags[FlowFlags[\"UNCHECKED_CONTEXT\"] = 32768] = \"UNCHECKED_CONTEXT\";\n    // masks\n    /** Any categorical flag. */\n    FlowFlags[FlowFlags[\"ANY_CATEGORICAL\"] = 511] = \"ANY_CATEGORICAL\";\n    /** Any conditional flag. */\n    FlowFlags[FlowFlags[\"ANY_CONDITIONAL\"] = 15872] = \"ANY_CONDITIONAL\";\n})(FlowFlags = exports.FlowFlags || (exports.FlowFlags = {}));\n/** Flags indicating the current state of a local. */\nvar LocalFlags;\n(function (LocalFlags) {\n    /** No specific conditions. */\n    LocalFlags[LocalFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Local is constant. */\n    LocalFlags[LocalFlags[\"CONSTANT\"] = 1] = \"CONSTANT\";\n    /** Local is properly wrapped. Relevant for small integers. */\n    LocalFlags[LocalFlags[\"WRAPPED\"] = 2] = \"WRAPPED\";\n    /** Local is non-null. */\n    LocalFlags[LocalFlags[\"NONNULL\"] = 4] = \"NONNULL\";\n    /** Local is initialized. */\n    LocalFlags[LocalFlags[\"INITIALIZED\"] = 8] = \"INITIALIZED\";\n})(LocalFlags = exports.LocalFlags || (exports.LocalFlags = {}));\n/** Flags indicating the current state of a field. */\nvar FieldFlags;\n(function (FieldFlags) {\n    FieldFlags[FieldFlags[\"NONE\"] = 0] = \"NONE\";\n    FieldFlags[FieldFlags[\"INITIALIZED\"] = 1] = \"INITIALIZED\";\n})(FieldFlags = exports.FieldFlags || (exports.FieldFlags = {}));\n/** Condition kinds. */\nvar ConditionKind;\n(function (ConditionKind) {\n    /** Outcome of the condition is unknown */\n    ConditionKind[ConditionKind[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /** Condition is always true. */\n    ConditionKind[ConditionKind[\"TRUE\"] = 1] = \"TRUE\";\n    /** Condition is always false. */\n    ConditionKind[ConditionKind[\"FALSE\"] = 2] = \"FALSE\";\n})(ConditionKind = exports.ConditionKind || (exports.ConditionKind = {}));\n/** A control flow evaluator. */\nclass Flow {\n    constructor(\n    /** Function this flow belongs to. */\n    parentFunction) {\n        this.parentFunction = parentFunction;\n        /** Parent flow. */\n        this.parent = null;\n        /** Outer flow. Only relevant for first-class functions. */\n        this.outer = null;\n        /** Flow flags indicating specific conditions. */\n        this.flags = 0 /* NONE */;\n        /** The label we break to when encountering a continue statement. */\n        this.continueLabel = null;\n        /** The label we break to when encountering a break statement. */\n        this.breakLabel = null;\n        /** Scoped local variables. */\n        this.scopedLocals = null;\n        /** Local flags. */\n        this.localFlags = [];\n        /** Field flags on `this`. Constructors only. */\n        this.thisFieldFlags = null;\n        /** Function being inlined, when inlining. */\n        this.inlineFunction = null;\n        /** The label we break to when encountering a return statement, when inlining. */\n        this.inlineReturnLabel = null;\n        /* nop */\n    }\n    /** Creates the parent flow of the specified function. */\n    static createParent(parentFunction) {\n        var flow = new Flow(parentFunction);\n        if (parentFunction.is(common_1.CommonFlags.CONSTRUCTOR)) {\n            flow.initThisFieldFlags();\n        }\n        return flow;\n    }\n    /** Creates an inline flow within `parentFunction`. */\n    static createInline(parentFunction, inlineFunction) {\n        var flow = new Flow(parentFunction);\n        flow.inlineFunction = inlineFunction;\n        flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n        if (inlineFunction.is(common_1.CommonFlags.CONSTRUCTOR)) {\n            flow.initThisFieldFlags();\n        }\n        return flow;\n    }\n    /** Tests if this is an inline flow. */\n    get isInline() {\n        return this.inlineFunction !== null;\n    }\n    /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n    get actualFunction() {\n        var inlineFunction = this.inlineFunction;\n        if (inlineFunction)\n            return inlineFunction;\n        return this.parentFunction;\n    }\n    /** Gets the current return type. */\n    get returnType() {\n        return this.actualFunction.signature.returnType;\n    }\n    /** Gets the current contextual type arguments. */\n    get contextualTypeArguments() {\n        return this.actualFunction.contextualTypeArguments;\n    }\n    /** Tests if this flow has the specified flag or flags. */\n    is(flag) { return (this.flags & flag) == flag; }\n    /** Tests if this flow has one of the specified flags. */\n    isAny(flag) { return (this.flags & flag) != 0; }\n    /** Sets the specified flag or flags. */\n    set(flag) { this.flags |= flag; }\n    /** Unsets the specified flag or flags. */\n    unset(flag) { this.flags &= ~flag; }\n    /** Forks this flow to a child flow. */\n    fork(resetBreakContext = false) {\n        var branch = new Flow(this.parentFunction);\n        branch.parent = this;\n        branch.outer = this.outer;\n        if (resetBreakContext) {\n            branch.flags = this.flags & ~(16 /* BREAKS */ |\n                2048 /* CONDITIONALLY_BREAKS */ |\n                32 /* CONTINUES */ |\n                4096 /* CONDITIONALLY_CONTINUES */);\n        }\n        else {\n            branch.flags = this.flags;\n            branch.continueLabel = this.continueLabel;\n            branch.breakLabel = this.breakLabel;\n        }\n        branch.localFlags = this.localFlags.slice();\n        if (this.actualFunction.is(common_1.CommonFlags.CONSTRUCTOR)) {\n            let thisFieldFlags = assert(this.thisFieldFlags);\n            branch.thisFieldFlags = util_1.uniqueMap(thisFieldFlags);\n        }\n        else {\n            assert(!this.thisFieldFlags);\n        }\n        branch.inlineFunction = this.inlineFunction;\n        branch.inlineReturnLabel = this.inlineReturnLabel;\n        return branch;\n    }\n    /** Gets a free temporary local of the specified type. */\n    getTempLocal(type, except = null) {\n        var parentFunction = this.parentFunction;\n        var temps;\n        switch (type.toNativeType()) {\n            case module_1.NativeType.I32: {\n                temps = parentFunction.tempI32s;\n                break;\n            }\n            case module_1.NativeType.I64: {\n                temps = parentFunction.tempI64s;\n                break;\n            }\n            case module_1.NativeType.F32: {\n                temps = parentFunction.tempF32s;\n                break;\n            }\n            case module_1.NativeType.F64: {\n                temps = parentFunction.tempF64s;\n                break;\n            }\n            case module_1.NativeType.V128: {\n                temps = parentFunction.tempV128s;\n                break;\n            }\n            case module_1.NativeType.Funcref: {\n                temps = parentFunction.tempFuncrefs;\n                break;\n            }\n            case module_1.NativeType.Externref: {\n                temps = parentFunction.tempExternrefs;\n                break;\n            }\n            case module_1.NativeType.Exnref: {\n                temps = parentFunction.tempExnrefs;\n                break;\n            }\n            case module_1.NativeType.Anyref: {\n                temps = parentFunction.tempAnyrefs;\n                break;\n            }\n            default: throw new Error(\"concrete type expected\");\n        }\n        var local;\n        if (except) {\n            if (temps !== null && temps.length > 0) {\n                for (let i = 0, k = temps.length; i < k; ++i) {\n                    if (!except.has(temps[i].index)) {\n                        local = temps[i];\n                        let k = temps.length - 1;\n                        while (i < k)\n                            unchecked(temps[i] = temps[i++ + 1]);\n                        temps.length = k;\n                        local.type = type;\n                        local.flags = common_1.CommonFlags.NONE;\n                        this.unsetLocalFlag(local.index, ~0);\n                        return local;\n                    }\n                }\n            }\n            local = parentFunction.addLocal(type);\n        }\n        else {\n            if (temps !== null && temps.length > 0) {\n                local = assert(temps.pop());\n                local.type = type;\n                local.flags = common_1.CommonFlags.NONE;\n            }\n            else {\n                local = parentFunction.addLocal(type);\n            }\n        }\n        this.unsetLocalFlag(local.index, ~0);\n        return local;\n    }\n    /** Frees the temporary local for reuse. */\n    freeTempLocal(local) {\n        if (local.is(common_1.CommonFlags.INLINED))\n            return;\n        assert(local.index >= 0);\n        var parentFunction = this.parentFunction;\n        var temps;\n        assert(local.type != null); // internal error\n        local.resetTemporaryName();\n        switch (local.type.toNativeType()) {\n            case module_1.NativeType.I32: {\n                let tempI32s = parentFunction.tempI32s;\n                if (tempI32s)\n                    temps = tempI32s;\n                else\n                    parentFunction.tempI32s = temps = [];\n                break;\n            }\n            case module_1.NativeType.I64: {\n                let tempI64s = parentFunction.tempI64s;\n                if (tempI64s)\n                    temps = tempI64s;\n                else\n                    parentFunction.tempI64s = temps = [];\n                break;\n            }\n            case module_1.NativeType.F32: {\n                let tempF32s = parentFunction.tempF32s;\n                if (tempF32s)\n                    temps = tempF32s;\n                else\n                    parentFunction.tempF32s = temps = [];\n                break;\n            }\n            case module_1.NativeType.F64: {\n                let tempF64s = parentFunction.tempF64s;\n                if (tempF64s)\n                    temps = tempF64s;\n                else\n                    parentFunction.tempF64s = temps = [];\n                break;\n            }\n            case module_1.NativeType.V128: {\n                let tempV128s = parentFunction.tempV128s;\n                if (tempV128s)\n                    temps = tempV128s;\n                else\n                    parentFunction.tempV128s = temps = [];\n                break;\n            }\n            case module_1.NativeType.Funcref: {\n                let tempFuncrefs = parentFunction.tempFuncrefs;\n                if (tempFuncrefs)\n                    temps = tempFuncrefs;\n                else\n                    parentFunction.tempFuncrefs = temps = [];\n                break;\n            }\n            case module_1.NativeType.Externref: {\n                let tempExternrefs = parentFunction.tempExternrefs;\n                if (tempExternrefs)\n                    temps = tempExternrefs;\n                else\n                    parentFunction.tempExternrefs = temps = [];\n                break;\n            }\n            case module_1.NativeType.Exnref: {\n                let tempExnrefs = parentFunction.tempExnrefs;\n                if (tempExnrefs)\n                    temps = tempExnrefs;\n                else\n                    parentFunction.tempExnrefs = temps = [];\n                break;\n            }\n            case module_1.NativeType.Anyref: {\n                let tempAnyrefs = parentFunction.tempAnyrefs;\n                if (tempAnyrefs)\n                    temps = tempAnyrefs;\n                else\n                    parentFunction.tempAnyrefs = temps = [];\n                break;\n            }\n            default: throw new Error(\"concrete type expected\");\n        }\n        assert(local.index >= 0);\n        temps.push(local);\n    }\n    /** Gets the scoped local of the specified name. */\n    getScopedLocal(name) {\n        var scopedLocals = this.scopedLocals;\n        if (scopedLocals !== null && scopedLocals.has(name))\n            return assert(scopedLocals.get(name));\n        return null;\n    }\n    /** Adds a new scoped local of the specified name. */\n    addScopedLocal(name, type, except = null) {\n        var scopedLocal = this.getTempLocal(type, except);\n        scopedLocal.setTemporaryName(name);\n        var scopedLocals = this.scopedLocals;\n        if (!scopedLocals)\n            this.scopedLocals = scopedLocals = new Map();\n        else\n            assert(!scopedLocals.has(name));\n        scopedLocal.set(common_1.CommonFlags.SCOPED);\n        scopedLocals.set(name, scopedLocal);\n        return scopedLocal;\n    }\n    /** Adds a new scoped dummy local of the specified name. */\n    addScopedDummyLocal(name, type) {\n        var scopedDummy = new program_1.Local(name, -1, type, this.parentFunction);\n        var scopedLocals = this.scopedLocals;\n        if (!scopedLocals)\n            this.scopedLocals = scopedLocals = new Map();\n        else\n            assert(!scopedLocals.has(name));\n        scopedDummy.set(common_1.CommonFlags.SCOPED);\n        scopedLocals.set(name, scopedDummy);\n        return scopedDummy;\n    }\n    /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n    addScopedAlias(name, type, index, reportNode = null) {\n        var scopedLocals = this.scopedLocals;\n        if (!scopedLocals) {\n            this.scopedLocals = scopedLocals = new Map();\n        }\n        else if (scopedLocals.has(name)) {\n            let existingLocal = assert(scopedLocals.get(name));\n            if (reportNode) {\n                if (!existingLocal.declaration.range.source.isNative) {\n                    this.parentFunction.program.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, reportNode.range, existingLocal.declaration.name.range, name);\n                }\n                else {\n                    this.parentFunction.program.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, reportNode.range, name);\n                }\n            }\n            return existingLocal;\n        }\n        assert(index < this.parentFunction.localsByIndex.length);\n        var scopedAlias = new program_1.Local(name, index, type, this.parentFunction);\n        // not flagged as SCOPED as it must not be free'd when the flow is finalized\n        scopedLocals.set(name, scopedAlias);\n        return scopedAlias;\n    }\n    /** Tests if this flow has any scoped locals that must be free'd. */\n    get hasScopedLocals() {\n        var scopedLocals = this.scopedLocals;\n        if (scopedLocals) {\n            // TODO: for (let local of scopedLocals.values()) {\n            for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n                let local = unchecked(_values[i]);\n                if (local.is(common_1.CommonFlags.SCOPED)) { // otherwise an alias\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /** Frees a single scoped local by its name. */\n    freeScopedDummyLocal(name) {\n        var scopedLocals = assert(this.scopedLocals);\n        assert(scopedLocals.has(name));\n        let local = assert(scopedLocals.get(name));\n        assert(local.index == -1);\n        scopedLocals.delete(name);\n    }\n    /** Frees this flow's scoped variables and returns its parent flow. */\n    freeScopedLocals() {\n        var scopedLocals = this.scopedLocals;\n        if (scopedLocals) {\n            // TODO: for (let local of scopedLocals.values()) {\n            for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n                let local = unchecked(_values[i]);\n                if (local.is(common_1.CommonFlags.SCOPED)) { // otherwise an alias\n                    this.freeTempLocal(local);\n                }\n            }\n            this.scopedLocals = null;\n        }\n    }\n    /** Looks up the local of the specified name in the current scope. */\n    lookupLocal(name) {\n        var current = this;\n        do {\n            let scope = current.scopedLocals;\n            if (scope !== null && scope.has(name))\n                return assert(scope.get(name));\n            current = current.parent;\n        } while (current);\n        var localsByName = this.parentFunction.localsByName;\n        if (localsByName.has(name))\n            return assert(localsByName.get(name));\n        return null;\n    }\n    /** Looks up the element with the specified name relative to the scope of this flow. */\n    lookup(name) {\n        var element = this.lookupLocal(name);\n        if (element)\n            return element;\n        return this.actualFunction.lookup(name);\n    }\n    /** Tests if the local at the specified index has the specified flag or flags. */\n    isLocalFlag(index, flag, defaultIfInlined = true) {\n        if (index < 0)\n            return defaultIfInlined;\n        var localFlags = this.localFlags;\n        return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n    }\n    /** Tests if the local at the specified index has any of the specified flags. */\n    isAnyLocalFlag(index, flag, defaultIfInlined = true) {\n        if (index < 0)\n            return defaultIfInlined;\n        var localFlags = this.localFlags;\n        return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n    }\n    /** Sets the specified flag or flags on the local at the specified index. */\n    setLocalFlag(index, flag) {\n        if (index < 0)\n            return;\n        var localFlags = this.localFlags;\n        var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n        localFlags[index] = flags | flag;\n    }\n    /** Unsets the specified flag or flags on the local at the specified index. */\n    unsetLocalFlag(index, flag) {\n        if (index < 0)\n            return;\n        var localFlags = this.localFlags;\n        var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n        localFlags[index] = flags & ~flag;\n    }\n    /** Initializes `this` field flags. */\n    initThisFieldFlags() {\n        var actualFunction = this.actualFunction;\n        assert(actualFunction.is(common_1.CommonFlags.CONSTRUCTOR));\n        var actualParent = actualFunction.parent;\n        assert(actualParent.kind == program_1.ElementKind.CLASS);\n        var actualClass = actualParent;\n        this.thisFieldFlags = new Map();\n        var members = actualClass.members;\n        if (members) {\n            for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n                let member = _values[i];\n                if (member.kind == program_1.ElementKind.FIELD) {\n                    let field = member;\n                    if (\n                    // guaranteed by super\n                    field.parent != actualClass ||\n                        // has field initializer\n                        field.initializerNode !== null ||\n                        // is initialized as a ctor parameter\n                        field.prototype.parameterIndex != -1 ||\n                        // is safe to initialize with zero\n                        field.type.isAny(128 /* VALUE */ | 512 /* NULLABLE */)) {\n                        this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n                    }\n                }\n            }\n        }\n    }\n    /** Tests if the specified `this` field has the specified flag or flags. */\n    isThisFieldFlag(field, flag) {\n        var fieldFlags = this.thisFieldFlags;\n        if (fieldFlags != null && fieldFlags.has(field)) {\n            return (changetype(fieldFlags.get(field)) & flag) == flag;\n        }\n        return false;\n    }\n    /** Sets the specified flag or flags on the given `this` field. */\n    setThisFieldFlag(field, flag) {\n        var fieldFlags = this.thisFieldFlags;\n        if (fieldFlags) {\n            assert(this.actualFunction.is(common_1.CommonFlags.CONSTRUCTOR));\n            if (fieldFlags.has(field)) {\n                let flags = changetype(fieldFlags.get(field));\n                fieldFlags.set(field, flags | flag);\n            }\n            else {\n                fieldFlags.set(field, flag);\n            }\n        }\n        else {\n            assert(!this.actualFunction.is(common_1.CommonFlags.CONSTRUCTOR));\n        }\n    }\n    /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n    pushBreakLabel() {\n        var parentFunction = this.parentFunction;\n        var id = parentFunction.nextBreakId++;\n        var stack = parentFunction.breakStack;\n        if (!stack)\n            parentFunction.breakStack = [id];\n        else\n            stack.push(id);\n        var label = id.toString();\n        parentFunction.breakLabel = label;\n        return label;\n    }\n    /** Pops the most recent break label from the stack. */\n    popBreakLabel() {\n        var parentFunction = this.parentFunction;\n        var stack = assert(parentFunction.breakStack);\n        var length = assert(stack.length);\n        stack.pop();\n        if (length > 1) {\n            parentFunction.breakLabel = stack[length - 2].toString();\n        }\n        else {\n            parentFunction.breakLabel = null;\n            parentFunction.breakStack = null;\n        }\n    }\n    /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n    inherit(other) {\n        assert(other.parentFunction == this.parentFunction);\n        assert(other.parent == this); // currently the case, but might change\n        var otherFlags = other.flags;\n        // respective inner flags are irrelevant if contexts differ\n        if (this.breakLabel != other.breakLabel) {\n            if (otherFlags & (16 /* BREAKS */ | 2048 /* CONDITIONALLY_BREAKS */)) {\n                otherFlags &= ~256 /* TERMINATES */;\n            }\n            otherFlags &= ~(16 /* BREAKS */ | 2048 /* CONDITIONALLY_BREAKS */);\n        }\n        if (this.continueLabel != other.continueLabel) {\n            otherFlags &= ~(32 /* CONTINUES */ | 4096 /* CONDITIONALLY_CONTINUES */);\n        }\n        this.flags = this.flags | otherFlags; // what happens before is still true\n        this.localFlags = other.localFlags;\n        this.thisFieldFlags = other.thisFieldFlags;\n    }\n    /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n    inheritBranch(other, conditionKind = 0 /* UNKNOWN */) {\n        assert(other.parentFunction == this.parentFunction);\n        switch (conditionKind) {\n            case 1 /* TRUE */: this.inherit(other); // always executes\n            case 2 /* FALSE */: return; // never executes\n        }\n        // Note that flags in `this` flow have already happened. For instance,\n        // a return cannot be undone no matter what'd happen in subsequent branches,\n        // but an allocation, which doesn't terminate, can become conditional. Not\n        // all flags have a corresponding conditional flag that's tracked.\n        var thisFlags = this.flags;\n        var otherFlags = other.flags;\n        var newFlags = 0 /* NONE */;\n        if (thisFlags & 1 /* RETURNS */) { // nothing can change that\n            newFlags |= 1 /* RETURNS */;\n        }\n        else if (otherFlags & 1 /* RETURNS */) {\n            newFlags |= 512 /* CONDITIONALLY_RETURNS */;\n        }\n        else {\n            newFlags |= (thisFlags | otherFlags) & 512 /* CONDITIONALLY_RETURNS */;\n        }\n        // must be the case in both\n        newFlags |= thisFlags & otherFlags & 2 /* RETURNS_WRAPPED */;\n        newFlags |= thisFlags & otherFlags & 4 /* RETURNS_NONNULL */;\n        if (thisFlags & 8 /* THROWS */) { // nothing can change that\n            newFlags |= 8 /* THROWS */;\n        }\n        else if (otherFlags & 8 /* THROWS */) {\n            newFlags |= 1024 /* CONDITIONALLY_THROWS */;\n        }\n        else {\n            newFlags |= (thisFlags | otherFlags) & 1024 /* CONDITIONALLY_THROWS */;\n        }\n        if (thisFlags & 16 /* BREAKS */) { // nothing can change that\n            newFlags |= 16 /* BREAKS */;\n        }\n        else if (other.breakLabel == this.breakLabel) {\n            if (otherFlags & 16 /* BREAKS */) {\n                newFlags |= 2048 /* CONDITIONALLY_BREAKS */;\n            }\n            else {\n                newFlags |= (thisFlags | otherFlags) & 2048 /* CONDITIONALLY_BREAKS */;\n            }\n        }\n        else {\n            newFlags |= thisFlags & 2048 /* CONDITIONALLY_BREAKS */;\n        }\n        if (thisFlags & 32 /* CONTINUES */) { // nothing can change that\n            newFlags |= 32 /* CONTINUES */;\n        }\n        else if (other.continueLabel === this.continueLabel) {\n            if (otherFlags & 32 /* CONTINUES */) {\n                newFlags |= 4096 /* CONDITIONALLY_CONTINUES */;\n            }\n            else {\n                newFlags |= (thisFlags | otherFlags) & 4096 /* CONDITIONALLY_CONTINUES */;\n            }\n        }\n        else {\n            newFlags |= thisFlags & 4096 /* CONDITIONALLY_CONTINUES */;\n        }\n        if (thisFlags & 64 /* ACCESSES_THIS */) { // can become conditional\n            if (otherFlags & 64 /* ACCESSES_THIS */) {\n                newFlags |= 64 /* ACCESSES_THIS */;\n            }\n            else {\n                newFlags |= 8192 /* CONDITIONALLY_ACCESSES_THIS */;\n            }\n        }\n        else if (otherFlags & 64 /* ACCESSES_THIS */) {\n            newFlags |= 8192 /* CONDITIONALLY_ACCESSES_THIS */;\n        }\n        // may be the case in any\n        newFlags |= (thisFlags | otherFlags) & 16384 /* MAY_RETURN_NONTHIS */;\n        // must be the case in both\n        newFlags |= thisFlags & otherFlags & 128 /* CALLS_SUPER */;\n        if (thisFlags & 256 /* TERMINATES */) { // nothing can change that\n            newFlags |= 256 /* TERMINATES */;\n        }\n        this.flags = newFlags | (thisFlags & 32768 /* UNCHECKED_CONTEXT */);\n        // local flags\n        var thisLocalFlags = this.localFlags;\n        var numThisLocalFlags = thisLocalFlags.length;\n        var otherLocalFlags = other.localFlags;\n        var numOtherLocalFlags = otherLocalFlags.length;\n        var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n        for (let i = 0; i < maxLocalFlags; ++i) {\n            let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n            let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n            thisLocalFlags[i] = thisFlags & otherFlags & (LocalFlags.CONSTANT |\n                LocalFlags.WRAPPED |\n                LocalFlags.NONNULL |\n                LocalFlags.INITIALIZED);\n        }\n        // field flags do not matter here since there's only INITIALIZED, which can\n        // only be set if it has been observed prior to entering the branch.\n    }\n    /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n    inheritMutual(left, right) {\n        assert(left.parentFunction == right.parentFunction);\n        assert(left.parentFunction == this.parentFunction);\n        // This differs from the previous method in that no flags are guaranteed\n        // to happen unless it is the case in both flows.\n        var leftFlags = left.flags;\n        var rightFlags = right.flags;\n        var newFlags = 0 /* NONE */;\n        if (leftFlags & 1 /* RETURNS */) {\n            if (rightFlags & 1 /* RETURNS */) {\n                newFlags |= 1 /* RETURNS */;\n            }\n            else {\n                newFlags |= 512 /* CONDITIONALLY_RETURNS */;\n            }\n        }\n        else if (rightFlags & 1 /* RETURNS */) {\n            newFlags |= 512 /* CONDITIONALLY_RETURNS */;\n        }\n        else {\n            newFlags |= (leftFlags | rightFlags) & 512 /* CONDITIONALLY_RETURNS */;\n        }\n        if ((leftFlags & 2 /* RETURNS_WRAPPED */) && (rightFlags & 2 /* RETURNS_WRAPPED */)) {\n            newFlags |= 2 /* RETURNS_WRAPPED */;\n        }\n        if ((leftFlags & 4 /* RETURNS_NONNULL */) && (rightFlags & 4 /* RETURNS_NONNULL */)) {\n            newFlags |= 4 /* RETURNS_NONNULL */;\n        }\n        if (leftFlags & 8 /* THROWS */) {\n            if (rightFlags & 8 /* THROWS */) {\n                newFlags |= 8 /* THROWS */;\n            }\n            else {\n                newFlags |= 1024 /* CONDITIONALLY_THROWS */;\n            }\n        }\n        else if (rightFlags & 8 /* THROWS */) {\n            newFlags |= 1024 /* CONDITIONALLY_THROWS */;\n        }\n        else {\n            newFlags |= (leftFlags | rightFlags) & 1024 /* CONDITIONALLY_THROWS */;\n        }\n        if (leftFlags & 16 /* BREAKS */) {\n            if (rightFlags & 16 /* BREAKS */) {\n                newFlags |= 16 /* BREAKS */;\n            }\n            else {\n                newFlags |= 2048 /* CONDITIONALLY_BREAKS */;\n            }\n        }\n        else if (rightFlags & 16 /* BREAKS */) {\n            newFlags |= 2048 /* CONDITIONALLY_BREAKS */;\n        }\n        else {\n            newFlags |= (leftFlags | rightFlags) & 2048 /* CONDITIONALLY_BREAKS */;\n        }\n        if (leftFlags & 32 /* CONTINUES */) {\n            if (rightFlags & 32 /* CONTINUES */) {\n                newFlags |= 32 /* CONTINUES */;\n            }\n            else {\n                newFlags |= 4096 /* CONDITIONALLY_CONTINUES */;\n            }\n        }\n        else if (rightFlags & 32 /* CONTINUES */) {\n            newFlags |= 4096 /* CONDITIONALLY_CONTINUES */;\n        }\n        else {\n            newFlags |= (leftFlags | rightFlags) & 4096 /* CONDITIONALLY_CONTINUES */;\n        }\n        if (leftFlags & 64 /* ACCESSES_THIS */) {\n            if (rightFlags & 64 /* ACCESSES_THIS */) {\n                newFlags |= 64 /* ACCESSES_THIS */;\n            }\n            else {\n                newFlags |= 8192 /* CONDITIONALLY_ACCESSES_THIS */;\n            }\n        }\n        else if (rightFlags & 64 /* ACCESSES_THIS */) {\n            newFlags |= 8192 /* CONDITIONALLY_ACCESSES_THIS */;\n        }\n        else {\n            newFlags |= (leftFlags | rightFlags) & 8192 /* CONDITIONALLY_ACCESSES_THIS */;\n        }\n        newFlags |= (leftFlags | rightFlags) & 16384 /* MAY_RETURN_NONTHIS */;\n        if ((leftFlags & 128 /* CALLS_SUPER */) && (rightFlags & 128 /* CALLS_SUPER */)) {\n            newFlags |= 128 /* CALLS_SUPER */;\n        }\n        if ((leftFlags & 256 /* TERMINATES */) && (rightFlags & 256 /* TERMINATES */)) {\n            newFlags |= 256 /* TERMINATES */;\n        }\n        this.flags = newFlags | (this.flags & 32768 /* UNCHECKED_CONTEXT */);\n        // local flags\n        var thisLocalFlags = this.localFlags;\n        if (leftFlags & 256 /* TERMINATES */) {\n            if (!(rightFlags & 256 /* TERMINATES */)) {\n                let rightLocalFlags = right.localFlags;\n                for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n                    thisLocalFlags[i] = rightLocalFlags[i];\n                }\n            }\n        }\n        else if (rightFlags & 256 /* TERMINATES */) {\n            let leftLocalFlags = left.localFlags;\n            for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n                thisLocalFlags[i] = leftLocalFlags[i];\n            }\n        }\n        else {\n            let leftLocalFlags = left.localFlags;\n            let numLeftLocalFlags = leftLocalFlags.length;\n            let rightLocalFlags = right.localFlags;\n            let numRightLocalFlags = rightLocalFlags.length;\n            let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n            for (let i = 0; i < maxLocalFlags; ++i) {\n                let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n                let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n                thisLocalFlags[i] = leftFlags & rightFlags & (LocalFlags.CONSTANT |\n                    LocalFlags.WRAPPED |\n                    LocalFlags.NONNULL |\n                    LocalFlags.INITIALIZED);\n            }\n        }\n        // field flags (currently only INITIALIZED, so can simplify)\n        var leftFieldFlags = left.thisFieldFlags;\n        if (leftFieldFlags) {\n            let newFieldFlags = new Map();\n            let rightFieldFlags = assert(right.thisFieldFlags);\n            for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n                let key = _keys[i];\n                let leftFlags = changetype(leftFieldFlags.get(key));\n                if ((leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) &&\n                    (changetype(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)) {\n                    newFieldFlags.set(key, FieldFlags.INITIALIZED);\n                }\n            }\n            this.thisFieldFlags = newFieldFlags;\n        }\n        else {\n            assert(!right.thisFieldFlags);\n        }\n    }\n    /** Tests if the specified flows have differing local states. */\n    static hasIncompatibleLocalStates(before, after) {\n        var numThisLocalFlags = before.localFlags.length;\n        var numOtherLocalFlags = after.localFlags.length;\n        var parentFunction = before.parentFunction;\n        assert(parentFunction === after.parentFunction);\n        var localsByIndex = parentFunction.localsByIndex;\n        assert(localsByIndex === after.parentFunction.localsByIndex);\n        for (let i = 0, k = min(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n            let local = localsByIndex[i];\n            let type = local.type;\n            if (type.isShortIntegerValue) {\n                if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n                    return true;\n                }\n            }\n            if (type.isNullableReference) {\n                if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /** Unifies local flags between this and the other flow. */\n    unifyLocalFlags(other) {\n        var numThisLocalFlags = this.localFlags.length;\n        var numOtherLocalFlags = other.localFlags.length;\n        for (let i = 0, k = min(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n            if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n                this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n            }\n            if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n                this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n            }\n        }\n    }\n    /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n    isNonnull(expr, type) {\n        if (!type.isNullableReference)\n            return true;\n        // below, only teeLocal/getLocal are relevant because these are the only expressions that\n        // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n        // has already been handled by the nullable type check above.\n        switch (module_1.getExpressionId(expr)) {\n            case module_1.ExpressionId.LocalSet: {\n                if (!module_1.isLocalTee(expr))\n                    break;\n                let local = this.parentFunction.localsByIndex[module_1.getLocalSetIndex(expr)];\n                return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n            }\n            case module_1.ExpressionId.LocalGet: {\n                let local = this.parentFunction.localsByIndex[module_1.getLocalGetIndex(expr)];\n                return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n            }\n        }\n        return false;\n    }\n    /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n    inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr, \n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff = null) {\n        // A: `expr` is true-ish -> Q: how did that happen?\n        // The iff argument is useful in situations like\n        //\n        //  if (!ref) {\n        //    ref = new Ref();\n        //  }\n        //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n        //\n        switch (module_1.getExpressionId(expr)) {\n            case module_1.ExpressionId.LocalSet: {\n                if (!module_1.isLocalTee(expr))\n                    break;\n                let local = this.parentFunction.localsByIndex[module_1.getLocalSetIndex(expr)];\n                if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n                    this.setLocalFlag(local.index, LocalFlags.NONNULL);\n                }\n                this.inheritNonnullIfTrue(module_1.getLocalSetValue(expr), iff); // must have been true-ish as well\n                break;\n            }\n            case module_1.ExpressionId.LocalGet: {\n                let local = this.parentFunction.localsByIndex[module_1.getLocalGetIndex(expr)];\n                if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n                    this.setLocalFlag(local.index, LocalFlags.NONNULL);\n                }\n                break;\n            }\n            case module_1.ExpressionId.If: {\n                let ifFalse = module_1.getIfFalse(expr);\n                if (!ifFalse)\n                    break;\n                if (module_1.getExpressionId(ifFalse) == module_1.ExpressionId.Const) {\n                    // Logical AND: (if (condition ifTrue 0))\n                    // the only way this had become true is if condition and ifTrue are true\n                    if ((module_1.getExpressionType(ifFalse) == module_1.NativeType.I32 && module_1.getConstValueI32(ifFalse) == 0) ||\n                        (module_1.getExpressionType(ifFalse) == module_1.NativeType.I64 && module_1.getConstValueI64Low(ifFalse) == 0 && module_1.getConstValueI64High(ifFalse) == 0)) {\n                        this.inheritNonnullIfTrue(module_1.getIfCondition(expr), iff);\n                        this.inheritNonnullIfTrue(module_1.getIfTrue(expr), iff);\n                    }\n                }\n                break;\n            }\n            case module_1.ExpressionId.Unary: {\n                switch (module_1.getUnaryOp(expr)) {\n                    case module_1.UnaryOp.EqzI32:\n                    case module_1.UnaryOp.EqzI64: {\n                        this.inheritNonnullIfFalse(module_1.getUnaryValue(expr), iff); // !value -> value must have been false\n                        break;\n                    }\n                }\n                break;\n            }\n            case module_1.ExpressionId.Binary: {\n                switch (module_1.getBinaryOp(expr)) {\n                    case module_1.BinaryOp.EqI32: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && module_1.getConstValueI32(left) != 0) {\n                            this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && module_1.getConstValueI32(right) != 0) {\n                            this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n                        }\n                        break;\n                    }\n                    case module_1.BinaryOp.EqI64: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && (module_1.getConstValueI64Low(left) != 0 || module_1.getConstValueI64High(left) != 0)) {\n                            this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && (module_1.getConstValueI64Low(right) != 0 && module_1.getConstValueI64High(right) != 0)) {\n                            this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n                        }\n                        break;\n                    }\n                    case module_1.BinaryOp.NeI32: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && module_1.getConstValueI32(left) == 0) {\n                            this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && module_1.getConstValueI32(right) == 0) {\n                            this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n                        }\n                        break;\n                    }\n                    case module_1.BinaryOp.NeI64: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && module_1.getConstValueI64Low(left) == 0 && module_1.getConstValueI64High(left) == 0) {\n                            this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && module_1.getConstValueI64Low(right) == 0 && module_1.getConstValueI64High(right) == 0) {\n                            this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n    /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n    inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr, \n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff = null) {\n        // A: `expr` is false-ish -> Q: how did that happen?\n        switch (module_1.getExpressionId(expr)) {\n            case module_1.ExpressionId.Unary: {\n                switch (module_1.getUnaryOp(expr)) {\n                    case module_1.UnaryOp.EqzI32:\n                    case module_1.UnaryOp.EqzI64: {\n                        this.inheritNonnullIfTrue(module_1.getUnaryValue(expr), iff); // !value -> value must have been true\n                        break;\n                    }\n                }\n                break;\n            }\n            case module_1.ExpressionId.If: {\n                let ifTrue = module_1.getIfTrue(expr);\n                if (module_1.getExpressionId(ifTrue) == module_1.ExpressionId.Const) {\n                    let ifFalse = module_1.getIfFalse(expr);\n                    if (!ifFalse)\n                        break;\n                    // Logical OR: (if (condition 1 ifFalse))\n                    // the only way this had become false is if condition and ifFalse are false\n                    let exprType = module_1.getExpressionType(ifTrue);\n                    if ((exprType == module_1.NativeType.I32 && module_1.getConstValueI32(ifTrue) != 0) ||\n                        (exprType == module_1.NativeType.I64 && (module_1.getConstValueI64Low(ifTrue) != 0 || module_1.getConstValueI64High(ifTrue) != 0))) {\n                        this.inheritNonnullIfFalse(module_1.getIfCondition(expr), iff);\n                        this.inheritNonnullIfFalse(module_1.getIfFalse(expr), iff);\n                    }\n                }\n                break;\n            }\n            case module_1.ExpressionId.Binary: {\n                switch (module_1.getBinaryOp(expr)) {\n                    // remember: we want to know how the _entire_ expression became FALSE (!)\n                    case module_1.BinaryOp.EqI32: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && module_1.getConstValueI32(left) == 0) {\n                            this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && module_1.getConstValueI32(right) == 0) {\n                            this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n                        }\n                        break;\n                    }\n                    case module_1.BinaryOp.EqI64: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && module_1.getConstValueI64Low(left) == 0 && module_1.getConstValueI64High(left) == 0) {\n                            this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && module_1.getConstValueI64Low(right) == 0 && module_1.getConstValueI64High(right) == 0) {\n                            this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n                        }\n                        break;\n                    }\n                    case module_1.BinaryOp.NeI32: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && module_1.getConstValueI32(left) != 0) {\n                            this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && module_1.getConstValueI32(right) != 0) {\n                            this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n                        }\n                        break;\n                    }\n                    case module_1.BinaryOp.NeI64: {\n                        let left = module_1.getBinaryLeft(expr);\n                        let right = module_1.getBinaryRight(expr);\n                        if (module_1.getExpressionId(left) == module_1.ExpressionId.Const && (module_1.getConstValueI64Low(left) != 0 || module_1.getConstValueI64High(left) != 0)) {\n                            this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n                        }\n                        else if (module_1.getExpressionId(right) == module_1.ExpressionId.Const && (module_1.getConstValueI64Low(right) != 0 || module_1.getConstValueI64High(right) != 0)) {\n                            this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n     * expression might already have overflown and returns `false` only if the operation neglects\n     * any possible combination of garbage bits being present.\n     */\n    canOverflow(expr, type) {\n        // TODO: the following catches most common and a few uncommon cases, but there are additional\n        // opportunities here, obviously.\n        assert(type != types_1.Type.void);\n        // types other than i8, u8, i16, u16 and bool do not overflow\n        if (!type.isShortIntegerValue)\n            return false;\n        var operand;\n        switch (module_1.getExpressionId(expr)) {\n            // overflows if the local isn't wrapped or the conversion does\n            case module_1.ExpressionId.LocalGet: {\n                let local = this.parentFunction.localsByIndex[module_1.getLocalGetIndex(expr)];\n                return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n                    || canConversionOverflow(local.type, type);\n            }\n            // overflows if the value does\n            case module_1.ExpressionId.LocalSet: { // tee\n                assert(module_1.isLocalTee(expr));\n                return this.canOverflow(module_1.getLocalSetValue(expr), type);\n            }\n            // overflows if the conversion does (globals are wrapped on set)\n            case module_1.ExpressionId.GlobalGet: {\n                // TODO: this is inefficient because it has to read a string\n                let global = assert(this.parentFunction.program.elementsByName.get(assert(module_1.getGlobalGetName(expr))));\n                assert(global.kind == program_1.ElementKind.GLOBAL);\n                return canConversionOverflow(global.type, type);\n            }\n            case module_1.ExpressionId.Binary: {\n                switch (module_1.getBinaryOp(expr)) {\n                    // comparisons do not overflow (result is 0 or 1)\n                    case module_1.BinaryOp.EqI32:\n                    case module_1.BinaryOp.EqI64:\n                    case module_1.BinaryOp.EqF32:\n                    case module_1.BinaryOp.EqF64:\n                    case module_1.BinaryOp.NeI32:\n                    case module_1.BinaryOp.NeI64:\n                    case module_1.BinaryOp.NeF32:\n                    case module_1.BinaryOp.NeF64:\n                    case module_1.BinaryOp.LtI32:\n                    case module_1.BinaryOp.LtU32:\n                    case module_1.BinaryOp.LtI64:\n                    case module_1.BinaryOp.LtU64:\n                    case module_1.BinaryOp.LtF32:\n                    case module_1.BinaryOp.LtF64:\n                    case module_1.BinaryOp.LeI32:\n                    case module_1.BinaryOp.LeU32:\n                    case module_1.BinaryOp.LeI64:\n                    case module_1.BinaryOp.LeU64:\n                    case module_1.BinaryOp.LeF32:\n                    case module_1.BinaryOp.LeF64:\n                    case module_1.BinaryOp.GtI32:\n                    case module_1.BinaryOp.GtU32:\n                    case module_1.BinaryOp.GtI64:\n                    case module_1.BinaryOp.GtU64:\n                    case module_1.BinaryOp.GtF32:\n                    case module_1.BinaryOp.GtF64:\n                    case module_1.BinaryOp.GeI32:\n                    case module_1.BinaryOp.GeU32:\n                    case module_1.BinaryOp.GeI64:\n                    case module_1.BinaryOp.GeU64:\n                    case module_1.BinaryOp.GeF32:\n                    case module_1.BinaryOp.GeF64: return false;\n                    // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n                    case module_1.BinaryOp.MulI32: {\n                        return !((module_1.getExpressionId(operand = module_1.getBinaryLeft(expr)) == module_1.ExpressionId.Const &&\n                            (module_1.getConstValueI32(operand) == 0 ||\n                                (module_1.getConstValueI32(operand) == 1 &&\n                                    !this.canOverflow(module_1.getBinaryRight(expr), type)))) || (module_1.getExpressionId(operand = module_1.getBinaryRight(expr)) == module_1.ExpressionId.Const &&\n                            (module_1.getConstValueI32(operand) == 0 ||\n                                (module_1.getConstValueI32(operand) == 1 &&\n                                    !this.canOverflow(module_1.getBinaryLeft(expr), type)))));\n                    }\n                    // result won't overflow if one side is a constant less than this type's mask or one side\n                    // is wrapped\n                    case module_1.BinaryOp.AndI32: {\n                        // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n                        // because signed value garbage bits must be guaranteed to be equal to the MSB.\n                        return !(((module_1.getExpressionId(operand = module_1.getBinaryLeft(expr)) == module_1.ExpressionId.Const &&\n                            module_1.getConstValueI32(operand) <= type.computeSmallIntegerMask(types_1.Type.i32)) || !this.canOverflow(operand, type)) || ((module_1.getExpressionId(operand = module_1.getBinaryRight(expr)) == module_1.ExpressionId.Const &&\n                            module_1.getConstValueI32(operand) <= type.computeSmallIntegerMask(types_1.Type.i32)) || !this.canOverflow(operand, type)));\n                    }\n                    // overflows if the shift doesn't clear potential garbage bits\n                    case module_1.BinaryOp.ShlI32: {\n                        let shift = 32 - type.size;\n                        return module_1.getExpressionId(operand = module_1.getBinaryRight(expr)) != module_1.ExpressionId.Const\n                            || module_1.getConstValueI32(operand) < shift;\n                    }\n                    // overflows if the value does and the shift doesn't clear potential garbage bits\n                    case module_1.BinaryOp.ShrI32: {\n                        let shift = 32 - type.size;\n                        return this.canOverflow(module_1.getBinaryLeft(expr), type) && (module_1.getExpressionId(operand = module_1.getBinaryRight(expr)) != module_1.ExpressionId.Const ||\n                            module_1.getConstValueI32(operand) < shift);\n                    }\n                    // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n                    // wrapped, it can't overflow.\n                    case module_1.BinaryOp.ShrU32: {\n                        let shift = 32 - type.size;\n                        return type.isSignedIntegerValue\n                            ? !(module_1.getExpressionId(operand = module_1.getBinaryRight(expr)) == module_1.ExpressionId.Const &&\n                                module_1.getConstValueI32(operand) > shift // must clear MSB\n                            )\n                            : this.canOverflow(module_1.getBinaryLeft(expr), type) &&\n                                !(module_1.getExpressionId(operand = module_1.getBinaryRight(expr)) == module_1.ExpressionId.Const &&\n                                    module_1.getConstValueI32(operand) >= shift // can leave MSB\n                                );\n                    }\n                    // overflows if any side does\n                    case module_1.BinaryOp.DivU32:\n                    case module_1.BinaryOp.RemI32:\n                    case module_1.BinaryOp.RemU32: {\n                        return this.canOverflow(module_1.getBinaryLeft(expr), type)\n                            || this.canOverflow(module_1.getBinaryRight(expr), type);\n                    }\n                }\n                break;\n            }\n            case module_1.ExpressionId.Unary: {\n                switch (module_1.getUnaryOp(expr)) {\n                    // comparisons do not overflow (result is 0 or 1)\n                    case module_1.UnaryOp.EqzI32:\n                    case module_1.UnaryOp.EqzI64: return false;\n                    // overflow if the maximum result (32) cannot be represented in the target type\n                    case module_1.UnaryOp.ClzI32:\n                    case module_1.UnaryOp.CtzI32:\n                    case module_1.UnaryOp.PopcntI32: return type.size < 7;\n                }\n                break;\n            }\n            // overflows if the value cannot be represented in the target type\n            case module_1.ExpressionId.Const: {\n                let value = 0;\n                switch (module_1.getExpressionType(expr)) {\n                    case module_1.NativeType.I32: {\n                        value = module_1.getConstValueI32(expr);\n                        break;\n                    }\n                    case module_1.NativeType.I64: {\n                        value = module_1.getConstValueI64Low(expr);\n                        break;\n                    } // discards upper bits\n                    case module_1.NativeType.F32: {\n                        value = i32(module_1.getConstValueF32(expr));\n                        break;\n                    }\n                    case module_1.NativeType.F64: {\n                        value = i32(module_1.getConstValueF64(expr));\n                        break;\n                    }\n                    default: assert(false);\n                }\n                switch (type.kind) {\n                    case 0 /* I8 */: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n                    case 1 /* I16 */: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n                    case 5 /* U8 */: return value < 0 || value > u8.MAX_VALUE;\n                    case 6 /* U16 */: return value < 0 || value > u16.MAX_VALUE;\n                    case 10 /* BOOL */: return (value & ~1) != 0;\n                }\n                break;\n            }\n            // overflows if the conversion does\n            case module_1.ExpressionId.Load: {\n                let fromType;\n                let signed = module_1.isLoadSigned(expr);\n                switch (module_1.getLoadBytes(expr)) {\n                    case 1: {\n                        fromType = signed ? types_1.Type.i8 : types_1.Type.u8;\n                        break;\n                    }\n                    case 2: {\n                        fromType = signed ? types_1.Type.i16 : types_1.Type.u16;\n                        break;\n                    }\n                    default: {\n                        fromType = signed ? types_1.Type.i32 : types_1.Type.u32;\n                        break;\n                    }\n                }\n                return canConversionOverflow(fromType, type);\n            }\n            // overflows if the result does, which is either\n            // - the last expression of the block, by contract, if the block doesn't have a label\n            // - the last expression or the value of an inner br if the block has a label (TODO)\n            case module_1.ExpressionId.Block: {\n                if (!module_1.getBlockName(expr)) {\n                    let size = assert(module_1.getBlockChildCount(expr));\n                    let last = module_1.getBlockChildAt(expr, size - 1);\n                    return this.canOverflow(last, type);\n                }\n                break;\n            }\n            // overflows if either side does\n            case module_1.ExpressionId.If: {\n                return this.canOverflow(module_1.getIfTrue(expr), type)\n                    || this.canOverflow(assert(module_1.getIfFalse(expr)), type);\n            }\n            // overflows if either side does\n            case module_1.ExpressionId.Select: {\n                return this.canOverflow(module_1.getSelectThen(expr), type)\n                    || this.canOverflow(module_1.getSelectElse(expr), type);\n            }\n            // overflows if the call does not return a wrapped value or the conversion does\n            case module_1.ExpressionId.Call: {\n                let program = this.parentFunction.program;\n                let instancesByName = program.instancesByName;\n                let instanceName = assert(module_1.getCallTarget(expr));\n                if (instancesByName.has(instanceName)) {\n                    let instance = assert(instancesByName.get(instanceName));\n                    assert(instance.kind == program_1.ElementKind.FUNCTION);\n                    let functionInstance = instance;\n                    let returnType = functionInstance.signature.returnType;\n                    return !functionInstance.flow.is(2 /* RETURNS_WRAPPED */)\n                        || canConversionOverflow(returnType, type);\n                }\n                return false; // assume no overflow for builtins\n            }\n            // doesn't technically overflow\n            case module_1.ExpressionId.Unreachable: return false;\n        }\n        return true;\n    }\n    toString() {\n        var levels = 0;\n        var parent = this.parent;\n        while (parent) {\n            parent = parent.parent;\n            ++levels;\n        }\n        var sb = new Array();\n        if (this.is(1 /* RETURNS */))\n            sb.push(\"RETURNS\");\n        if (this.is(2 /* RETURNS_WRAPPED */))\n            sb.push(\"RETURNS_WRAPPED\");\n        if (this.is(4 /* RETURNS_NONNULL */))\n            sb.push(\"RETURNS_NONNULL\");\n        if (this.is(8 /* THROWS */))\n            sb.push(\"THROWS\");\n        if (this.is(16 /* BREAKS */))\n            sb.push(\"BREAKS\");\n        if (this.is(32 /* CONTINUES */))\n            sb.push(\"CONTINUES\");\n        if (this.is(64 /* ACCESSES_THIS */))\n            sb.push(\"ACCESSES_THIS\");\n        if (this.is(128 /* CALLS_SUPER */))\n            sb.push(\"CALLS_SUPER\");\n        if (this.is(256 /* TERMINATES */))\n            sb.push(\"TERMINATES\");\n        if (this.is(512 /* CONDITIONALLY_RETURNS */))\n            sb.push(\"CONDITIONALLY_RETURNS\");\n        if (this.is(1024 /* CONDITIONALLY_THROWS */))\n            sb.push(\"CONDITIONALLY_THROWS\");\n        if (this.is(2048 /* CONDITIONALLY_BREAKS */))\n            sb.push(\"CONDITIONALLY_BREAKS\");\n        if (this.is(4096 /* CONDITIONALLY_CONTINUES */))\n            sb.push(\"CONDITIONALLY_CONTINUES\");\n        if (this.is(8192 /* CONDITIONALLY_ACCESSES_THIS */))\n            sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n        if (this.is(16384 /* MAY_RETURN_NONTHIS */))\n            sb.push(\"MAY_RETURN_NONTHIS\");\n        return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n    }\n}\nexports.Flow = Flow;\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType, toType) {\n    return toType.isShortIntegerValue && (!fromType.isIntegerValue || // i.e. float to small int\n        fromType.size > toType.size || // larger int to small int\n        fromType.isSignedIntegerValue != toType.isSignedIntegerValue // signedness mismatch\n    );\n}\nvar findusedlocals_1 = __webpack_require__(416);\nObject.defineProperty(exports, \"findUsedLocals\", ({ enumerable: true, get: function () { return findusedlocals_1.findUsedLocals; } }));\n\n\n/***/ }),\n\n/***/ 308:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\nvar __webpack_unused_export__;\n\n/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n__webpack_unused_export__ = ({ value: true });\n__webpack_require__(352);\n__webpack_require__(292);\n__webpack_require__(620);\n__webpack_require__(875);\n__webpack_require__(710);\n\n\n/***/ }),\n\n/***/ 780:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.buildTSD = exports.buildIDL = exports.compile = exports.initializeProgram = exports.getDependee = exports.nextFile = exports.parse = exports.isError = exports.isWarning = exports.isInfo = exports.formatDiagnostic = exports.getSource = exports.nextDiagnostic = exports.newProgram = exports.setPedantic = exports.setOptimizeLevelHints = exports.disableFeature = exports.enableFeature = exports.FEATURE_MEMORY64 = exports.FEATURE_GC = exports.FEATURE_MULTI_VALUE = exports.FEATURE_REFERENCE_TYPES = exports.FEATURE_TAIL_CALLS = exports.FEATURE_EXCEPTION_HANDLING = exports.FEATURE_THREADS = exports.FEATURE_SIMD = exports.FEATURE_BULK_MEMORY = exports.FEATURE_NONTRAPPING_F2I = exports.FEATURE_MUTABLE_GLOBALS = exports.FEATURE_SIGN_EXTENSION = exports.setStackSize = exports.DEFAULT_STACK_SIZE = exports.setExportRuntime = exports.setLowMemoryLimit = exports.setNoUnsafe = exports.setExplicitStart = exports.setGlobalAlias = exports.setTableBase = exports.setMemoryBase = exports.setSourceMap = exports.setExportTable = exports.setImportTable = exports.setSharedMemory = exports.setMaximumMemory = exports.setInitialMemory = exports.setImportMemory = exports.setExportMemory = exports.setNoAssert = exports.setTarget = exports.newOptions = void 0;\nexports.util = void 0;\nconst compiler_1 = __webpack_require__(220);\nconst definitions_1 = __webpack_require__(317);\nconst diagnostics_1 = __webpack_require__(256);\nObject.defineProperty(exports, \"formatDiagnostic\", ({ enumerable: true, get: function () { return diagnostics_1.formatDiagnosticMessage; } }));\nconst program_1 = __webpack_require__(974);\n// Options\n/** Creates a new set of compiler options. */\nfunction newOptions() {\n    return new compiler_1.Options();\n}\nexports.newOptions = newOptions;\n/** Sets the `target` option. */\nfunction setTarget(options, target) {\n    options.target = target;\n}\nexports.setTarget = setTarget;\n/** Sets the `noAssert` option. */\nfunction setNoAssert(options, noAssert) {\n    options.noAssert = noAssert;\n}\nexports.setNoAssert = setNoAssert;\n/** Sets the `exportMemory` option. */\nfunction setExportMemory(options, exportMemory) {\n    options.exportMemory = exportMemory;\n}\nexports.setExportMemory = setExportMemory;\n/** Sets the `importMemory` option. */\nfunction setImportMemory(options, importMemory) {\n    options.importMemory = importMemory;\n}\nexports.setImportMemory = setImportMemory;\n/** Sets the `initialMemory` option. */\nfunction setInitialMemory(options, initialMemory) {\n    options.initialMemory = initialMemory;\n}\nexports.setInitialMemory = setInitialMemory;\n/** Sets the `maximumMemory` option. */\nfunction setMaximumMemory(options, maximumMemory) {\n    options.maximumMemory = maximumMemory;\n}\nexports.setMaximumMemory = setMaximumMemory;\n/** Sets the `sharedMemory` option. */\nfunction setSharedMemory(options, sharedMemory) {\n    options.sharedMemory = sharedMemory;\n}\nexports.setSharedMemory = setSharedMemory;\n/** Sets the `importTable` option. */\nfunction setImportTable(options, importTable) {\n    options.importTable = importTable;\n}\nexports.setImportTable = setImportTable;\n/** Sets the `exportTable` option. */\nfunction setExportTable(options, exportTable) {\n    options.exportTable = exportTable;\n}\nexports.setExportTable = setExportTable;\n/** Sets the `sourceMap` option. */\nfunction setSourceMap(options, sourceMap) {\n    options.sourceMap = sourceMap;\n}\nexports.setSourceMap = setSourceMap;\n/** Sets the `memoryBase` option. */\nfunction setMemoryBase(options, memoryBase) {\n    options.memoryBase = memoryBase;\n}\nexports.setMemoryBase = setMemoryBase;\n/** Sets the `tableBase` option. */\nfunction setTableBase(options, tableBase) {\n    options.tableBase = tableBase;\n}\nexports.setTableBase = setTableBase;\n/** Sets a 'globalAliases' value. */\nfunction setGlobalAlias(options, alias, name) {\n    var globalAliases = options.globalAliases;\n    if (!globalAliases)\n        options.globalAliases = globalAliases = new Map();\n    globalAliases.set(alias, name);\n}\nexports.setGlobalAlias = setGlobalAlias;\n/** Sets the `explicitStart` option. */\nfunction setExplicitStart(options, explicitStart) {\n    options.explicitStart = explicitStart;\n}\nexports.setExplicitStart = setExplicitStart;\n/** Sets the `noUnsafe` option. */\nfunction setNoUnsafe(options, noUnsafe) {\n    options.noUnsafe = noUnsafe;\n}\nexports.setNoUnsafe = setNoUnsafe;\n/** Sets the `lowMemoryLimit` option. */\nfunction setLowMemoryLimit(options, lowMemoryLimit) {\n    options.lowMemoryLimit = lowMemoryLimit;\n}\nexports.setLowMemoryLimit = setLowMemoryLimit;\n/** Sets the `exportRuntime` option. */\nfunction setExportRuntime(options, exportRuntime) {\n    options.exportRuntime = exportRuntime;\n}\nexports.setExportRuntime = setExportRuntime;\n/** Default stack size. */\nexports.DEFAULT_STACK_SIZE = 16384;\n/** Sets the `stackSize` option. */\nfunction setStackSize(options, stackSize) {\n    options.stackSize = stackSize;\n}\nexports.setStackSize = setStackSize;\n/** Sign extension operations. */\nexports.FEATURE_SIGN_EXTENSION = 1 /* SIGN_EXTENSION */;\n/** Mutable global imports and exports. */\nexports.FEATURE_MUTABLE_GLOBALS = 2 /* MUTABLE_GLOBALS */;\n/** Non-trapping float to int conversion operations. */\nexports.FEATURE_NONTRAPPING_F2I = 4 /* NONTRAPPING_F2I */;\n/** Bulk memory operations. */\nexports.FEATURE_BULK_MEMORY = 8 /* BULK_MEMORY */;\n/** SIMD types and operations. */\nexports.FEATURE_SIMD = 16 /* SIMD */;\n/** Threading and atomic operations. */\nexports.FEATURE_THREADS = 32 /* THREADS */;\n/** Exception handling operations. */\nexports.FEATURE_EXCEPTION_HANDLING = 64 /* EXCEPTION_HANDLING */;\n/** Tail call operations. */\nexports.FEATURE_TAIL_CALLS = 128 /* TAIL_CALLS */;\n/** Reference types. */\nexports.FEATURE_REFERENCE_TYPES = 256 /* REFERENCE_TYPES */;\n/** Multi value types. */\nexports.FEATURE_MULTI_VALUE = 512 /* MULTI_VALUE */;\n/** Garbage collection. */\nexports.FEATURE_GC = 1024 /* GC */;\n/** Memory64. */\nexports.FEATURE_MEMORY64 = 2048 /* MEMORY64 */;\n/** Enables a specific feature. */\nfunction enableFeature(options, feature) {\n    options.features |= feature;\n}\nexports.enableFeature = enableFeature;\n/** Disables a specific feature. */\nfunction disableFeature(options, feature) {\n    options.features &= ~feature;\n}\nexports.disableFeature = disableFeature;\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nfunction setOptimizeLevelHints(options, optimizeLevel, shrinkLevel) {\n    options.optimizeLevelHint = optimizeLevel;\n    options.shrinkLevelHint = shrinkLevel;\n}\nexports.setOptimizeLevelHints = setOptimizeLevelHints;\n/** Sets the `pedantic` option. */\nfunction setPedantic(options, pedantic) {\n    options.pedantic = pedantic;\n}\nexports.setPedantic = setPedantic;\n// Program\n/** Creates a new Program. */\nfunction newProgram(options) {\n    return new program_1.Program(options);\n}\nexports.newProgram = newProgram;\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nfunction nextDiagnostic(program) {\n    return program.diagnosticsOffset < program.diagnostics.length\n        ? program.diagnostics[program.diagnosticsOffset++]\n        : null;\n}\nexports.nextDiagnostic = nextDiagnostic;\n/** Obtains the source of the given file. */\nfunction getSource(program, internalPath) {\n    return program.getSource(internalPath);\n}\nexports.getSource = getSource;\n/** Tests whether a diagnostic is informatory. */\nfunction isInfo(message) {\n    return message.category == diagnostics_1.DiagnosticCategory.INFO;\n}\nexports.isInfo = isInfo;\n/** Tests whether a diagnostic is a warning. */\nfunction isWarning(message) {\n    return message.category == diagnostics_1.DiagnosticCategory.WARNING;\n}\nexports.isWarning = isWarning;\n/** Tests whether a diagnostic is an error. */\nfunction isError(message) {\n    return message.category == diagnostics_1.DiagnosticCategory.ERROR;\n}\nexports.isError = isError;\n// Parser\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nfunction parse(\n/** Program reference. */\nprogram, \n/** Source text of the file, or `null` to indicate not found. */\ntext, \n/** Normalized path of the file. */\npath, \n/** Whether this is an entry file. */\nisEntry = false) {\n    program.parser.parseFile(text, path, isEntry);\n}\nexports.parse = parse;\n/** Obtains the next required file's path. Returns `null` once complete. */\nfunction nextFile(program) {\n    return program.parser.nextFile();\n}\nexports.nextFile = nextFile;\n/** Obtains the path of the dependee of a given imported file. */\nfunction getDependee(program, file) {\n    return program.parser.getDependee(file);\n}\nexports.getDependee = getDependee;\n// Compiler\n/** Initializes the program pre-emptively for transform hooks. */\nfunction initializeProgram(program) {\n    program.initialize();\n}\nexports.initializeProgram = initializeProgram;\n/** Compiles the parsed sources to a module. */\nfunction compile(program) {\n    program.parser.finish();\n    return new compiler_1.Compiler(program).compile();\n}\nexports.compile = compile;\n/** Builds WebIDL definitions for the specified program. */\nfunction buildIDL(program) {\n    return definitions_1.IDLBuilder.build(program);\n}\nexports.buildIDL = buildIDL;\n/** Builds TypeScript definitions for the specified program. */\nfunction buildTSD(program) {\n    return definitions_1.TSDBuilder.build(program);\n}\nexports.buildTSD = buildTSD;\n// Full API\n__exportStar(__webpack_require__(60), exports);\n__exportStar(__webpack_require__(200), exports);\n__exportStar(__webpack_require__(220), exports);\n__exportStar(__webpack_require__(317), exports);\n__exportStar(__webpack_require__(256), exports);\n__exportStar(__webpack_require__(154), exports);\n__exportStar(__webpack_require__(656), exports);\n__exportStar(__webpack_require__(215), exports);\n__exportStar(__webpack_require__(974), exports);\n__exportStar(__webpack_require__(742), exports);\n__exportStar(__webpack_require__(411), exports);\n__exportStar(__webpack_require__(699), exports);\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\n__exportStar(__webpack_require__(393), exports);\nconst util = __webpack_require__(910);\nexports.util = util;\n// TODO: compat with 0.9, remove with 0.10\n__exportStar(__webpack_require__(910), exports);\n\n\n/***/ }),\n\n/***/ 656:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getLoopName = exports.getIfFalse = exports.getIfTrue = exports.getIfCondition = exports.getBlockChildAt = exports.getBlockChildCount = exports.getBlockName = exports.getStoreValue = exports.getStorePtr = exports.getStoreOffset = exports.getStoreBytes = exports.isLoadSigned = exports.getLoadPtr = exports.getLoadOffset = exports.getLoadBytes = exports.getUnaryValue = exports.getUnaryOp = exports.getBinaryRight = exports.getBinaryLeft = exports.getBinaryOp = exports.getGlobalGetName = exports.isLocalTee = exports.getLocalSetValue = exports.getLocalSetIndex = exports.getLocalGetIndex = exports.isConstZero = exports.getConstValueF64 = exports.getConstValueF32 = exports.getConstValueI64High = exports.getConstValueI64Low = exports.getConstValueI32 = exports.getExpressionType = exports.getExpressionId = exports.expandType = exports.createType = exports.Module = exports.MemorySegment = exports.ExpressionRunnerFlags = exports.SIMDLoadOp = exports.SIMDTernaryOp = exports.SIMDShiftOp = exports.SIMDReplaceOp = exports.SIMDExtractOp = exports.AtomicRMWOp = exports.BinaryOp = exports.UnaryOp = exports.ExternalKind = exports.ExpressionId = exports.FeatureFlags = exports.NativeType = void 0;\nexports.needsExplicitUnreachable = exports.BinaryModule = exports.readString = exports.allocPtrArray = exports.hasSideEffects = exports.getSideEffects = exports.SideEffects = exports.SwitchBuilder = exports.Relooper = exports.getEventResults = exports.getEventParams = exports.getEventAttribute = exports.getEventName = exports.getGlobalInit = exports.isGlobalMutable = exports.getGlobalType = exports.getGlobalName = exports.getFunctionVars = exports.getFunctionResults = exports.getFunctionParams = exports.getFunctionName = exports.getFunctionBody = exports.getMemoryGrowDelta = exports.getCallOperandAt = exports.getCallOperandCount = exports.getCallTarget = exports.getReturnValue = exports.getDropValue = exports.getSelectCondition = exports.getSelectElse = exports.getSelectThen = exports.getBreakCondition = exports.getBreakName = exports.getLoopBody = void 0;\nconst builtins_1 = __webpack_require__(346);\nconst common_1 = __webpack_require__(200);\nconst binaryen = __webpack_require__(292);\nvar NativeType;\n(function (NativeType) {\n    NativeType.None = 0 /* _BinaryenTypeNone */;\n    NativeType.Unreachable = 1 /* _BinaryenTypeUnreachable */;\n    NativeType.I32 = 2 /* _BinaryenTypeInt32 */;\n    NativeType.I64 = 3 /* _BinaryenTypeInt64 */;\n    NativeType.F32 = 4 /* _BinaryenTypeFloat32 */;\n    NativeType.F64 = 5 /* _BinaryenTypeFloat64 */;\n    NativeType.V128 = 6 /* _BinaryenTypeVec128 */;\n    NativeType.Funcref = 7 /* _BinaryenTypeFuncref */;\n    NativeType.Externref = 8 /* _BinaryenTypeExternref */;\n    NativeType.Exnref = 9 /* _BinaryenTypeExnref */;\n    NativeType.Anyref = 10 /* _BinaryenTypeAnyref */;\n    NativeType.Auto = -1 /* _BinaryenTypeAuto */;\n})(NativeType = exports.NativeType || (exports.NativeType = {}));\nvar FeatureFlags;\n(function (FeatureFlags) {\n    FeatureFlags[FeatureFlags[\"MVP\"] = 0] = \"MVP\"; /* _BinaryenFeatureMVP */\n    FeatureFlags[FeatureFlags[\"Atomics\"] = 1] = \"Atomics\"; /* _BinaryenFeatureAtomics */\n    FeatureFlags[FeatureFlags[\"MutableGloabls\"] = 2] = \"MutableGloabls\"; /* _BinaryenFeatureMutableGlobals */\n    FeatureFlags[FeatureFlags[\"NontrappingFPToInt\"] = 4] = \"NontrappingFPToInt\"; /* _BinaryenFeatureNontrappingFPToInt */\n    FeatureFlags[FeatureFlags[\"SIMD128\"] = 8] = \"SIMD128\"; /* _BinaryenFeatureSIMD128 */\n    FeatureFlags[FeatureFlags[\"BulkMemory\"] = 16] = \"BulkMemory\"; /* _BinaryenFeatureBulkMemory */\n    FeatureFlags[FeatureFlags[\"SignExt\"] = 32] = \"SignExt\"; /* _BinaryenFeatureSignExt */\n    FeatureFlags[FeatureFlags[\"ExceptionHandling\"] = 64] = \"ExceptionHandling\"; /* _BinaryenFeatureExceptionHandling */\n    FeatureFlags[FeatureFlags[\"TailCall\"] = 128] = \"TailCall\"; /* _BinaryenFeatureTailCall */\n    FeatureFlags[FeatureFlags[\"ReferenceTypes\"] = 256] = \"ReferenceTypes\"; /* _BinaryenFeatureReferenceTypes */\n    FeatureFlags[FeatureFlags[\"MultiValue\"] = 512] = \"MultiValue\"; /* _BinaryenFeatureMultivalue */\n    FeatureFlags[FeatureFlags[\"GC\"] = 1024] = \"GC\"; /* _BinaryenFeatureGC */\n    FeatureFlags[FeatureFlags[\"Memory64\"] = 2048] = \"Memory64\";\n    FeatureFlags[FeatureFlags[\"All\"] = 4095] = \"All\"; /* _BinaryenFeatureAll */\n})(FeatureFlags = exports.FeatureFlags || (exports.FeatureFlags = {}));\nvar ExpressionId;\n(function (ExpressionId) {\n    ExpressionId[ExpressionId[\"Invalid\"] = 0] = \"Invalid\"; /* _BinaryenInvalidId */\n    ExpressionId[ExpressionId[\"Block\"] = 1] = \"Block\"; /* _BinaryenBlockId */\n    ExpressionId[ExpressionId[\"If\"] = 2] = \"If\"; /* _BinaryenIfId */\n    ExpressionId[ExpressionId[\"Loop\"] = 3] = \"Loop\"; /* _BinaryenLoopId */\n    ExpressionId[ExpressionId[\"Break\"] = 4] = \"Break\"; /* _BinaryenBreakId */\n    ExpressionId[ExpressionId[\"Switch\"] = 5] = \"Switch\"; /* _BinaryenSwitchId */\n    ExpressionId[ExpressionId[\"Call\"] = 6] = \"Call\"; /* _BinaryenCallId */\n    ExpressionId[ExpressionId[\"CallIndirect\"] = 7] = \"CallIndirect\"; /* _BinaryenCallIndirectId */\n    ExpressionId[ExpressionId[\"LocalGet\"] = 8] = \"LocalGet\"; /* _BinaryenLocalGetId */\n    ExpressionId[ExpressionId[\"LocalSet\"] = 9] = \"LocalSet\"; /* _BinaryenLocalSetId */\n    ExpressionId[ExpressionId[\"GlobalGet\"] = 10] = \"GlobalGet\"; /* _BinaryenGlobalGetId */\n    ExpressionId[ExpressionId[\"GlobalSet\"] = 11] = \"GlobalSet\"; /* _BinaryenGlobalSetId */\n    ExpressionId[ExpressionId[\"Load\"] = 12] = \"Load\"; /* _BinaryenLoadId */\n    ExpressionId[ExpressionId[\"Store\"] = 13] = \"Store\"; /* _BinaryenStoreId */\n    ExpressionId[ExpressionId[\"Const\"] = 14] = \"Const\"; /* _BinaryenConstId */\n    ExpressionId[ExpressionId[\"Unary\"] = 15] = \"Unary\"; /* _BinaryenUnaryId */\n    ExpressionId[ExpressionId[\"Binary\"] = 16] = \"Binary\"; /* _BinaryenBinaryId */\n    ExpressionId[ExpressionId[\"Select\"] = 17] = \"Select\"; /* _BinaryenSelectId */\n    ExpressionId[ExpressionId[\"Drop\"] = 18] = \"Drop\"; /* _BinaryenDropId */\n    ExpressionId[ExpressionId[\"Return\"] = 19] = \"Return\"; /* _BinaryenReturnId */\n    ExpressionId[ExpressionId[\"MemorySize\"] = 20] = \"MemorySize\"; /* _BinaryenMemorySizeId */\n    ExpressionId[ExpressionId[\"MemoryGrow\"] = 21] = \"MemoryGrow\"; /* _BinaryenMemoryGrowId */\n    ExpressionId[ExpressionId[\"Nop\"] = 22] = \"Nop\"; /* _BinaryenNopId */\n    ExpressionId[ExpressionId[\"Unreachable\"] = 23] = \"Unreachable\"; /* _BinaryenUnreachableId */\n    ExpressionId[ExpressionId[\"AtomicRMW\"] = 24] = \"AtomicRMW\"; /* _BinaryenAtomicRMWId */\n    ExpressionId[ExpressionId[\"AtomicCmpxchg\"] = 25] = \"AtomicCmpxchg\"; /* _BinaryenAtomicCmpxchgId */\n    ExpressionId[ExpressionId[\"AtomicWait\"] = 26] = \"AtomicWait\"; /* _BinaryenAtomicWaitId */\n    ExpressionId[ExpressionId[\"AtomicNotify\"] = 27] = \"AtomicNotify\"; /* _BinaryenAtomicNotifyId */\n    ExpressionId[ExpressionId[\"AtomicFence\"] = 28] = \"AtomicFence\"; /* _BinaryenAtomicFenceId */\n    ExpressionId[ExpressionId[\"SIMDExtract\"] = 29] = \"SIMDExtract\"; /* _BinaryenSIMDExtractId */\n    ExpressionId[ExpressionId[\"SIMDReplace\"] = 30] = \"SIMDReplace\"; /* _BinaryenSIMDReplaceId */\n    ExpressionId[ExpressionId[\"SIMDShuffle\"] = 31] = \"SIMDShuffle\"; /* _BinaryenSIMDShuffleId */\n    ExpressionId[ExpressionId[\"SIMDTernary\"] = 32] = \"SIMDTernary\"; /* _BinaryenSIMDTernaryId */\n    ExpressionId[ExpressionId[\"SIMDShift\"] = 33] = \"SIMDShift\"; /* _BinaryenSIMDShiftId */\n    ExpressionId[ExpressionId[\"SIMDLoad\"] = 34] = \"SIMDLoad\"; /* _BinaryenSIMDLoadId */\n    // SIMDLoadStoreLane = 35,\n    ExpressionId[ExpressionId[\"MemoryInit\"] = 36] = \"MemoryInit\"; /* _BinaryenMemoryInitId */\n    ExpressionId[ExpressionId[\"DataDrop\"] = 37] = \"DataDrop\"; /* _BinaryenDataDropId */\n    ExpressionId[ExpressionId[\"MemoryCopy\"] = 38] = \"MemoryCopy\"; /* _BinaryenMemoryCopyId */\n    ExpressionId[ExpressionId[\"MemoryFill\"] = 39] = \"MemoryFill\"; /* _BinaryenMemoryFillId */\n    ExpressionId[ExpressionId[\"Pop\"] = 40] = \"Pop\"; /* _BinaryenPopId */\n    ExpressionId[ExpressionId[\"RefNull\"] = 41] = \"RefNull\"; /* _BinaryenRefNullId */\n    ExpressionId[ExpressionId[\"RefIsNull\"] = 42] = \"RefIsNull\"; /* _BinaryenRefIsNullId */\n    ExpressionId[ExpressionId[\"RefFunc\"] = 43] = \"RefFunc\"; /* _BinaryenRefFuncId */\n    ExpressionId[ExpressionId[\"RefEq\"] = 44] = \"RefEq\"; /* _BinaryenRefEqId */\n    ExpressionId[ExpressionId[\"Try\"] = 45] = \"Try\"; /* _BinaryenTryId */\n    ExpressionId[ExpressionId[\"Throw\"] = 46] = \"Throw\"; /* _BinaryenThrowId */\n    ExpressionId[ExpressionId[\"Rethrow\"] = 47] = \"Rethrow\"; /* _BinaryenRethrowId */\n    ExpressionId[ExpressionId[\"BrOnExn\"] = 48] = \"BrOnExn\"; /* _BinaryenBrOnExnId */\n    ExpressionId[ExpressionId[\"TupleMake\"] = 49] = \"TupleMake\"; /* _BinaryenTupleMakeId */\n    ExpressionId[ExpressionId[\"TupleExtract\"] = 50] = \"TupleExtract\";\n    ExpressionId[ExpressionId[\"I31New\"] = 51] = \"I31New\";\n    ExpressionId[ExpressionId[\"I31Get\"] = 52] = \"I31Get\";\n    ExpressionId[ExpressionId[\"CallRef\"] = 53] = \"CallRef\";\n    ExpressionId[ExpressionId[\"RefTest\"] = 54] = \"RefTest\";\n    ExpressionId[ExpressionId[\"RefCast\"] = 55] = \"RefCast\";\n    ExpressionId[ExpressionId[\"BrOnCast\"] = 56] = \"BrOnCast\";\n    ExpressionId[ExpressionId[\"RttCanon\"] = 57] = \"RttCanon\";\n    ExpressionId[ExpressionId[\"RttSub\"] = 58] = \"RttSub\";\n    ExpressionId[ExpressionId[\"StructNew\"] = 59] = \"StructNew\";\n    ExpressionId[ExpressionId[\"StructGet\"] = 60] = \"StructGet\";\n    ExpressionId[ExpressionId[\"StructSet\"] = 61] = \"StructSet\";\n    ExpressionId[ExpressionId[\"ArrayNew\"] = 62] = \"ArrayNew\";\n    ExpressionId[ExpressionId[\"ArrayGet\"] = 63] = \"ArrayGet\";\n    ExpressionId[ExpressionId[\"ArraySet\"] = 64] = \"ArraySet\";\n    ExpressionId[ExpressionId[\"ArrayLen\"] = 64] = \"ArrayLen\"; /* _BinaryenArrayLenId */\n})(ExpressionId = exports.ExpressionId || (exports.ExpressionId = {}));\nvar ExternalKind;\n(function (ExternalKind) {\n    ExternalKind[ExternalKind[\"Function\"] = 0] = \"Function\";\n    ExternalKind[ExternalKind[\"Table\"] = 1] = \"Table\";\n    ExternalKind[ExternalKind[\"Memory\"] = 2] = \"Memory\";\n    ExternalKind[ExternalKind[\"Global\"] = 3] = \"Global\";\n    ExternalKind[ExternalKind[\"Event\"] = 4] = \"Event\"; /* _BinaryenExternalEvent */\n})(ExternalKind = exports.ExternalKind || (exports.ExternalKind = {}));\nvar UnaryOp;\n(function (UnaryOp) {\n    UnaryOp[UnaryOp[\"ClzI32\"] = 0] = \"ClzI32\"; /* _BinaryenClzInt32 */\n    UnaryOp[UnaryOp[\"ClzI64\"] = 1] = \"ClzI64\"; /* _BinaryenClzInt64 */\n    UnaryOp[UnaryOp[\"CtzI32\"] = 2] = \"CtzI32\"; /* _BinaryenCtzInt32 */\n    UnaryOp[UnaryOp[\"CtzI64\"] = 3] = \"CtzI64\"; /* _BinaryenCtzInt64 */\n    UnaryOp[UnaryOp[\"PopcntI32\"] = 4] = \"PopcntI32\"; /* _BinaryenPopcntInt32 */\n    UnaryOp[UnaryOp[\"PopcntI64\"] = 5] = \"PopcntI64\"; /* _BinaryenPopcntInt64 */\n    UnaryOp[UnaryOp[\"NegF32\"] = 6] = \"NegF32\"; /* _BinaryenNegFloat32 */\n    UnaryOp[UnaryOp[\"NegF64\"] = 7] = \"NegF64\"; /* _BinaryenNegFloat64 */\n    UnaryOp[UnaryOp[\"AbsF32\"] = 8] = \"AbsF32\"; /* _BinaryenAbsFloat32 */\n    UnaryOp[UnaryOp[\"AbsF64\"] = 9] = \"AbsF64\"; /* _BinaryenAbsFloat64 */\n    UnaryOp[UnaryOp[\"CeilF32\"] = 10] = \"CeilF32\"; /* _BinaryenCeilFloat32 */\n    UnaryOp[UnaryOp[\"CeilF64\"] = 11] = \"CeilF64\"; /* _BinaryenCeilFloat64 */\n    UnaryOp[UnaryOp[\"FloorF32\"] = 12] = \"FloorF32\"; /* _BinaryenFloorFloat32 */\n    UnaryOp[UnaryOp[\"FloorF64\"] = 13] = \"FloorF64\"; /* _BinaryenFloorFloat64 */\n    UnaryOp[UnaryOp[\"TruncF32\"] = 14] = \"TruncF32\"; /* _BinaryenTruncFloat32 */\n    UnaryOp[UnaryOp[\"TruncF64\"] = 15] = \"TruncF64\"; /* _BinaryenTruncFloat64 */\n    UnaryOp[UnaryOp[\"NearestF32\"] = 16] = \"NearestF32\"; /* _BinaryenNearestFloat32 */\n    UnaryOp[UnaryOp[\"NearestF64\"] = 17] = \"NearestF64\"; /* _BinaryenNearestFloat64 */\n    UnaryOp[UnaryOp[\"SqrtF32\"] = 18] = \"SqrtF32\"; /* _BinaryenSqrtFloat32 */\n    UnaryOp[UnaryOp[\"SqrtF64\"] = 19] = \"SqrtF64\"; /* _BinaryenSqrtFloat64 */\n    UnaryOp[UnaryOp[\"EqzI32\"] = 20] = \"EqzI32\"; /* _BinaryenEqZInt32 */\n    UnaryOp[UnaryOp[\"EqzI64\"] = 21] = \"EqzI64\"; /* _BinaryenEqZInt64 */\n    UnaryOp[UnaryOp[\"ExtendI32\"] = 22] = \"ExtendI32\"; /* _BinaryenExtendSInt32 */\n    UnaryOp[UnaryOp[\"ExtendU32\"] = 23] = \"ExtendU32\"; /* _BinaryenExtendUInt32 */\n    UnaryOp[UnaryOp[\"WrapI64\"] = 24] = \"WrapI64\"; /* _BinaryenWrapInt64 */\n    UnaryOp[UnaryOp[\"TruncF32ToI32\"] = 25] = \"TruncF32ToI32\"; /* _BinaryenTruncSFloat32ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF32ToI64\"] = 26] = \"TruncF32ToI64\"; /* _BinaryenTruncSFloat32ToInt64 */\n    UnaryOp[UnaryOp[\"TruncF32ToU32\"] = 27] = \"TruncF32ToU32\"; /* _BinaryenTruncUFloat32ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF32ToU64\"] = 28] = \"TruncF32ToU64\"; /* _BinaryenTruncUFloat32ToInt64 */\n    UnaryOp[UnaryOp[\"TruncF64ToI32\"] = 29] = \"TruncF64ToI32\"; /* _BinaryenTruncSFloat64ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF64ToI64\"] = 30] = \"TruncF64ToI64\"; /* _BinaryenTruncSFloat64ToInt64 */\n    UnaryOp[UnaryOp[\"TruncF64ToU32\"] = 31] = \"TruncF64ToU32\"; /* _BinaryenTruncUFloat64ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF64ToU64\"] = 32] = \"TruncF64ToU64\"; /* _BinaryenTruncUFloat64ToInt64 */\n    UnaryOp[UnaryOp[\"ReinterpretF32\"] = 33] = \"ReinterpretF32\"; /* _BinaryenReinterpretFloat32 */\n    UnaryOp[UnaryOp[\"ReinterpretF64\"] = 34] = \"ReinterpretF64\"; /* _BinaryenReinterpretFloat64 */\n    UnaryOp[UnaryOp[\"ConvertI32ToF32\"] = 35] = \"ConvertI32ToF32\"; /* _BinaryenConvertSInt32ToFloat32 */\n    UnaryOp[UnaryOp[\"ConvertI32ToF64\"] = 36] = \"ConvertI32ToF64\"; /* _BinaryenConvertSInt32ToFloat64 */\n    UnaryOp[UnaryOp[\"ConvertU32ToF32\"] = 37] = \"ConvertU32ToF32\"; /* _BinaryenConvertUInt32ToFloat32 */\n    UnaryOp[UnaryOp[\"ConvertU32ToF64\"] = 38] = \"ConvertU32ToF64\"; /* _BinaryenConvertUInt32ToFloat64 */\n    UnaryOp[UnaryOp[\"ConvertI64ToF32\"] = 39] = \"ConvertI64ToF32\"; /* _BinaryenConvertSInt64ToFloat32 */\n    UnaryOp[UnaryOp[\"ConvertI64ToF64\"] = 40] = \"ConvertI64ToF64\"; /* _BinaryenConvertSInt64ToFloat64 */\n    UnaryOp[UnaryOp[\"ConvertU64ToF32\"] = 41] = \"ConvertU64ToF32\"; /* _BinaryenConvertUInt64ToFloat32 */\n    UnaryOp[UnaryOp[\"ConvertU64ToF64\"] = 42] = \"ConvertU64ToF64\"; /* _BinaryenConvertUInt64ToFloat64 */\n    UnaryOp[UnaryOp[\"PromoteF32\"] = 43] = \"PromoteF32\"; /* _BinaryenPromoteFloat32 */\n    UnaryOp[UnaryOp[\"DemoteF64\"] = 44] = \"DemoteF64\"; /* _BinaryenDemoteFloat64 */\n    UnaryOp[UnaryOp[\"ReinterpretI32\"] = 45] = \"ReinterpretI32\"; /* _BinaryenReinterpretInt32 */\n    UnaryOp[UnaryOp[\"ReinterpretI64\"] = 46] = \"ReinterpretI64\"; /* _BinaryenReinterpretInt64 */\n    // see: https://github.com/WebAssembly/sign-extension-ops\n    UnaryOp[UnaryOp[\"ExtendI8ToI32\"] = 47] = \"ExtendI8ToI32\"; /* _BinaryenExtendS8Int32 */\n    UnaryOp[UnaryOp[\"ExtendI16ToI32\"] = 48] = \"ExtendI16ToI32\"; /* _BinaryenExtendS16Int32 */\n    UnaryOp[UnaryOp[\"ExtendI8ToI64\"] = 49] = \"ExtendI8ToI64\"; /* _BinaryenExtendS8Int64 */\n    UnaryOp[UnaryOp[\"ExtendI16ToI64\"] = 50] = \"ExtendI16ToI64\"; /* _BinaryenExtendS16Int64 */\n    UnaryOp[UnaryOp[\"ExtendI32ToI64\"] = 51] = \"ExtendI32ToI64\"; /* _BinaryenExtendS32Int64 */\n    // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n    UnaryOp[UnaryOp[\"TruncF32ToI32Sat\"] = 52] = \"TruncF32ToI32Sat\"; /* _BinaryenTruncSatSFloat32ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF32ToU32Sat\"] = 53] = \"TruncF32ToU32Sat\"; /* _BinaryenTruncSatUFloat32ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF64ToI32Sat\"] = 54] = \"TruncF64ToI32Sat\"; /* _BinaryenTruncSatSFloat64ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF64ToU32Sat\"] = 55] = \"TruncF64ToU32Sat\"; /* _BinaryenTruncSatUFloat64ToInt32 */\n    UnaryOp[UnaryOp[\"TruncF32ToI64Sat\"] = 56] = \"TruncF32ToI64Sat\"; /* _BinaryenTruncSatSFloat32ToInt64 */\n    UnaryOp[UnaryOp[\"TruncF32ToU64Sat\"] = 57] = \"TruncF32ToU64Sat\"; /* _BinaryenTruncSatUFloat32ToInt64 */\n    UnaryOp[UnaryOp[\"TruncF64ToI64Sat\"] = 58] = \"TruncF64ToI64Sat\"; /* _BinaryenTruncSatSFloat64ToInt64 */\n    UnaryOp[UnaryOp[\"TruncF64ToU64Sat\"] = 59] = \"TruncF64ToU64Sat\"; /* _BinaryenTruncSatUFloat64ToInt64 */\n    // see: https://github.com/WebAssembly/simd\n    UnaryOp[UnaryOp[\"SplatI8x16\"] = 60] = \"SplatI8x16\"; /* _BinaryenSplatVecI8x16 */\n    UnaryOp[UnaryOp[\"SplatI16x8\"] = 61] = \"SplatI16x8\"; /* _BinaryenSplatVecI16x8 */\n    UnaryOp[UnaryOp[\"SplatI32x4\"] = 62] = \"SplatI32x4\"; /* _BinaryenSplatVecI32x4 */\n    UnaryOp[UnaryOp[\"SplatI64x2\"] = 63] = \"SplatI64x2\"; /* _BinaryenSplatVecI64x2 */\n    UnaryOp[UnaryOp[\"SplatF32x4\"] = 64] = \"SplatF32x4\"; /* _BinaryenSplatVecF32x4 */\n    UnaryOp[UnaryOp[\"SplatF64x2\"] = 65] = \"SplatF64x2\"; /* _BinaryenSplatVecF64x2 */\n    UnaryOp[UnaryOp[\"NotV128\"] = 66] = \"NotV128\"; /* _BinaryenNotVec128 */\n    UnaryOp[UnaryOp[\"AbsI8x16\"] = 67] = \"AbsI8x16\"; /* __BinaryenAbsVecI8x16 */\n    UnaryOp[UnaryOp[\"NegI8x16\"] = 68] = \"NegI8x16\"; /* _BinaryenNegVecI8x16 */\n    UnaryOp[UnaryOp[\"AnyTrueI8x16\"] = 69] = \"AnyTrueI8x16\"; /* _BinaryenAnyTrueVecI8x16 */\n    UnaryOp[UnaryOp[\"AllTrueI8x16\"] = 70] = \"AllTrueI8x16\"; /* _BinaryenAllTrueVecI8x16 */\n    UnaryOp[UnaryOp[\"BitmaskI8x16\"] = 71] = \"BitmaskI8x16\"; /* __BinaryenBitmaskVecI8x16 */\n    UnaryOp[UnaryOp[\"AbsI16x8\"] = 72] = \"AbsI16x8\"; /* __BinaryenAbsVecI16x8 */\n    // PopcntVecI8x16\n    UnaryOp[UnaryOp[\"NegI16x8\"] = 74] = \"NegI16x8\"; /* _BinaryenNegVecI16x8 */\n    UnaryOp[UnaryOp[\"AnyTrueI16x8\"] = 75] = \"AnyTrueI16x8\"; /* _BinaryenAnyTrueVecI16x8 */\n    UnaryOp[UnaryOp[\"AllTrueI16x8\"] = 76] = \"AllTrueI16x8\"; /* _BinaryenAllTrueVecI16x8 */\n    UnaryOp[UnaryOp[\"BitmaskI16x8\"] = 77] = \"BitmaskI16x8\"; /* _BinaryenBitmaskVecI16x8 */\n    UnaryOp[UnaryOp[\"AbsI32x4\"] = 78] = \"AbsI32x4\"; /* _BinaryenAbsVecI32x4 */\n    UnaryOp[UnaryOp[\"NegI32x4\"] = 79] = \"NegI32x4\"; /* _BinaryenNegVecI32x4 */\n    UnaryOp[UnaryOp[\"AnyTrueI32x4\"] = 80] = \"AnyTrueI32x4\"; /* _BinaryenAnyTrueVecI32x4 */\n    UnaryOp[UnaryOp[\"AllTrueI32x4\"] = 81] = \"AllTrueI32x4\"; /* _BinaryenAllTrueVecI32x4 */\n    UnaryOp[UnaryOp[\"BitmaskI32x4\"] = 82] = \"BitmaskI32x4\"; /* _BinaryenBitmaskVecI32x4 */\n    UnaryOp[UnaryOp[\"NegI64x2\"] = 83] = \"NegI64x2\"; /* _BinaryenNegVecI64x2 */\n    UnaryOp[UnaryOp[\"AnyTrueI64x2\"] = 84] = \"AnyTrueI64x2\"; /* _BinaryenAnyTrueVecI64x2 */\n    UnaryOp[UnaryOp[\"AllTrueI64x2\"] = 85] = \"AllTrueI64x2\"; /* _BinaryenAllTrueVecI64x2 */\n    UnaryOp[UnaryOp[\"AbsF32x4\"] = 86] = \"AbsF32x4\"; /* _BinaryenAbsVecF32x4 */\n    UnaryOp[UnaryOp[\"NegF32x4\"] = 87] = \"NegF32x4\"; /* _BinaryenNegVecF32x4 */\n    UnaryOp[UnaryOp[\"SqrtF32x4\"] = 88] = \"SqrtF32x4\"; /* _BinaryenSqrtVecF32x4 */\n    UnaryOp[UnaryOp[\"CeilF32x4\"] = 89] = \"CeilF32x4\"; /* _BinaryenCeilVecF32x4 */\n    UnaryOp[UnaryOp[\"FloorF32x4\"] = 90] = \"FloorF32x4\"; /* _BinaryenFloorVecF32x4 */\n    UnaryOp[UnaryOp[\"TruncF32x4\"] = 90] = \"TruncF32x4\"; /* BinaryenTruncVecF32x4 */\n    UnaryOp[UnaryOp[\"NearestF32x4\"] = 91] = \"NearestF32x4\"; /* BinaryenNearestVecF32x4 */\n    UnaryOp[UnaryOp[\"AbsF64x2\"] = 93] = \"AbsF64x2\"; /* _BinaryenAbsVecF64x2 */\n    UnaryOp[UnaryOp[\"NegF64x2\"] = 94] = \"NegF64x2\"; /* _BinaryenNegVecF64x2 */\n    UnaryOp[UnaryOp[\"SqrtF64x2\"] = 95] = \"SqrtF64x2\"; /* _BinaryenSqrtVecF64x2 */\n    UnaryOp[UnaryOp[\"CeilF64x2\"] = 96] = \"CeilF64x2\"; /* _BinaryenCeilVecF64x2 */\n    UnaryOp[UnaryOp[\"FloorF64x2\"] = 97] = \"FloorF64x2\"; /* _BinaryenFloorVecF64x2 */\n    UnaryOp[UnaryOp[\"TruncF64x2\"] = 97] = \"TruncF64x2\"; /* BinaryenTruncVecF64x2 */\n    UnaryOp[UnaryOp[\"NearestF64x2\"] = 98] = \"NearestF64x2\"; /* BinaryenNearestVecF64x2 */\n    UnaryOp[UnaryOp[\"TruncSatF32x4ToI32x4\"] = 100] = \"TruncSatF32x4ToI32x4\"; /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */\n    UnaryOp[UnaryOp[\"TruncSatF32x4ToU32x4\"] = 101] = \"TruncSatF32x4ToU32x4\"; /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */\n    UnaryOp[UnaryOp[\"TruncSatF64x2ToI64x2\"] = 102] = \"TruncSatF64x2ToI64x2\"; /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */\n    UnaryOp[UnaryOp[\"TruncSatF64x2ToU64x2\"] = 103] = \"TruncSatF64x2ToU64x2\"; /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */\n    UnaryOp[UnaryOp[\"ConvertI32x4ToF32x4\"] = 104] = \"ConvertI32x4ToF32x4\"; /* _BinaryenConvertSVecI32x4ToVecF32x4 */\n    UnaryOp[UnaryOp[\"ConvertU32x4ToF32x4\"] = 105] = \"ConvertU32x4ToF32x4\"; /* _BinaryenConvertUVecI32x4ToVecF32x4 */\n    UnaryOp[UnaryOp[\"ConvertI64x2ToF64x2\"] = 106] = \"ConvertI64x2ToF64x2\"; /* _BinaryenConvertSVecI64x2ToVecF64x2 */\n    UnaryOp[UnaryOp[\"ConvertU64x2ToF64x2\"] = 107] = \"ConvertU64x2ToF64x2\"; /* _BinaryenConvertUVecI64x2ToVecF64x2 */\n    UnaryOp[UnaryOp[\"WidenLowI8x16ToI16x8\"] = 108] = \"WidenLowI8x16ToI16x8\"; /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */\n    UnaryOp[UnaryOp[\"WidenHighI8x16ToI16x8\"] = 109] = \"WidenHighI8x16ToI16x8\"; /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */\n    UnaryOp[UnaryOp[\"WidenLowU8x16ToU16x8\"] = 110] = \"WidenLowU8x16ToU16x8\"; /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */\n    UnaryOp[UnaryOp[\"WidenHighU8x16ToU16x8\"] = 111] = \"WidenHighU8x16ToU16x8\"; /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */\n    UnaryOp[UnaryOp[\"WidenLowI16x8ToI32x4\"] = 112] = \"WidenLowI16x8ToI32x4\"; /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */\n    UnaryOp[UnaryOp[\"WidenHighI16x8ToI32x4\"] = 113] = \"WidenHighI16x8ToI32x4\"; /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */\n    UnaryOp[UnaryOp[\"WidenLowU16x8ToU32x4\"] = 114] = \"WidenLowU16x8ToU32x4\"; /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */\n    UnaryOp[UnaryOp[\"WidenHighU16x8ToU32x4\"] = 115] = \"WidenHighU16x8ToU32x4\"; /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n})(UnaryOp = exports.UnaryOp || (exports.UnaryOp = {}));\nvar BinaryOp;\n(function (BinaryOp) {\n    BinaryOp[BinaryOp[\"AddI32\"] = 0] = \"AddI32\"; /* _BinaryenAddInt32 */\n    BinaryOp[BinaryOp[\"SubI32\"] = 1] = \"SubI32\"; /* _BinaryenSubInt32 */\n    BinaryOp[BinaryOp[\"MulI32\"] = 2] = \"MulI32\"; /* _BinaryenMulInt32 */\n    BinaryOp[BinaryOp[\"DivI32\"] = 3] = \"DivI32\"; /* _BinaryenDivSInt32 */\n    BinaryOp[BinaryOp[\"DivU32\"] = 4] = \"DivU32\"; /* _BinaryenDivUInt32 */\n    BinaryOp[BinaryOp[\"RemI32\"] = 5] = \"RemI32\"; /* _BinaryenRemSInt32 */\n    BinaryOp[BinaryOp[\"RemU32\"] = 6] = \"RemU32\"; /* _BinaryenRemUInt32 */\n    BinaryOp[BinaryOp[\"AndI32\"] = 7] = \"AndI32\"; /* _BinaryenAndInt32 */\n    BinaryOp[BinaryOp[\"OrI32\"] = 8] = \"OrI32\"; /* _BinaryenOrInt32 */\n    BinaryOp[BinaryOp[\"XorI32\"] = 9] = \"XorI32\"; /* _BinaryenXorInt32 */\n    BinaryOp[BinaryOp[\"ShlI32\"] = 10] = \"ShlI32\"; /* _BinaryenShlInt32 */\n    BinaryOp[BinaryOp[\"ShrI32\"] = 11] = \"ShrI32\"; /* _BinaryenShrSInt32 */\n    BinaryOp[BinaryOp[\"ShrU32\"] = 12] = \"ShrU32\"; /* _BinaryenShrUInt32 */\n    BinaryOp[BinaryOp[\"RotlI32\"] = 13] = \"RotlI32\"; /* _BinaryenRotLInt32 */\n    BinaryOp[BinaryOp[\"RotrI32\"] = 14] = \"RotrI32\"; /* _BinaryenRotRInt32 */\n    BinaryOp[BinaryOp[\"EqI32\"] = 15] = \"EqI32\"; /* _BinaryenEqInt32 */\n    BinaryOp[BinaryOp[\"NeI32\"] = 16] = \"NeI32\"; /* _BinaryenNeInt32 */\n    BinaryOp[BinaryOp[\"LtI32\"] = 17] = \"LtI32\"; /* _BinaryenLtSInt32 */\n    BinaryOp[BinaryOp[\"LtU32\"] = 18] = \"LtU32\"; /* _BinaryenLtUInt32 */\n    BinaryOp[BinaryOp[\"LeI32\"] = 19] = \"LeI32\"; /* _BinaryenLeSInt32 */\n    BinaryOp[BinaryOp[\"LeU32\"] = 20] = \"LeU32\"; /* _BinaryenLeUInt32 */\n    BinaryOp[BinaryOp[\"GtI32\"] = 21] = \"GtI32\"; /* _BinaryenGtSInt32 */\n    BinaryOp[BinaryOp[\"GtU32\"] = 22] = \"GtU32\"; /* _BinaryenGtUInt32 */\n    BinaryOp[BinaryOp[\"GeI32\"] = 23] = \"GeI32\"; /* _BinaryenGeSInt32 */\n    BinaryOp[BinaryOp[\"GeU32\"] = 24] = \"GeU32\"; /* _BinaryenGeUInt32 */\n    BinaryOp[BinaryOp[\"AddI64\"] = 25] = \"AddI64\"; /* _BinaryenAddInt64 */\n    BinaryOp[BinaryOp[\"SubI64\"] = 26] = \"SubI64\"; /* _BinaryenSubInt64 */\n    BinaryOp[BinaryOp[\"MulI64\"] = 27] = \"MulI64\"; /* _BinaryenMulInt64 */\n    BinaryOp[BinaryOp[\"DivI64\"] = 28] = \"DivI64\"; /* _BinaryenDivSInt64 */\n    BinaryOp[BinaryOp[\"DivU64\"] = 29] = \"DivU64\"; /* _BinaryenDivUInt64 */\n    BinaryOp[BinaryOp[\"RemI64\"] = 30] = \"RemI64\"; /* _BinaryenRemSInt64 */\n    BinaryOp[BinaryOp[\"RemU64\"] = 31] = \"RemU64\"; /* _BinaryenRemUInt64 */\n    BinaryOp[BinaryOp[\"AndI64\"] = 32] = \"AndI64\"; /* _BinaryenAndInt64 */\n    BinaryOp[BinaryOp[\"OrI64\"] = 33] = \"OrI64\"; /* _BinaryenOrInt64 */\n    BinaryOp[BinaryOp[\"XorI64\"] = 34] = \"XorI64\"; /* _BinaryenXorInt64 */\n    BinaryOp[BinaryOp[\"ShlI64\"] = 35] = \"ShlI64\"; /* _BinaryenShlInt64 */\n    BinaryOp[BinaryOp[\"ShrI64\"] = 36] = \"ShrI64\"; /* _BinaryenShrSInt64 */\n    BinaryOp[BinaryOp[\"ShrU64\"] = 37] = \"ShrU64\"; /* _BinaryenShrUInt64 */\n    BinaryOp[BinaryOp[\"RotlI64\"] = 38] = \"RotlI64\"; /* _BinaryenRotLInt64 */\n    BinaryOp[BinaryOp[\"RotrI64\"] = 39] = \"RotrI64\"; /* _BinaryenRotRInt64 */\n    BinaryOp[BinaryOp[\"EqI64\"] = 40] = \"EqI64\"; /* _BinaryenEqInt64 */\n    BinaryOp[BinaryOp[\"NeI64\"] = 41] = \"NeI64\"; /* _BinaryenNeInt64 */\n    BinaryOp[BinaryOp[\"LtI64\"] = 42] = \"LtI64\"; /* _BinaryenLtSInt64 */\n    BinaryOp[BinaryOp[\"LtU64\"] = 43] = \"LtU64\"; /* _BinaryenLtUInt64 */\n    BinaryOp[BinaryOp[\"LeI64\"] = 44] = \"LeI64\"; /* _BinaryenLeSInt64 */\n    BinaryOp[BinaryOp[\"LeU64\"] = 45] = \"LeU64\"; /* _BinaryenLeUInt64 */\n    BinaryOp[BinaryOp[\"GtI64\"] = 46] = \"GtI64\"; /* _BinaryenGtSInt64 */\n    BinaryOp[BinaryOp[\"GtU64\"] = 47] = \"GtU64\"; /* _BinaryenGtUInt64 */\n    BinaryOp[BinaryOp[\"GeI64\"] = 48] = \"GeI64\"; /* _BinaryenGeSInt64 */\n    BinaryOp[BinaryOp[\"GeU64\"] = 49] = \"GeU64\"; /* _BinaryenGeUInt64 */\n    BinaryOp[BinaryOp[\"AddF32\"] = 50] = \"AddF32\"; /* _BinaryenAddFloat32 */\n    BinaryOp[BinaryOp[\"SubF32\"] = 51] = \"SubF32\"; /* _BinaryenSubFloat32 */\n    BinaryOp[BinaryOp[\"MulF32\"] = 52] = \"MulF32\"; /* _BinaryenMulFloat32 */\n    BinaryOp[BinaryOp[\"DivF32\"] = 53] = \"DivF32\"; /* _BinaryenDivFloat32 */\n    BinaryOp[BinaryOp[\"CopysignF32\"] = 54] = \"CopysignF32\"; /* _BinaryenCopySignFloat32 */\n    BinaryOp[BinaryOp[\"MinF32\"] = 55] = \"MinF32\"; /* _BinaryenMinFloat32 */\n    BinaryOp[BinaryOp[\"MaxF32\"] = 56] = \"MaxF32\"; /* _BinaryenMaxFloat32 */\n    BinaryOp[BinaryOp[\"EqF32\"] = 57] = \"EqF32\"; /* _BinaryenEqFloat32 */\n    BinaryOp[BinaryOp[\"NeF32\"] = 58] = \"NeF32\"; /* _BinaryenNeFloat32 */\n    BinaryOp[BinaryOp[\"LtF32\"] = 59] = \"LtF32\"; /* _BinaryenLtFloat32 */\n    BinaryOp[BinaryOp[\"LeF32\"] = 60] = \"LeF32\"; /* _BinaryenLeFloat32 */\n    BinaryOp[BinaryOp[\"GtF32\"] = 61] = \"GtF32\"; /* _BinaryenGtFloat32 */\n    BinaryOp[BinaryOp[\"GeF32\"] = 62] = \"GeF32\"; /* _BinaryenGeFloat32 */\n    BinaryOp[BinaryOp[\"AddF64\"] = 63] = \"AddF64\"; /* _BinaryenAddFloat64 */\n    BinaryOp[BinaryOp[\"SubF64\"] = 64] = \"SubF64\"; /* _BinaryenSubFloat64 */\n    BinaryOp[BinaryOp[\"MulF64\"] = 65] = \"MulF64\"; /* _BinaryenMulFloat64 */\n    BinaryOp[BinaryOp[\"DivF64\"] = 66] = \"DivF64\"; /* _BinaryenDivFloat64 */\n    BinaryOp[BinaryOp[\"CopysignF64\"] = 67] = \"CopysignF64\"; /* _BinaryenCopySignFloat64 */\n    BinaryOp[BinaryOp[\"MinF64\"] = 68] = \"MinF64\"; /* _BinaryenMinFloat64 */\n    BinaryOp[BinaryOp[\"MaxF64\"] = 69] = \"MaxF64\"; /* _BinaryenMaxFloat64 */\n    BinaryOp[BinaryOp[\"EqF64\"] = 70] = \"EqF64\"; /* _BinaryenEqFloat64 */\n    BinaryOp[BinaryOp[\"NeF64\"] = 71] = \"NeF64\"; /* _BinaryenNeFloat64 */\n    BinaryOp[BinaryOp[\"LtF64\"] = 72] = \"LtF64\"; /* _BinaryenLtFloat64 */\n    BinaryOp[BinaryOp[\"LeF64\"] = 73] = \"LeF64\"; /* _BinaryenLeFloat64 */\n    BinaryOp[BinaryOp[\"GtF64\"] = 74] = \"GtF64\"; /* _BinaryenGtFloat64 */\n    BinaryOp[BinaryOp[\"GeF64\"] = 75] = \"GeF64\"; /* _BinaryenGeFloat64 */\n    // see: https://github.com/WebAssembly/simd\n    BinaryOp[BinaryOp[\"EqI8x16\"] = 76] = \"EqI8x16\"; /* _BinaryenEqVecI8x16 */\n    BinaryOp[BinaryOp[\"NeI8x16\"] = 77] = \"NeI8x16\"; /* _BinaryenNeVecI8x16 */\n    BinaryOp[BinaryOp[\"LtI8x16\"] = 78] = \"LtI8x16\"; /* _BinaryenLtSVecI8x16 */\n    BinaryOp[BinaryOp[\"LtU8x16\"] = 79] = \"LtU8x16\"; /* _BinaryenLtUVecI8x16 */\n    BinaryOp[BinaryOp[\"GtI8x16\"] = 80] = \"GtI8x16\"; /* _BinaryenGtSVecI8x16 */\n    BinaryOp[BinaryOp[\"GtU8x16\"] = 81] = \"GtU8x16\"; /* _BinaryenGtUVecI8x16 */\n    BinaryOp[BinaryOp[\"LeI8x16\"] = 82] = \"LeI8x16\"; /* _BinaryenLeSVecI8x16 */\n    BinaryOp[BinaryOp[\"LeU8x16\"] = 83] = \"LeU8x16\"; /* _BinaryenLeUVecI8x16 */\n    BinaryOp[BinaryOp[\"GeI8x16\"] = 84] = \"GeI8x16\"; /* _BinaryenGeSVecI8x16 */\n    BinaryOp[BinaryOp[\"GeU8x16\"] = 85] = \"GeU8x16\"; /* _BinaryenGeUVecI8x16 */\n    BinaryOp[BinaryOp[\"EqI16x8\"] = 86] = \"EqI16x8\"; /* _BinaryenEqVecI16x8 */\n    BinaryOp[BinaryOp[\"NeI16x8\"] = 87] = \"NeI16x8\"; /* _BinaryenNeVecI16x8 */\n    BinaryOp[BinaryOp[\"LtI16x8\"] = 88] = \"LtI16x8\"; /* _BinaryenLtSVecI16x8 */\n    BinaryOp[BinaryOp[\"LtU16x8\"] = 89] = \"LtU16x8\"; /* _BinaryenLtUVecI16x8 */\n    BinaryOp[BinaryOp[\"GtI16x8\"] = 90] = \"GtI16x8\"; /* _BinaryenGtSVecI16x8 */\n    BinaryOp[BinaryOp[\"GtU16x8\"] = 91] = \"GtU16x8\"; /* _BinaryenGtUVecI16x8 */\n    BinaryOp[BinaryOp[\"LeI16x8\"] = 92] = \"LeI16x8\"; /* _BinaryenLeSVecI16x8 */\n    BinaryOp[BinaryOp[\"LeU16x8\"] = 93] = \"LeU16x8\"; /* _BinaryenLeUVecI16x8 */\n    BinaryOp[BinaryOp[\"GeI16x8\"] = 94] = \"GeI16x8\"; /* _BinaryenGeSVecI16x8 */\n    BinaryOp[BinaryOp[\"GeU16x8\"] = 95] = \"GeU16x8\"; /* _BinaryenGeUVecI16x8 */\n    BinaryOp[BinaryOp[\"EqI32x4\"] = 96] = \"EqI32x4\"; /* _BinaryenEqVecI32x4 */\n    BinaryOp[BinaryOp[\"NeI32x4\"] = 97] = \"NeI32x4\"; /* _BinaryenNeVecI32x4 */\n    BinaryOp[BinaryOp[\"LtI32x4\"] = 98] = \"LtI32x4\"; /* _BinaryenLtSVecI32x4 */\n    BinaryOp[BinaryOp[\"LtU32x4\"] = 99] = \"LtU32x4\"; /* _BinaryenLtUVecI32x4 */\n    BinaryOp[BinaryOp[\"GtI32x4\"] = 100] = \"GtI32x4\"; /* _BinaryenGtSVecI32x4 */\n    BinaryOp[BinaryOp[\"GtU32x4\"] = 101] = \"GtU32x4\"; /* _BinaryenGtUVecI32x4 */\n    BinaryOp[BinaryOp[\"LeI32x4\"] = 102] = \"LeI32x4\"; /* _BinaryenLeSVecI32x4 */\n    BinaryOp[BinaryOp[\"LeU32x4\"] = 103] = \"LeU32x4\"; /* _BinaryenLeUVecI32x4 */\n    BinaryOp[BinaryOp[\"GeI32x4\"] = 104] = \"GeI32x4\"; /* _BinaryenGeSVecI32x4 */\n    BinaryOp[BinaryOp[\"GeU32x4\"] = 105] = \"GeU32x4\"; /* _BinaryenGeUVecI32x4 */\n    BinaryOp[BinaryOp[\"EqF32x4\"] = 106] = \"EqF32x4\"; /* _BinaryenEqVecF32x4 */\n    BinaryOp[BinaryOp[\"NeF32x4\"] = 107] = \"NeF32x4\"; /* _BinaryenNeVecF32x4 */\n    BinaryOp[BinaryOp[\"LtF32x4\"] = 108] = \"LtF32x4\"; /* _BinaryenLtVecF32x4 */\n    BinaryOp[BinaryOp[\"GtF32x4\"] = 109] = \"GtF32x4\"; /* _BinaryenGtVecF32x4 */\n    BinaryOp[BinaryOp[\"LeF32x4\"] = 110] = \"LeF32x4\"; /* _BinaryenLeVecF32x4 */\n    BinaryOp[BinaryOp[\"GeF32x4\"] = 111] = \"GeF32x4\"; /* _BinaryenGeVecF32x4 */\n    BinaryOp[BinaryOp[\"EqF64x2\"] = 112] = \"EqF64x2\"; /* _BinaryenEqVecF64x2 */\n    BinaryOp[BinaryOp[\"NeF64x2\"] = 113] = \"NeF64x2\"; /* _BinaryenNeVecF64x2 */\n    BinaryOp[BinaryOp[\"LtF64x2\"] = 114] = \"LtF64x2\"; /* _BinaryenLtVecF64x2 */\n    BinaryOp[BinaryOp[\"GtF64x2\"] = 115] = \"GtF64x2\"; /* _BinaryenGtVecF64x2 */\n    BinaryOp[BinaryOp[\"LeF64x2\"] = 116] = \"LeF64x2\"; /* _BinaryenLeVecF64x2 */\n    BinaryOp[BinaryOp[\"GeF64x2\"] = 117] = \"GeF64x2\"; /* _BinaryenGeVecF64x2 */\n    BinaryOp[BinaryOp[\"AndV128\"] = 118] = \"AndV128\"; /* _BinaryenAndVec128 */\n    BinaryOp[BinaryOp[\"OrV128\"] = 119] = \"OrV128\"; /* _BinaryenOrVec128 */\n    BinaryOp[BinaryOp[\"XorV128\"] = 120] = \"XorV128\"; /* _BinaryenXorVec128 */\n    BinaryOp[BinaryOp[\"AndNotV128\"] = 121] = \"AndNotV128\"; /* _BinaryenAndNotVec128 */\n    BinaryOp[BinaryOp[\"AddI8x16\"] = 122] = \"AddI8x16\"; /* _BinaryenAddVecI8x16 */\n    BinaryOp[BinaryOp[\"AddSatI8x16\"] = 123] = \"AddSatI8x16\"; /* _BinaryenAddSatSVecI8x16 */\n    BinaryOp[BinaryOp[\"AddSatU8x16\"] = 124] = \"AddSatU8x16\"; /* _BinaryenAddSatUVecI8x16 */\n    BinaryOp[BinaryOp[\"SubI8x16\"] = 125] = \"SubI8x16\"; /* _BinaryenSubVecI8x16 */\n    BinaryOp[BinaryOp[\"SubSatI8x16\"] = 126] = \"SubSatI8x16\"; /* _BinaryenSubSatSVecI8x16 */\n    BinaryOp[BinaryOp[\"SubSatU8x16\"] = 127] = \"SubSatU8x16\"; /* _BinaryenSubSatUVecI8x16 */\n    BinaryOp[BinaryOp[\"MulI8x16\"] = 128] = \"MulI8x16\"; /* _BinaryenMulVecI8x16 */\n    BinaryOp[BinaryOp[\"MinI8x16\"] = 129] = \"MinI8x16\"; /* _BinaryenMinSVecI8x16 */\n    BinaryOp[BinaryOp[\"MinU8x16\"] = 130] = \"MinU8x16\"; /* _BinaryenMinUVecI8x16 */\n    BinaryOp[BinaryOp[\"MaxI8x16\"] = 131] = \"MaxI8x16\"; /* _BinaryenMaxSVecI8x16 */\n    BinaryOp[BinaryOp[\"MaxU8x16\"] = 132] = \"MaxU8x16\"; /* _BinaryenMaxUVecI8x16 */\n    BinaryOp[BinaryOp[\"AvgrU8x16\"] = 133] = \"AvgrU8x16\"; /* _BinaryenAvgrUVecI8x16 */\n    BinaryOp[BinaryOp[\"AddI16x8\"] = 134] = \"AddI16x8\"; /* _BinaryenAddVecI16x8 */\n    BinaryOp[BinaryOp[\"AddSatI16x8\"] = 135] = \"AddSatI16x8\"; /* _BinaryenAddSatSVecI16x8 */\n    BinaryOp[BinaryOp[\"AddSatU16x8\"] = 136] = \"AddSatU16x8\"; /* _BinaryenAddSatUVecI16x8 */\n    BinaryOp[BinaryOp[\"SubI16x8\"] = 137] = \"SubI16x8\"; /* _BinaryenSubVecI16x8 */\n    BinaryOp[BinaryOp[\"SubSatI16x8\"] = 138] = \"SubSatI16x8\"; /* _BinaryenSubSatSVecI16x8 */\n    BinaryOp[BinaryOp[\"SubSatU16x8\"] = 139] = \"SubSatU16x8\"; /* _BinaryenSubSatUVecI16x8 */\n    BinaryOp[BinaryOp[\"MulI16x8\"] = 140] = \"MulI16x8\"; /* _BinaryenMulVecI16x8 */\n    BinaryOp[BinaryOp[\"MinI16x8\"] = 141] = \"MinI16x8\"; /* _BinaryenMinSVecI16x8 */\n    BinaryOp[BinaryOp[\"MinU16x8\"] = 142] = \"MinU16x8\"; /* _BinaryenMinUVecI16x8 */\n    BinaryOp[BinaryOp[\"MaxI16x8\"] = 143] = \"MaxI16x8\"; /* _BinaryenMaxSVecI16x8 */\n    BinaryOp[BinaryOp[\"MaxU16x8\"] = 144] = \"MaxU16x8\"; /* _BinaryenMaxUVecI16x8 */\n    BinaryOp[BinaryOp[\"AvgrU16x8\"] = 145] = \"AvgrU16x8\"; /* _BinaryenAvgrUVecI16x8 */\n    // Q15MulrSatSVecI16x8,\n    // ExtMulLowSVecI16x8,\n    // ExtMulHighSVecI16x8,\n    // ExtMulLowUVecI16x8,\n    // ExtMulHighUVecI16x8,\n    BinaryOp[BinaryOp[\"AddI32x4\"] = 151] = \"AddI32x4\"; /* _BinaryenAddVecI32x4 */\n    BinaryOp[BinaryOp[\"SubI32x4\"] = 152] = \"SubI32x4\"; /* _BinaryenSubVecI32x4 */\n    BinaryOp[BinaryOp[\"MulI32x4\"] = 153] = \"MulI32x4\"; /* _BinaryenMulVecI32x4 */\n    BinaryOp[BinaryOp[\"MinI32x4\"] = 154] = \"MinI32x4\"; /* _BinaryenMinSVecI32x4 */\n    BinaryOp[BinaryOp[\"MinU32x4\"] = 155] = \"MinU32x4\"; /* _BinaryenMinUVecI32x4 */\n    BinaryOp[BinaryOp[\"MaxI32x4\"] = 156] = \"MaxI32x4\"; /* _BinaryenMaxSVecI32x4 */\n    BinaryOp[BinaryOp[\"MaxU32x4\"] = 157] = \"MaxU32x4\"; /* _BinaryenMaxUVecI32x4 */\n    BinaryOp[BinaryOp[\"DotI16x8\"] = 158] = \"DotI16x8\"; /* _BinaryenDotSVecI16x8ToVecI32x4 */\n    BinaryOp[BinaryOp[\"AddI64x2\"] = 163] = \"AddI64x2\"; /* _BinaryenAddVecI64x2 */\n    BinaryOp[BinaryOp[\"SubI64x2\"] = 164] = \"SubI64x2\"; /* _BinaryenSubVecI64x2 */\n    // ExtMulLowSVecI64x2\n    // ExtMulHighSVecI64x2\n    // ExtMulLowUVecI64x2\n    // ExtMulHighUVecI64x2\n    BinaryOp[BinaryOp[\"AddF32x4\"] = 170] = \"AddF32x4\"; /* _BinaryenAddVecF32x4 */\n    BinaryOp[BinaryOp[\"SubF32x4\"] = 171] = \"SubF32x4\"; /* _BinaryenSubVecF32x4 */\n    BinaryOp[BinaryOp[\"MulF32x4\"] = 172] = \"MulF32x4\"; /* _BinaryenMulVecF32x4 */\n    BinaryOp[BinaryOp[\"DivF32x4\"] = 173] = \"DivF32x4\"; /* _BinaryenDivVecF32x4 */\n    BinaryOp[BinaryOp[\"MinF32x4\"] = 174] = \"MinF32x4\"; /* _BinaryenMinVecF32x4 */\n    BinaryOp[BinaryOp[\"MaxF32x4\"] = 175] = \"MaxF32x4\"; /* _BinaryenMaxVecF32x4 */\n    BinaryOp[BinaryOp[\"PminF32x4\"] = 176] = \"PminF32x4\"; /* _BinaryenPMinVecF32x4 */\n    BinaryOp[BinaryOp[\"PmaxF32x4\"] = 177] = \"PmaxF32x4\"; /* _BinaryenPMaxVecF32x4 */\n    BinaryOp[BinaryOp[\"AddF64x2\"] = 178] = \"AddF64x2\"; /* _BinaryenAddVecF64x2 */\n    BinaryOp[BinaryOp[\"SubF64x2\"] = 179] = \"SubF64x2\"; /* _BinaryenSubVecF64x2 */\n    BinaryOp[BinaryOp[\"MulF64x2\"] = 180] = \"MulF64x2\"; /* _BinaryenMulVecF64x2 */\n    BinaryOp[BinaryOp[\"DivF64x2\"] = 181] = \"DivF64x2\"; /* _BinaryenDivVecF64x2 */\n    BinaryOp[BinaryOp[\"MinF64x2\"] = 182] = \"MinF64x2\"; /* _BinaryenMinVecF64x2 */\n    BinaryOp[BinaryOp[\"MaxF64x2\"] = 183] = \"MaxF64x2\"; /* _BinaryenMaxVecF64x2 */\n    BinaryOp[BinaryOp[\"PminF64x2\"] = 184] = \"PminF64x2\"; /* _BinaryenPMinVecF64x2 */\n    BinaryOp[BinaryOp[\"PmaxF64x2\"] = 185] = \"PmaxF64x2\"; /* _BinaryenPMaxVecF64x2 */\n    BinaryOp[BinaryOp[\"NarrowI16x8ToI8x16\"] = 186] = \"NarrowI16x8ToI8x16\"; /* _BinaryenNarrowSVecI16x8ToVecI8x16 */\n    BinaryOp[BinaryOp[\"NarrowU16x8ToU8x16\"] = 187] = \"NarrowU16x8ToU8x16\"; /* _BinaryenNarrowUVecI16x8ToVecI8x16 */\n    BinaryOp[BinaryOp[\"NarrowI32x4ToI16x8\"] = 188] = \"NarrowI32x4ToI16x8\"; /* _BinaryenNarrowSVecI32x4ToVecI16x8 */\n    BinaryOp[BinaryOp[\"NarrowU32x4ToU16x8\"] = 189] = \"NarrowU32x4ToU16x8\"; /* _BinaryenNarrowUVecI32x4ToVecI16x8 */\n    BinaryOp[BinaryOp[\"SwizzleV8x16\"] = 190] = \"SwizzleV8x16\"; /* _BinaryenSwizzleVec8x16 */\n})(BinaryOp = exports.BinaryOp || (exports.BinaryOp = {}));\nvar AtomicRMWOp;\n(function (AtomicRMWOp) {\n    AtomicRMWOp[AtomicRMWOp[\"Add\"] = 0] = \"Add\"; /* _BinaryenAtomicRMWAdd */\n    AtomicRMWOp[AtomicRMWOp[\"Sub\"] = 1] = \"Sub\"; /* _BinaryenAtomicRMWSub */\n    AtomicRMWOp[AtomicRMWOp[\"And\"] = 2] = \"And\"; /* _BinaryenAtomicRMWAnd */\n    AtomicRMWOp[AtomicRMWOp[\"Or\"] = 3] = \"Or\"; /* _BinaryenAtomicRMWOr */\n    AtomicRMWOp[AtomicRMWOp[\"Xor\"] = 4] = \"Xor\"; /* _BinaryenAtomicRMWXor */\n    AtomicRMWOp[AtomicRMWOp[\"Xchg\"] = 5] = \"Xchg\"; /* _BinaryenAtomicRMWXchg */\n})(AtomicRMWOp = exports.AtomicRMWOp || (exports.AtomicRMWOp = {}));\nvar SIMDExtractOp;\n(function (SIMDExtractOp) {\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneI8x16\"] = 0] = \"ExtractLaneI8x16\"; /* _BinaryenExtractLaneSVecI8x16 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneU8x16\"] = 1] = \"ExtractLaneU8x16\"; /* _BinaryenExtractLaneUVecI8x16 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneI16x8\"] = 2] = \"ExtractLaneI16x8\"; /* _BinaryenExtractLaneSVecI16x8 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneU16x8\"] = 3] = \"ExtractLaneU16x8\"; /* _BinaryenExtractLaneUVecI16x8 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneI32x4\"] = 4] = \"ExtractLaneI32x4\"; /* _BinaryenExtractLaneVecI32x4 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneI64x2\"] = 5] = \"ExtractLaneI64x2\"; /* _BinaryenExtractLaneVecI64x2 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneF32x4\"] = 6] = \"ExtractLaneF32x4\"; /* _BinaryenExtractLaneVecF32x4 */\n    SIMDExtractOp[SIMDExtractOp[\"ExtractLaneF64x2\"] = 7] = \"ExtractLaneF64x2\"; /* _BinaryenExtractLaneVecF64x2 */\n})(SIMDExtractOp = exports.SIMDExtractOp || (exports.SIMDExtractOp = {}));\nvar SIMDReplaceOp;\n(function (SIMDReplaceOp) {\n    SIMDReplaceOp[SIMDReplaceOp[\"ReplaceLaneI8x16\"] = 0] = \"ReplaceLaneI8x16\"; /* _BinaryenReplaceLaneVecI8x16 */\n    SIMDReplaceOp[SIMDReplaceOp[\"ReplaceLaneI16x8\"] = 1] = \"ReplaceLaneI16x8\"; /* _BinaryenReplaceLaneVecI16x8 */\n    SIMDReplaceOp[SIMDReplaceOp[\"ReplaceLaneI32x4\"] = 2] = \"ReplaceLaneI32x4\"; /* _BinaryenReplaceLaneVecI32x4 */\n    SIMDReplaceOp[SIMDReplaceOp[\"ReplaceLaneI64x2\"] = 3] = \"ReplaceLaneI64x2\"; /* _BinaryenReplaceLaneVecI64x2 */\n    SIMDReplaceOp[SIMDReplaceOp[\"ReplaceLaneF32x4\"] = 4] = \"ReplaceLaneF32x4\"; /* _BinaryenReplaceLaneVecF32x4 */\n    SIMDReplaceOp[SIMDReplaceOp[\"ReplaceLaneF64x2\"] = 5] = \"ReplaceLaneF64x2\"; /* _BinaryenReplaceLaneVecF64x2 */\n})(SIMDReplaceOp = exports.SIMDReplaceOp || (exports.SIMDReplaceOp = {}));\nvar SIMDShiftOp;\n(function (SIMDShiftOp) {\n    SIMDShiftOp[SIMDShiftOp[\"ShlI8x16\"] = 0] = \"ShlI8x16\"; /* _BinaryenShlVecI8x16 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrI8x16\"] = 1] = \"ShrI8x16\"; /* _BinaryenShrSVecI8x16 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrU8x16\"] = 2] = \"ShrU8x16\"; /* _BinaryenShrUVecI8x16 */\n    SIMDShiftOp[SIMDShiftOp[\"ShlI16x8\"] = 3] = \"ShlI16x8\"; /* _BinaryenShlVecI16x8 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrI16x8\"] = 4] = \"ShrI16x8\"; /* _BinaryenShrSVecI16x8 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrU16x8\"] = 5] = \"ShrU16x8\"; /* _BinaryenShrUVecI16x8 */\n    SIMDShiftOp[SIMDShiftOp[\"ShlI32x4\"] = 6] = \"ShlI32x4\"; /* _BinaryenShlVecI32x4 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrI32x4\"] = 7] = \"ShrI32x4\"; /* _BinaryenShrSVecI32x4 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrU32x4\"] = 8] = \"ShrU32x4\"; /* _BinaryenShrUVecI32x4 */\n    SIMDShiftOp[SIMDShiftOp[\"ShlI64x2\"] = 9] = \"ShlI64x2\"; /* _BinaryenShlVecI64x2 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrI64x2\"] = 10] = \"ShrI64x2\"; /* _BinaryenShrSVecI64x2 */\n    SIMDShiftOp[SIMDShiftOp[\"ShrU64x2\"] = 11] = \"ShrU64x2\"; /* _BinaryenShrUVecI64x2 */\n})(SIMDShiftOp = exports.SIMDShiftOp || (exports.SIMDShiftOp = {}));\nvar SIMDTernaryOp;\n(function (SIMDTernaryOp) {\n    SIMDTernaryOp[SIMDTernaryOp[\"Bitselect\"] = 0] = \"Bitselect\"; /* _BinaryenBitselectVec128 */\n    SIMDTernaryOp[SIMDTernaryOp[\"QFMAF32x4\"] = 1] = \"QFMAF32x4\"; /* _BinaryenQFMAVecF32x4 */\n    SIMDTernaryOp[SIMDTernaryOp[\"QFMSF32x4\"] = 2] = \"QFMSF32x4\"; /* _BinaryenQFMSVecF32x4 */\n    SIMDTernaryOp[SIMDTernaryOp[\"QFMAF64x2\"] = 3] = \"QFMAF64x2\"; /* _BinaryenQFMAVecF64x2 */\n    SIMDTernaryOp[SIMDTernaryOp[\"QFMSF64x2\"] = 4] = \"QFMSF64x2\"; /* _BinaryenQFMSVecF64x2 */\n})(SIMDTernaryOp = exports.SIMDTernaryOp || (exports.SIMDTernaryOp = {}));\nvar SIMDLoadOp;\n(function (SIMDLoadOp) {\n    SIMDLoadOp[SIMDLoadOp[\"LoadSplatV8x16\"] = 0] = \"LoadSplatV8x16\"; /* _BinaryenLoadSplatVec8x16 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadSplatV16x8\"] = 1] = \"LoadSplatV16x8\"; /* _BinaryenLoadSplatVec16x8 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadSplatV32x4\"] = 2] = \"LoadSplatV32x4\"; /* _BinaryenLoadSplatVec32x4 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadSplatV64x2\"] = 3] = \"LoadSplatV64x2\"; /* _BinaryenLoadSplatVec64x2 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadI8ToI16x8\"] = 4] = \"LoadI8ToI16x8\"; /* _BinaryenLoadExtSVec8x8ToVecI16x8 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadU8ToU16x8\"] = 5] = \"LoadU8ToU16x8\"; /* _BinaryenLoadExtUVec8x8ToVecI16x8 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadI16ToI32x4\"] = 6] = \"LoadI16ToI32x4\"; /* _BinaryenLoadExtSVec16x4ToVecI32x4 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadU16ToU32x4\"] = 7] = \"LoadU16ToU32x4\"; /* _BinaryenLoadExtUVec16x4ToVecI32x4 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadI32ToI64x2\"] = 8] = \"LoadI32ToI64x2\"; /* _BinaryenLoadExtSVec32x2ToVecI64x2 */\n    SIMDLoadOp[SIMDLoadOp[\"LoadU32ToU64x2\"] = 9] = \"LoadU32ToU64x2\"; /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n})(SIMDLoadOp = exports.SIMDLoadOp || (exports.SIMDLoadOp = {}));\nvar ExpressionRunnerFlags;\n(function (ExpressionRunnerFlags) {\n    ExpressionRunnerFlags[ExpressionRunnerFlags[\"Default\"] = 0] = \"Default\"; /* _ExpressionRunnerFlagsDefault */\n    ExpressionRunnerFlags[ExpressionRunnerFlags[\"PreserveSideeffects\"] = 1] = \"PreserveSideeffects\"; /* _ExpressionRunnerFlagsPreserveSideeffects */\n    ExpressionRunnerFlags[ExpressionRunnerFlags[\"TraverseCalls\"] = 2] = \"TraverseCalls\"; /* _ExpressionRunnerFlagsTraverseCalls */\n})(ExpressionRunnerFlags = exports.ExpressionRunnerFlags || (exports.ExpressionRunnerFlags = {}));\nclass MemorySegment {\n    constructor(\n    /** Segment data. */\n    buffer, \n    /** Segment offset. */\n    offset) {\n        this.buffer = buffer;\n        this.offset = offset;\n    }\n}\nexports.MemorySegment = MemorySegment;\nclass Module {\n    constructor(\n    /** Binaryen module reference. */\n    ref, \n    /** Whether a shadow stack is used. */\n    useShadowStack) {\n        this.ref = ref;\n        this.useShadowStack = useShadowStack;\n        this.hasTemporaryFunction = false;\n        this.cachedStringsToPointers = new Map();\n        this.cachedPointersToStrings = new Map();\n        this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    }\n    static create(useShadowStack) {\n        return new Module(binaryen._BinaryenModuleCreate(), useShadowStack);\n    }\n    static createFrom(buffer, useShadowStack) {\n        var cArr = allocU8Array(buffer);\n        var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length), useShadowStack);\n        binaryen._free(changetype(cArr));\n        return module;\n    }\n    // constants\n    i32(value) {\n        var out = this.lit;\n        binaryen._BinaryenLiteralInt32(out, value);\n        return binaryen._BinaryenConst(this.ref, out);\n    }\n    i64(valueLow, valueHigh = 0) {\n        var out = this.lit;\n        binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n        return binaryen._BinaryenConst(this.ref, out);\n    }\n    f32(value) {\n        var out = this.lit;\n        binaryen._BinaryenLiteralFloat32(out, value);\n        return binaryen._BinaryenConst(this.ref, out);\n    }\n    f64(value) {\n        var out = this.lit;\n        binaryen._BinaryenLiteralFloat64(out, value);\n        return binaryen._BinaryenConst(this.ref, out);\n    }\n    v128(bytes) {\n        assert(bytes.length == 16);\n        var out = this.lit;\n        for (let i = 0; i < 16; ++i) {\n            binaryen.__i32_store8(out + i, bytes[i]);\n        }\n        binaryen._BinaryenLiteralVec128(out, out);\n        return binaryen._BinaryenConst(this.ref, out);\n    }\n    ref_null(type) {\n        return binaryen._BinaryenRefNull(this.ref, type);\n    }\n    // expressions\n    unary(op, expr) {\n        return binaryen._BinaryenUnary(this.ref, op, expr);\n    }\n    binary(op, left, right) {\n        return binaryen._BinaryenBinary(this.ref, op, left, right);\n    }\n    memory_size() {\n        return binaryen._BinaryenMemorySize(this.ref);\n    }\n    memory_grow(delta) {\n        return binaryen._BinaryenMemoryGrow(this.ref, delta);\n    }\n    local_get(index, type) {\n        return binaryen._BinaryenLocalGet(this.ref, index, type);\n    }\n    tostack(value) {\n        if (this.useShadowStack) {\n            let type = binaryen._BinaryenExpressionGetType(value);\n            assert(type == NativeType.I32 || type == NativeType.Unreachable);\n            return this.call(builtins_1.BuiltinNames.tostack, [value], type);\n        }\n        return value;\n    }\n    local_tee(index, value, isManaged, type = NativeType.Auto) {\n        if (type == NativeType.Auto)\n            type = binaryen._BinaryenExpressionGetType(value);\n        if (isManaged && this.useShadowStack) {\n            value = this.tostack(value);\n        }\n        return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n    }\n    global_get(name, type) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n    }\n    load(bytes, signed, ptr, type, offset = 0, align = bytes // naturally aligned by default\n    ) {\n        return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n    }\n    store(bytes, ptr, value, type, offset = 0, align = bytes // naturally aligned by default\n    ) {\n        return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n    }\n    atomic_load(bytes, ptr, type, offset = 0) {\n        return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n    }\n    atomic_store(bytes, ptr, value, type, offset = 0) {\n        return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n    }\n    atomic_rmw(op, bytes, offset, ptr, value, type) {\n        return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n    }\n    atomic_cmpxchg(bytes, offset, ptr, expected, replacement, type) {\n        return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n    }\n    atomic_wait(ptr, expected, timeout, expectedType) {\n        return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n    }\n    atomic_notify(ptr, notifyCount) {\n        return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n    }\n    atomic_fence() {\n        return binaryen._BinaryenAtomicFence(this.ref);\n    }\n    // statements\n    local_set(index, value, isManaged) {\n        if (isManaged && this.useShadowStack) {\n            value = this.tostack(value);\n        }\n        return binaryen._BinaryenLocalSet(this.ref, index, value);\n    }\n    global_set(name, value) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n    }\n    block(label, children, type = NativeType.None) {\n        var cStr = this.allocStringCached(label);\n        var cArr = allocPtrArray(children);\n        var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n        binaryen._free(cArr);\n        return ret;\n    }\n    /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n    flatten(stmts, type = NativeType.None) {\n        var length = stmts.length;\n        if (length == 0)\n            return this.nop(); // usually filtered out again\n        if (length == 1) {\n            let single = stmts[0];\n            switch (getExpressionId(single)) {\n                case ExpressionId.Return:\n                case ExpressionId.Throw:\n                case ExpressionId.Unreachable: {\n                    // type does no matter, terminates anyway\n                    return single;\n                }\n            }\n            let singleType = getExpressionType(single);\n            assert(singleType == NativeType.Unreachable || singleType == type);\n            return single;\n        }\n        return this.block(null, stmts, type);\n    }\n    br(label, condition = 0, value = 0) {\n        var cStr = this.allocStringCached(label);\n        return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n    }\n    drop(expression) {\n        return binaryen._BinaryenDrop(this.ref, expression);\n    }\n    maybeDropCondition(condition, result) {\n        // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n        // when encountering a local with an unknown value. This helper only drops\n        // the pre-evaluated condition if it has relevant side effects.\n        // see WebAssembly/binaryen#1237\n        if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n            return this.block(null, [\n                this.drop(condition),\n                result\n            ], getExpressionType(result));\n        }\n        return result;\n    }\n    loop(label, body) {\n        var cStr = this.allocStringCached(label);\n        return binaryen._BinaryenLoop(this.ref, cStr, body);\n    }\n    if(condition, ifTrue, ifFalse = 0) {\n        return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n    }\n    nop() {\n        return binaryen._BinaryenNop(this.ref);\n    }\n    return(expression = 0) {\n        return binaryen._BinaryenReturn(this.ref, expression);\n    }\n    select(ifTrue, ifFalse, condition, type = NativeType.Auto) {\n        if (type == NativeType.Auto) {\n            type = binaryen._BinaryenExpressionGetType(ifTrue);\n            assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n        }\n        return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n    }\n    switch(names, defaultName, condition, value = 0) {\n        var numNames = names.length;\n        var strs = new Array(numNames);\n        for (let i = 0; i < numNames; ++i) {\n            strs[i] = this.allocStringCached(names[i]);\n        }\n        var cArr = allocPtrArray(strs);\n        var cStr = this.allocStringCached(defaultName);\n        var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n        binaryen._free(cArr);\n        return ret;\n    }\n    call(target, operands, returnType, isReturn = false) {\n        var cStr = this.allocStringCached(target);\n        var cArr = allocPtrArray(operands);\n        var ret = isReturn\n            ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n            : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n        binaryen._free(cArr);\n        return ret;\n    }\n    return_call(target, operands, returnType) {\n        return this.call(target, operands, returnType, true);\n    }\n    call_indirect(index, operands, params, results, isReturn = false) {\n        var cArr = allocPtrArray(operands);\n        var ret = isReturn\n            ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n            : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n        binaryen._free(cArr);\n        return ret;\n    }\n    return_call_indirect(index, operands, params, results) {\n        return this.call_indirect(index, operands, params, results, true);\n    }\n    unreachable() {\n        return binaryen._BinaryenUnreachable(this.ref);\n    }\n    // bulk memory\n    memory_copy(dest, source, size) {\n        return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n    }\n    memory_fill(dest, value, size) {\n        return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n    }\n    // exception handling\n    try(body, catchBody) {\n        return binaryen._BinaryenTry(this.ref, body, catchBody);\n    }\n    throw(eventName, operands) {\n        var cStr = this.allocStringCached(eventName);\n        var cArr = allocPtrArray(operands);\n        var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n        binaryen._free(cArr);\n        return ret;\n    }\n    rethrow(exnref) {\n        return binaryen._BinaryenRethrow(this.ref, exnref);\n    }\n    br_on_exn(name, eventName, exnref) {\n        var cStr1 = this.allocStringCached(name);\n        var cStr2 = this.allocStringCached(eventName);\n        return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n    }\n    // multi value (pseudo instructions)\n    pop(type) {\n        return binaryen._BinaryenPop(this.ref, type);\n    }\n    tuple_make(operands) {\n        var cArr = allocPtrArray(operands);\n        var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n        binaryen._free(cArr);\n        return ret;\n    }\n    tuple_extract(tuple, index) {\n        return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n    }\n    // simd\n    simd_extract(op, vec, idx) {\n        return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n    }\n    simd_replace(op, vec, idx, value) {\n        return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n    }\n    simd_shuffle(vec1, vec2, mask) {\n        assert(mask.length == 16);\n        var cArr = allocU8Array(mask);\n        var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n        binaryen._free(cArr);\n        return ret;\n    }\n    simd_ternary(op, a, b, c) {\n        return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n    }\n    simd_shift(op, vec, shift) {\n        return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n    }\n    simd_load(op, ptr, offset, align) {\n        return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n    }\n    // reference types\n    ref_is_null(expr) {\n        return binaryen._BinaryenRefIsNull(this.ref, expr);\n    }\n    ref_func(name, type) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenRefFunc(this.ref, cStr, type);\n    }\n    // globals\n    addGlobal(name, type, mutable, initializer) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n    }\n    getGlobal(name) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenGetGlobal(this.ref, cStr);\n    }\n    removeGlobal(name) {\n        var cStr = this.allocStringCached(name);\n        binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n    }\n    // events\n    addEvent(name, attribute, params, results) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n    }\n    getEvent(name) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenGetEvent(this.ref, cStr);\n    }\n    removeEvent(name) {\n        var cStr = this.allocStringCached(name);\n        binaryen._BinaryenRemoveEvent(this.ref, cStr);\n    }\n    // functions\n    addFunction(name, params, results, varTypes, body) {\n        var cStr = this.allocStringCached(name);\n        var cArr = allocPtrArray(varTypes);\n        var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n        binaryen._free(cArr);\n        return ret;\n    }\n    getFunction(name) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenGetFunction(this.ref, cStr);\n    }\n    removeFunction(name) {\n        var cStr = this.allocStringCached(name);\n        binaryen._BinaryenRemoveFunction(this.ref, cStr);\n    }\n    hasFunction(name) {\n        var cStr = this.allocStringCached(name);\n        return binaryen._BinaryenGetFunction(this.ref, cStr) != 0;\n    }\n    addTemporaryFunction(result, paramTypes, body) {\n        this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n        var tempName = this.allocStringCached(\"\");\n        var cArr = allocPtrArray(paramTypes);\n        var ret = binaryen._BinaryenAddFunction(this.ref, tempName, createType(paramTypes), result, 0, 0, body);\n        binaryen._free(cArr);\n        return ret;\n    }\n    removeTemporaryFunction() {\n        this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n        var tempName = this.allocStringCached(\"\");\n        binaryen._BinaryenRemoveFunction(this.ref, tempName);\n    }\n    setStart(func) {\n        binaryen._BinaryenSetStart(this.ref, func);\n    }\n    // exports\n    addFunctionExport(internalName, externalName) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalName);\n        return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    }\n    addTableExport(internalName, externalName) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalName);\n        return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    }\n    addMemoryExport(internalName, externalName) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalName);\n        return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    }\n    addGlobalExport(internalName, externalName) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalName);\n        return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    }\n    addEventExport(internalName, externalName) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalName);\n        return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n    }\n    removeExport(externalName) {\n        var cStr = this.allocStringCached(externalName);\n        binaryen._BinaryenRemoveExport(this.ref, cStr);\n    }\n    hasExport(externalName) {\n        var cStr = this.allocStringCached(externalName);\n        return binaryen._BinaryenGetExport(this.ref, cStr) != 0;\n    }\n    // imports\n    addFunctionImport(internalName, externalModuleName, externalBaseName, params, results) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalModuleName);\n        var cStr3 = this.allocStringCached(externalBaseName);\n        binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n    }\n    addTableImport(internalName, externalModuleName, externalBaseName) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalModuleName);\n        var cStr3 = this.allocStringCached(externalBaseName);\n        binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    }\n    addMemoryImport(internalName, externalModuleName, externalBaseName, shared = false) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalModuleName);\n        var cStr3 = this.allocStringCached(externalBaseName);\n        binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n    }\n    addGlobalImport(internalName, externalModuleName, externalBaseName, globalType, mutable = false) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalModuleName);\n        var cStr3 = this.allocStringCached(externalBaseName);\n        binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n    }\n    addEventImport(internalName, externalModuleName, externalBaseName, attribute, params, results) {\n        var cStr1 = this.allocStringCached(internalName);\n        var cStr2 = this.allocStringCached(externalModuleName);\n        var cStr3 = this.allocStringCached(externalBaseName);\n        binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n    }\n    setMemory(initial, maximum, segments, target, exportName = null, shared = false) {\n        var cStr = this.allocStringCached(exportName);\n        var k = segments.length;\n        var segs = new Array(k);\n        var psvs = new Uint8Array(k);\n        var offs = new Array(k);\n        var sizs = new Array(k);\n        for (let i = 0; i < k; ++i) {\n            let segment = segments[i];\n            let buffer = segment.buffer;\n            let offset = segment.offset;\n            segs[i] = allocU8Array(buffer);\n            psvs[i] = 0; // no passive segments currently\n            offs[i] = target == common_1.Target.WASM64\n                ? this.i64(i64_low(offset), i64_high(offset))\n                : this.i32(i64_low(offset));\n            sizs[i] = buffer.length;\n        }\n        var cArr1 = allocPtrArray(segs);\n        var cArr2 = allocU8Array(psvs);\n        var cArr3 = allocPtrArray(offs);\n        var cArr4 = allocU32Array(sizs);\n        binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n        binaryen._free(cArr4);\n        binaryen._free(cArr3);\n        binaryen._free(cArr2);\n        binaryen._free(cArr1);\n        for (let i = k - 1; i >= 0; --i) {\n            binaryen._free(segs[i]);\n        }\n    }\n    setFunctionTable(initial, maximum, funcs, offset) {\n        var numNames = funcs.length;\n        var names = new Array(numNames);\n        for (let i = 0; i < numNames; ++i) {\n            names[i] = this.allocStringCached(funcs[i]);\n        }\n        var cArr = allocPtrArray(names);\n        binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n        binaryen._free(cArr);\n    }\n    // sections\n    addCustomSection(name, contents) {\n        var cStr = this.allocStringCached(name);\n        var cArr = allocU8Array(contents);\n        binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n        binaryen._free(cArr);\n    }\n    // meta (global)\n    getOptimizeLevel() {\n        return binaryen._BinaryenGetOptimizeLevel();\n    }\n    setOptimizeLevel(level) {\n        binaryen._BinaryenSetOptimizeLevel(level);\n    }\n    getShrinkLevel() {\n        return binaryen._BinaryenGetShrinkLevel();\n    }\n    setShrinkLevel(level) {\n        binaryen._BinaryenSetShrinkLevel(level);\n    }\n    getDebugInfo() {\n        return binaryen._BinaryenGetDebugInfo();\n    }\n    setDebugInfo(on) {\n        binaryen._BinaryenSetDebugInfo(on);\n    }\n    getLowMemoryUnused() {\n        return binaryen._BinaryenGetLowMemoryUnused();\n    }\n    setLowMemoryUnused(on) {\n        binaryen._BinaryenSetLowMemoryUnused(on);\n    }\n    getFastMath() {\n        return binaryen._BinaryenGetFastMath();\n    }\n    setFastMath(on) {\n        binaryen._BinaryenSetFastMath(on);\n    }\n    getPassArgument(key) {\n        var cStr = this.allocStringCached(key);\n        var ptr = binaryen._BinaryenGetPassArgument(cStr);\n        return ptr ? readString(ptr) : null;\n    }\n    setPassArgument(key, value) {\n        var cStr1 = this.allocStringCached(key);\n        var cStr2 = this.allocStringCached(value);\n        binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n    }\n    clearPassArguments() {\n        binaryen._BinaryenClearPassArguments();\n    }\n    getAlwaysInlineMaxSize() {\n        return binaryen._BinaryenGetAlwaysInlineMaxSize();\n    }\n    setAlwaysInlineMaxSize(size) {\n        binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n    }\n    getFlexibleInlineMaxSize() {\n        return binaryen._BinaryenGetFlexibleInlineMaxSize();\n    }\n    setFlexibleInlineMaxSize(size) {\n        binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n    }\n    getOneCallerInlineMaxSize() {\n        return binaryen._BinaryenGetOneCallerInlineMaxSize();\n    }\n    setOneCallerInlineMaxSize(size) {\n        binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n    }\n    getAllowInliningFunctionsWithLoops() {\n        return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n    }\n    setAllowInliningFunctionsWithLoops(enabled) {\n        binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n    }\n    // meta (module)\n    getFeatures() {\n        return binaryen._BinaryenModuleGetFeatures(this.ref);\n    }\n    setFeatures(featureFlags) {\n        binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n    }\n    runPass(pass, func = 0) {\n        var cStr = allocString(pass);\n        if (func) {\n            binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n        }\n        else {\n            binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n        }\n        binaryen._free(cStr);\n    }\n    runPasses(passes, func = 0) {\n        var numNames = passes.length;\n        var cStrs = new Array(numNames);\n        for (let i = 0; i < numNames; ++i) {\n            cStrs[i] = allocString(passes[i]);\n        }\n        var cArr = allocPtrArray(cStrs);\n        if (func) {\n            binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n        }\n        else {\n            binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n        }\n        binaryen._free(cArr);\n        for (let i = numNames - 1; i >= 0; --i)\n            binaryen._free(cStrs[i]);\n    }\n    optimize(optimizeLevel, shrinkLevel, debugInfo = false) {\n        // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n        if (optimizeLevel >= 3 || shrinkLevel >= 2)\n            optimizeLevel = 4;\n        this.setOptimizeLevel(optimizeLevel);\n        this.setShrinkLevel(shrinkLevel);\n        this.setDebugInfo(debugInfo);\n        this.setFastMath(true);\n        this.clearPassArguments();\n        // Tweak inlining limits based on optimization levels\n        if (optimizeLevel >= 2 && shrinkLevel == 0) {\n            this.setAlwaysInlineMaxSize(12);\n            this.setFlexibleInlineMaxSize(70);\n            this.setOneCallerInlineMaxSize(200);\n            this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n        }\n        else {\n            this.setAlwaysInlineMaxSize(optimizeLevel <= 1 || shrinkLevel >= 2\n                ? 2\n                : 6);\n            this.setFlexibleInlineMaxSize(65);\n            this.setOneCallerInlineMaxSize(80);\n            this.setAllowInliningFunctionsWithLoops(false);\n        }\n        // Pass order here differs substantially from Binaryen's defaults\n        // see: Binaryen/src/pass.cpp\n        if (optimizeLevel > 0 || shrinkLevel > 0) {\n            let passes = new Array();\n            // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n            passes.push(\"duplicate-function-elimination\");\n            passes.push(\"remove-unused-module-elements\"); // +\n            // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n            if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n                passes.push(\"simplify-locals-notee-nostructure\");\n                passes.push(\"rse\");\n                passes.push(\"vacuum\");\n                passes.push(\"ssa-nomerge\");\n                passes.push(\"simplify-globals-optimizing\");\n                passes.push(\"remove-unused-brs\");\n                passes.push(\"remove-unused-names\");\n                passes.push(\"merge-blocks\");\n                passes.push(\"precompute-propagate\");\n            }\n            if (optimizeLevel >= 3) {\n                passes.push(\"flatten\");\n                passes.push(\"vacuum\");\n                passes.push(\"simplify-locals-notee-nostructure\");\n                passes.push(\"merge-locals\");\n                passes.push(\"code-folding\");\n                passes.push(\"flatten\");\n                passes.push(\"vacuum\");\n                passes.push(\"local-cse\");\n                passes.push(\"reorder-locals\");\n            }\n            passes.push(\"optimize-instructions\");\n            if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n                passes.push(\"dce\");\n            }\n            passes.push(\"remove-unused-names\");\n            passes.push(\"remove-unused-brs\");\n            if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n                passes.push(\"inlining\");\n                passes.push(\"precompute-propagate\");\n            }\n            else {\n                passes.push(\"precompute\");\n            }\n            if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n                passes.push(\"pick-load-signs\");\n                passes.push(\"simplify-globals-optimizing\");\n            }\n            if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n                passes.push(\"licm\");\n            }\n            passes.push(\"simplify-locals-nostructure\");\n            passes.push(\"vacuum\");\n            passes.push(\"reorder-locals\");\n            passes.push(\"remove-unused-brs\");\n            passes.push(\"coalesce-locals\");\n            passes.push(\"simplify-locals\");\n            passes.push(\"vacuum\");\n            passes.push(\"reorder-locals\");\n            passes.push(\"coalesce-locals\");\n            passes.push(\"reorder-locals\");\n            if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n                passes.push(\"merge-locals\");\n            }\n            passes.push(\"vacuum\");\n            if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n                passes.push(\"simplify-globals-optimizing\");\n            }\n            passes.push(\"merge-blocks\");\n            passes.push(\"remove-unused-brs\");\n            passes.push(\"remove-unused-names\");\n            passes.push(\"merge-blocks\");\n            if (optimizeLevel >= 3) {\n                passes.push(\"optimize-instructions\");\n            }\n            if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n                passes.push(\"rse\");\n                passes.push(\"vacuum\");\n            }\n            // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n            if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n                passes.push(\"simplify-globals-optimizing\");\n                passes.push(\"dae-optimizing\");\n            }\n            if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n                passes.push(\"inlining-optimizing\");\n            }\n            if (this.getLowMemoryUnused()) {\n                if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n                    passes.push(\"optimize-added-constants-propagate\");\n                }\n                else {\n                    passes.push(\"optimize-added-constants\");\n                }\n            }\n            passes.push(\"duplicate-import-elimination\");\n            if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n                passes.push(\"simplify-globals-optimizing\");\n            }\n            else {\n                passes.push(\"simplify-globals\");\n                passes.push(\"vacuum\");\n            }\n            if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n                passes.push(\"code-folding\");\n            }\n            // precompute works best after global optimizations\n            if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n                passes.push(\"precompute-propagate\");\n            }\n            else {\n                passes.push(\"precompute\");\n            }\n            passes.push(\"directize\"); // replace indirect with direct calls\n            passes.push(\"dae-optimizing\"); // reduce arity\n            passes.push(\"inlining-optimizing\"); // and inline if possible\n            if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n                passes.push(\"rse\");\n                // move code on early return (after CFG cleanup)\n                passes.push(\"code-pushing\");\n                if (optimizeLevel >= 3) {\n                    // very expensive, so O3 only\n                    passes.push(\"simplify-globals\");\n                    passes.push(\"vacuum\");\n                    passes.push(\"precompute-propagate\");\n                    // replace indirect with direct calls again and inline\n                    passes.push(\"inlining-optimizing\");\n                    passes.push(\"directize\");\n                    passes.push(\"dae-optimizing\");\n                    passes.push(\"merge-locals\");\n                    passes.push(\"coalesce-locals\");\n                    passes.push(\"simplify-locals\");\n                    passes.push(\"vacuum\");\n                    passes.push(\"inlining\");\n                    passes.push(\"precompute-propagate\");\n                    passes.push(\"vacuum\");\n                    passes.push(\"coalesce-locals\");\n                }\n                passes.push(\"remove-unused-brs\");\n                passes.push(\"remove-unused-names\");\n                passes.push(\"vacuum\");\n                passes.push(\"optimize-instructions\");\n                passes.push(\"simplify-globals-optimizing\");\n            }\n            // clean up\n            passes.push(\"duplicate-function-elimination\");\n            passes.push(\"remove-unused-nonfunction-module-elements\");\n            passes.push(\"memory-packing\");\n            passes.push(\"remove-unused-module-elements\");\n            this.runPasses(passes);\n        }\n    }\n    validate() {\n        return binaryen._BinaryenModuleValidate(this.ref) == 1;\n    }\n    interpret() {\n        binaryen._BinaryenModuleInterpret(this.ref);\n    }\n    toBinary(sourceMapUrl = null) {\n        var out = this.lit; // safe to reuse as long as..\n        assert(binaryen._BinaryenSizeofLiteral() >= 12);\n        var cStr = allocString(sourceMapUrl);\n        var binaryPtr = 0;\n        var sourceMapPtr = 0;\n        binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n        binaryPtr = assert(binaryen.__i32_load(out));\n        var binaryLen = binaryen.__i32_load(out + 4);\n        sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n        var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n        if (cStr)\n            binaryen._free(cStr);\n        binaryen._free(binaryPtr);\n        if (sourceMapPtr)\n            binaryen._free(sourceMapPtr);\n        return binary;\n    }\n    toText(watFormat = true) {\n        throw new Error(\"not implemented\"); // JS glue overrides this\n    }\n    toAsmjs() {\n        throw new Error(\"not implemented\"); // JS glue overrides this\n    }\n    allocStringCached(str) {\n        if (str === null)\n            return 0;\n        var cached = this.cachedStringsToPointers;\n        if (cached.has(str))\n            return changetype(cached.get(str));\n        var ptr = allocString(str);\n        cached.set(str, ptr);\n        return ptr;\n    }\n    readStringCached(ptr) {\n        // Binaryen internalizes names, so using this method where it's safe can\n        // avoid quite a bit of unnecessary garbage.\n        if (ptr == 0)\n            return null;\n        var cached = this.cachedPointersToStrings;\n        if (cached.has(ptr))\n            return changetype(this.cachedPointersToStrings.get(ptr));\n        var str = readString(ptr);\n        cached.set(ptr, str);\n        return str;\n    }\n    dispose() {\n        assert(this.ref);\n        // TODO: for (let ptr of this.cachedStrings.values()) {\n        for (let _values = Map_values(this.cachedStringsToPointers), i = 0, k = _values.length; i < k; ++i) {\n            let ptr = unchecked(_values[i]);\n            binaryen._free(ptr);\n        }\n        this.cachedStringsToPointers.clear();\n        this.cachedPointersToStrings.clear();\n        binaryen._free(this.lit);\n        binaryen._BinaryenModuleDispose(this.ref);\n        this.ref = 0;\n    }\n    createRelooper() {\n        return Relooper.create(this);\n    }\n    cloneExpression(expr, noSideEffects = false, maxDepth = i32.MAX_VALUE) {\n        if (maxDepth < 0)\n            return 0;\n        maxDepth -= 1;\n        var nested1, nested2;\n        switch (binaryen._BinaryenExpressionGetId(expr)) {\n            case ExpressionId.Const: {\n                switch (binaryen._BinaryenExpressionGetType(expr)) {\n                    case NativeType.I32: {\n                        return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n                    }\n                    case NativeType.I64: {\n                        return this.i64(binaryen._BinaryenConstGetValueI64Low(expr), binaryen._BinaryenConstGetValueI64High(expr));\n                    }\n                    case NativeType.F32: {\n                        return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n                    }\n                    case NativeType.F64: {\n                        return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n                    }\n                    case NativeType.V128: {\n                        // TODO\n                        return 0;\n                    }\n                    // Not possible to clone an externref as it is opaque\n                    case NativeType.Externref: {\n                        return 0;\n                    }\n                    default: {\n                        throw new Error(\"concrete type expected\");\n                    }\n                }\n            }\n            case ExpressionId.LocalGet: {\n                return binaryen._BinaryenLocalGet(this.ref, binaryen._BinaryenLocalGetGetIndex(expr), binaryen._BinaryenExpressionGetType(expr));\n            }\n            case ExpressionId.GlobalGet: {\n                let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n                if (!globalName)\n                    break;\n                return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n            }\n            case ExpressionId.Load: {\n                if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n                    break;\n                }\n                return (binaryen._BinaryenLoadIsAtomic(expr)\n                    ? binaryen._BinaryenAtomicLoad(this.ref, binaryen._BinaryenLoadGetBytes(expr), binaryen._BinaryenLoadGetOffset(expr), binaryen._BinaryenExpressionGetType(expr), nested1)\n                    : binaryen._BinaryenLoad(this.ref, binaryen._BinaryenLoadGetBytes(expr), binaryen._BinaryenLoadIsSigned(expr), binaryen._BinaryenLoadGetOffset(expr), binaryen._BinaryenLoadGetAlign(expr), binaryen._BinaryenExpressionGetType(expr), nested1));\n            }\n            case ExpressionId.Unary: {\n                if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n                    break;\n                }\n                return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n            }\n            case ExpressionId.Binary: {\n                if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n                    break;\n                }\n                if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n                    break;\n                }\n                return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n            }\n        }\n        return 0;\n    }\n    copyExpression(expr) {\n        return binaryen._BinaryenExpressionCopy(expr, this.ref);\n    }\n    runExpression(expr, flags, maxDepth = 50, maxLoopIterations = 1) {\n        var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n        var precomp = binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n        if (precomp) {\n            assert(getExpressionId(precomp) == ExpressionId.Const);\n            assert(getExpressionType(precomp) == getExpressionType(expr));\n        }\n        return precomp;\n    }\n    // source map generation\n    addDebugInfoFile(name) {\n        var cStr = allocString(name);\n        var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n        binaryen._free(cStr);\n        return ret;\n    }\n    getDebugInfoFile(index) {\n        return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n    }\n    setDebugLocation(func, expr, fileIndex, lineNumber, columnNumber) {\n        binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n    }\n}\nexports.Module = Module;\n// memory\n/** Unlimited memory constant. */\nModule.UNLIMITED_MEMORY = -1;\n// table\n/** Unlimited table constant. */\nModule.UNLIMITED_TABLE = -1;\n// types\nfunction createType(types) {\n    if (!types)\n        return NativeType.None;\n    switch (types.length) {\n        case 0: return NativeType.None;\n        case 1: return types[0];\n    }\n    var cArr = allocPtrArray(types);\n    var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n    binaryen._free(cArr);\n    return ret;\n}\nexports.createType = createType;\nfunction expandType(type) {\n    var arity = binaryen._BinaryenTypeArity(type);\n    var cArr = binaryen._malloc(arity << 2);\n    binaryen._BinaryenTypeExpand(type, cArr);\n    var types = new Array(arity);\n    for (let i = 0; i < arity; ++i) {\n        types[i] = binaryen.__i32_load(cArr + (i << 2));\n    }\n    binaryen._free(cArr);\n    return types;\n}\nexports.expandType = expandType;\n// expressions\nfunction getExpressionId(expr) {\n    return binaryen._BinaryenExpressionGetId(expr);\n}\nexports.getExpressionId = getExpressionId;\nfunction getExpressionType(expr) {\n    return binaryen._BinaryenExpressionGetType(expr);\n}\nexports.getExpressionType = getExpressionType;\nfunction getConstValueI32(expr) {\n    return binaryen._BinaryenConstGetValueI32(expr);\n}\nexports.getConstValueI32 = getConstValueI32;\nfunction getConstValueI64Low(expr) {\n    return binaryen._BinaryenConstGetValueI64Low(expr);\n}\nexports.getConstValueI64Low = getConstValueI64Low;\nfunction getConstValueI64High(expr) {\n    return binaryen._BinaryenConstGetValueI64High(expr);\n}\nexports.getConstValueI64High = getConstValueI64High;\nfunction getConstValueF32(expr) {\n    return binaryen._BinaryenConstGetValueF32(expr);\n}\nexports.getConstValueF32 = getConstValueF32;\nfunction getConstValueF64(expr) {\n    return binaryen._BinaryenConstGetValueF64(expr);\n}\nexports.getConstValueF64 = getConstValueF64;\nfunction isConstZero(expr) {\n    if (getExpressionId(expr) != ExpressionId.Const)\n        return false;\n    var type = getExpressionType(expr);\n    if (type == NativeType.I32)\n        return getConstValueI32(expr) == 0;\n    if (type == NativeType.I64)\n        return getConstValueI64Low(expr) == 0 && getConstValueI64High(expr) == 0;\n    if (type == NativeType.F32)\n        return getConstValueF32(expr) == 0;\n    if (type == NativeType.F64)\n        return getConstValueF64(expr) == 0;\n    return false;\n}\nexports.isConstZero = isConstZero;\nfunction getLocalGetIndex(expr) {\n    return binaryen._BinaryenLocalGetGetIndex(expr);\n}\nexports.getLocalGetIndex = getLocalGetIndex;\nfunction getLocalSetIndex(expr) {\n    return binaryen._BinaryenLocalSetGetIndex(expr);\n}\nexports.getLocalSetIndex = getLocalSetIndex;\nfunction getLocalSetValue(expr) {\n    return binaryen._BinaryenLocalSetGetValue(expr);\n}\nexports.getLocalSetValue = getLocalSetValue;\nfunction isLocalTee(expr) {\n    return binaryen._BinaryenLocalSetIsTee(expr);\n}\nexports.isLocalTee = isLocalTee;\nfunction getGlobalGetName(expr) {\n    return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\nexports.getGlobalGetName = getGlobalGetName;\nfunction getBinaryOp(expr) {\n    return binaryen._BinaryenBinaryGetOp(expr);\n}\nexports.getBinaryOp = getBinaryOp;\nfunction getBinaryLeft(expr) {\n    return binaryen._BinaryenBinaryGetLeft(expr);\n}\nexports.getBinaryLeft = getBinaryLeft;\nfunction getBinaryRight(expr) {\n    return binaryen._BinaryenBinaryGetRight(expr);\n}\nexports.getBinaryRight = getBinaryRight;\nfunction getUnaryOp(expr) {\n    return binaryen._BinaryenUnaryGetOp(expr);\n}\nexports.getUnaryOp = getUnaryOp;\nfunction getUnaryValue(expr) {\n    return binaryen._BinaryenUnaryGetValue(expr);\n}\nexports.getUnaryValue = getUnaryValue;\nfunction getLoadBytes(expr) {\n    return binaryen._BinaryenLoadGetBytes(expr);\n}\nexports.getLoadBytes = getLoadBytes;\nfunction getLoadOffset(expr) {\n    return binaryen._BinaryenLoadGetOffset(expr);\n}\nexports.getLoadOffset = getLoadOffset;\nfunction getLoadPtr(expr) {\n    return binaryen._BinaryenLoadGetPtr(expr);\n}\nexports.getLoadPtr = getLoadPtr;\nfunction isLoadSigned(expr) {\n    return binaryen._BinaryenLoadIsSigned(expr);\n}\nexports.isLoadSigned = isLoadSigned;\nfunction getStoreBytes(expr) {\n    return binaryen._BinaryenStoreGetBytes(expr);\n}\nexports.getStoreBytes = getStoreBytes;\nfunction getStoreOffset(expr) {\n    return binaryen._BinaryenStoreGetOffset(expr);\n}\nexports.getStoreOffset = getStoreOffset;\nfunction getStorePtr(expr) {\n    return binaryen._BinaryenStoreGetPtr(expr);\n}\nexports.getStorePtr = getStorePtr;\nfunction getStoreValue(expr) {\n    return binaryen._BinaryenStoreGetValue(expr);\n}\nexports.getStoreValue = getStoreValue;\nfunction getBlockName(expr) {\n    return readString(binaryen._BinaryenBlockGetName(expr));\n}\nexports.getBlockName = getBlockName;\nfunction getBlockChildCount(expr) {\n    return binaryen._BinaryenBlockGetNumChildren(expr);\n}\nexports.getBlockChildCount = getBlockChildCount;\nfunction getBlockChildAt(expr, index) {\n    return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\nexports.getBlockChildAt = getBlockChildAt;\nfunction getIfCondition(expr) {\n    return binaryen._BinaryenIfGetCondition(expr);\n}\nexports.getIfCondition = getIfCondition;\nfunction getIfTrue(expr) {\n    return binaryen._BinaryenIfGetIfTrue(expr);\n}\nexports.getIfTrue = getIfTrue;\nfunction getIfFalse(expr) {\n    return binaryen._BinaryenIfGetIfFalse(expr);\n}\nexports.getIfFalse = getIfFalse;\nfunction getLoopName(expr) {\n    return readString(binaryen._BinaryenLoopGetName(expr));\n}\nexports.getLoopName = getLoopName;\nfunction getLoopBody(expr) {\n    return binaryen._BinaryenLoopGetBody(expr);\n}\nexports.getLoopBody = getLoopBody;\nfunction getBreakName(expr) {\n    return readString(binaryen._BinaryenBreakGetName(expr));\n}\nexports.getBreakName = getBreakName;\nfunction getBreakCondition(expr) {\n    return binaryen._BinaryenBreakGetCondition(expr);\n}\nexports.getBreakCondition = getBreakCondition;\nfunction getSelectThen(expr) {\n    return binaryen._BinaryenSelectGetIfTrue(expr);\n}\nexports.getSelectThen = getSelectThen;\nfunction getSelectElse(expr) {\n    return binaryen._BinaryenSelectGetIfFalse(expr);\n}\nexports.getSelectElse = getSelectElse;\nfunction getSelectCondition(expr) {\n    return binaryen._BinaryenSelectGetCondition(expr);\n}\nexports.getSelectCondition = getSelectCondition;\nfunction getDropValue(expr) {\n    return binaryen._BinaryenDropGetValue(expr);\n}\nexports.getDropValue = getDropValue;\nfunction getReturnValue(expr) {\n    return binaryen._BinaryenReturnGetValue(expr);\n}\nexports.getReturnValue = getReturnValue;\nfunction getCallTarget(expr) {\n    return readString(binaryen._BinaryenCallGetTarget(expr));\n}\nexports.getCallTarget = getCallTarget;\nfunction getCallOperandCount(expr) {\n    return binaryen._BinaryenCallGetNumOperands(expr);\n}\nexports.getCallOperandCount = getCallOperandCount;\nfunction getCallOperandAt(expr, index) {\n    return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\nexports.getCallOperandAt = getCallOperandAt;\nfunction getMemoryGrowDelta(expr) {\n    return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\nexports.getMemoryGrowDelta = getMemoryGrowDelta;\n// functions\nfunction getFunctionBody(func) {\n    return binaryen._BinaryenFunctionGetBody(func);\n}\nexports.getFunctionBody = getFunctionBody;\nfunction getFunctionName(func) {\n    return readString(binaryen._BinaryenFunctionGetName(func));\n}\nexports.getFunctionName = getFunctionName;\nfunction getFunctionParams(func) {\n    return binaryen._BinaryenFunctionGetParams(func);\n}\nexports.getFunctionParams = getFunctionParams;\nfunction getFunctionResults(func) {\n    return binaryen._BinaryenFunctionGetResults(func);\n}\nexports.getFunctionResults = getFunctionResults;\nfunction getFunctionVars(func) {\n    var count = binaryen._BinaryenFunctionGetNumVars(func);\n    var types = new Array(count);\n    for (let i = 0; i < count; ++i) {\n        types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n    }\n    return types;\n}\nexports.getFunctionVars = getFunctionVars;\n// globals\nfunction getGlobalName(global) {\n    return readString(binaryen._BinaryenGlobalGetName(global));\n}\nexports.getGlobalName = getGlobalName;\nfunction getGlobalType(global) {\n    return binaryen._BinaryenGlobalGetType(global);\n}\nexports.getGlobalType = getGlobalType;\nfunction isGlobalMutable(global) {\n    return binaryen._BinaryenGlobalIsMutable(global);\n}\nexports.isGlobalMutable = isGlobalMutable;\nfunction getGlobalInit(global) {\n    return binaryen._BinaryenGlobalGetInitExpr(global);\n}\nexports.getGlobalInit = getGlobalInit;\n// events\nfunction getEventName(event) {\n    return readString(binaryen._BinaryenEventGetName(event));\n}\nexports.getEventName = getEventName;\nfunction getEventAttribute(event) {\n    return binaryen._BinaryenEventGetAttribute(event);\n}\nexports.getEventAttribute = getEventAttribute;\nfunction getEventParams(event) {\n    return binaryen._BinaryenEventGetParams(event);\n}\nexports.getEventParams = getEventParams;\nfunction getEventResults(event) {\n    return binaryen._BinaryenEventGetResults(event);\n}\nexports.getEventResults = getEventResults;\nclass Relooper {\n    constructor(\n    /** Module this relooper belongs to. */\n    module, \n    /** Binaryen relooper reference. */\n    ref) {\n        this.module = module;\n        this.ref = ref;\n    }\n    static create(module) {\n        return new Relooper(module, binaryen._RelooperCreate(module.ref));\n    }\n    addBlock(code) {\n        return binaryen._RelooperAddBlock(this.ref, code);\n    }\n    addBranch(from, to, condition = 0, code = 0) {\n        binaryen._RelooperAddBranch(from, to, condition, code);\n    }\n    addBlockWithSwitch(code, condition) {\n        return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n    }\n    addBranchForSwitch(from, to, indexes, code = 0) {\n        var cArr = allocI32Array(indexes);\n        binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n        binaryen._free(cArr);\n    }\n    renderAndDispose(entry, labelHelper) {\n        return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n    }\n}\nexports.Relooper = Relooper;\n/** Builds a switch using a sequence of `br_if`s. */\nclass SwitchBuilder {\n    /** Creates a new builder using the specified i32 condition. */\n    constructor(module, condition) {\n        this.values = new Array();\n        this.indexes = new Array();\n        this.cases = new Array();\n        this.defaultIndex = -1;\n        this.module = module;\n        this.condition = condition;\n    }\n    /** Links a case to the specified branch. */\n    addCase(value, code) {\n        var cases = this.cases;\n        var index = cases.indexOf(code);\n        if (index < 0) {\n            index = cases.length;\n            cases.push(code);\n        }\n        this.values.push(value);\n        this.indexes.push(index);\n    }\n    /** Links the default branch. */\n    addDefault(code) {\n        assert(this.defaultIndex == -1);\n        var cases = this.cases;\n        this.defaultIndex = cases.length;\n        cases.push(code);\n    }\n    /** Renders the switch to a block. */\n    render(localIndex, labelPostfix = \"\") {\n        var module = this.module;\n        var cases = this.cases;\n        var numCases = cases.length;\n        if (!numCases) {\n            return module.drop(this.condition);\n        }\n        var values = this.values;\n        var numValues = values.length;\n        var indexes = this.indexes;\n        var entry = new Array(1 + numValues + 1);\n        var labels = new Array(numCases);\n        for (let i = 0; i < numCases; ++i) {\n            labels[i] = \"case\" + i.toString() + labelPostfix;\n        }\n        entry[0] = module.local_set(localIndex, this.condition, false); // u32\n        for (let i = 0; i < numValues; ++i) {\n            let index = indexes[i];\n            entry[1 + i] = module.br(labels[index], module.binary(BinaryOp.EqI32, module.local_get(localIndex, NativeType.I32), module.i32(values[i])));\n        }\n        var defaultIndex = this.defaultIndex;\n        var defaultLabel = \"default\" + labelPostfix;\n        entry[1 + numValues] = module.br(~defaultIndex\n            ? labels[defaultIndex]\n            : defaultLabel);\n        var current = module.block(labels[0], entry);\n        for (let i = 1; i < numCases; ++i) {\n            let block = cases[i - 1];\n            block.unshift(current);\n            current = module.block(labels[i], block);\n        }\n        var lastCase = cases[numCases - 1];\n        lastCase.unshift(current);\n        return module.block(~defaultIndex\n            ? null\n            : defaultLabel, lastCase);\n    }\n}\nexports.SwitchBuilder = SwitchBuilder;\nvar SideEffects;\n(function (SideEffects) {\n    SideEffects[SideEffects[\"None\"] = 0] = \"None\"; /* _BinaryenSideEffectNone */\n    SideEffects[SideEffects[\"Branches\"] = 1] = \"Branches\"; /* _BinaryenSideEffectBranches */\n    SideEffects[SideEffects[\"Calls\"] = 2] = \"Calls\"; /* _BinaryenSideEffectCalls */\n    SideEffects[SideEffects[\"ReadsLocal\"] = 4] = \"ReadsLocal\"; /* _BinaryenSideEffectReadsLocal */\n    SideEffects[SideEffects[\"WritesLocal\"] = 8] = \"WritesLocal\"; /* _BinaryenSideEffectWritesLocal */\n    SideEffects[SideEffects[\"ReadsGlobal\"] = 16] = \"ReadsGlobal\"; /* _BinaryenSideEffectReadsGlobal */\n    SideEffects[SideEffects[\"WritesGlobal\"] = 32] = \"WritesGlobal\"; /* _BinaryenSideEffectWritesGlobal */\n    SideEffects[SideEffects[\"ReadsMemory\"] = 64] = \"ReadsMemory\"; /* _BinaryenSideEffectReadsMemory */\n    SideEffects[SideEffects[\"WritesMemory\"] = 128] = \"WritesMemory\"; /* _BinaryenSideEffectWritesMemory */\n    SideEffects[SideEffects[\"ImplicitTrap\"] = 256] = \"ImplicitTrap\"; /* _BinaryenSideEffectImplicitTrap */\n    SideEffects[SideEffects[\"IsAtomic\"] = 512] = \"IsAtomic\"; /* _BinaryenSideEffectIsAtomic */\n    SideEffects[SideEffects[\"Throws\"] = 1024] = \"Throws\"; /* _BinaryenSideEffectThrows */\n    SideEffects[SideEffects[\"DanglingPop\"] = 2048] = \"DanglingPop\"; /* _BinaryenSideEffectDanglingPop */\n    SideEffects[SideEffects[\"Any\"] = 4095] = \"Any\"; /* _BinaryenSideEffectAny */\n})(SideEffects = exports.SideEffects || (exports.SideEffects = {}));\nfunction getSideEffects(expr, features = FeatureFlags.All) {\n    return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\nexports.getSideEffects = getSideEffects;\nfunction hasSideEffects(expr, features = FeatureFlags.All) {\n    return getSideEffects(expr, features) != SideEffects.None;\n}\nexports.hasSideEffects = hasSideEffects;\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\nfunction allocU8Array(u8s) {\n    if (!u8s)\n        return 0;\n    var len = u8s.length;\n    var ptr = binaryen._malloc(len);\n    for (let i = 0; i < len; ++i) {\n        binaryen.__i32_store8(ptr + i, u8s[i]);\n    }\n    return ptr;\n}\nfunction allocI32Array(i32s) {\n    if (!i32s)\n        return 0;\n    var len = i32s.length;\n    var ptr = binaryen._malloc(len << 2);\n    var idx = ptr;\n    for (let i = 0; i < len; ++i) {\n        let val = i32s[i];\n        binaryen.__i32_store(idx, val);\n        idx += 4;\n    }\n    return ptr;\n}\nfunction allocU32Array(u32s) {\n    if (!u32s)\n        return 0;\n    var len = u32s.length;\n    var ptr = binaryen._malloc(len << 2);\n    var idx = ptr;\n    for (let i = 0; i < len; ++i) {\n        let val = u32s[i];\n        binaryen.__i32_store(idx, val);\n        idx += 4;\n    }\n    return ptr;\n}\nfunction allocPtrArray(ptrs) {\n    if (!ptrs)\n        return 0;\n    // TODO: WASM64\n    assert(ASC_TARGET != common_1.Target.WASM64);\n    var len = ptrs.length;\n    var ptr = binaryen._malloc(len << 2);\n    var idx = ptr;\n    for (let i = 0, k = len; i < k; ++i) {\n        let val = ptrs[i];\n        binaryen.__i32_store(idx, val);\n        idx += 4;\n    }\n    return ptr;\n}\nexports.allocPtrArray = allocPtrArray;\nfunction stringLengthUTF8(str) {\n    var len = 0;\n    for (let i = 0, k = str.length; i < k; ++i) {\n        let u = str.charCodeAt(i);\n        if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n            u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n        }\n        if (u <= 0x7F) {\n            len += 1;\n        }\n        else if (u <= 0x7FF) {\n            len += 2;\n        }\n        else if (u <= 0xFFFF) {\n            len += 3;\n        }\n        else {\n            len += 4;\n        }\n    }\n    return len;\n}\nfunction allocString(str) {\n    if (str === null)\n        return 0;\n    var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n    // the following is based on Emscripten's stringToUTF8Array\n    var idx = ptr;\n    for (let i = 0, k = str.length; i < k; ++i) {\n        let u = str.charCodeAt(i);\n        if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n            u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n        }\n        if (u <= 0x7F) {\n            binaryen.__i32_store8(idx++, u);\n        }\n        else if (u <= 0x7FF) {\n            binaryen.__i32_store8(idx++, (0xC0 | (u >>> 6)));\n            binaryen.__i32_store8(idx++, (0x80 | (u & 63)));\n        }\n        else if (u <= 0xFFFF) {\n            binaryen.__i32_store8(idx++, (0xE0 | (u >>> 12)));\n            binaryen.__i32_store8(idx++, (0x80 | ((u >>> 6) & 63)));\n            binaryen.__i32_store8(idx++, (0x80 | (u & 63)));\n        }\n        else {\n            assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n            binaryen.__i32_store8(idx++, (0xF0 | (u >>> 18)));\n            binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)));\n            binaryen.__i32_store8(idx++, (0x80 | ((u >>> 6) & 63)));\n            binaryen.__i32_store8(idx++, (0x80 | (u & 63)));\n        }\n    }\n    binaryen.__i32_store8(idx, 0);\n    return ptr;\n}\nfunction readBuffer(ptr, len) {\n    var ret = new Uint8Array(len);\n    for (let i = 0; i < len; ++i) {\n        ret[i] = binaryen.__i32_load8_u(ptr + i);\n    }\n    return ret;\n}\nfunction readString(ptr) {\n    if (!ptr)\n        return null;\n    var arr = new Array();\n    // the following is based on Emscripten's UTF8ArrayToString\n    var cp;\n    var u1, u2, u3;\n    while (cp = binaryen.__i32_load8_u(ptr++)) {\n        if (!(cp & 0x80)) {\n            arr.push(cp);\n            continue;\n        }\n        u1 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xE0) == 0xC0) {\n            arr.push(((cp & 31) << 6) | u1);\n            continue;\n        }\n        u2 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xF0) == 0xE0) {\n            cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n        }\n        else {\n            u3 = binaryen.__i32_load8_u(ptr++) & 63;\n            if ((cp & 0xF8) == 0xF0) {\n                cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n            }\n            else {\n                assert(false, \"Invalid UTF8 sequence during readString\");\n            }\n        }\n        if (cp < 0x10000) {\n            arr.push(cp);\n        }\n        else {\n            let ch = cp - 0x10000;\n            arr.push(0xD800 | (ch >>> 10));\n            arr.push(0xDC00 | (ch & 0x3FF));\n        }\n    }\n    return String.fromCharCodes(arr);\n}\nexports.readString = readString;\n/** Result structure of {@link Module#toBinary}. */\nclass BinaryModule {\n    constructor(\n    /** WebAssembly binary. */\n    output, \n    /** Source map, if generated. */\n    sourceMap) {\n        this.output = output;\n        this.sourceMap = sourceMap;\n    }\n}\nexports.BinaryModule = BinaryModule;\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nfunction needsExplicitUnreachable(expr) {\n    // not applicable if pushing a value to the stack\n    if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n        return false;\n    }\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n        case ExpressionId.Unreachable:\n        case ExpressionId.Return: return false;\n        case ExpressionId.Break: {\n            return binaryen._BinaryenBreakGetCondition(expr) != 0;\n        }\n        case ExpressionId.Block: {\n            if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n                let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n                return (numChildren > 0 &&\n                    needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1)));\n            }\n        }\n    }\n    return true;\n}\nexports.needsExplicitUnreachable = needsExplicitUnreachable;\n\n\n/***/ }),\n\n/***/ 215:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Precedence = exports.Parser = void 0;\nconst common_1 = __webpack_require__(200);\nconst tokenizer_1 = __webpack_require__(411);\nconst diagnostics_1 = __webpack_require__(256);\nconst util_1 = __webpack_require__(910);\nconst ast_1 = __webpack_require__(60);\n/** Represents a dependee. */\nclass Dependee {\n    constructor(source, reportNode) {\n        this.source = source;\n        this.reportNode = reportNode;\n    }\n}\n/** Parser interface. */\nclass Parser extends diagnostics_1.DiagnosticEmitter {\n    /** Constructs a new parser. */\n    constructor(diagnostics = null, sources = null) {\n        super(diagnostics);\n        /** Source file names to be requested next. */\n        this.backlog = new Array();\n        /** Source file names already seen, that is processed or backlogged. */\n        this.seenlog = new Set();\n        /** Source file names already completely processed. */\n        this.donelog = new Set();\n        /** Optional handler to intercept comments while tokenizing. */\n        this.onComment = null;\n        /** Current file being parsed. */\n        this.currentSource = null;\n        /** Map of dependees being depended upon by a source, by path. */\n        this.dependees = new Map();\n        // Indicates whether tryParseSignature determined that it is handling a Signature\n        this.tryParseSignatureIsSignature = false;\n        this.parseParametersThis = null;\n        this.sources = sources ? sources : new Array();\n    }\n    /** Parses a file and adds its definitions to the program. */\n    parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text, \n    /** Normalized path of the file. */\n    path, \n    /** Whether this is an entry file. */\n    isEntry) {\n        // the frontend gives us paths with file extensions\n        var normalizedPath = util_1.normalizePath(path);\n        var internalPath = ast_1.mangleInternalPath(path);\n        // check if already processed\n        if (this.donelog.has(internalPath))\n            return;\n        this.donelog.add(internalPath); // do not parse again\n        this.seenlog.add(internalPath); // do not request again\n        // check if this is an error\n        if (text === null) {\n            let dependees = this.dependees;\n            let dependee = null;\n            if (dependees.has(internalPath))\n                dependee = assert(dependees.get(internalPath));\n            this.error(diagnostics_1.DiagnosticCode.File_0_not_found, dependee\n                ? dependee.reportNode.range\n                : null, path);\n            return;\n        }\n        // create the source element\n        var source = new ast_1.Source(isEntry\n            ? ast_1.SourceKind.USER_ENTRY\n            : path.startsWith(common_1.LIBRARY_PREFIX)\n                ? path.indexOf(common_1.PATH_DELIMITER, common_1.LIBRARY_PREFIX.length) < 0\n                    ? ast_1.SourceKind.LIBRARY_ENTRY\n                    : ast_1.SourceKind.LIBRARY\n                : ast_1.SourceKind.USER, normalizedPath, text);\n        this.sources.push(source);\n        this.currentSource = source;\n        // tokenize and parse\n        var tn = new tokenizer_1.Tokenizer(source, this.diagnostics);\n        tn.onComment = this.onComment;\n        var statements = source.statements;\n        while (!tn.skip(tokenizer_1.Token.ENDOFFILE)) {\n            let statement = this.parseTopLevelStatement(tn, null);\n            if (statement) {\n                statements.push(statement);\n            }\n            else {\n                this.skipStatement(tn);\n            }\n        }\n    }\n    /** Parses a top-level statement. */\n    parseTopLevelStatement(tn, namespace = null) {\n        var flags = common_1.CommonFlags.NONE;\n        var startPos = -1;\n        // check decorators\n        var decorators = null;\n        while (tn.skip(tokenizer_1.Token.AT)) {\n            if (startPos < 0)\n                startPos = tn.tokenPos;\n            let decorator = this.parseDecorator(tn);\n            if (!decorator) {\n                this.skipStatement(tn);\n                continue;\n            }\n            if (!decorators)\n                decorators = [decorator];\n            else\n                decorators.push(decorator);\n        }\n        // check modifiers\n        var exportStart = 0;\n        var exportEnd = 0;\n        var defaultStart = 0;\n        var defaultEnd = 0;\n        if (tn.skip(tokenizer_1.Token.EXPORT)) {\n            if (startPos < 0)\n                startPos = tn.tokenPos;\n            flags |= common_1.CommonFlags.EXPORT;\n            exportStart = tn.tokenPos;\n            exportEnd = tn.pos;\n            if (tn.skip(tokenizer_1.Token.DEFAULT)) {\n                defaultStart = tn.tokenPos;\n                defaultEnd = tn.pos;\n            }\n        }\n        var declareStart = 0;\n        var declareEnd = 0;\n        var contextIsAmbient = namespace != null && namespace.is(common_1.CommonFlags.AMBIENT);\n        if (tn.skip(tokenizer_1.Token.DECLARE)) {\n            if (contextIsAmbient) {\n                this.error(diagnostics_1.DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context, tn.range()); // recoverable\n            }\n            else {\n                if (startPos < 0)\n                    startPos = tn.tokenPos;\n                declareStart = startPos;\n                declareEnd = tn.pos;\n                flags |= common_1.CommonFlags.DECLARE | common_1.CommonFlags.AMBIENT;\n            }\n        }\n        else if (contextIsAmbient) {\n            flags |= common_1.CommonFlags.AMBIENT;\n        }\n        // parse the statement\n        var statement = null;\n        // handle declarations\n        var first = tn.peek();\n        if (startPos < 0)\n            startPos = tn.nextTokenPos;\n        switch (first) {\n            case tokenizer_1.Token.CONST: {\n                tn.next();\n                flags |= common_1.CommonFlags.CONST;\n                if (tn.skip(tokenizer_1.Token.ENUM)) {\n                    statement = this.parseEnum(tn, flags, decorators, startPos);\n                }\n                else {\n                    statement = this.parseVariable(tn, flags, decorators, startPos);\n                }\n                decorators = null;\n                break;\n            }\n            case tokenizer_1.Token.LET: flags |= common_1.CommonFlags.LET;\n            case tokenizer_1.Token.VAR: {\n                tn.next();\n                statement = this.parseVariable(tn, flags, decorators, startPos);\n                decorators = null;\n                break;\n            }\n            case tokenizer_1.Token.ENUM: {\n                tn.next();\n                statement = this.parseEnum(tn, flags, decorators, startPos);\n                decorators = null;\n                break;\n            }\n            case tokenizer_1.Token.FUNCTION: {\n                tn.next();\n                statement = this.parseFunction(tn, flags, decorators, startPos);\n                decorators = null;\n                break;\n            }\n            case tokenizer_1.Token.ABSTRACT: {\n                let state = tn.mark();\n                tn.next();\n                let abstractStart = tn.tokenPos;\n                let abstractEnd = tn.pos;\n                let next = tn.peek(true);\n                if (tn.nextTokenOnNewLine) {\n                    tn.reset(state);\n                    statement = this.parseStatement(tn, true);\n                    break;\n                }\n                if (next != tokenizer_1.Token.CLASS) {\n                    if (next == tokenizer_1.Token.INTERFACE) {\n                        this.error(diagnostics_1.DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration, tn.range(abstractStart, abstractEnd));\n                    }\n                    tn.reset(state);\n                    statement = this.parseStatement(tn, true);\n                    break;\n                }\n                else {\n                    tn.discard(state);\n                }\n                flags |= common_1.CommonFlags.ABSTRACT;\n                // fall through\n            }\n            case tokenizer_1.Token.CLASS:\n            case tokenizer_1.Token.INTERFACE: {\n                tn.next();\n                statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n                decorators = null;\n                break;\n            }\n            case tokenizer_1.Token.NAMESPACE: {\n                let state = tn.mark();\n                tn.next();\n                if (tn.peek(false, tokenizer_1.IdentifierHandling.PREFER) == tokenizer_1.Token.IDENTIFIER) {\n                    tn.discard(state);\n                    statement = this.parseNamespace(tn, flags, decorators, startPos);\n                    decorators = null;\n                }\n                else {\n                    tn.reset(state);\n                    statement = this.parseStatement(tn, true);\n                }\n                break;\n            }\n            case tokenizer_1.Token.IMPORT: {\n                tn.next();\n                flags |= common_1.CommonFlags.IMPORT;\n                if (flags & common_1.CommonFlags.EXPORT) {\n                    statement = this.parseExportImport(tn, startPos);\n                }\n                else {\n                    statement = this.parseImport(tn);\n                }\n                break;\n            }\n            case tokenizer_1.Token.TYPE: { // also identifier\n                let state = tn.mark();\n                tn.next();\n                if (tn.peek(false, tokenizer_1.IdentifierHandling.PREFER) == tokenizer_1.Token.IDENTIFIER) {\n                    tn.discard(state);\n                    statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n                    decorators = null;\n                }\n                else {\n                    tn.reset(state);\n                    statement = this.parseStatement(tn, true);\n                }\n                break;\n            }\n            default: {\n                // handle plain exports\n                if (flags & common_1.CommonFlags.EXPORT) {\n                    if (defaultEnd && tn.skipIdentifier(tokenizer_1.IdentifierHandling.PREFER)) {\n                        if (declareEnd) {\n                            this.error(diagnostics_1.DiagnosticCode.An_export_assignment_cannot_have_modifiers, tn.range(declareStart, declareEnd));\n                        }\n                        statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n                        defaultStart = defaultEnd = 0; // consume\n                    }\n                    else {\n                        statement = this.parseExport(tn, startPos, (flags & common_1.CommonFlags.DECLARE) != 0);\n                    }\n                    // handle non-declaration statements\n                }\n                else {\n                    if (exportEnd) {\n                        this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(exportStart, exportEnd), \"export\"); // recoverable\n                    }\n                    if (declareEnd) {\n                        this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(declareStart, declareEnd), \"declare\"); // recoverable\n                    }\n                    if (!namespace) {\n                        statement = this.parseStatement(tn, true);\n                    } // TODO: else?\n                }\n                break;\n            }\n        }\n        // check for decorators that weren't consumed\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                this.error(diagnostics_1.DiagnosticCode.Decorators_are_not_valid_here, decorators[i].range);\n            }\n        }\n        // check if this an `export default` declaration\n        if (defaultEnd && statement !== null) {\n            switch (statement.kind) {\n                case ast_1.NodeKind.ENUMDECLARATION:\n                case ast_1.NodeKind.FUNCTIONDECLARATION:\n                case ast_1.NodeKind.CLASSDECLARATION:\n                case ast_1.NodeKind.INTERFACEDECLARATION:\n                case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                    return ast_1.Node.createExportDefaultStatement(statement, tn.range(startPos, tn.pos));\n                }\n                default: {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(defaultStart, defaultEnd), \"default\");\n                }\n            }\n        }\n        return statement;\n    }\n    /** Obtains the next file to parse. */\n    nextFile() {\n        var backlog = this.backlog;\n        return backlog.length ? assert(backlog.shift()) : null;\n    }\n    /** Obtains the path of the dependee of the given imported file. */\n    getDependee(dependent) {\n        var dependees = this.dependees;\n        if (dependees.has(dependent)) {\n            let dependee = assert(dependees.get(dependent));\n            return dependee.source.internalPath;\n        }\n        return null;\n    }\n    /** Finishes parsing. */\n    finish() {\n        if (this.backlog.length)\n            throw new Error(\"backlog is not empty\");\n        this.backlog = [];\n        this.seenlog.clear();\n        this.donelog.clear();\n        this.dependees.clear();\n    }\n    // types\n    /** Parses a type name. */\n    parseTypeName(tn) {\n        // at: Identifier ('.' Identifier)*\n        var first = ast_1.Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        var current = first;\n        while (tn.skip(tokenizer_1.Token.DOT)) {\n            if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\n                let next = ast_1.Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n                current.next = next;\n                current = next;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range(tn.pos));\n                return null;\n            }\n        }\n        return first;\n    }\n    /** Parses a type. */\n    parseType(tn, acceptParenthesized = true, suppressErrors = false) {\n        // before: Type\n        // NOTE: this parses our limited subset\n        var token = tn.next();\n        var startPos = tn.tokenPos;\n        var type;\n        // '(' ...\n        if (token == tokenizer_1.Token.OPENPAREN) {\n            // '(' FunctionSignature ')' '|' 'null'?\n            let isNullableSignature = tn.skip(tokenizer_1.Token.OPENPAREN);\n            // FunctionSignature?\n            let signature = this.tryParseFunctionType(tn);\n            if (signature) {\n                if (isNullableSignature) {\n                    if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                        return null;\n                    }\n                    if (!tn.skip(tokenizer_1.Token.BAR)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"|\");\n                        return null;\n                    }\n                    if (!tn.skip(tokenizer_1.Token.NULL)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"null\");\n                    }\n                    signature.isNullable = true;\n                }\n                return signature;\n            }\n            else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n                this.error(diagnostics_1.DiagnosticCode.Unexpected_token, tn.range());\n                return null;\n            }\n            // Type (',' Type)* ')'\n            if (acceptParenthesized) {\n                let innerType = this.parseType(tn, false, suppressErrors);\n                if (!innerType)\n                    return null;\n                if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    if (!suppressErrors) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \")\");\n                    }\n                    return null;\n                }\n                type = innerType;\n                type.range.start = startPos;\n                type.range.end = tn.pos;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Unexpected_token, tn.range());\n                return null;\n            }\n            // 'void'\n        }\n        else if (token == tokenizer_1.Token.VOID) {\n            type = ast_1.Node.createNamedType(ast_1.Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos));\n            // 'this'\n        }\n        else if (token == tokenizer_1.Token.THIS) {\n            type = ast_1.Node.createNamedType(ast_1.Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos));\n            // 'true'\n        }\n        else if (token == tokenizer_1.Token.TRUE || token == tokenizer_1.Token.FALSE) {\n            type = ast_1.Node.createNamedType(ast_1.Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos));\n            // 'null'\n        }\n        else if (token == tokenizer_1.Token.NULL) {\n            type = ast_1.Node.createNamedType(ast_1.Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos));\n            // StringLiteral\n        }\n        else if (token == tokenizer_1.Token.STRINGLITERAL) {\n            tn.readString();\n            type = ast_1.Node.createNamedType(ast_1.Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos));\n            // Identifier\n        }\n        else if (token == tokenizer_1.Token.IDENTIFIER) {\n            let name = this.parseTypeName(tn);\n            if (!name)\n                return null;\n            let parameters = null;\n            // Name<T>\n            if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\n                do {\n                    let parameter = this.parseType(tn, true, suppressErrors);\n                    if (!parameter)\n                        return null;\n                    if (!parameters)\n                        parameters = [parameter];\n                    else\n                        parameters.push(parameter);\n                } while (tn.skip(tokenizer_1.Token.COMMA));\n                if (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\n                    if (!suppressErrors) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \">\");\n                    }\n                    return null;\n                }\n            }\n            if (!parameters)\n                parameters = [];\n            type = ast_1.Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n        }\n        else {\n            if (!suppressErrors) {\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range());\n            }\n            return null;\n        }\n        // ... | null\n        while (tn.skip(tokenizer_1.Token.BAR)) {\n            if (tn.skip(tokenizer_1.Token.NULL)) {\n                type.isNullable = true;\n            }\n            else {\n                let notNullStart = tn.pos;\n                let notNull = this.parseType(tn, false, true);\n                if (!suppressErrors) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, notNull ? notNull.range : tn.range(notNullStart), \"null\");\n                }\n                return null;\n            }\n        }\n        // ... [][]\n        while (tn.skip(tokenizer_1.Token.OPENBRACKET)) {\n            let bracketStart = tn.tokenPos;\n            if (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\n                if (!suppressErrors) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\n                }\n                return null;\n            }\n            let bracketRange = tn.range(bracketStart, tn.pos);\n            // ...[] | null\n            let nullable = false;\n            if (tn.skip(tokenizer_1.Token.BAR)) {\n                if (tn.skip(tokenizer_1.Token.NULL)) {\n                    nullable = true;\n                }\n                else {\n                    if (!suppressErrors) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"null\");\n                    }\n                    return null;\n                }\n            }\n            type = ast_1.Node.createNamedType(ast_1.Node.createSimpleTypeName(\"Array\", bracketRange), [type], nullable, tn.range(startPos, tn.pos));\n            if (nullable)\n                break;\n        }\n        return type;\n    }\n    /** Parses a function type, as used in type declarations. */\n    tryParseFunctionType(tn) {\n        // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n        var state = tn.mark();\n        var startPos = tn.tokenPos;\n        var parameters = null;\n        var thisType = null;\n        var isSignature = false;\n        var firstParamNameNoType = null;\n        var firstParamKind = ast_1.ParameterKind.DEFAULT;\n        if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n            isSignature = true;\n            tn.discard(state);\n            parameters = [];\n        }\n        else {\n            isSignature = false; // not yet known\n            do {\n                let paramStart = -1;\n                let kind = ast_1.ParameterKind.DEFAULT;\n                if (tn.skip(tokenizer_1.Token.DOT_DOT_DOT)) {\n                    paramStart = tn.tokenPos;\n                    isSignature = true;\n                    tn.discard(state);\n                    kind = ast_1.ParameterKind.REST;\n                }\n                if (tn.skip(tokenizer_1.Token.THIS)) {\n                    if (paramStart < 0)\n                        paramStart = tn.tokenPos;\n                    if (tn.skip(tokenizer_1.Token.COLON)) {\n                        isSignature = true;\n                        tn.discard(state);\n                        let type = this.parseType(tn, false);\n                        if (!type)\n                            return null;\n                        if (type.kind != ast_1.NodeKind.NAMEDTYPE) {\n                            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, type.range);\n                            this.tryParseSignatureIsSignature = true;\n                            return null;\n                        }\n                        thisType = type;\n                    }\n                    else {\n                        tn.reset(state);\n                        this.tryParseSignatureIsSignature = false;\n                        return null;\n                    }\n                }\n                else if (tn.skipIdentifier()) {\n                    if (paramStart < 0)\n                        paramStart = tn.tokenPos;\n                    let name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n                    if (tn.skip(tokenizer_1.Token.QUESTION)) {\n                        isSignature = true;\n                        tn.discard(state);\n                        if (kind == ast_1.ParameterKind.REST) {\n                            this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_cannot_be_optional, tn.range()); // recoverable\n                        }\n                        else {\n                            kind = ast_1.ParameterKind.OPTIONAL;\n                        }\n                    }\n                    if (tn.skip(tokenizer_1.Token.COLON)) {\n                        isSignature = true;\n                        tn.discard(state);\n                        let type = this.parseType(tn); // not suppressing errors because known\n                        if (!type) {\n                            this.tryParseSignatureIsSignature = isSignature;\n                            return null;\n                        }\n                        let param = ast_1.Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n                        if (!parameters)\n                            parameters = [param];\n                        else\n                            parameters.push(param);\n                    }\n                    else {\n                        if (!isSignature) {\n                            if (tn.peek() == tokenizer_1.Token.COMMA) {\n                                isSignature = true;\n                                tn.discard(state);\n                            }\n                        }\n                        if (isSignature) {\n                            let param = ast_1.Node.createParameter(kind, name, ast_1.Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n                            if (!parameters)\n                                parameters = [param];\n                            else\n                                parameters.push(param);\n                            this.error(diagnostics_1.DiagnosticCode.Type_expected, param.type.range); // recoverable\n                        }\n                        else if (!parameters) {\n                            // on '(' Identifier ^',' we don't yet know whether this is a\n                            // parenthesized or a function type, hence we have to delay the\n                            // respective diagnostic until we know for sure.\n                            firstParamNameNoType = name;\n                            firstParamKind = kind;\n                        }\n                    }\n                }\n                else {\n                    if (isSignature) {\n                        this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    }\n                    else {\n                        tn.reset(state);\n                    }\n                    this.tryParseSignatureIsSignature = isSignature;\n                    return null;\n                }\n            } while (tn.skip(tokenizer_1.Token.COMMA));\n            if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                if (isSignature) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                }\n                else {\n                    tn.reset(state);\n                }\n                this.tryParseSignatureIsSignature = isSignature;\n                return null;\n            }\n        }\n        var returnType;\n        if (tn.skip(tokenizer_1.Token.EQUALS_GREATERTHAN)) {\n            if (!isSignature) {\n                isSignature = true;\n                tn.discard(state);\n                if (firstParamNameNoType) { // now we know\n                    let param = ast_1.Node.createParameter(firstParamKind, firstParamNameNoType, ast_1.Node.createOmittedType(firstParamNameNoType.range.atEnd), null, firstParamNameNoType.range);\n                    if (!parameters)\n                        parameters = [param];\n                    else\n                        parameters.push(param);\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, param.type.range); // recoverable\n                }\n            }\n            returnType = this.parseType(tn);\n            if (!returnType) {\n                this.tryParseSignatureIsSignature = isSignature;\n                return null;\n            }\n        }\n        else {\n            if (isSignature) {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"=>\");\n            }\n            else {\n                tn.reset(state);\n            }\n            this.tryParseSignatureIsSignature = isSignature;\n            return null;\n        }\n        this.tryParseSignatureIsSignature = true;\n        if (!parameters)\n            parameters = [];\n        return ast_1.Node.createFunctionType(parameters, returnType, thisType, false, tn.range(startPos, tn.pos));\n    }\n    // statements\n    parseDecorator(tn) {\n        // at '@': Identifier ('.' Identifier)* '(' Arguments\n        var startPos = tn.tokenPos;\n        if (tn.skipIdentifier()) {\n            let name = tn.readIdentifier();\n            let expression = ast_1.Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n            while (tn.skip(tokenizer_1.Token.DOT)) {\n                if (tn.skipIdentifier(tokenizer_1.IdentifierHandling.PREFER)) {\n                    name = tn.readIdentifier();\n                    expression = ast_1.Node.createPropertyAccessExpression(expression, ast_1.Node.createIdentifierExpression(name, tn.range()), tn.range(startPos, tn.pos));\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    return null;\n                }\n            }\n            let args;\n            if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n                args = this.parseArguments(tn);\n                if (args) {\n                    return ast_1.Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n                }\n            }\n            else {\n                return ast_1.Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseVariable(tn, flags, decorators, startPos, isFor = false) {\n        // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n        var declarations = new Array();\n        do {\n            let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n            if (!declaration)\n                return null;\n            declarations.push(declaration);\n        } while (tn.skip(tokenizer_1.Token.COMMA));\n        var ret = ast_1.Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseVariableDeclaration(tn, parentFlags, parentDecorators, isFor = false) {\n        // before: Identifier (':' Type)? ('=' Expression)?\n        if (!tn.skipIdentifier()) {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n            return null;\n        }\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (tokenizer_1.isIllegalVariableIdentifier(identifier.text)) {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, identifier.range);\n        }\n        var flags = parentFlags;\n        if (tn.skip(tokenizer_1.Token.EXCLAMATION)) {\n            flags |= common_1.CommonFlags.DEFINITELY_ASSIGNED;\n        }\n        var type = null;\n        if (tn.skip(tokenizer_1.Token.COLON)) {\n            type = this.parseType(tn, true);\n        }\n        var initializer = null;\n        if (tn.skip(tokenizer_1.Token.EQUALS)) {\n            if (flags & common_1.CommonFlags.AMBIENT) {\n                this.error(diagnostics_1.DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts, tn.range()); // recoverable\n            }\n            initializer = this.parseExpression(tn, 1 /* COMMA */ + 1);\n            if (!initializer)\n                return null;\n        }\n        else if (!isFor) {\n            if (flags & common_1.CommonFlags.CONST) {\n                if (!(flags & common_1.CommonFlags.AMBIENT)) {\n                    this.error(diagnostics_1.DiagnosticCode._const_declarations_must_be_initialized, identifier.range); // recoverable\n                }\n            }\n            else if (!type) { // neither type nor initializer\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range(tn.pos)); // recoverable\n            }\n        }\n        var range = tokenizer_1.Range.join(identifier.range, tn.range());\n        if (initializer !== null && (flags & common_1.CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n            this.error(diagnostics_1.DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context, range);\n        }\n        return ast_1.Node.createVariableDeclaration(identifier, parentDecorators, flags, type, initializer, range);\n    }\n    parseEnum(tn, flags, decorators, startPos) {\n        // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n        if (tn.next() != tokenizer_1.Token.IDENTIFIER) {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n            return null;\n        }\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (tn.next() != tokenizer_1.Token.OPENBRACE) {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n            return null;\n        }\n        var members = new Array();\n        while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n            let member = this.parseEnumValue(tn, common_1.CommonFlags.NONE);\n            if (!member)\n                return null;\n            members.push(member);\n            if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                if (tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                    break;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                    return null;\n                }\n            }\n        }\n        var ret = ast_1.Node.createEnumDeclaration(identifier, decorators, flags, members, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseEnumValue(tn, parentFlags) {\n        // before: Identifier ('=' Expression)?\n        if (!tn.skipIdentifier()) {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n            return null;\n        }\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        var value = null;\n        if (tn.skip(tokenizer_1.Token.EQUALS)) {\n            value = this.parseExpression(tn, 1 /* COMMA */ + 1);\n            if (!value)\n                return null;\n        }\n        return ast_1.Node.createEnumValueDeclaration(identifier, parentFlags, value, tokenizer_1.Range.join(identifier.range, tn.range()));\n    }\n    parseReturn(tn) {\n        // at 'return': Expression | (';' | '}' | ...'\\n')\n        var startPos = tn.tokenPos;\n        var expr = null;\n        if (tn.peek(true) != tokenizer_1.Token.SEMICOLON &&\n            tn.nextToken != tokenizer_1.Token.CLOSEBRACE &&\n            !tn.nextTokenOnNewLine) {\n            if (!(expr = this.parseExpression(tn)))\n                return null;\n        }\n        var ret = ast_1.Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseTypeParameters(tn) {\n        // at '<': TypeParameter (',' TypeParameter)* '>'\n        var typeParameters = new Array();\n        var seenOptional = false;\n        var start = tn.tokenPos;\n        while (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\n            let typeParameter = this.parseTypeParameter(tn);\n            if (!typeParameter)\n                return null;\n            if (typeParameter.defaultType !== null) {\n                seenOptional = true;\n            }\n            else if (seenOptional) {\n                this.error(diagnostics_1.DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters, typeParameter.range);\n                typeParameter.defaultType = null;\n            }\n            typeParameters.push(typeParameter);\n            if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                if (tn.skip(tokenizer_1.Token.GREATERTHAN)) {\n                    break;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \">\");\n                    return null;\n                }\n            }\n        }\n        if (!typeParameters.length) {\n            this.error(diagnostics_1.DiagnosticCode.Type_parameter_list_cannot_be_empty, tn.range(start, tn.pos)); // recoverable\n        }\n        return typeParameters;\n    }\n    parseTypeParameter(tn) {\n        // before: Identifier ('extends' Type)? ('=' Type)?\n        if (tn.next() == tokenizer_1.Token.IDENTIFIER) {\n            let identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            let extendsType = null;\n            if (tn.skip(tokenizer_1.Token.EXTENDS)) {\n                let type = this.parseType(tn);\n                if (!type)\n                    return null;\n                if (type.kind != ast_1.NodeKind.NAMEDTYPE) {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, type.range);\n                    return null;\n                }\n                extendsType = type;\n            }\n            let defaultType = null;\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\n                let type = this.parseType(tn);\n                if (!type)\n                    return null;\n                if (type.kind != ast_1.NodeKind.NAMEDTYPE) {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, type.range);\n                    return null;\n                }\n                defaultType = type;\n            }\n            return ast_1.Node.createTypeParameter(identifier, extendsType, defaultType, tokenizer_1.Range.join(identifier.range, tn.range()));\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseParameters(tn, isConstructor = false) {\n        // at '(': (Parameter (',' Parameter)*)? ')'\n        var parameters = new Array();\n        var seenRest = null;\n        var seenOptional = false;\n        var reportedRest = false;\n        var thisType = null;\n        // check if there is a leading `this` parameter\n        this.parseParametersThis = null;\n        if (tn.skip(tokenizer_1.Token.THIS)) {\n            if (tn.skip(tokenizer_1.Token.COLON)) {\n                thisType = this.parseType(tn); // reports\n                if (!thisType)\n                    return null;\n                if (thisType.kind == ast_1.NodeKind.NAMEDTYPE) {\n                    this.parseParametersThis = thisType;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, thisType.range);\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n                return null;\n            }\n            if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    return parameters;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                    return null;\n                }\n            }\n        }\n        while (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n            let param = this.parseParameter(tn, isConstructor); // reports\n            if (!param)\n                return null;\n            if (seenRest !== null && !reportedRest) {\n                this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list, seenRest.name.range);\n                reportedRest = true;\n            }\n            switch (param.parameterKind) {\n                default: {\n                    if (seenOptional) {\n                        this.error(diagnostics_1.DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter, param.name.range);\n                    }\n                    break;\n                }\n                case ast_1.ParameterKind.OPTIONAL: {\n                    seenOptional = true;\n                    break;\n                }\n                case ast_1.ParameterKind.REST: {\n                    seenRest = param;\n                    break;\n                }\n            }\n            parameters.push(param);\n            if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    break;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                    return null;\n                }\n            }\n        }\n        return parameters;\n    }\n    parseParameter(tn, isConstructor = false) {\n        // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n        var isRest = false;\n        var isOptional = false;\n        var startRange = null;\n        var accessFlags = common_1.CommonFlags.NONE;\n        if (isConstructor) {\n            if (tn.skip(tokenizer_1.Token.PUBLIC)) {\n                startRange = tn.range();\n                accessFlags |= common_1.CommonFlags.PUBLIC;\n            }\n            else if (tn.skip(tokenizer_1.Token.PROTECTED)) {\n                startRange = tn.range();\n                accessFlags |= common_1.CommonFlags.PROTECTED;\n            }\n            else if (tn.skip(tokenizer_1.Token.PRIVATE)) {\n                startRange = tn.range();\n                accessFlags |= common_1.CommonFlags.PRIVATE;\n            }\n            if (tn.peek() == tokenizer_1.Token.READONLY) {\n                let state = tn.mark();\n                tn.next();\n                if (tn.peek() != tokenizer_1.Token.COLON) { // modifier\n                    tn.discard(state);\n                    if (!startRange)\n                        startRange = tn.range();\n                    accessFlags |= common_1.CommonFlags.READONLY;\n                }\n                else { // identifier\n                    tn.reset(state);\n                }\n            }\n        }\n        if (tn.skip(tokenizer_1.Token.DOT_DOT_DOT)) {\n            if (accessFlags) {\n                this.error(diagnostics_1.DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter, tn.range());\n            }\n            else {\n                startRange = tn.range();\n            }\n            isRest = true;\n        }\n        if (tn.skipIdentifier()) {\n            if (!isRest)\n                startRange = tn.range();\n            let identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            let type = null;\n            if (isOptional = tn.skip(tokenizer_1.Token.QUESTION)) {\n                if (isRest) {\n                    this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_cannot_be_optional, identifier.range);\n                }\n            }\n            if (tn.skip(tokenizer_1.Token.COLON)) {\n                type = this.parseType(tn);\n                if (!type)\n                    return null;\n            }\n            else {\n                type = ast_1.Node.createOmittedType(tn.range(tn.pos));\n            }\n            let initializer = null;\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\n                if (isRest) {\n                    this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_cannot_have_an_initializer, identifier.range);\n                }\n                if (isOptional) {\n                    this.error(diagnostics_1.DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer, identifier.range);\n                }\n                else {\n                    isOptional = true;\n                }\n                initializer = this.parseExpression(tn, 1 /* COMMA */ + 1);\n                if (!initializer)\n                    return null;\n            }\n            let param = ast_1.Node.createParameter(isRest\n                ? ast_1.ParameterKind.REST\n                : isOptional\n                    ? ast_1.ParameterKind.OPTIONAL\n                    : ast_1.ParameterKind.DEFAULT, identifier, type, initializer, tokenizer_1.Range.join(assert(startRange), tn.range()));\n            param.flags |= accessFlags;\n            return param;\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseFunction(tn, flags, decorators, startPos) {\n        // at 'function':\n        //  Identifier\n        //  ('<' TypeParameters)?\n        //  '(' Parameters (':' Type)?\n        //  '{' Statement* '}'\n        //  ';'?\n        if (!tn.skipIdentifier()) {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range(tn.pos));\n            return null;\n        }\n        var name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        var signatureStart = -1;\n        var typeParameters = null;\n        if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\n            signatureStart = tn.tokenPos;\n            typeParameters = this.parseTypeParameters(tn);\n            if (!typeParameters)\n                return null;\n            flags |= common_1.CommonFlags.GENERIC;\n        }\n        if (!tn.skip(tokenizer_1.Token.OPENPAREN)) {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"(\");\n            return null;\n        }\n        if (signatureStart < 0) {\n            signatureStart = tn.tokenPos;\n        }\n        var parameters = this.parseParameters(tn);\n        if (!parameters)\n            return null;\n        var thisType = this.parseParametersThis;\n        var isSetter = (flags & common_1.CommonFlags.SET) != 0;\n        if (isSetter) {\n            if (parameters.length != 1) {\n                this.error(diagnostics_1.DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter, name.range); // recoverable\n            }\n            if (parameters.length > 0 && parameters[0].initializer !== null) {\n                this.error(diagnostics_1.DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer, name.range); // recoverable\n            }\n        }\n        if (flags & common_1.CommonFlags.GET) {\n            if (parameters.length) {\n                this.error(diagnostics_1.DiagnosticCode.A_get_accessor_cannot_have_parameters, name.range); // recoverable\n            }\n        }\n        var returnType = null;\n        if (tn.skip(tokenizer_1.Token.COLON)) {\n            returnType = this.parseType(tn, true, isSetter);\n            if (!returnType)\n                return null;\n        }\n        if (!returnType) {\n            returnType = ast_1.Node.createOmittedType(tn.range(tn.pos));\n            if (!isSetter) {\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, returnType.range); // recoverable\n            }\n        }\n        var signature = ast_1.Node.createFunctionType(parameters, returnType, thisType, false, tn.range(signatureStart, tn.pos));\n        var body = null;\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n            if (flags & common_1.CommonFlags.AMBIENT) {\n                this.error(diagnostics_1.DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, tn.range()); // recoverable\n            }\n            body = this.parseBlockStatement(tn, false);\n            if (!body)\n                return null;\n        }\n        else if (!(flags & common_1.CommonFlags.AMBIENT)) {\n            this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, tn.range(tn.pos));\n        }\n        var ret = ast_1.Node.createFunctionDeclaration(name, decorators, flags, typeParameters, signature, body, 0 /* NONE */, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseFunctionExpression(tn) {\n        var startPos = tn.tokenPos;\n        var name;\n        var arrowKind = 0 /* NONE */;\n        // either at 'function':\n        //  Identifier?\n        //  '(' Parameters (':' Type)?\n        //  Statement\n        if (tn.token == tokenizer_1.Token.FUNCTION) {\n            if (tn.skipIdentifier()) {\n                name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            }\n            else { // empty name\n                name = ast_1.Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n            }\n            if (!tn.skip(tokenizer_1.Token.OPENPAREN)) {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"(\");\n                return null;\n            }\n            // or at '(' of arrow function:\n            //  Parameters (':' Type)?\n            //  Statement\n        }\n        else {\n            arrowKind = 1 /* ARROW_PARENTHESIZED */;\n            assert(tn.token == tokenizer_1.Token.OPENPAREN);\n            name = ast_1.Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n        }\n        // TODO: type parameters? doesn't seem worth it.\n        var signatureStart = tn.pos;\n        var parameters = this.parseParameters(tn);\n        if (!parameters)\n            return null;\n        return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n    }\n    parseFunctionExpressionCommon(tn, name, parameters, explicitThis, arrowKind, startPos = -1, signatureStart = -1) {\n        if (startPos < 0)\n            startPos = name.range.start;\n        if (signatureStart < 0)\n            signatureStart = startPos;\n        var returnType = null;\n        if (arrowKind != 2 /* ARROW_SINGLE */ && tn.skip(tokenizer_1.Token.COLON)) {\n            returnType = this.parseType(tn);\n            if (!returnType)\n                return null;\n        }\n        else {\n            returnType = ast_1.Node.createOmittedType(tn.range(tn.pos));\n        }\n        if (arrowKind) {\n            if (!tn.skip(tokenizer_1.Token.EQUALS_GREATERTHAN)) {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"=>\");\n                return null;\n            }\n        }\n        var signature = ast_1.Node.createFunctionType(parameters, returnType, explicitThis, false, tn.range(signatureStart, tn.pos));\n        var body = null;\n        if (arrowKind) {\n            if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                body = this.parseBlockStatement(tn, false);\n            }\n            else {\n                let bodyExpression = this.parseExpression(tn, 1 /* COMMA */ + 1);\n                if (bodyExpression)\n                    body = ast_1.Node.createExpressionStatement(bodyExpression);\n            }\n        }\n        else {\n            if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"{\");\n                return null;\n            }\n            body = this.parseBlockStatement(tn, false);\n        }\n        if (!body)\n            return null;\n        var declaration = ast_1.Node.createFunctionDeclaration(name, null, common_1.CommonFlags.NONE, null, signature, body, arrowKind, tn.range(startPos, tn.pos));\n        return ast_1.Node.createFunctionExpression(declaration);\n    }\n    parseClassOrInterface(tn, flags, decorators, startPos) {\n        // at ('class' | 'interface'):\n        //   Identifier\n        //   ('<' TypeParameters)?\n        //   ('extends' Type)?\n        //   ('implements' Type (',' Type)*)?\n        //   '{' ClassMember* '}'\n        var isInterface = tn.token == tokenizer_1.Token.INTERFACE;\n        if (!tn.skipIdentifier()) {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n            return null;\n        }\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        var typeParameters = null;\n        if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\n            typeParameters = this.parseTypeParameters(tn);\n            if (!typeParameters)\n                return null;\n            flags |= common_1.CommonFlags.GENERIC;\n        }\n        var extendsType = null;\n        if (tn.skip(tokenizer_1.Token.EXTENDS)) {\n            let type = this.parseType(tn);\n            if (!type)\n                return null;\n            if (type.kind != ast_1.NodeKind.NAMEDTYPE) {\n                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, type.range);\n                return null;\n            }\n            extendsType = type;\n        }\n        var implementsTypes = null;\n        if (tn.skip(tokenizer_1.Token.IMPLEMENTS)) {\n            if (isInterface) {\n                this.error(diagnostics_1.DiagnosticCode.Interface_declaration_cannot_have_implements_clause, tn.range()); // recoverable\n            }\n            do {\n                let type = this.parseType(tn);\n                if (!type)\n                    return null;\n                if (type.kind != ast_1.NodeKind.NAMEDTYPE) {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, type.range);\n                    return null;\n                }\n                if (!isInterface) {\n                    if (!implementsTypes)\n                        implementsTypes = [];\n                    implementsTypes.push(type);\n                }\n            } while (tn.skip(tokenizer_1.Token.COMMA));\n        }\n        if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n            return null;\n        }\n        var members = new Array();\n        var declaration;\n        if (isInterface) {\n            assert(!implementsTypes);\n            declaration = ast_1.Node.createInterfaceDeclaration(identifier, decorators, flags, typeParameters, extendsType, null, members, tn.range(startPos, tn.pos));\n        }\n        else {\n            declaration = ast_1.Node.createClassDeclaration(identifier, decorators, flags, typeParameters, extendsType, implementsTypes, members, tn.range(startPos, tn.pos));\n        }\n        if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n            do {\n                let member = this.parseClassMember(tn, declaration);\n                if (member) {\n                    if (member.kind == ast_1.NodeKind.INDEXSIGNATURE) {\n                        declaration.indexSignature = member;\n                    }\n                    else {\n                        assert(member instanceof ast_1.DeclarationStatement);\n                        members.push(member);\n                    }\n                }\n                else {\n                    this.skipStatement(tn);\n                    if (tn.skip(tokenizer_1.Token.ENDOFFILE)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                        return null;\n                    }\n                }\n            } while (!tn.skip(tokenizer_1.Token.CLOSEBRACE));\n        }\n        declaration.range.end = tn.pos;\n        return declaration;\n    }\n    parseClassExpression(tn) {\n        // at 'class': Identifier? '{' ... '}'\n        var startPos = tn.tokenPos;\n        var name;\n        if (tn.skipIdentifier()) {\n            name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        }\n        else {\n            name = ast_1.Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n        }\n        if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"{\");\n            return null;\n        }\n        var members = new Array();\n        var declaration = ast_1.Node.createClassDeclaration(name, null, common_1.CommonFlags.NONE, null, null, null, members, tn.range(startPos, tn.pos));\n        if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n            do {\n                let member = this.parseClassMember(tn, declaration);\n                if (member) {\n                    if (member.kind == ast_1.NodeKind.INDEXSIGNATURE) {\n                        declaration.indexSignature = member;\n                    }\n                    else {\n                        assert(declaration instanceof ast_1.DeclarationStatement);\n                        members.push(member);\n                    }\n                }\n                else {\n                    this.skipStatement(tn);\n                    if (tn.skip(tokenizer_1.Token.ENDOFFILE)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                        return null;\n                    }\n                }\n            } while (!tn.skip(tokenizer_1.Token.CLOSEBRACE));\n        }\n        declaration.range.end = tn.pos;\n        return ast_1.Node.createClassExpression(declaration);\n    }\n    parseClassMember(tn, parent) {\n        // before:\n        //   ('public' | 'private' | 'protected')?\n        //   ('static' | 'abstract')?\n        //   'readonly'?\n        //   ('get' | 'set')?\n        //   Identifier ...\n        var isInterface = parent.kind == ast_1.NodeKind.INTERFACEDECLARATION;\n        var startPos = 0;\n        var decorators = null;\n        if (tn.skip(tokenizer_1.Token.AT)) {\n            startPos = tn.tokenPos;\n            do {\n                let decorator = this.parseDecorator(tn);\n                if (!decorator)\n                    break;\n                if (!decorators)\n                    decorators = new Array();\n                decorators.push(decorator);\n            } while (tn.skip(tokenizer_1.Token.AT));\n            if (isInterface && decorators !== null) {\n                this.error(diagnostics_1.DiagnosticCode.Decorators_are_not_valid_here, tokenizer_1.Range.join(decorators[0].range, decorators[decorators.length - 1].range));\n            }\n        }\n        // inherit ambient status\n        var flags = parent.flags & common_1.CommonFlags.AMBIENT;\n        // implemented methods are virtual\n        if (isInterface)\n            flags |= common_1.CommonFlags.VIRTUAL;\n        var accessStart = 0;\n        var accessEnd = 0;\n        if (tn.skip(tokenizer_1.Token.PUBLIC)) {\n            if (isInterface) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(), \"public\");\n            }\n            else {\n                flags |= common_1.CommonFlags.PUBLIC;\n                accessStart = tn.tokenPos;\n                accessEnd = tn.pos;\n            }\n            if (!startPos)\n                startPos = tn.tokenPos;\n        }\n        else if (tn.skip(tokenizer_1.Token.PRIVATE)) {\n            if (isInterface) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(), \"private\");\n            }\n            else {\n                flags |= common_1.CommonFlags.PRIVATE;\n                accessStart = tn.tokenPos;\n                accessEnd = tn.pos;\n            }\n            if (!startPos)\n                startPos = tn.tokenPos;\n        }\n        else if (tn.skip(tokenizer_1.Token.PROTECTED)) {\n            if (isInterface) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(), \"protected\");\n            }\n            else {\n                flags |= common_1.CommonFlags.PROTECTED;\n                accessStart = tn.tokenPos;\n                accessEnd = tn.pos;\n            }\n            if (!startPos)\n                startPos = tn.tokenPos;\n        }\n        var staticStart = 0;\n        var staticEnd = 0;\n        var abstractStart = 0;\n        var abstractEnd = 0;\n        if (tn.skip(tokenizer_1.Token.STATIC)) {\n            if (isInterface) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(), \"static\");\n            }\n            else {\n                flags |= common_1.CommonFlags.STATIC;\n                staticStart = tn.tokenPos;\n                staticEnd = tn.pos;\n            }\n            if (!startPos)\n                startPos = tn.tokenPos;\n        }\n        else {\n            flags |= common_1.CommonFlags.INSTANCE;\n            if (tn.skip(tokenizer_1.Token.ABSTRACT)) {\n                if (isInterface || !parent.is(common_1.CommonFlags.ABSTRACT)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(), \"abstract\");\n                }\n                else {\n                    flags |= common_1.CommonFlags.ABSTRACT;\n                    abstractStart = tn.tokenPos;\n                    abstractEnd = tn.pos;\n                }\n                if (!startPos)\n                    startPos = tn.tokenPos;\n            }\n            if (parent.flags & common_1.CommonFlags.GENERIC)\n                flags |= common_1.CommonFlags.GENERIC_CONTEXT;\n        }\n        var readonlyStart = 0;\n        var readonlyEnd = 0;\n        if (tn.peek() == tokenizer_1.Token.READONLY) {\n            let state = tn.mark();\n            tn.next();\n            if (tn.peek() != tokenizer_1.Token.COLON) { // modifier\n                tn.discard(state);\n                flags |= common_1.CommonFlags.READONLY;\n                readonlyStart = tn.tokenPos;\n                readonlyEnd = tn.pos;\n                if (!startPos)\n                    startPos = readonlyStart;\n            }\n            else { // identifier\n                tn.reset(state);\n            }\n        }\n        // check if accessor: ('get' | 'set') ^\\n Identifier\n        var state = tn.mark();\n        var isConstructor = false;\n        var isGetter = false;\n        var getStart = 0;\n        var getEnd = 0;\n        var isSetter = false;\n        var setStart = 0;\n        var setEnd = 0;\n        if (!isInterface) {\n            if (tn.skip(tokenizer_1.Token.GET)) {\n                if (tn.peek(true, tokenizer_1.IdentifierHandling.PREFER) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n                    flags |= common_1.CommonFlags.GET;\n                    isGetter = true;\n                    getStart = tn.tokenPos;\n                    getEnd = tn.pos;\n                    if (!startPos)\n                        startPos = getStart;\n                    if (flags & common_1.CommonFlags.READONLY) {\n                        this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(readonlyStart, readonlyEnd), \"readonly\"); // recoverable\n                    }\n                }\n                else {\n                    tn.reset(state);\n                }\n            }\n            else if (tn.skip(tokenizer_1.Token.SET)) {\n                if (tn.peek(true, tokenizer_1.IdentifierHandling.PREFER) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n                    flags |= common_1.CommonFlags.SET;\n                    isSetter = true;\n                    setStart = tn.tokenPos;\n                    setEnd = tn.pos;\n                    if (!startPos)\n                        startPos = setStart;\n                    if (flags & common_1.CommonFlags.READONLY) {\n                        this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(readonlyStart, readonlyEnd), \"readonly\"); // recoverable\n                    }\n                }\n                else {\n                    tn.reset(state);\n                }\n            }\n            else if (tn.skip(tokenizer_1.Token.CONSTRUCTOR)) {\n                flags |= common_1.CommonFlags.CONSTRUCTOR;\n                isConstructor = true;\n                if (!startPos)\n                    startPos = tn.tokenPos;\n                if (flags & common_1.CommonFlags.STATIC) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(staticStart, staticEnd), \"static\"); // recoverable\n                }\n                if (flags & common_1.CommonFlags.ABSTRACT) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(abstractStart, abstractEnd), \"abstract\"); // recoverable\n                }\n                if (flags & common_1.CommonFlags.READONLY) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(readonlyStart, readonlyEnd), \"readonly\"); // recoverable\n                }\n            }\n        }\n        var isGetterOrSetter = isGetter || isSetter;\n        var name;\n        if (isConstructor) {\n            name = ast_1.Node.createConstructorExpression(tn.range());\n        }\n        else {\n            if (!isGetterOrSetter && tn.skip(tokenizer_1.Token.OPENBRACKET)) {\n                if (!startPos)\n                    startPos = tn.tokenPos;\n                // TODO: also handle symbols, which might have some of these modifiers\n                if (flags & common_1.CommonFlags.PUBLIC) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(accessStart, accessEnd), \"public\"); // recoverable\n                }\n                else if (flags & common_1.CommonFlags.PROTECTED) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(accessStart, accessEnd), \"protected\"); // recoverable\n                }\n                else if (flags & common_1.CommonFlags.PRIVATE) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(accessStart, accessEnd), \"protected\"); // recoverable\n                }\n                if (flags & common_1.CommonFlags.STATIC) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(staticStart, staticEnd), \"static\"); // recoverable\n                }\n                if (flags & common_1.CommonFlags.ABSTRACT) {\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(abstractStart, abstractEnd), \"abstract\"); // recoverable\n                }\n                let retIndex = this.parseIndexSignature(tn, flags, decorators);\n                if (!retIndex) {\n                    if (flags & common_1.CommonFlags.READONLY) {\n                        this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(readonlyStart, readonlyEnd), \"readonly\"); // recoverable\n                    }\n                    return null;\n                }\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n                return retIndex;\n            }\n            if (!tn.skipIdentifier(tokenizer_1.IdentifierHandling.ALWAYS)) {\n                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                return null;\n            }\n            if (!startPos)\n                startPos = tn.tokenPos;\n            name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        }\n        var typeParameters = null;\n        if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\n            let typeParametersStart = tn.tokenPos;\n            typeParameters = this.parseTypeParameters(tn);\n            if (!typeParameters)\n                return null;\n            if (isConstructor) {\n                this.error(diagnostics_1.DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration, tn.range(typeParametersStart, tn.pos)); // recoverable\n            }\n            else if (isGetterOrSetter) {\n                this.error(diagnostics_1.DiagnosticCode.An_accessor_cannot_have_type_parameters, tn.range(typeParametersStart, tn.pos)); // recoverable\n            }\n            else {\n                flags |= common_1.CommonFlags.GENERIC;\n            }\n        }\n        // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n            let signatureStart = tn.tokenPos;\n            let parameters = this.parseParameters(tn, isConstructor);\n            if (!parameters)\n                return null;\n            let thisType = this.parseParametersThis;\n            if (isConstructor) {\n                for (let i = 0, k = parameters.length; i < k; ++i) {\n                    let parameter = parameters[i];\n                    if (parameter.isAny(common_1.CommonFlags.PUBLIC |\n                        common_1.CommonFlags.PROTECTED |\n                        common_1.CommonFlags.PRIVATE |\n                        common_1.CommonFlags.READONLY)) {\n                        let implicitFieldDeclaration = ast_1.Node.createFieldDeclaration(parameter.name, null, parameter.flags | common_1.CommonFlags.INSTANCE, parameter.type, null, // initialized via parameter\n                        parameter.range);\n                        implicitFieldDeclaration.parameterIndex = i;\n                        parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n                        parent.members.push(implicitFieldDeclaration);\n                    }\n                }\n            }\n            else if (isGetter) {\n                if (parameters.length) {\n                    this.error(diagnostics_1.DiagnosticCode.A_get_accessor_cannot_have_parameters, name.range);\n                }\n            }\n            else if (isSetter) {\n                if (parameters.length != 1) {\n                    this.error(diagnostics_1.DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter, name.range);\n                }\n                if (parameters.length > 0 && parameters[0].initializer !== null) {\n                    this.error(diagnostics_1.DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer, name.range);\n                }\n            }\n            else if (name.text == \"constructor\") {\n                this.error(diagnostics_1.DiagnosticCode._0_keyword_cannot_be_used_here, name.range, \"constructor\");\n            }\n            let returnType = null;\n            if (tn.skip(tokenizer_1.Token.COLON)) {\n                if (name.kind == ast_1.NodeKind.CONSTRUCTOR) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration, tn.range());\n                }\n                else if (isSetter) {\n                    this.error(diagnostics_1.DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation, tn.range());\n                }\n                returnType = this.parseType(tn, isSetter || name.kind == ast_1.NodeKind.CONSTRUCTOR);\n                if (!returnType)\n                    return null;\n            }\n            else {\n                returnType = ast_1.Node.createOmittedType(tn.range(tn.pos));\n                if (!isSetter && name.kind != ast_1.NodeKind.CONSTRUCTOR) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, returnType.range); // recoverable\n                }\n            }\n            let signature = ast_1.Node.createFunctionType(parameters, returnType, thisType, false, tn.range(signatureStart, tn.pos));\n            let body = null;\n            if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                if (flags & common_1.CommonFlags.AMBIENT) {\n                    this.error(diagnostics_1.DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, tn.range()); // recoverable\n                }\n                else if (flags & common_1.CommonFlags.ABSTRACT) {\n                    this.error(diagnostics_1.DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract, tn.range(), name.text); // recoverable\n                }\n                else if (isInterface) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \";\"); // recoverable\n                }\n                body = this.parseBlockStatement(tn, false);\n                if (!body)\n                    return null;\n            }\n            else if (!isInterface && !(flags & (common_1.CommonFlags.AMBIENT | common_1.CommonFlags.ABSTRACT))) {\n                this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, tn.range()); // recoverable\n            }\n            let retMethod = ast_1.Node.createMethodDeclaration(name, decorators, flags, typeParameters, signature, body, tn.range(startPos, tn.pos));\n            if (!(isInterface && tn.skip(tokenizer_1.Token.COMMA))) {\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n            }\n            return retMethod;\n        }\n        else if (isConstructor) {\n            this.error(diagnostics_1.DiagnosticCode.Constructor_implementation_is_missing, name.range);\n        }\n        else if (isGetterOrSetter) {\n            this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, name.range);\n            // field: (':' Type)? ('=' Expression)? ';'?\n        }\n        else {\n            if (flags & common_1.CommonFlags.ABSTRACT) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(abstractStart, abstractEnd), \"abstract\"); // recoverable\n            }\n            if (flags & common_1.CommonFlags.GET) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(getStart, getEnd), \"get\"); // recoverable\n            }\n            if (flags & common_1.CommonFlags.SET) {\n                this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, tn.range(setStart, setEnd), \"set\"); // recoverable\n            }\n            let type = null;\n            if (tn.skip(tokenizer_1.Token.QUESTION)) {\n                this.error(diagnostics_1.DiagnosticCode.Optional_properties_are_not_supported, tn.range(startPos, tn.pos));\n            }\n            if (tn.skip(tokenizer_1.Token.EXCLAMATION)) {\n                flags |= common_1.CommonFlags.DEFINITELY_ASSIGNED;\n            }\n            if (tn.skip(tokenizer_1.Token.COLON)) {\n                type = this.parseType(tn);\n                if (!type)\n                    return null;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range()); // recoverable\n            }\n            let initializer = null;\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\n                initializer = this.parseExpression(tn);\n                if (!initializer)\n                    return null;\n            }\n            let range = tn.range(startPos, tn.pos);\n            if ((flags & common_1.CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n                (isInterface || initializer !== null || (flags & common_1.CommonFlags.STATIC) != 0)) {\n                this.error(diagnostics_1.DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context, range);\n            }\n            let retField = ast_1.Node.createFieldDeclaration(name, decorators, flags, type, initializer, range);\n            if (!(isInterface && tn.skip(tokenizer_1.Token.COMMA))) {\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n            }\n            return retField;\n        }\n        return null;\n    }\n    parseIndexSignature(tn, flags, decorators) {\n        // at: '[': 'key' ':' Type ']' ':' Type\n        if (decorators !== null && decorators.length > 0) {\n            this.error(diagnostics_1.DiagnosticCode.Decorators_are_not_valid_here, tokenizer_1.Range.join(decorators[0].range, decorators[decorators.length - 1].range)); // recoverable\n        }\n        var start = tn.tokenPos;\n        if (tn.skipIdentifier()) {\n            let id = tn.readIdentifier();\n            if (id == \"key\") {\n                if (tn.skip(tokenizer_1.Token.COLON)) {\n                    let keyType = this.parseType(tn);\n                    if (!keyType)\n                        return null;\n                    if (keyType.kind != ast_1.NodeKind.NAMEDTYPE) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range());\n                        return null;\n                    }\n                    if (tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\n                        if (tn.skip(tokenizer_1.Token.COLON)) {\n                            let valueType = this.parseType(tn);\n                            if (!valueType)\n                                return null;\n                            if (valueType.kind != ast_1.NodeKind.NAMEDTYPE) {\n                                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, valueType.range);\n                                return null;\n                            }\n                            return ast_1.Node.createIndexSignature(keyType, valueType, flags, tn.range(start, tn.pos));\n                        }\n                        else {\n                            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n                        }\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\n                    }\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"key\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseNamespace(tn, flags, decorators, startPos) {\n        // at 'namespace': Identifier '{' (Variable | Function)* '}'\n        if (tn.skipIdentifier()) {\n            let identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                let members = new Array();\n                let declaration = ast_1.Node.createNamespaceDeclaration(identifier, decorators, flags, members, tn.range(startPos, tn.pos));\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                    let member = this.parseTopLevelStatement(tn, declaration);\n                    if (member)\n                        members.push(member);\n                    else {\n                        this.skipStatement(tn);\n                        if (tn.skip(tokenizer_1.Token.ENDOFFILE)) {\n                            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                            return null;\n                        }\n                    }\n                }\n                declaration.range.end = tn.pos;\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n                return declaration;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseExport(tn, startPos, isDeclare) {\n        // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n        var path = null;\n        var currentSource = assert(this.currentSource);\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n            let members = new Array();\n            while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                let member = this.parseExportMember(tn);\n                if (!member)\n                    return null;\n                members.push(member);\n                if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                    if (tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                        break;\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                        return null;\n                    }\n                }\n            }\n            if (tn.skip(tokenizer_1.Token.FROM)) {\n                if (tn.skip(tokenizer_1.Token.STRINGLITERAL)) {\n                    path = ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range());\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.String_literal_expected, tn.range());\n                    return null;\n                }\n            }\n            let ret = ast_1.Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n            if (path !== null) {\n                let internalPath = assert(ret.internalPath);\n                if (!this.seenlog.has(internalPath)) {\n                    this.dependees.set(internalPath, new Dependee(currentSource, path));\n                    this.backlog.push(internalPath);\n                    this.seenlog.add(internalPath);\n                }\n            }\n            tn.skip(tokenizer_1.Token.SEMICOLON);\n            return ret;\n        }\n        else if (tn.skip(tokenizer_1.Token.ASTERISK)) {\n            if (tn.skip(tokenizer_1.Token.FROM)) {\n                if (tn.skip(tokenizer_1.Token.STRINGLITERAL)) {\n                    path = ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range());\n                    let ret = ast_1.Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n                    let internalPath = assert(ret.internalPath);\n                    let source = tn.source;\n                    let exportPaths = source.exportPaths;\n                    if (!exportPaths)\n                        source.exportPaths = [internalPath];\n                    else if (!exportPaths.includes(internalPath))\n                        exportPaths.push(internalPath);\n                    if (!this.seenlog.has(internalPath)) {\n                        this.dependees.set(internalPath, new Dependee(currentSource, path));\n                        this.backlog.push(internalPath);\n                    }\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\n                    return ret;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.String_literal_expected, tn.range());\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"from\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n        }\n        return null;\n    }\n    parseExportMember(tn) {\n        // before: Identifier ('as' Identifier)?\n        if (tn.skipIdentifier(tokenizer_1.IdentifierHandling.ALWAYS)) {\n            let identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            let asIdentifier = null;\n            if (tn.skip(tokenizer_1.Token.AS)) {\n                if (tn.skipIdentifier(tokenizer_1.IdentifierHandling.ALWAYS)) {\n                    asIdentifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    return null;\n                }\n            }\n            if (asIdentifier) {\n                return ast_1.Node.createExportMember(identifier, asIdentifier, tokenizer_1.Range.join(identifier.range, asIdentifier.range));\n            }\n            return ast_1.Node.createExportMember(identifier, null, identifier.range);\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd) {\n        // at 'export' 'default': [Known-To-Be-]Identifier\n        var name = tn.readIdentifier();\n        var range = tn.range();\n        var ret = ast_1.Node.createExportStatement([\n            ast_1.Node.createExportMember(ast_1.Node.createIdentifierExpression(name, range), ast_1.Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)), range)\n        ], null, false, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseImport(tn) {\n        // at 'import':\n        //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n        //  'from' StringLiteral ';'?\n        var startPos = tn.tokenPos;\n        var members = null;\n        var namespaceName = null;\n        var skipFrom = false;\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) { // import { ... } from \"file\"\n            members = new Array();\n            while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                let member = this.parseImportDeclaration(tn);\n                if (!member)\n                    return null;\n                members.push(member);\n                if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                    if (tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                        break;\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                        return null;\n                    }\n                }\n            }\n        }\n        else if (tn.skip(tokenizer_1.Token.ASTERISK)) { // import * from \"file\"\n            if (tn.skip(tokenizer_1.Token.AS)) {\n                if (tn.skipIdentifier()) {\n                    namespaceName = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    return null;\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"as\");\n                return null;\n            }\n        }\n        else if (tn.skip(tokenizer_1.Token.IDENTIFIER, tokenizer_1.IdentifierHandling.PREFER)) { // import Name from \"file\"\n            let name = tn.readIdentifier();\n            let range = tn.range();\n            members = [\n                ast_1.Node.createImportDeclaration(ast_1.Node.createIdentifierExpression(\"default\", range), ast_1.Node.createIdentifierExpression(name, range), range)\n            ];\n            if (tn.skip(tokenizer_1.Token.COMMA)) {\n                // TODO: default + star, default + members\n                this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, tn.range(), \"Mixed default and named imports\");\n                return null;\n            }\n        }\n        else { // import \"file\"\n            skipFrom = true;\n        }\n        if (skipFrom || tn.skip(tokenizer_1.Token.FROM)) {\n            if (tn.skip(tokenizer_1.Token.STRINGLITERAL)) {\n                let path = ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range());\n                let ret;\n                if (namespaceName) {\n                    assert(!members);\n                    ret = ast_1.Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n                }\n                else {\n                    ret = ast_1.Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n                }\n                let internalPath = ret.internalPath;\n                if (!this.seenlog.has(internalPath)) {\n                    this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n                    this.backlog.push(internalPath);\n                }\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n                return ret;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.String_literal_expected, tn.range());\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"from\");\n        }\n        return null;\n    }\n    parseImportDeclaration(tn) {\n        // before: Identifier ('as' Identifier)?\n        if (tn.skipIdentifier(tokenizer_1.IdentifierHandling.ALWAYS)) {\n            let identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            let asIdentifier = null;\n            if (tn.skip(tokenizer_1.Token.AS)) {\n                if (tn.skipIdentifier()) {\n                    asIdentifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    return null;\n                }\n            }\n            if (asIdentifier) {\n                return ast_1.Node.createImportDeclaration(identifier, asIdentifier, tokenizer_1.Range.join(identifier.range, asIdentifier.range));\n            }\n            return ast_1.Node.createImportDeclaration(identifier, null, identifier.range);\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseExportImport(tn, startPos) {\n        // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n        if (tn.skipIdentifier()) {\n            let asIdentifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\n                if (tn.skipIdentifier()) {\n                    let identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                    let ret = ast_1.Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\n                    return ret;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"=\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseStatement(tn, topLevel = false) {\n        // at previous token\n        var state = tn.mark();\n        var token = tn.next();\n        var statement = null;\n        switch (token) {\n            case tokenizer_1.Token.BREAK: {\n                statement = this.parseBreak(tn);\n                break;\n            }\n            case tokenizer_1.Token.CONST: {\n                statement = this.parseVariable(tn, common_1.CommonFlags.CONST, null, tn.tokenPos);\n                break;\n            }\n            case tokenizer_1.Token.CONTINUE: {\n                statement = this.parseContinue(tn);\n                break;\n            }\n            case tokenizer_1.Token.DO: {\n                statement = this.parseDoStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.FOR: {\n                statement = this.parseForStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.IF: {\n                statement = this.parseIfStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.LET: {\n                statement = this.parseVariable(tn, common_1.CommonFlags.LET, null, tn.tokenPos);\n                break;\n            }\n            case tokenizer_1.Token.VAR: {\n                statement = this.parseVariable(tn, common_1.CommonFlags.NONE, null, tn.tokenPos);\n                break;\n            }\n            case tokenizer_1.Token.OPENBRACE: {\n                statement = this.parseBlockStatement(tn, topLevel);\n                break;\n            }\n            case tokenizer_1.Token.RETURN: {\n                if (topLevel) {\n                    this.error(diagnostics_1.DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body, tn.range()); // recoverable\n                }\n                statement = this.parseReturn(tn);\n                break;\n            }\n            case tokenizer_1.Token.SEMICOLON: {\n                return ast_1.Node.createEmptyStatement(tn.range(tn.tokenPos));\n            }\n            case tokenizer_1.Token.SWITCH: {\n                statement = this.parseSwitchStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.THROW: {\n                statement = this.parseThrowStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.TRY: {\n                statement = this.parseTryStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.VOID: {\n                statement = this.parseVoidStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.WHILE: {\n                statement = this.parseWhileStatement(tn);\n                break;\n            }\n            case tokenizer_1.Token.TYPE: { // also identifier\n                if (tn.peek(false, tokenizer_1.IdentifierHandling.PREFER) == tokenizer_1.Token.IDENTIFIER) {\n                    statement = this.parseTypeDeclaration(tn, common_1.CommonFlags.NONE, null, tn.tokenPos);\n                    break;\n                }\n                // fall-through\n            }\n            default: {\n                tn.reset(state);\n                statement = this.parseExpressionStatement(tn);\n                break;\n            }\n        }\n        if (!statement) { // has been reported\n            tn.reset(state);\n            this.skipStatement(tn);\n        }\n        else {\n            tn.discard(state);\n        }\n        return statement;\n    }\n    parseBlockStatement(tn, topLevel) {\n        // at '{': Statement* '}' ';'?\n        var startPos = tn.tokenPos;\n        var statements = new Array();\n        while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n            let state = tn.mark();\n            let statement = this.parseStatement(tn, topLevel);\n            if (!statement) {\n                if (tn.token == tokenizer_1.Token.ENDOFFILE)\n                    return null;\n                tn.reset(state);\n                this.skipStatement(tn);\n            }\n            else {\n                tn.discard(state);\n                statements.push(statement);\n            }\n        }\n        var ret = ast_1.Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseBreak(tn) {\n        // at 'break': Identifier? ';'?\n        var identifier = null;\n        if (tn.peek(true) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n            tn.next(tokenizer_1.IdentifierHandling.PREFER);\n            identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        }\n        var ret = ast_1.Node.createBreakStatement(identifier, tn.range());\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseContinue(tn) {\n        // at 'continue': Identifier? ';'?\n        var identifier = null;\n        if (tn.peek(true) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n            tn.next(tokenizer_1.IdentifierHandling.PREFER);\n            identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        }\n        var ret = ast_1.Node.createContinueStatement(identifier, tn.range());\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseDoStatement(tn) {\n        // at 'do': Statement 'while' '(' Expression ')' ';'?\n        var startPos = tn.tokenPos;\n        var statement = this.parseStatement(tn);\n        if (!statement)\n            return null;\n        if (tn.skip(tokenizer_1.Token.WHILE)) {\n            if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n                let condition = this.parseExpression(tn);\n                if (!condition)\n                    return null;\n                if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    let ret = ast_1.Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\n                    return ret;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"while\");\n        }\n        return null;\n    }\n    parseExpressionStatement(tn) {\n        // at previous token\n        var expr = this.parseExpression(tn);\n        if (!expr)\n            return null;\n        var ret = ast_1.Node.createExpressionStatement(expr);\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseForStatement(tn) {\n        // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n        var startPos = tn.tokenPos;\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n            let initializer = null;\n            if (tn.skip(tokenizer_1.Token.CONST)) {\n                initializer = this.parseVariable(tn, common_1.CommonFlags.CONST, null, tn.tokenPos, true);\n            }\n            else if (tn.skip(tokenizer_1.Token.LET)) {\n                initializer = this.parseVariable(tn, common_1.CommonFlags.LET, null, tn.tokenPos, true);\n            }\n            else if (tn.skip(tokenizer_1.Token.VAR)) {\n                initializer = this.parseVariable(tn, common_1.CommonFlags.NONE, null, tn.tokenPos, true);\n            }\n            else if (!tn.skip(tokenizer_1.Token.SEMICOLON)) {\n                initializer = this.parseExpressionStatement(tn);\n                if (!initializer)\n                    return null;\n            }\n            if (initializer) {\n                if (tn.skip(tokenizer_1.Token.OF)) {\n                    // TODO: for (let [key, val] of ...)\n                    if (initializer.kind == ast_1.NodeKind.EXPRESSION) {\n                        if (initializer.expression.kind != ast_1.NodeKind.IDENTIFIER) {\n                            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, initializer.range);\n                            return null;\n                        }\n                        return this.parseForOfStatement(tn, startPos, initializer);\n                    }\n                    if (initializer.kind == ast_1.NodeKind.VARIABLE) {\n                        let declarations = initializer.declarations;\n                        for (let i = 0, k = declarations.length; i < k; ++i) {\n                            let declaration = declarations[i];\n                            let initializer = declaration.initializer;\n                            if (initializer) {\n                                this.error(diagnostics_1.DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer, initializer.range); // recoverable\n                            }\n                        }\n                        return this.parseForOfStatement(tn, startPos, initializer);\n                    }\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, initializer.range);\n                    return null;\n                }\n                // non-for..of needs type or initializer\n                if (initializer.kind == ast_1.NodeKind.VARIABLE) {\n                    let declarations = initializer.declarations;\n                    for (let i = 0, k = declarations.length; i < k; ++i) {\n                        let declaration = declarations[i];\n                        if (!declaration.initializer) {\n                            if (declaration.flags & common_1.CommonFlags.CONST) {\n                                this.error(diagnostics_1.DiagnosticCode._const_declarations_must_be_initialized, declaration.name.range);\n                            }\n                            else if (!declaration.type) {\n                                this.error(diagnostics_1.DiagnosticCode.Type_expected, declaration.name.range.atEnd);\n                            }\n                        }\n                    }\n                }\n            }\n            if (tn.token == tokenizer_1.Token.SEMICOLON) {\n                let condition = null;\n                if (!tn.skip(tokenizer_1.Token.SEMICOLON)) {\n                    condition = this.parseExpressionStatement(tn);\n                    if (!condition)\n                        return null;\n                }\n                if (tn.token == tokenizer_1.Token.SEMICOLON) {\n                    let incrementor = null;\n                    if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                        incrementor = this.parseExpression(tn);\n                        if (!incrementor)\n                            return null;\n                        if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                            return null;\n                        }\n                    }\n                    let statement = this.parseStatement(tn);\n                    if (!statement)\n                        return null;\n                    return ast_1.Node.createForStatement(initializer, condition\n                        ? condition.expression\n                        : null, incrementor, statement, tn.range(startPos, tn.pos));\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \";\");\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \";\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\n        }\n        return null;\n    }\n    parseForOfStatement(tn, startPos, variable) {\n        // at 'of': Expression ')' Statement\n        var iterable = this.parseExpression(tn);\n        if (!iterable)\n            return null;\n        if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n            return null;\n        }\n        var statement = this.parseStatement(tn);\n        if (!statement)\n            return null;\n        return ast_1.Node.createForOfStatement(variable, iterable, statement, tn.range(startPos, tn.pos));\n    }\n    parseIfStatement(tn) {\n        // at 'if': '(' Expression ')' Statement ('else' Statement)?\n        var startPos = tn.tokenPos;\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n            let condition = this.parseExpression(tn);\n            if (!condition)\n                return null;\n            if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                let statement = this.parseStatement(tn);\n                if (!statement)\n                    return null;\n                let elseStatement = null;\n                if (tn.skip(tokenizer_1.Token.ELSE)) {\n                    elseStatement = this.parseStatement(tn);\n                    if (!elseStatement)\n                        return null;\n                }\n                return ast_1.Node.createIfStatement(condition, statement, elseStatement, tn.range(startPos, tn.pos));\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\n        }\n        return null;\n    }\n    parseSwitchStatement(tn) {\n        // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n        var startPos = tn.tokenPos;\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n            let condition = this.parseExpression(tn);\n            if (!condition)\n                return null;\n            if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                    let switchCases = new Array();\n                    while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                        let switchCase = this.parseSwitchCase(tn);\n                        if (!switchCase)\n                            return null;\n                        switchCases.push(switchCase);\n                    }\n                    let ret = ast_1.Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\n                    return ret;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n                }\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\n        }\n        return null;\n    }\n    parseSwitchCase(tn) {\n        var startPos = tn.tokenPos;\n        var statements, statement;\n        // 'case' Expression ':' Statement*\n        if (tn.skip(tokenizer_1.Token.CASE)) {\n            let label = this.parseExpression(tn);\n            if (!label)\n                return null;\n            if (tn.skip(tokenizer_1.Token.COLON)) {\n                statements = new Array();\n                while (tn.peek() != tokenizer_1.Token.CASE &&\n                    tn.nextToken != tokenizer_1.Token.DEFAULT &&\n                    tn.nextToken != tokenizer_1.Token.CLOSEBRACE) {\n                    statement = this.parseStatement(tn);\n                    if (!statement)\n                        return null;\n                    statements.push(statement);\n                }\n                return ast_1.Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n            }\n            // 'default' ':' Statement*\n        }\n        else if (tn.skip(tokenizer_1.Token.DEFAULT)) {\n            if (tn.skip(tokenizer_1.Token.COLON)) {\n                statements = new Array();\n                while (tn.peek() != tokenizer_1.Token.CASE &&\n                    tn.nextToken != tokenizer_1.Token.DEFAULT &&\n                    tn.nextToken != tokenizer_1.Token.CLOSEBRACE) {\n                    statement = this.parseStatement(tn);\n                    if (!statement)\n                        return null;\n                    statements.push(statement);\n                }\n                return ast_1.Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._case_or_default_expected, tn.range());\n        }\n        return null;\n    }\n    parseThrowStatement(tn) {\n        // at 'throw': Expression ';'?\n        var startPos = tn.tokenPos;\n        var expression = this.parseExpression(tn);\n        if (!expression)\n            return null;\n        var ret = ast_1.Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseTryStatement(tn) {\n        // at 'try':\n        //   '{' Statement* '}'\n        //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n        //   ('finally' '{' Statement* '}'? ';'?\n        var startPos = tn.tokenPos;\n        var stmt;\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\n            let statements = new Array();\n            while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                stmt = this.parseStatement(tn);\n                if (!stmt)\n                    return null;\n                statements.push(stmt);\n            }\n            let catchVariable = null;\n            let catchStatements = null;\n            let finallyStatements = null;\n            if (tn.skip(tokenizer_1.Token.CATCH)) {\n                if (!tn.skip(tokenizer_1.Token.OPENPAREN)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\n                    return null;\n                }\n                if (!tn.skipIdentifier()) {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    return null;\n                }\n                catchVariable = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                    return null;\n                }\n                if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n                    return null;\n                }\n                catchStatements = [];\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                    stmt = this.parseStatement(tn);\n                    if (!stmt)\n                        return null;\n                    catchStatements.push(stmt);\n                }\n            }\n            if (tn.skip(tokenizer_1.Token.FINALLY)) {\n                if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n                    return null;\n                }\n                finallyStatements = [];\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                    stmt = this.parseStatement(tn);\n                    if (!stmt)\n                        return null;\n                    finallyStatements.push(stmt);\n                }\n            }\n            if (!(catchStatements || finallyStatements)) {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"catch\");\n                return null;\n            }\n            let ret = ast_1.Node.createTryStatement(statements, catchVariable, catchStatements, finallyStatements, tn.range(startPos, tn.pos));\n            tn.skip(tokenizer_1.Token.SEMICOLON);\n            return ret;\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\n        }\n        return null;\n    }\n    parseTypeDeclaration(tn, flags, decorators, startPos) {\n        // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n        if (tn.skipIdentifier()) {\n            let name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            let typeParameters = null;\n            if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\n                typeParameters = this.parseTypeParameters(tn);\n                if (!typeParameters)\n                    return null;\n                flags |= common_1.CommonFlags.GENERIC;\n            }\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\n                let type = this.parseType(tn);\n                if (!type)\n                    return null;\n                let ret = ast_1.Node.createTypeDeclaration(name, decorators, flags, typeParameters, type, tn.range(startPos, tn.pos));\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n                return ret;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"=\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n        }\n        return null;\n    }\n    parseVoidStatement(tn) {\n        // at 'void': Expression ';'?\n        var startPos = tn.tokenPos;\n        var expression = this.parseExpression(tn, 21 /* GROUPING */);\n        if (!expression)\n            return null;\n        var ret = ast_1.Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n        tn.skip(tokenizer_1.Token.SEMICOLON);\n        return ret;\n    }\n    parseWhileStatement(tn) {\n        // at 'while': '(' Expression ')' Statement ';'?\n        var startPos = tn.tokenPos;\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n            let expression = this.parseExpression(tn);\n            if (!expression)\n                return null;\n            if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                let statement = this.parseStatement(tn);\n                if (!statement)\n                    return null;\n                let ret = ast_1.Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n                tn.skip(tokenizer_1.Token.SEMICOLON);\n                return ret;\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n            }\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\n        }\n        return null;\n    }\n    // expressions\n    parseExpressionStart(tn) {\n        var token = tn.next(tokenizer_1.IdentifierHandling.PREFER);\n        var startPos = tn.tokenPos;\n        switch (token) {\n            // TODO: SpreadExpression, YieldExpression\n            case tokenizer_1.Token.DOT_DOT_DOT:\n            case tokenizer_1.Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n            // UnaryPrefixExpression\n            case tokenizer_1.Token.EXCLAMATION:\n            case tokenizer_1.Token.TILDE:\n            case tokenizer_1.Token.PLUS:\n            case tokenizer_1.Token.MINUS:\n            case tokenizer_1.Token.TYPEOF:\n            case tokenizer_1.Token.VOID:\n            case tokenizer_1.Token.DELETE: {\n                let operand = this.parseExpression(tn, 17 /* UNARY_PREFIX */);\n                if (!operand)\n                    return null;\n                return ast_1.Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n            }\n            case tokenizer_1.Token.PLUS_PLUS:\n            case tokenizer_1.Token.MINUS_MINUS: {\n                let operand = this.parseExpression(tn, 17 /* UNARY_PREFIX */);\n                if (!operand)\n                    return null;\n                switch (operand.kind) {\n                    case ast_1.NodeKind.IDENTIFIER:\n                    case ast_1.NodeKind.ELEMENTACCESS:\n                    case ast_1.NodeKind.PROPERTYACCESS: break;\n                    default: {\n                        this.error(diagnostics_1.DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, operand.range);\n                    }\n                }\n                return ast_1.Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n            }\n            // NewExpression\n            case tokenizer_1.Token.NEW: {\n                if (!tn.skipIdentifier()) {\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                    return null;\n                }\n                let typeName = this.parseTypeName(tn);\n                if (!typeName)\n                    return null;\n                let typeArguments = null;\n                let arguments_ = null;\n                if (tn.skip(tokenizer_1.Token.OPENPAREN) ||\n                    (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null) {\n                    arguments_ = this.parseArguments(tn);\n                    if (!arguments_)\n                        return null;\n                }\n                else {\n                    arguments_ = []; // new Type;\n                }\n                return ast_1.Node.createNewExpression(typeName, typeArguments, arguments_, tn.range(startPos, tn.pos));\n            }\n            // Special IdentifierExpression\n            case tokenizer_1.Token.NULL: return ast_1.Node.createNullExpression(tn.range());\n            case tokenizer_1.Token.TRUE: return ast_1.Node.createTrueExpression(tn.range());\n            case tokenizer_1.Token.FALSE: return ast_1.Node.createFalseExpression(tn.range());\n            case tokenizer_1.Token.THIS: return ast_1.Node.createThisExpression(tn.range());\n            case tokenizer_1.Token.CONSTRUCTOR: return ast_1.Node.createConstructorExpression(tn.range());\n            // ParenthesizedExpression or FunctionExpression\n            case tokenizer_1.Token.OPENPAREN: {\n                // determine whether this is a function expression\n                if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) { // must be a function expression (fast route)\n                    return this.parseFunctionExpressionCommon(tn, ast_1.Node.createEmptyIdentifierExpression(tn.range(startPos)), [], null, 1 /* ARROW_PARENTHESIZED */);\n                }\n                let state = tn.mark();\n                let again = true;\n                do {\n                    switch (tn.next(tokenizer_1.IdentifierHandling.PREFER)) {\n                        // function expression\n                        case tokenizer_1.Token.DOT_DOT_DOT: {\n                            tn.reset(state);\n                            return this.parseFunctionExpression(tn);\n                        }\n                        // can be both\n                        case tokenizer_1.Token.IDENTIFIER: {\n                            tn.readIdentifier();\n                            switch (tn.next()) {\n                                // if we got here, check for arrow\n                                case tokenizer_1.Token.CLOSEPAREN: {\n                                    if (!tn.skip(tokenizer_1.Token.COLON) &&\n                                        !tn.skip(tokenizer_1.Token.EQUALS_GREATERTHAN)) {\n                                        again = false;\n                                        break;\n                                    }\n                                    // fall-through\n                                }\n                                // function expression\n                                case tokenizer_1.Token.COLON: { // type annotation\n                                    tn.reset(state);\n                                    return this.parseFunctionExpression(tn);\n                                }\n                                // optional parameter or parenthesized\n                                case tokenizer_1.Token.QUESTION: {\n                                    if (tn.skip(tokenizer_1.Token.COLON) || // optional parameter with type\n                                        tn.skip(tokenizer_1.Token.COMMA) || // optional parameter without type\n                                        tn.skip(tokenizer_1.Token.CLOSEPAREN) // last optional parameter without type\n                                    ) {\n                                        tn.reset(state);\n                                        return this.parseFunctionExpression(tn);\n                                    }\n                                    again = false; // parenthesized\n                                    break;\n                                }\n                                case tokenizer_1.Token.COMMA: {\n                                    break; // continue\n                                }\n                                // parenthesized expression\n                                // case Token.EQUALS:  // missing type annotation for simplicity\n                                default: {\n                                    again = false;\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                        // parenthesized expression\n                        default: {\n                            again = false;\n                            break;\n                        }\n                    }\n                } while (again);\n                tn.reset(state);\n                // parse parenthesized\n                let inner = this.parseExpression(tn);\n                if (!inner)\n                    return null;\n                if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                    return null;\n                }\n                inner = ast_1.Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n                return this.maybeParseCallExpression(tn, inner);\n            }\n            // ArrayLiteralExpression\n            case tokenizer_1.Token.OPENBRACKET: {\n                let elementExpressions = new Array();\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\n                    let expr;\n                    if (tn.peek() == tokenizer_1.Token.COMMA) {\n                        expr = ast_1.Node.createOmittedExpression(tn.range(tn.pos));\n                    }\n                    else {\n                        expr = this.parseExpression(tn, 1 /* COMMA */ + 1);\n                        if (!expr)\n                            return null;\n                    }\n                    elementExpressions.push(expr);\n                    if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                        if (tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\n                            break;\n                        }\n                        else {\n                            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\n                            return null;\n                        }\n                    }\n                }\n                return ast_1.Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n            }\n            // ObjectLiteralExpression\n            case tokenizer_1.Token.OPENBRACE: {\n                let startPos = tn.tokenPos;\n                let names = new Array();\n                let values = new Array();\n                let name;\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                    if (!tn.skipIdentifier()) {\n                        if (!tn.skip(tokenizer_1.Token.STRINGLITERAL)) {\n                            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\n                            return null;\n                        }\n                        name = ast_1.Node.createIdentifierExpression(tn.readString(), tn.range());\n                        name.isQuoted = true;\n                    }\n                    else {\n                        name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                    }\n                    names.push(name);\n                    if (tn.skip(tokenizer_1.Token.COLON)) {\n                        let value = this.parseExpression(tn, 1 /* COMMA */ + 1);\n                        if (!value)\n                            return null;\n                        values.push(value);\n                    }\n                    else if (!name.isQuoted) {\n                        values.push(name);\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n                        return null;\n                    }\n                    if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                        if (tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\n                            break;\n                        }\n                        else {\n                            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                            return null;\n                        }\n                    }\n                }\n                return ast_1.Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n            }\n            // AssertionExpression (unary prefix)\n            case tokenizer_1.Token.LESSTHAN: {\n                let toType = this.parseType(tn);\n                if (!toType)\n                    return null;\n                if (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \">\");\n                    return null;\n                }\n                let expr = this.parseExpression(tn, 19 /* CALL */);\n                if (!expr)\n                    return null;\n                return ast_1.Node.createAssertionExpression(ast_1.AssertionKind.PREFIX, expr, toType, tn.range(startPos, tn.pos));\n            }\n            case tokenizer_1.Token.IDENTIFIER: {\n                let identifierText = tn.readIdentifier();\n                if (identifierText == \"null\")\n                    return ast_1.Node.createNullExpression(tn.range()); // special\n                let identifier = ast_1.Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n                if (tn.peek(true) == tokenizer_1.Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n                    return this.parseFunctionExpressionCommon(tn, ast_1.Node.createEmptyIdentifierExpression(tn.range(startPos)), [\n                        ast_1.Node.createParameter(ast_1.ParameterKind.DEFAULT, identifier, ast_1.Node.createOmittedType(identifier.range.atEnd), null, identifier.range)\n                    ], null, 2 /* ARROW_SINGLE */, startPos);\n                }\n                return this.maybeParseCallExpression(tn, identifier, true);\n            }\n            case tokenizer_1.Token.SUPER: {\n                if (tn.peek() != tokenizer_1.Token.DOT && tn.nextToken != tokenizer_1.Token.OPENPAREN) {\n                    this.error(diagnostics_1.DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access, tn.range());\n                }\n                let expr = ast_1.Node.createSuperExpression(tn.range(startPos, tn.pos));\n                return this.maybeParseCallExpression(tn, expr);\n            }\n            case tokenizer_1.Token.STRINGLITERAL: {\n                return ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n            }\n            case tokenizer_1.Token.INTEGERLITERAL: {\n                let value = tn.readInteger();\n                tn.checkForIdentifierStartAfterNumericLiteral();\n                return ast_1.Node.createIntegerLiteralExpression(value, tn.range(startPos, tn.pos));\n            }\n            case tokenizer_1.Token.FLOATLITERAL: {\n                let value = tn.readFloat();\n                tn.checkForIdentifierStartAfterNumericLiteral();\n                return ast_1.Node.createFloatLiteralExpression(value, tn.range(startPos, tn.pos));\n            }\n            // RegexpLiteralExpression\n            // note that this also continues on invalid ones so the surrounding AST remains intact\n            case tokenizer_1.Token.SLASH: {\n                let regexpPattern = tn.readRegexpPattern(); // also reports\n                if (!tn.skip(tokenizer_1.Token.SLASH)) {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"/\");\n                    return null;\n                }\n                return ast_1.Node.createRegexpLiteralExpression(regexpPattern, tn.readRegexpFlags(), // also reports\n                tn.range(startPos, tn.pos));\n            }\n            case tokenizer_1.Token.FUNCTION: {\n                let expr = this.parseFunctionExpression(tn);\n                if (!expr)\n                    return null;\n                return this.maybeParseCallExpression(tn, expr);\n            }\n            case tokenizer_1.Token.CLASS: {\n                return this.parseClassExpression(tn);\n            }\n            default: {\n                if (token == tokenizer_1.Token.ENDOFFILE) {\n                    this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, tn.range(startPos));\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.Expression_expected, tn.range());\n                }\n                return null;\n            }\n        }\n    }\n    tryParseTypeArgumentsBeforeArguments(tn) {\n        // at '<': Type (',' Type)* '>' '('\n        var state = tn.mark();\n        if (!tn.skip(tokenizer_1.Token.LESSTHAN))\n            return null;\n        var start = tn.tokenPos;\n        var typeArguments = null;\n        do {\n            if (tn.peek() === tokenizer_1.Token.GREATERTHAN) {\n                break;\n            }\n            let type = this.parseType(tn, true, true);\n            if (!type) {\n                tn.reset(state);\n                return null;\n            }\n            if (!typeArguments)\n                typeArguments = [type];\n            else\n                typeArguments.push(type);\n        } while (tn.skip(tokenizer_1.Token.COMMA));\n        if (tn.skip(tokenizer_1.Token.GREATERTHAN)) {\n            let end = tn.pos;\n            if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\n                if (!typeArguments) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_argument_list_cannot_be_empty, tn.range(start, end));\n                }\n                return typeArguments;\n            }\n        }\n        tn.reset(state);\n        return null;\n    }\n    parseArguments(tn) {\n        // at '(': (Expression (',' Expression)*)? ')'\n        var args = new Array();\n        while (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n            let expr = this.parseExpression(tn, 1 /* COMMA */ + 1);\n            if (!expr)\n                return null;\n            args.push(expr);\n            if (!tn.skip(tokenizer_1.Token.COMMA)) {\n                if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\n                    break;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\n                    return null;\n                }\n            }\n        }\n        return args;\n    }\n    parseExpression(tn, precedence = 1 /* COMMA */) {\n        assert(precedence != 0 /* NONE */);\n        var expr = this.parseExpressionStart(tn);\n        if (!expr)\n            return null;\n        var startPos = expr.range.start;\n        // precedence climbing\n        // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n        var nextPrecedence;\n        while ((nextPrecedence = determinePrecedence(tn.peek())) >= precedence) {\n            let token = tn.next();\n            switch (token) {\n                // AssertionExpression\n                case tokenizer_1.Token.AS: {\n                    if (tn.skip(tokenizer_1.Token.CONST)) {\n                        expr = ast_1.Node.createAssertionExpression(ast_1.AssertionKind.CONST, expr, null, tn.range(startPos, tn.pos));\n                    }\n                    else {\n                        let toType = this.parseType(tn); // reports\n                        if (!toType)\n                            return null;\n                        expr = ast_1.Node.createAssertionExpression(ast_1.AssertionKind.AS, expr, toType, tn.range(startPos, tn.pos));\n                    }\n                    break;\n                }\n                case tokenizer_1.Token.EXCLAMATION: {\n                    expr = ast_1.Node.createAssertionExpression(ast_1.AssertionKind.NONNULL, expr, null, tn.range(startPos, tn.pos));\n                    expr = this.maybeParseCallExpression(tn, expr);\n                    break;\n                }\n                // InstanceOfExpression\n                case tokenizer_1.Token.INSTANCEOF: {\n                    let isType = this.parseType(tn); // reports\n                    if (!isType)\n                        return null;\n                    expr = ast_1.Node.createInstanceOfExpression(expr, isType, tn.range(startPos, tn.pos));\n                    break;\n                }\n                // ElementAccessExpression\n                case tokenizer_1.Token.OPENBRACKET: {\n                    let next = this.parseExpression(tn); // reports\n                    if (!next)\n                        return null;\n                    if (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\n                        return null;\n                    }\n                    expr = ast_1.Node.createElementAccessExpression(expr, next, tn.range(startPos, tn.pos));\n                    expr = this.maybeParseCallExpression(tn, expr);\n                    break;\n                }\n                // UnaryPostfixExpression\n                case tokenizer_1.Token.PLUS_PLUS:\n                case tokenizer_1.Token.MINUS_MINUS: {\n                    if (expr.kind != ast_1.NodeKind.IDENTIFIER &&\n                        expr.kind != ast_1.NodeKind.ELEMENTACCESS &&\n                        expr.kind != ast_1.NodeKind.PROPERTYACCESS) {\n                        this.error(diagnostics_1.DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, expr.range);\n                    }\n                    expr = ast_1.Node.createUnaryPostfixExpression(token, expr, tn.range(startPos, tn.pos));\n                    break;\n                }\n                // TernaryExpression\n                case tokenizer_1.Token.QUESTION: {\n                    let ifThen = this.parseExpression(tn);\n                    if (!ifThen)\n                        return null;\n                    if (!tn.skip(tokenizer_1.Token.COLON)) {\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\n                        return null;\n                    }\n                    let ifElse = this.parseExpression(tn, precedence > 1 /* COMMA */\n                        ? 1 /* COMMA */ + 1\n                        : 1 /* COMMA */);\n                    if (!ifElse)\n                        return null;\n                    expr = ast_1.Node.createTernaryExpression(expr, ifThen, ifElse, tn.range(startPos, tn.pos));\n                    break;\n                }\n                // CommaExpression\n                case tokenizer_1.Token.COMMA: {\n                    let commaExprs = [expr];\n                    do {\n                        expr = this.parseExpression(tn, 1 /* COMMA */ + 1);\n                        if (!expr)\n                            return null;\n                        commaExprs.push(expr);\n                    } while (tn.skip(tokenizer_1.Token.COMMA));\n                    expr = ast_1.Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n                    break;\n                }\n                // PropertyAccessExpression\n                case tokenizer_1.Token.DOT: {\n                    if (tn.skipIdentifier(tokenizer_1.IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n                        let next = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n                        expr = ast_1.Node.createPropertyAccessExpression(expr, next, tn.range(startPos, tn.pos));\n                    }\n                    else {\n                        let next = this.parseExpression(tn, nextPrecedence + 1);\n                        if (!next)\n                            return null;\n                        if (next.kind == ast_1.NodeKind.CALL) { // expr '.' CallExpression\n                            expr = this.joinPropertyCall(tn, startPos, expr, next);\n                            if (!expr)\n                                return null;\n                        }\n                        else {\n                            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, next.range);\n                            return null;\n                        }\n                    }\n                    expr = this.maybeParseCallExpression(tn, expr, true);\n                    break;\n                }\n                // BinaryExpression (right associative)\n                case tokenizer_1.Token.EQUALS:\n                case tokenizer_1.Token.PLUS_EQUALS:\n                case tokenizer_1.Token.MINUS_EQUALS:\n                case tokenizer_1.Token.ASTERISK_ASTERISK_EQUALS:\n                case tokenizer_1.Token.ASTERISK_EQUALS:\n                case tokenizer_1.Token.SLASH_EQUALS:\n                case tokenizer_1.Token.PERCENT_EQUALS:\n                case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS:\n                case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS:\n                case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n                case tokenizer_1.Token.AMPERSAND_EQUALS:\n                case tokenizer_1.Token.CARET_EQUALS:\n                case tokenizer_1.Token.BAR_EQUALS:\n                case tokenizer_1.Token.ASTERISK_ASTERISK: {\n                    let next = this.parseExpression(tn, nextPrecedence);\n                    if (!next)\n                        return null;\n                    expr = ast_1.Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n                    break;\n                }\n                // BinaryExpression\n                case tokenizer_1.Token.LESSTHAN:\n                case tokenizer_1.Token.GREATERTHAN:\n                case tokenizer_1.Token.LESSTHAN_EQUALS:\n                case tokenizer_1.Token.GREATERTHAN_EQUALS:\n                case tokenizer_1.Token.EQUALS_EQUALS:\n                case tokenizer_1.Token.EQUALS_EQUALS_EQUALS:\n                case tokenizer_1.Token.EXCLAMATION_EQUALS_EQUALS:\n                case tokenizer_1.Token.EXCLAMATION_EQUALS:\n                case tokenizer_1.Token.PLUS:\n                case tokenizer_1.Token.MINUS:\n                case tokenizer_1.Token.ASTERISK:\n                case tokenizer_1.Token.SLASH:\n                case tokenizer_1.Token.PERCENT:\n                case tokenizer_1.Token.LESSTHAN_LESSTHAN:\n                case tokenizer_1.Token.GREATERTHAN_GREATERTHAN:\n                case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n                case tokenizer_1.Token.AMPERSAND:\n                case tokenizer_1.Token.BAR:\n                case tokenizer_1.Token.CARET:\n                case tokenizer_1.Token.AMPERSAND_AMPERSAND:\n                case tokenizer_1.Token.BAR_BAR: {\n                    let next = this.parseExpression(tn, nextPrecedence + 1);\n                    if (!next)\n                        return null;\n                    expr = ast_1.Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n                    break;\n                }\n                default: assert(false); // filtered by determinePrecedence\n            }\n        }\n        return expr;\n    }\n    joinPropertyCall(tn, startPos, expr, call) {\n        var callee = call.expression;\n        switch (callee.kind) {\n            case ast_1.NodeKind.IDENTIFIER: { // join property access and use as call target\n                call.expression = ast_1.Node.createPropertyAccessExpression(expr, callee, tn.range(startPos, tn.pos));\n                break;\n            }\n            case ast_1.NodeKind.CALL: { // join call target und wrap the original call around it\n                let inner = this.joinPropertyCall(tn, startPos, expr, callee);\n                if (!inner)\n                    return null;\n                call.expression = inner;\n                call.range = tn.range(startPos, tn.pos);\n                break;\n            }\n            default: {\n                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, call.range);\n                return null;\n            }\n        }\n        return call;\n    }\n    maybeParseCallExpression(tn, expr, potentiallyGeneric = false) {\n        var typeArguments = null;\n        while (tn.skip(tokenizer_1.Token.OPENPAREN) ||\n            potentiallyGeneric &&\n                (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null) {\n            let args = this.parseArguments(tn);\n            if (!args)\n                break;\n            expr = ast_1.Node.createCallExpression(// is again callable\n            expr, typeArguments, args, tn.range(expr.range.start, tn.pos));\n            potentiallyGeneric = false;\n        }\n        return expr;\n    }\n    /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n    skipStatement(tn) {\n        tn.peek(true);\n        if (tn.nextTokenOnNewLine)\n            tn.next(); // if reset() to the previous line\n        do {\n            let nextToken = tn.peek(true);\n            if (nextToken == tokenizer_1.Token.ENDOFFILE || // next step should handle this\n                nextToken == tokenizer_1.Token.SEMICOLON // end of the statement for sure\n            ) {\n                tn.next();\n                break;\n            }\n            if (tn.nextTokenOnNewLine)\n                break; // end of the statement maybe\n            switch (tn.next()) {\n                case tokenizer_1.Token.IDENTIFIER: {\n                    tn.readIdentifier();\n                    break;\n                }\n                case tokenizer_1.Token.STRINGLITERAL: {\n                    tn.readString();\n                    break;\n                }\n                case tokenizer_1.Token.INTEGERLITERAL: {\n                    tn.readInteger();\n                    tn.checkForIdentifierStartAfterNumericLiteral();\n                    break;\n                }\n                case tokenizer_1.Token.FLOATLITERAL: {\n                    tn.readFloat();\n                    tn.checkForIdentifierStartAfterNumericLiteral();\n                    break;\n                }\n                case tokenizer_1.Token.OPENBRACE: {\n                    this.skipBlock(tn);\n                    break;\n                }\n            }\n        } while (true);\n    }\n    /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n    skipBlock(tn) {\n        // at '{': ... '}'\n        var depth = 1;\n        var again = true;\n        do {\n            switch (tn.next()) {\n                case tokenizer_1.Token.ENDOFFILE: {\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\n                    again = false;\n                    break;\n                }\n                case tokenizer_1.Token.OPENBRACE: {\n                    ++depth;\n                    break;\n                }\n                case tokenizer_1.Token.CLOSEBRACE: {\n                    --depth;\n                    if (!depth)\n                        again = false;\n                    break;\n                }\n                case tokenizer_1.Token.IDENTIFIER: {\n                    tn.readIdentifier();\n                    break;\n                }\n                case tokenizer_1.Token.STRINGLITERAL: {\n                    tn.readString();\n                    break;\n                }\n                case tokenizer_1.Token.INTEGERLITERAL: {\n                    tn.readInteger();\n                    tn.checkForIdentifierStartAfterNumericLiteral();\n                    break;\n                }\n                case tokenizer_1.Token.FLOATLITERAL: {\n                    tn.readFloat();\n                    tn.checkForIdentifierStartAfterNumericLiteral();\n                    break;\n                }\n            }\n        } while (again);\n    }\n}\nexports.Parser = Parser;\n/** Operator precedence from least to largest. */\nvar Precedence;\n(function (Precedence) {\n    Precedence[Precedence[\"NONE\"] = 0] = \"NONE\";\n    Precedence[Precedence[\"COMMA\"] = 1] = \"COMMA\";\n    Precedence[Precedence[\"SPREAD\"] = 2] = \"SPREAD\";\n    Precedence[Precedence[\"YIELD\"] = 3] = \"YIELD\";\n    Precedence[Precedence[\"ASSIGNMENT\"] = 4] = \"ASSIGNMENT\";\n    Precedence[Precedence[\"CONDITIONAL\"] = 5] = \"CONDITIONAL\";\n    Precedence[Precedence[\"LOGICAL_OR\"] = 6] = \"LOGICAL_OR\";\n    Precedence[Precedence[\"LOGICAL_AND\"] = 7] = \"LOGICAL_AND\";\n    Precedence[Precedence[\"BITWISE_OR\"] = 8] = \"BITWISE_OR\";\n    Precedence[Precedence[\"BITWISE_XOR\"] = 9] = \"BITWISE_XOR\";\n    Precedence[Precedence[\"BITWISE_AND\"] = 10] = \"BITWISE_AND\";\n    Precedence[Precedence[\"EQUALITY\"] = 11] = \"EQUALITY\";\n    Precedence[Precedence[\"RELATIONAL\"] = 12] = \"RELATIONAL\";\n    Precedence[Precedence[\"SHIFT\"] = 13] = \"SHIFT\";\n    Precedence[Precedence[\"ADDITIVE\"] = 14] = \"ADDITIVE\";\n    Precedence[Precedence[\"MULTIPLICATIVE\"] = 15] = \"MULTIPLICATIVE\";\n    Precedence[Precedence[\"EXPONENTIATED\"] = 16] = \"EXPONENTIATED\";\n    Precedence[Precedence[\"UNARY_PREFIX\"] = 17] = \"UNARY_PREFIX\";\n    Precedence[Precedence[\"UNARY_POSTFIX\"] = 18] = \"UNARY_POSTFIX\";\n    Precedence[Precedence[\"CALL\"] = 19] = \"CALL\";\n    Precedence[Precedence[\"MEMBERACCESS\"] = 20] = \"MEMBERACCESS\";\n    Precedence[Precedence[\"GROUPING\"] = 21] = \"GROUPING\";\n})(Precedence = exports.Precedence || (exports.Precedence = {}));\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind) {\n    switch (kind) {\n        case tokenizer_1.Token.COMMA: return 1 /* COMMA */;\n        case tokenizer_1.Token.EQUALS:\n        case tokenizer_1.Token.PLUS_EQUALS:\n        case tokenizer_1.Token.MINUS_EQUALS:\n        case tokenizer_1.Token.ASTERISK_ASTERISK_EQUALS:\n        case tokenizer_1.Token.ASTERISK_EQUALS:\n        case tokenizer_1.Token.SLASH_EQUALS:\n        case tokenizer_1.Token.PERCENT_EQUALS:\n        case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS:\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case tokenizer_1.Token.AMPERSAND_EQUALS:\n        case tokenizer_1.Token.CARET_EQUALS:\n        case tokenizer_1.Token.BAR_EQUALS: return 4 /* ASSIGNMENT */;\n        case tokenizer_1.Token.QUESTION: return 5 /* CONDITIONAL */;\n        case tokenizer_1.Token.BAR_BAR: return 6 /* LOGICAL_OR */;\n        case tokenizer_1.Token.AMPERSAND_AMPERSAND: return 7 /* LOGICAL_AND */;\n        case tokenizer_1.Token.BAR: return 8 /* BITWISE_OR */;\n        case tokenizer_1.Token.CARET: return 9 /* BITWISE_XOR */;\n        case tokenizer_1.Token.AMPERSAND: return 10 /* BITWISE_AND */;\n        case tokenizer_1.Token.EQUALS_EQUALS:\n        case tokenizer_1.Token.EXCLAMATION_EQUALS:\n        case tokenizer_1.Token.EQUALS_EQUALS_EQUALS:\n        case tokenizer_1.Token.EXCLAMATION_EQUALS_EQUALS: return 11 /* EQUALITY */;\n        case tokenizer_1.Token.AS:\n        case tokenizer_1.Token.IN:\n        case tokenizer_1.Token.INSTANCEOF:\n        case tokenizer_1.Token.LESSTHAN:\n        case tokenizer_1.Token.GREATERTHAN:\n        case tokenizer_1.Token.LESSTHAN_EQUALS:\n        case tokenizer_1.Token.GREATERTHAN_EQUALS: return 12 /* RELATIONAL */;\n        case tokenizer_1.Token.LESSTHAN_LESSTHAN:\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN:\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return 13 /* SHIFT */;\n        case tokenizer_1.Token.PLUS:\n        case tokenizer_1.Token.MINUS: return 14 /* ADDITIVE */;\n        case tokenizer_1.Token.ASTERISK:\n        case tokenizer_1.Token.SLASH:\n        case tokenizer_1.Token.PERCENT: return 15 /* MULTIPLICATIVE */;\n        case tokenizer_1.Token.ASTERISK_ASTERISK: return 16 /* EXPONENTIATED */;\n        case tokenizer_1.Token.PLUS_PLUS:\n        case tokenizer_1.Token.MINUS_MINUS: return 18 /* UNARY_POSTFIX */;\n        case tokenizer_1.Token.DOT:\n        case tokenizer_1.Token.NEW:\n        case tokenizer_1.Token.OPENBRACKET:\n        case tokenizer_1.Token.EXCLAMATION: return 20 /* MEMBERACCESS */;\n    }\n    return 0 /* NONE */;\n}\n\n\n/***/ }),\n\n/***/ 416:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Utility to find all locals used in an expression.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findUsedLocals = void 0;\nconst pass_1 = __webpack_require__(666);\nconst binaryen_1 = __webpack_require__(292);\nclass FindUsedLocalsVisitor extends pass_1.Visitor {\n    constructor(used = new Set()) {\n        super();\n        this.used = used;\n    }\n    /** @override */\n    visitLocalGet(localGet) {\n        this.used.add(binaryen_1._BinaryenLocalGetGetIndex(localGet));\n    }\n    /** @override */\n    visitLocalSet(localSet) {\n        this.used.add(binaryen_1._BinaryenLocalSetGetIndex(localSet));\n    }\n}\nvar singleton = null;\n/** Finds the indexes of all locals used in the specified expression. */\nfunction findUsedLocals(expr, used = new Set()) {\n    var visitor = singleton;\n    if (!visitor)\n        singleton = visitor = new FindUsedLocalsVisitor(used);\n    else\n        visitor.used = used;\n    visitor.visit(expr);\n    return used;\n}\nexports.findUsedLocals = findUsedLocals;\n\n\n/***/ }),\n\n/***/ 666:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Infrastructure for custom Binaryen passes.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replaceChild = exports.Pass = exports.Visitor = void 0;\nconst module_1 = __webpack_require__(656);\nconst binaryen_1 = __webpack_require__(292);\n/** Base class of custom Binaryen visitors. */\nclass Visitor {\n    constructor() {\n        /** Expression stack. */\n        this.stack = new Array();\n        this._currentExpression = 0;\n    }\n    /** Gets the current expression being walked. */\n    get currentExpression() {\n        var currentExpression = this._currentExpression;\n        if (!currentExpression)\n            throw new Error(\"not walking expressions\");\n        return currentExpression;\n    }\n    /** Gets the parent expression of the current expression being walked. Returns zero if already the top-most expression. */\n    get parentExpressionOrNull() {\n        var stack = this.stack;\n        var length = stack.length;\n        return length ? stack[length - 1] : 0;\n    }\n    // Expressions\n    visitBlock(expr) {\n        // unimp\n    }\n    visitIf(expr) {\n        // unimp\n    }\n    visitLoop(expr) {\n        // unimp\n    }\n    visitBreak(expr) {\n        // unimp\n    }\n    visitSwitch(expr) {\n        // unimp\n    }\n    visitCallPre(expr) {\n        // unimp\n    }\n    visitCall(expr) {\n        // unimp\n    }\n    visitCallIndirectPre(expr) {\n        // unimp\n    }\n    visitCallIndirect(expr) {\n        // unimp\n    }\n    visitLocalGet(expr) {\n        // unimp\n    }\n    visitLocalSet(expr) {\n        // unimp\n    }\n    visitGlobalGet(expr) {\n        // unimp\n    }\n    visitGlobalSet(expr) {\n        // unimp\n    }\n    visitLoad(expr) {\n        // unimp\n    }\n    visitStore(expr) {\n        // unimp\n    }\n    visitConst(expr) {\n        // unimp\n    }\n    visitUnary(expr) {\n        // unimp\n    }\n    visitBinary(expr) {\n        // unimp\n    }\n    visitSelect(expr) {\n        // unimp\n    }\n    visitDrop(expr) {\n        // unimp\n    }\n    visitReturn(expr) {\n        // unimp\n    }\n    visitMemorySize(expr) {\n        // unimp\n    }\n    visitMemoryGrow(expr) {\n        // unimp\n    }\n    visitNop(expr) {\n        // unimp\n    }\n    visitUnreachable(expr) {\n        // unimp\n    }\n    visitAtomicRMW(expr) {\n        // unimp\n    }\n    visitAtomicCmpxchg(expr) {\n        // unimp\n    }\n    visitAtomicWait(expr) {\n        // unimp\n    }\n    visitAtomicNotify(expr) {\n        // unimp\n    }\n    visitAtomicFence(expr) {\n        // unimp\n    }\n    visitSIMDExtract(expr) {\n        // unimp\n    }\n    visitSIMDReplace(expr) {\n        // unimp\n    }\n    visitSIMDShuffle(expr) {\n        // unimp\n    }\n    visitSIMDTernary(expr) {\n        // unimp\n    }\n    visitSIMDShift(expr) {\n        // unimp\n    }\n    visitSIMDLoad(expr) {\n        // unimp\n    }\n    visitMemoryInit(expr) {\n        // unimp\n    }\n    visitDataDrop(expr) {\n        // unimp\n    }\n    visitMemoryCopy(expr) {\n        // unimp\n    }\n    visitMemoryFill(expr) {\n        // unimp\n    }\n    visitPop(expr) {\n        // unimp\n    }\n    visitRefNull(expr) {\n        // unimp\n    }\n    visitRefIsNull(expr) {\n        // unimp\n    }\n    visitRefFunc(expr) {\n        // unimp\n    }\n    visitRefEq(expr) {\n        // unimp\n    }\n    visitTry(expr) {\n        // unimp\n    }\n    visitThrow(expr) {\n        // unimp\n    }\n    visitRethrow(expr) {\n        // unimp\n    }\n    visitBrOnExn(expr) {\n        // unimp\n    }\n    visitTupleMake(expr) {\n        // unimp\n    }\n    visitTupleExtract(expr) {\n        // unimp\n    }\n    visitI31New(expr) {\n        // unimp\n    }\n    visitI31Get(expr) {\n        // unimp\n    }\n    visitCallRef(expr) {\n        // unimp\n    }\n    visitRefTest(expr) {\n        // unimp\n    }\n    visitRefCast(expr) {\n        // unimp\n    }\n    visitBrOnCast(expr) {\n        // unimp\n    }\n    visitRttCanon(expr) {\n        // unimp\n    }\n    visitRttSub(expr) {\n        // unimp\n    }\n    visitStructNew(expr) {\n        // unimp\n    }\n    visitStructGet(expr) {\n        // unimp\n    }\n    visitStructSet(expr) {\n        // unimp\n    }\n    visitArrayNew(expr) {\n        // unimp\n    }\n    visitArrayGet(expr) {\n        // unimp\n    }\n    visitArraySet(expr) {\n        // unimp\n    }\n    visitArrayLen(expr) {\n        // unimp\n    }\n    // Immediates\n    visitName(name) {\n        // unimp\n    }\n    visitLabel(name) {\n        // unimp\n    }\n    visitIndex(index) {\n        // unimp\n    }\n    visitEvent(name) {\n        // unimp\n    }\n    // Delegate\n    /** Visits any expression, delegating to the respective visitor methods. */\n    visit(expr) {\n        let previousExpression = this._currentExpression;\n        this._currentExpression = assert(expr);\n        switch (binaryen_1._BinaryenExpressionGetId(expr)) {\n            case module_1.ExpressionId.Block: {\n                this.stack.push(expr);\n                let name = binaryen_1._BinaryenBlockGetName(expr);\n                if (name)\n                    this.visitLabel(name);\n                for (let i = 0, n = binaryen_1._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n                    this.visit(binaryen_1._BinaryenBlockGetChildAt(expr, i));\n                }\n                assert(this.stack.pop() == expr);\n                this.visitBlock(expr);\n                break;\n            }\n            case module_1.ExpressionId.If: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenIfGetCondition(expr));\n                this.visit(binaryen_1._BinaryenIfGetIfTrue(expr));\n                let ifFalse = binaryen_1._BinaryenIfGetIfFalse(expr);\n                if (ifFalse)\n                    this.visit(ifFalse);\n                assert(this.stack.pop() == expr);\n                this.visitIf(expr);\n                break;\n            }\n            case module_1.ExpressionId.Loop: {\n                this.stack.push(expr);\n                let name = binaryen_1._BinaryenLoopGetName(expr);\n                if (name)\n                    this.visitLabel(name);\n                this.visit(binaryen_1._BinaryenLoopGetBody(expr));\n                assert(this.stack.pop() == expr);\n                this.visitLoop(expr);\n                break;\n            }\n            case module_1.ExpressionId.Break: {\n                this.stack.push(expr);\n                this.visitLabel(binaryen_1._BinaryenBreakGetName(expr));\n                let condition = binaryen_1._BinaryenBreakGetCondition(expr);\n                if (condition)\n                    this.visit(condition);\n                let value = binaryen_1._BinaryenBreakGetValue(expr);\n                if (value)\n                    this.visit(value);\n                assert(this.stack.pop() == expr);\n                this.visitBreak(expr);\n                break;\n            }\n            case module_1.ExpressionId.Switch: {\n                this.stack.push(expr);\n                let defaultName = binaryen_1._BinaryenSwitchGetDefaultName(expr);\n                if (defaultName)\n                    this.visitLabel(defaultName);\n                let numNames = binaryen_1._BinaryenSwitchGetNumNames(expr);\n                for (let i = 0; i < numNames; ++i) {\n                    this.visitLabel(binaryen_1._BinaryenSwitchGetNameAt(expr, i));\n                }\n                this.visit(binaryen_1._BinaryenSwitchGetCondition(expr));\n                let value = binaryen_1._BinaryenSwitchGetValue(expr);\n                if (value)\n                    this.visit(value);\n                assert(this.stack.pop() == expr);\n                this.visitSwitch(expr);\n                break;\n            }\n            case module_1.ExpressionId.Call: {\n                this.visitCallPre(expr);\n                this.stack.push(expr);\n                this.visitName(binaryen_1._BinaryenCallGetTarget(expr));\n                let numOperands = binaryen_1._BinaryenCallGetNumOperands(expr);\n                for (let i = 0; i < numOperands; ++i) {\n                    this.visit(binaryen_1._BinaryenCallGetOperandAt(expr, i));\n                }\n                assert(this.stack.pop() == expr);\n                this.visitCall(expr);\n                break;\n            }\n            case module_1.ExpressionId.CallIndirect: {\n                this.visitCallIndirectPre(expr);\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenCallIndirectGetTarget(expr));\n                for (let i = 0, k = binaryen_1._BinaryenCallIndirectGetNumOperands(expr); i < k; ++i) {\n                    this.visit(binaryen_1._BinaryenCallIndirectGetOperandAt(expr, i));\n                }\n                assert(this.stack.pop() == expr);\n                this.visitCallIndirect(expr);\n                break;\n            }\n            case module_1.ExpressionId.LocalGet: {\n                this.stack.push(expr);\n                this.visitIndex(binaryen_1._BinaryenLocalGetGetIndex(expr));\n                assert(this.stack.pop() == expr);\n                this.visitLocalGet(expr);\n                break;\n            }\n            case module_1.ExpressionId.LocalSet: {\n                this.stack.push(expr);\n                this.visitIndex(binaryen_1._BinaryenLocalSetGetIndex(expr));\n                this.visit(binaryen_1._BinaryenLocalSetGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitLocalSet(expr);\n                break;\n            }\n            case module_1.ExpressionId.GlobalGet: {\n                this.stack.push(expr);\n                this.visitName(binaryen_1._BinaryenGlobalGetGetName(expr));\n                assert(this.stack.pop() == expr);\n                this.visitGlobalGet(expr);\n                break;\n            }\n            case module_1.ExpressionId.GlobalSet: {\n                this.stack.push(expr);\n                this.visitName(binaryen_1._BinaryenGlobalSetGetName(expr));\n                this.visit(binaryen_1._BinaryenGlobalSetGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitGlobalSet(expr);\n                break;\n            }\n            case module_1.ExpressionId.Load: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenLoadGetPtr(expr));\n                assert(this.stack.pop() == expr);\n                this.visitLoad(expr);\n                break;\n            }\n            case module_1.ExpressionId.Store: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenStoreGetPtr(expr));\n                this.visit(binaryen_1._BinaryenStoreGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitStore(expr);\n                break;\n            }\n            case module_1.ExpressionId.Const: {\n                this.visitConst(expr);\n                break;\n            }\n            case module_1.ExpressionId.Unary: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenUnaryGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitUnary(expr);\n                break;\n            }\n            case module_1.ExpressionId.Binary: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenBinaryGetLeft(expr));\n                this.visit(binaryen_1._BinaryenBinaryGetRight(expr));\n                assert(this.stack.pop() == expr);\n                this.visitBinary(expr);\n                break;\n            }\n            case module_1.ExpressionId.Select: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSelectGetIfTrue(expr));\n                this.visit(binaryen_1._BinaryenSelectGetIfFalse(expr));\n                this.visit(binaryen_1._BinaryenSelectGetCondition(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSelect(expr);\n                break;\n            }\n            case module_1.ExpressionId.Drop: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenDropGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitDrop(expr);\n                break;\n            }\n            case module_1.ExpressionId.Return: {\n                let value = binaryen_1._BinaryenReturnGetValue(expr);\n                if (value) {\n                    this.stack.push(expr);\n                    this.visit(value);\n                    assert(this.stack.pop() == expr);\n                }\n                this.visitReturn(expr);\n                break;\n            }\n            case module_1.ExpressionId.MemorySize: {\n                this.visitMemorySize(expr);\n                break;\n            }\n            case module_1.ExpressionId.MemoryGrow: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenMemoryGrowGetDelta(expr));\n                assert(this.stack.pop() == expr);\n                this.visitMemoryGrow(expr);\n                break;\n            }\n            case module_1.ExpressionId.Nop: {\n                this.visitNop(expr);\n                break;\n            }\n            case module_1.ExpressionId.Unreachable: {\n                this.visitUnreachable(expr);\n                break;\n            }\n            case module_1.ExpressionId.AtomicRMW: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenAtomicRMWGetPtr(expr));\n                this.visit(binaryen_1._BinaryenAtomicRMWGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitAtomicRMW(expr);\n                break;\n            }\n            case module_1.ExpressionId.AtomicCmpxchg: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenAtomicCmpxchgGetPtr(expr));\n                this.visit(binaryen_1._BinaryenAtomicCmpxchgGetExpected(expr));\n                this.visit(binaryen_1._BinaryenAtomicCmpxchgGetReplacement(expr));\n                assert(this.stack.pop() == expr);\n                this.visitAtomicCmpxchg(expr);\n                break;\n            }\n            case module_1.ExpressionId.AtomicWait: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenAtomicWaitGetPtr(expr));\n                this.visit(binaryen_1._BinaryenAtomicWaitGetExpected(expr));\n                this.visit(binaryen_1._BinaryenAtomicWaitGetTimeout(expr));\n                assert(this.stack.pop() == expr);\n                this.visitAtomicWait(expr);\n                break;\n            }\n            case module_1.ExpressionId.AtomicNotify: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenAtomicNotifyGetPtr(expr));\n                this.visit(binaryen_1._BinaryenAtomicNotifyGetNotifyCount(expr));\n                assert(this.stack.pop() == expr);\n                this.visitAtomicNotify(expr);\n                break;\n            }\n            case module_1.ExpressionId.AtomicFence: {\n                this.visitAtomicFence(expr);\n                break;\n            }\n            case module_1.ExpressionId.SIMDExtract: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSIMDExtractGetVec(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSIMDExtract(expr);\n                break;\n            }\n            case module_1.ExpressionId.SIMDReplace: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSIMDReplaceGetVec(expr));\n                this.visit(binaryen_1._BinaryenSIMDReplaceGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSIMDReplace(expr);\n                break;\n            }\n            case module_1.ExpressionId.SIMDShuffle: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSIMDShuffleGetLeft(expr));\n                this.visit(binaryen_1._BinaryenSIMDShuffleGetRight(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSIMDShuffle(expr);\n                break;\n            }\n            case module_1.ExpressionId.SIMDTernary: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSIMDTernaryGetA(expr));\n                this.visit(binaryen_1._BinaryenSIMDTernaryGetB(expr));\n                this.visit(binaryen_1._BinaryenSIMDTernaryGetC(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSIMDTernary(expr);\n                break;\n            }\n            case module_1.ExpressionId.SIMDShift: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSIMDShiftGetVec(expr));\n                this.visit(binaryen_1._BinaryenSIMDShiftGetShift(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSIMDShift(expr);\n                break;\n            }\n            case module_1.ExpressionId.SIMDLoad: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenSIMDLoadGetPtr(expr));\n                assert(this.stack.pop() == expr);\n                this.visitSIMDLoad(expr);\n                break;\n            }\n            // TODO: SIMDLoadStoreLane\n            case module_1.ExpressionId.MemoryInit: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenMemoryInitGetDest(expr));\n                this.visit(binaryen_1._BinaryenMemoryInitGetOffset(expr));\n                this.visit(binaryen_1._BinaryenMemoryInitGetSize(expr));\n                assert(this.stack.pop() == expr);\n                this.visitMemoryInit(expr);\n                break;\n            }\n            case module_1.ExpressionId.DataDrop: {\n                this.visitDataDrop(expr);\n                break;\n            }\n            case module_1.ExpressionId.MemoryCopy: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenMemoryCopyGetDest(expr));\n                this.visit(binaryen_1._BinaryenMemoryCopyGetSource(expr));\n                this.visit(binaryen_1._BinaryenMemoryCopyGetSize(expr));\n                assert(this.stack.pop() == expr);\n                this.visitMemoryCopy(expr);\n                break;\n            }\n            case module_1.ExpressionId.MemoryFill: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenMemoryFillGetDest(expr));\n                this.visit(binaryen_1._BinaryenMemoryFillGetValue(expr));\n                this.visit(binaryen_1._BinaryenMemoryFillGetSize(expr));\n                assert(this.stack.pop() == expr);\n                this.visitMemoryFill(expr);\n                break;\n            }\n            case module_1.ExpressionId.Pop: {\n                this.visitPop(expr);\n                break;\n            }\n            case module_1.ExpressionId.RefNull: {\n                this.visitRefNull(expr);\n                break;\n            }\n            case module_1.ExpressionId.RefIsNull: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenRefIsNullGetValue(expr));\n                assert(this.stack.pop() == expr);\n                this.visitRefIsNull(expr);\n                break;\n            }\n            case module_1.ExpressionId.RefFunc: {\n                this.stack.push(expr);\n                this.visitName(binaryen_1._BinaryenRefFuncGetFunc(expr));\n                assert(this.stack.pop() == expr);\n                this.visitRefFunc(expr);\n                break;\n            }\n            case module_1.ExpressionId.RefEq: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenRefEqGetLeft(expr));\n                this.visit(binaryen_1._BinaryenRefEqGetRight(expr));\n                assert(this.stack.pop() == expr);\n                this.visitRefEq(expr);\n                break;\n            }\n            case module_1.ExpressionId.Try: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenTryGetBody(expr));\n                this.visit(binaryen_1._BinaryenTryGetCatchBody(expr));\n                assert(this.stack.pop() == expr);\n                this.visitTry(expr);\n                break;\n            }\n            case module_1.ExpressionId.Throw: {\n                this.stack.push(expr);\n                this.visitEvent(binaryen_1._BinaryenThrowGetEvent(expr));\n                let numOperands = binaryen_1._BinaryenThrowGetNumOperands(expr);\n                for (let i = 0; i < numOperands; ++i) {\n                    this.visit(binaryen_1._BinaryenThrowGetOperandAt(expr, i));\n                }\n                assert(this.stack.pop() == expr);\n                this.visitThrow(expr);\n                break;\n            }\n            case module_1.ExpressionId.Rethrow: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenRethrowGetExnref(expr));\n                assert(this.stack.pop() == expr);\n                this.visitRethrow(expr);\n                break;\n            }\n            case module_1.ExpressionId.BrOnExn: {\n                this.stack.push(expr);\n                this.visitEvent(binaryen_1._BinaryenBrOnExnGetEvent(expr));\n                this.visitLabel(binaryen_1._BinaryenBrOnExnGetName(expr));\n                this.visit(binaryen_1._BinaryenBrOnExnGetExnref(expr));\n                assert(this.stack.pop() == expr);\n                this.visitBrOnExn(expr);\n                break;\n            }\n            case module_1.ExpressionId.TupleMake: {\n                let numOperands = binaryen_1._BinaryenTupleMakeGetNumOperands(expr);\n                if (numOperands) {\n                    this.stack.push(expr);\n                    for (let i = 0; i < numOperands; ++i) {\n                        this.visit(binaryen_1._BinaryenTupleMakeGetOperandAt(expr, i));\n                    }\n                    assert(this.stack.pop() == expr);\n                }\n                this.visitTupleMake(expr);\n                break;\n            }\n            case module_1.ExpressionId.TupleExtract: {\n                this.stack.push(expr);\n                this.visit(binaryen_1._BinaryenTupleExtractGetTuple(expr));\n                assert(this.stack.pop() == expr);\n                this.visitTupleExtract(expr);\n                break;\n            }\n            case module_1.ExpressionId.I31New: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitI31New(expr);\n                break;\n            }\n            case module_1.ExpressionId.I31Get: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitI31Get(expr);\n                break;\n            }\n            case module_1.ExpressionId.CallRef: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitCallRef(expr);\n                break;\n            }\n            case module_1.ExpressionId.RefTest: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitRefTest(expr);\n                break;\n            }\n            case module_1.ExpressionId.RefCast: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitRefCast(expr);\n                break;\n            }\n            case module_1.ExpressionId.BrOnCast: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitBrOnCast(expr);\n                break;\n            }\n            case module_1.ExpressionId.RttCanon: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitRttCanon(expr);\n                break;\n            }\n            case module_1.ExpressionId.RttSub: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitRttSub(expr);\n                break;\n            }\n            case module_1.ExpressionId.StructNew: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitStructNew(expr);\n                break;\n            }\n            case module_1.ExpressionId.StructGet: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitStructGet(expr);\n                break;\n            }\n            case module_1.ExpressionId.StructSet: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitStructSet(expr);\n                break;\n            }\n            case module_1.ExpressionId.ArrayNew: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitArrayNew(expr);\n                break;\n            }\n            case module_1.ExpressionId.ArrayGet: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitArrayGet(expr);\n                break;\n            }\n            case module_1.ExpressionId.ArraySet: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitArraySet(expr);\n                break;\n            }\n            case module_1.ExpressionId.ArrayLen: {\n                this.stack.push(expr);\n                assert(false); // TODO\n                assert(this.stack.pop() == expr);\n                this.visitArrayLen(expr);\n                break;\n            }\n            default: throw new Error(\"unexpected expression kind\");\n        }\n        this._currentExpression = previousExpression;\n    }\n}\nexports.Visitor = Visitor;\n/** Base class of custom Binaryen passes. */\nclass Pass extends Visitor {\n    /** Constructs a new Binaryen pass. */\n    constructor(module) {\n        super();\n        this.module = module;\n        this._currentFunction = 0;\n        this._currentGlobal = 0;\n    }\n    /** Gets the current function being walked. */\n    get currentFunction() {\n        var currentFunction = this._currentFunction;\n        if (!currentFunction)\n            throw new Error(\"not walking a function\");\n        return currentFunction;\n    }\n    /** Gets the current global being walked. */\n    get currentGlobal() {\n        var currentGlobal = this._currentGlobal;\n        if (!currentGlobal)\n            throw new Error(\"not walking a global\");\n        return currentGlobal;\n    }\n    // Walking\n    /** Walks the entire module. */\n    walkModule() {\n        this.walkFunctions();\n        this.walkGlobals();\n    }\n    /** Walks all functions. */\n    walkFunctions() {\n        var moduleRef = this.module.ref;\n        for (let i = 0, k = binaryen_1._BinaryenGetNumFunctions(moduleRef); i < k; ++i) {\n            this.walkFunction(binaryen_1._BinaryenGetFunctionByIndex(moduleRef, i));\n        }\n    }\n    /** Walks a specific function. */\n    walkFunction(func) {\n        var body = binaryen_1._BinaryenFunctionGetBody(func);\n        if (body) {\n            this._currentFunction = func;\n            this.visit(body);\n            this._currentFunction = 0;\n        }\n    }\n    /** Walks all global variables. */\n    walkGlobals() {\n        var moduleRef = this.module.ref;\n        for (let i = 0, k = binaryen_1._BinaryenGetNumGlobals(moduleRef); i < k; ++i) {\n            this.walkGlobal(binaryen_1._BinaryenGetGlobalByIndex(moduleRef, i));\n        }\n    }\n    /** Walks a specific global variable. */\n    walkGlobal(global) {\n        this._currentGlobal = global;\n        var init = binaryen_1._BinaryenGlobalGetInitExpr(global);\n        if (init)\n            this.visit(init);\n        this._currentGlobal = 0;\n    }\n    // Utility\n    /** Replaces the current expression with the specified replacement. */\n    replaceCurrent(replacement) {\n        var search = this.currentExpression;\n        var func = this.currentFunction;\n        var body = binaryen_1._BinaryenFunctionGetBody(func);\n        if (body == search) {\n            binaryen_1._BinaryenFunctionSetBody(func, replacement);\n        }\n        else {\n            var parent = assert(this.parentExpressionOrNull);\n            var replaced = replaceChild(parent, search, replacement);\n            if (!replaced)\n                throw Error(\"failed to replace expression\");\n            binaryen_1._BinaryenExpressionFinalize(parent);\n        }\n    }\n}\nexports.Pass = Pass;\n/** Replaces an expression within a parent expression. Returns the replaced expression on success, otherwise `0`. */\nfunction replaceChild(\n/** Parent expression containing `search`. */\nparent, \n/** Expression to replace. */\nsearch, \n/** Expression to replace `search` with. */\nreplacement) {\n    switch (binaryen_1._BinaryenExpressionGetId(parent)) {\n        case module_1.ExpressionId.Block: {\n            let numChildren = binaryen_1._BinaryenBlockGetNumChildren(parent);\n            for (let i = 0; i < numChildren; ++i) {\n                let child = binaryen_1._BinaryenBlockGetChildAt(parent, i);\n                if (child == search) {\n                    binaryen_1._BinaryenBlockSetChildAt(parent, i, replacement);\n                    return child;\n                }\n            }\n            break;\n        }\n        case module_1.ExpressionId.If: {\n            let condition = binaryen_1._BinaryenIfGetCondition(parent);\n            if (condition == search) {\n                binaryen_1._BinaryenIfSetCondition(parent, replacement);\n                return condition;\n            }\n            let ifTrue = binaryen_1._BinaryenIfGetIfTrue(parent);\n            if (ifTrue == search) {\n                binaryen_1._BinaryenIfSetIfTrue(parent, replacement);\n                return ifTrue;\n            }\n            let ifFalse = binaryen_1._BinaryenIfGetIfFalse(parent);\n            if (ifFalse == search) {\n                binaryen_1._BinaryenIfSetIfFalse(parent, replacement);\n                return ifFalse;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Loop: {\n            let body = binaryen_1._BinaryenLoopGetBody(parent);\n            if (body == search) {\n                binaryen_1._BinaryenLoopSetBody(parent, replacement);\n                return body;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Break: {\n            let condition = binaryen_1._BinaryenBreakGetCondition(parent);\n            if (condition == search) {\n                binaryen_1._BinaryenBreakSetCondition(parent, replacement);\n                return condition;\n            }\n            let value = binaryen_1._BinaryenBreakGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenBreakSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Switch: {\n            let condition = binaryen_1._BinaryenSwitchGetCondition(parent);\n            if (condition == search) {\n                binaryen_1._BinaryenSwitchSetCondition(parent, replacement);\n                return condition;\n            }\n            let value = binaryen_1._BinaryenSwitchGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenSwitchSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Call: {\n            let numOperands = binaryen_1._BinaryenCallGetNumOperands(parent);\n            for (let i = 0; i < numOperands; ++i) {\n                let operand = binaryen_1._BinaryenCallGetOperandAt(parent, i);\n                if (operand == search) {\n                    binaryen_1._BinaryenCallSetOperandAt(parent, i, replacement);\n                    return operand;\n                }\n            }\n            break;\n        }\n        case module_1.ExpressionId.CallIndirect: {\n            let target = binaryen_1._BinaryenCallIndirectGetTarget(parent);\n            if (target == search) {\n                binaryen_1._BinaryenCallIndirectSetTarget(parent, replacement);\n                return target;\n            }\n            let numOperands = binaryen_1._BinaryenCallIndirectGetNumOperands(parent);\n            for (let i = 0; i < numOperands; ++i) {\n                let operand = binaryen_1._BinaryenCallIndirectGetOperandAt(parent, i);\n                if (operand == search) {\n                    binaryen_1._BinaryenCallIndirectSetOperandAt(parent, i, replacement);\n                    return operand;\n                }\n            }\n            break;\n        }\n        case module_1.ExpressionId.LocalGet: {\n            break;\n        }\n        case module_1.ExpressionId.LocalSet: {\n            let value = binaryen_1._BinaryenLocalSetGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenLocalSetSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.GlobalGet: {\n            break;\n        }\n        case module_1.ExpressionId.GlobalSet: {\n            let value = binaryen_1._BinaryenGlobalSetGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenGlobalSetSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Load: {\n            let ptr = binaryen_1._BinaryenLoadGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenLoadSetPtr(parent, replacement);\n                return ptr;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Store: {\n            let ptr = binaryen_1._BinaryenStoreGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenStoreSetPtr(parent, replacement);\n                return ptr;\n            }\n            let value = binaryen_1._BinaryenStoreGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenStoreSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Const: {\n            break;\n        }\n        case module_1.ExpressionId.Unary: {\n            let value = binaryen_1._BinaryenUnaryGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenUnarySetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Binary: {\n            let left = binaryen_1._BinaryenBinaryGetLeft(parent);\n            if (left == search) {\n                binaryen_1._BinaryenBinarySetLeft(parent, replacement);\n                return left;\n            }\n            let right = binaryen_1._BinaryenBinaryGetRight(parent);\n            if (right == search) {\n                binaryen_1._BinaryenBinarySetRight(parent, replacement);\n                return right;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Select: {\n            let ifTrue = binaryen_1._BinaryenSelectGetIfTrue(parent);\n            if (ifTrue == search) {\n                binaryen_1._BinaryenSelectSetIfTrue(parent, replacement);\n                return ifTrue;\n            }\n            let ifFalse = binaryen_1._BinaryenSelectGetIfFalse(parent);\n            if (ifFalse == search) {\n                binaryen_1._BinaryenSelectSetIfFalse(parent, replacement);\n                return ifFalse;\n            }\n            let condition = binaryen_1._BinaryenSelectGetCondition(parent);\n            if (condition == search) {\n                binaryen_1._BinaryenSelectSetCondition(parent, replacement);\n                return condition;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Drop: {\n            let value = binaryen_1._BinaryenDropGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenDropSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Return: {\n            let value = binaryen_1._BinaryenReturnGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenReturnSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.MemorySize: {\n            break;\n        }\n        case module_1.ExpressionId.MemoryGrow: {\n            let delta = binaryen_1._BinaryenMemoryGrowGetDelta(parent);\n            if (delta == search) {\n                binaryen_1._BinaryenMemoryGrowSetDelta(parent, replacement);\n                return delta;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Nop: {\n            break;\n        }\n        case module_1.ExpressionId.Unreachable: {\n            break;\n        }\n        case module_1.ExpressionId.AtomicRMW: {\n            let ptr = binaryen_1._BinaryenAtomicRMWGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenAtomicRMWSetPtr(parent, replacement);\n                return ptr;\n            }\n            let value = binaryen_1._BinaryenAtomicRMWGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenAtomicRMWSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.AtomicCmpxchg: {\n            let ptr = binaryen_1._BinaryenAtomicCmpxchgGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenAtomicCmpxchgSetPtr(parent, replacement);\n                return ptr;\n            }\n            let expected = binaryen_1._BinaryenAtomicCmpxchgGetExpected(parent);\n            if (expected == search) {\n                binaryen_1._BinaryenAtomicCmpxchgSetExpected(parent, replacement);\n                return expected;\n            }\n            let repl = binaryen_1._BinaryenAtomicCmpxchgGetReplacement(parent);\n            if (repl == search) {\n                binaryen_1._BinaryenAtomicCmpxchgSetReplacement(parent, replacement);\n                return repl;\n            }\n            break;\n        }\n        case module_1.ExpressionId.AtomicWait: {\n            let ptr = binaryen_1._BinaryenAtomicWaitGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenAtomicWaitSetPtr(parent, replacement);\n                return ptr;\n            }\n            let expected = binaryen_1._BinaryenAtomicWaitGetExpected(parent);\n            if (expected == search) {\n                binaryen_1._BinaryenAtomicWaitSetExpected(parent, replacement);\n                return expected;\n            }\n            let timeout = binaryen_1._BinaryenAtomicWaitGetTimeout(parent);\n            if (timeout == search) {\n                binaryen_1._BinaryenAtomicWaitSetTimeout(parent, replacement);\n                return timeout;\n            }\n            break;\n        }\n        case module_1.ExpressionId.AtomicNotify: {\n            let ptr = binaryen_1._BinaryenAtomicNotifyGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenAtomicNotifySetPtr(parent, replacement);\n                return ptr;\n            }\n            let notifyCount = binaryen_1._BinaryenAtomicNotifyGetNotifyCount(parent);\n            if (notifyCount == search) {\n                binaryen_1._BinaryenAtomicNotifySetNotifyCount(parent, replacement);\n                return notifyCount;\n            }\n            break;\n        }\n        case module_1.ExpressionId.AtomicFence: {\n            break;\n        }\n        case module_1.ExpressionId.SIMDExtract: {\n            let vec = binaryen_1._BinaryenSIMDExtractGetVec(parent);\n            if (vec == search) {\n                binaryen_1._BinaryenSIMDExtractSetVec(parent, replacement);\n                return vec;\n            }\n            break;\n        }\n        case module_1.ExpressionId.SIMDReplace: {\n            let vec = binaryen_1._BinaryenSIMDReplaceGetVec(parent);\n            if (vec == search) {\n                binaryen_1._BinaryenSIMDReplaceSetVec(parent, replacement);\n                return vec;\n            }\n            let value = binaryen_1._BinaryenSIMDReplaceGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenSIMDReplaceSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.SIMDShuffle: {\n            let left = binaryen_1._BinaryenSIMDShuffleGetLeft(parent);\n            if (left == search) {\n                binaryen_1._BinaryenSIMDShuffleSetLeft(parent, replacement);\n                return left;\n            }\n            let right = binaryen_1._BinaryenSIMDShuffleGetRight(parent);\n            if (right == search) {\n                binaryen_1._BinaryenSIMDShuffleSetRight(parent, replacement);\n                return right;\n            }\n            break;\n        }\n        case module_1.ExpressionId.SIMDTernary: {\n            let a = binaryen_1._BinaryenSIMDTernaryGetA(parent);\n            if (a == search) {\n                binaryen_1._BinaryenSIMDTernarySetA(parent, replacement);\n                return a;\n            }\n            let b = binaryen_1._BinaryenSIMDTernaryGetB(parent);\n            if (b == search) {\n                binaryen_1._BinaryenSIMDTernarySetB(parent, replacement);\n                return b;\n            }\n            let c = binaryen_1._BinaryenSIMDTernaryGetC(parent);\n            if (c == search) {\n                binaryen_1._BinaryenSIMDTernarySetC(parent, replacement);\n                return c;\n            }\n            break;\n        }\n        case module_1.ExpressionId.SIMDShift: {\n            let vec = binaryen_1._BinaryenSIMDShiftGetVec(parent);\n            if (vec == search) {\n                binaryen_1._BinaryenSIMDShiftSetVec(parent, replacement);\n                return vec;\n            }\n            let shift = binaryen_1._BinaryenSIMDShiftGetShift(parent);\n            if (shift == search) {\n                binaryen_1._BinaryenSIMDShiftSetShift(parent, replacement);\n                return shift;\n            }\n            break;\n        }\n        case module_1.ExpressionId.SIMDLoad: {\n            let ptr = binaryen_1._BinaryenSIMDLoadGetPtr(parent);\n            if (ptr == search) {\n                binaryen_1._BinaryenSIMDLoadSetPtr(parent, replacement);\n                return ptr;\n            }\n            break;\n        }\n        // TODO: SIMDLoadStoreLane\n        case module_1.ExpressionId.MemoryInit: {\n            let dest = binaryen_1._BinaryenMemoryInitGetDest(parent);\n            if (dest == search) {\n                binaryen_1._BinaryenMemoryInitSetDest(parent, replacement);\n                return dest;\n            }\n            let offset = binaryen_1._BinaryenMemoryInitGetOffset(parent);\n            if (offset == search) {\n                binaryen_1._BinaryenMemoryInitSetOffset(parent, replacement);\n                return offset;\n            }\n            let size = binaryen_1._BinaryenMemoryInitGetSize(parent);\n            if (size == search) {\n                binaryen_1._BinaryenMemoryInitSetSize(parent, replacement);\n                return size;\n            }\n            break;\n        }\n        case module_1.ExpressionId.DataDrop: {\n            break;\n        }\n        case module_1.ExpressionId.MemoryCopy: {\n            let dest = binaryen_1._BinaryenMemoryCopyGetDest(parent);\n            if (dest == search) {\n                binaryen_1._BinaryenMemoryCopySetDest(parent, replacement);\n                return dest;\n            }\n            let source = binaryen_1._BinaryenMemoryCopyGetSource(parent);\n            if (source == search) {\n                binaryen_1._BinaryenMemoryCopySetSource(parent, replacement);\n                return source;\n            }\n            let size = binaryen_1._BinaryenMemoryCopyGetSize(parent);\n            if (size == search) {\n                binaryen_1._BinaryenMemoryCopySetSize(parent, replacement);\n                return size;\n            }\n            break;\n        }\n        case module_1.ExpressionId.MemoryFill: {\n            let dest = binaryen_1._BinaryenMemoryFillGetDest(parent);\n            if (dest == search) {\n                binaryen_1._BinaryenMemoryFillSetDest(parent, replacement);\n                return dest;\n            }\n            let value = binaryen_1._BinaryenMemoryFillGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenMemoryFillSetValue(parent, replacement);\n                return value;\n            }\n            let size = binaryen_1._BinaryenMemoryFillGetSize(parent);\n            if (size == search) {\n                binaryen_1._BinaryenMemoryFillSetSize(parent, replacement);\n                return size;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Pop: {\n            break;\n        }\n        case module_1.ExpressionId.RefNull: {\n            break;\n        }\n        case module_1.ExpressionId.RefIsNull: {\n            let value = binaryen_1._BinaryenRefIsNullGetValue(parent);\n            if (value == search) {\n                binaryen_1._BinaryenRefIsNullSetValue(parent, replacement);\n                return value;\n            }\n            break;\n        }\n        case module_1.ExpressionId.RefFunc: {\n            break;\n        }\n        case module_1.ExpressionId.RefEq: {\n            let left = binaryen_1._BinaryenRefEqGetLeft(parent);\n            if (left == search) {\n                binaryen_1._BinaryenRefEqSetLeft(parent, replacement);\n                return left;\n            }\n            let right = binaryen_1._BinaryenRefEqGetRight(parent);\n            if (right == search) {\n                binaryen_1._BinaryenRefEqSetRight(parent, replacement);\n                return right;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Try: {\n            let body = binaryen_1._BinaryenTryGetBody(parent);\n            if (body == search) {\n                binaryen_1._BinaryenTrySetBody(parent, replacement);\n                return body;\n            }\n            let catchBody = binaryen_1._BinaryenTryGetCatchBody(parent);\n            if (catchBody == search) {\n                binaryen_1._BinaryenTrySetCatchBody(parent, replacement);\n                return catchBody;\n            }\n            break;\n        }\n        case module_1.ExpressionId.Throw: {\n            let numOperands = binaryen_1._BinaryenThrowGetNumOperands(parent);\n            for (let i = 0; i < numOperands; ++i) {\n                let operand = binaryen_1._BinaryenThrowGetOperandAt(parent, i);\n                if (operand == search) {\n                    binaryen_1._BinaryenThrowSetOperandAt(parent, i, replacement);\n                    return operand;\n                }\n            }\n            break;\n        }\n        case module_1.ExpressionId.Rethrow: {\n            let exnref = binaryen_1._BinaryenRethrowGetExnref(parent);\n            if (exnref == search) {\n                binaryen_1._BinaryenRethrowSetExnref(parent, replacement);\n                return exnref;\n            }\n            break;\n        }\n        case module_1.ExpressionId.BrOnExn: {\n            let exnref = binaryen_1._BinaryenBrOnExnGetExnref(parent);\n            if (exnref == search) {\n                binaryen_1._BinaryenBrOnExnSetExnref(parent, replacement);\n                return exnref;\n            }\n            break;\n        }\n        case module_1.ExpressionId.TupleMake: {\n            let numOperands = binaryen_1._BinaryenTupleMakeGetNumOperands(parent);\n            for (let i = 0; i < numOperands; ++i) {\n                let operand = binaryen_1._BinaryenTupleMakeGetOperandAt(parent, i);\n                if (operand == search) {\n                    binaryen_1._BinaryenTupleMakeSetOperandAt(parent, i, replacement);\n                    return operand;\n                }\n            }\n            break;\n        }\n        case module_1.ExpressionId.TupleExtract: {\n            let tuple = binaryen_1._BinaryenTupleExtractGetTuple(parent);\n            if (tuple == search) {\n                binaryen_1._BinaryenTupleExtractSetTuple(parent, replacement);\n                return tuple;\n            }\n            break;\n        }\n        case module_1.ExpressionId.I31New: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.I31Get: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.CallRef: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.RefTest: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.RefCast: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.BrOnCast: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.RttCanon: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.RttSub: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.StructNew: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.StructGet: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.StructSet: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.ArrayNew: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.ArrayGet: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.ArraySet: {\n            assert(false); // TODO\n            break;\n        }\n        case module_1.ExpressionId.ArrayLen: {\n            assert(false); // TODO\n            break;\n        }\n        default: throw new Error(\"unexpected expression id\");\n    }\n    return 0;\n}\nexports.replaceChild = replaceChild;\n\n\n/***/ }),\n\n/***/ 865:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview A lightweight store instrumentation pass.\n *\n * Can be used to find rogue stores to protected memory addresses like object\n * headers or similar, without going overboard with instrumentation. Also\n * passes a flag whether a store originates within the runtime or other code.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RtraceMemory = void 0;\nconst pass_1 = __webpack_require__(666);\nconst module_1 = __webpack_require__(656);\nconst binaryen_1 = __webpack_require__(292);\n/** Instruments stores to also call an import. */\nclass RtraceMemory extends pass_1.Pass {\n    constructor(compiler) {\n        super(compiler.module);\n        /** Whether we've seen any stores. */\n        this.seenStores = false;\n        this.ptrType = compiler.options.nativeSizeType;\n    }\n    checkRT() {\n        var functionName = this.module.readStringCached(binaryen_1._BinaryenFunctionGetName(this.currentFunction));\n        return functionName.startsWith(\"~lib/rt/\");\n    }\n    /** @override */\n    visitStore(store) {\n        var module = this.module;\n        var ptr = binaryen_1._BinaryenStoreGetPtr(store);\n        var offset = binaryen_1._BinaryenStoreGetOffset(store);\n        var bytes = binaryen_1._BinaryenStoreGetBytes(store);\n        // onstore(ptr: usize, offset: i32, bytes: i32, isRT: bool) -> ptr\n        binaryen_1._BinaryenStoreSetPtr(store, module.call(\"~onstore\", [\n            ptr,\n            module.i32(offset),\n            module.i32(bytes),\n            module.i32(i32(this.checkRT()))\n        ], this.ptrType));\n        this.seenStores = true;\n    }\n    // TODO: MemoryFill, Atomics\n    /** @override */\n    walkModule() {\n        super.walkModule();\n        if (this.seenStores) {\n            this.module.addFunctionImport(\"~onstore\", \"rtrace\", \"onstore\", module_1.createType([this.ptrType, module_1.NativeType.I32, module_1.NativeType.I32, module_1.NativeType.I32]), this.ptrType);\n        }\n    }\n}\nexports.RtraceMemory = RtraceMemory;\n\n\n/***/ }),\n\n/***/ 231:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Shadow stack instrumentation for a precise GC.\n *\n * Instruments function arguments and local assignments marked with a 'tostack'\n * call to also do stores to a shadow stack of managed values only.\n *\n * Consider a simple call to a function looking like the following, taking\n * managed arguments, plus assigning managed values to locals:\n *\n *   function foo(a: Obj, b: Obj): Obj {\n *     var c = __tostack(a) // slot 2\n *     __collect()\n *     return b\n *   }\n *\n *   foo(__tostack(a), __tostack(b)) // slot 0, 1\n *\n * At the call to `__collect()` the 32-bit stack frame of the function is:\n *\n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed argument 'a'\n *      4   | Second managed argument 'b'\n *   -------|----------------------------\n *      8   | First managed local 'c'\n *\n * We are splitting the frame in two halves as annotated since both halves are\n * only known separately for indirect calls, with the first half becoming an\n * extension of the calling function's stack frame by means of treating the\n * arguments as if these were locals beyond the caller's `numLocals`. Function\n * arguments stay a bit longer on the stack than usually, but we also don't have\n * to modify the stack pointer pre-call at all this way. The caller's amended\n * stack frame when assuming one managed local may look like this:\n *\n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local '?'\n *      4   | Extended with first managed argument 'a'\n *      8   | Extended with second managed argument 'b'\n *\n * with the callee's stack frame becoming just:\n *\n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local 'c'\n *\n * Instrumentation added below looks about like the following, with the stack\n * growing downwards and 't' and 'r' being new temporary locals:\n *\n *   // callee frameSize = 1 * sizeof<usize>()\n *   function foo(a: usize, b: usize): usize {\n *     memory.fill(__stack_pointer -= frameSize, 0, frameSize)\n *     store<usize>(__stack_pointer, c = a, 0 * sizeof<usize>())\n *     __collect()\n *     var r = b\n *     __stack_pointer += frameSize\n *     return r\n *   }\n *\n *   // caller frameSize = (numLocalSlots + 2 [by extension]) * sizeof<usize>()\n *   (\n *     r = foo(\n *       ( t = a,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 0) * sizeof<usize>()),\n *         t ),\n *       ( t = b,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 1) * sizeof<usize>()),\n *         t )\n *     ),\n *     r\n *   )\n *\n * Also note that we have to `memory.fill` the second half because the first\n * assignment to a local may happen at a later point within the function. The\n * invariant we need to maintain for a precise GC is that it only sees zeroes\n * or valid pointers, but never an invalid pointer left on the stack earlier.\n * Since most frames are small, we unroll a sequence of `store`s up to a frame\n * size of 16 bytes, and `memory.fill`, if available, beyond.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ShadowStackPass = void 0;\nconst pass_1 = __webpack_require__(666);\nconst binaryen_1 = __webpack_require__(292);\nconst module_1 = __webpack_require__(656);\nconst builtins_1 = __webpack_require__(346);\n/** Attempts to match the `__tostack(value)` pattern. Returns `value` if a match, otherwise `0`.  */\nfunction matchTostack(module, expr) {\n    if (binaryen_1._BinaryenExpressionGetId(expr) == module_1.ExpressionId.Call && module.readStringCached(binaryen_1._BinaryenCallGetTarget(expr)) == builtins_1.BuiltinNames.tostack) {\n        assert(binaryen_1._BinaryenCallGetNumOperands(expr) == 1);\n        return binaryen_1._BinaryenCallGetOperandAt(expr, 0);\n    }\n    return 0;\n}\n/** Instruments a module with a shadow stack for precise GC. */\nclass ShadowStackPass extends pass_1.Pass {\n    constructor(compiler) {\n        super(compiler.module);\n        /** Stack frame slots, per function. */\n        this.slotMaps = new Map();\n        /** Temporary locals, per function. */\n        this.tempMaps = new Map();\n        /** Exports (with managed operands) map. */\n        this.exportMap = new Map();\n        this.hasStackCheckFunction = false;\n        /** Slot offset accounting for nested calls. */\n        this.callSlotOffset = 0;\n        /** Slot offset stack in nested calls. */\n        this.callSlotStack = new Array();\n        this.compiler = compiler;\n    }\n    /** Compiler options. */\n    get options() { return this.compiler.options; }\n    /** Target pointer type. */\n    get ptrType() { return this.options.nativeSizeType; }\n    /** Target pointer size. */\n    get ptrSize() { return this.ptrType == module_1.NativeType.I64 ? 8 : 4; }\n    /** Target pointer addition operation. */\n    get ptrBinaryAdd() { return this.ptrType == module_1.NativeType.I64 ? module_1.BinaryOp.AddI64 : module_1.BinaryOp.AddI32; }\n    /** Target pointer subtraction operation. */\n    get ptrBinarySub() { return this.ptrType == module_1.NativeType.I64 ? module_1.BinaryOp.SubI64 : module_1.BinaryOp.SubI32; }\n    /** Gets a constant with the specified value of the target pointer type. */\n    ptrConst(value) {\n        return this.ptrType == module_1.NativeType.I64\n            ? this.module.i64(value)\n            : this.module.i32(value);\n    }\n    /** Notes the presence of a slot for the specified (imaginary) local, returning the slot index. */\n    noteSlot(func, localIndex) {\n        let slotMap;\n        if (this.slotMaps.has(func)) {\n            slotMap = changetype(this.slotMaps.get(func));\n            if (slotMap.has(localIndex)) {\n                return changetype(slotMap.get(localIndex));\n            }\n        }\n        else {\n            slotMap = new Map();\n            this.slotMaps.set(func, slotMap);\n        }\n        let slotIndex = slotMap.size;\n        slotMap.set(localIndex, slotIndex);\n        return slotIndex;\n    }\n    /** Notes the presence of an exported function taking managed operands. */\n    noteExport(name, managedOperandIndices) {\n        if (!managedOperandIndices.length)\n            return;\n        this.exportMap.set(name, managedOperandIndices);\n    }\n    /** Gets a shared temporary local of the given type in the specified functions. */\n    getSharedTemp(func, type) {\n        let tempMap;\n        if (this.tempMaps.has(func)) {\n            tempMap = changetype(this.tempMaps.get(func));\n            if (tempMap.has(type)) {\n                return changetype(tempMap.get(type));\n            }\n        }\n        else {\n            tempMap = new Map();\n            this.tempMaps.set(func, tempMap);\n        }\n        let numLocals = binaryen_1._BinaryenFunctionGetNumLocals(func);\n        let localIndex = numLocals + tempMap.size;\n        tempMap.set(type, localIndex);\n        return localIndex;\n    }\n    /** Makes an expression modifying the stack pointer by the given offset. */\n    makeStackOffset(offset) {\n        assert(offset != 0);\n        var module = this.module;\n        var expr = module.global_set(builtins_1.BuiltinNames.stack_pointer, module.binary(offset >= 0 ? this.ptrBinaryAdd : this.ptrBinarySub, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), this.ptrConst(abs(offset))));\n        if (offset > 0)\n            return expr;\n        return module.block(null, [\n            expr,\n            this.makeStackCheck()\n        ], module_1.NativeType.None);\n    }\n    /** Makes a sequence of expressions zeroing the stack frame. */\n    makeStackFill(frameSize, stmts) {\n        assert(frameSize > 0);\n        var module = this.module;\n        if (this.options.hasFeature(8 /* BULK_MEMORY */) && frameSize > 16) {\n            stmts.push(module.memory_fill(module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.i32(0), // TODO: Wasm64 also i32?\n            this.ptrConst(frameSize)));\n        }\n        else {\n            let remain = frameSize;\n            while (remain >= 8) {\n                // store<i64>(__stack_pointer, 0, frameSize - remain)\n                stmts.push(module.store(8, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.i64(0), module_1.NativeType.I64, frameSize - remain));\n                remain -= 8;\n            }\n            if (remain) {\n                assert(remain == 4);\n                // store<i32>(__stack_pointer, 0, frameSize - remain)\n                stmts.push(module.store(4, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.i32(0), module_1.NativeType.I32, frameSize - remain));\n            }\n        }\n    }\n    /** Makes a check that the current stack pointer is valid. */\n    makeStackCheck() {\n        var module = this.module;\n        if (!this.hasStackCheckFunction) {\n            this.hasStackCheckFunction = true;\n            module.addFunction(\"~stack_check\", module_1.NativeType.None, module_1.NativeType.None, null, module.if(module.binary(module_1.BinaryOp.LtI32, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.global_get(builtins_1.BuiltinNames.data_end, this.ptrType)), this.compiler.makeStaticAbort(this.compiler.ensureStaticString(\"stack overflow\"), this.compiler.program.nativeSource)));\n        }\n        return module.call(\"~stack_check\", null, module_1.NativeType.None);\n    }\n    updateCallOperands(operands) {\n        var module = this.module;\n        var numSlots = 0;\n        for (let i = 0, k = operands.length; i < k; ++i) {\n            let operand = operands[i];\n            let match = matchTostack(module, operand);\n            if (!match)\n                continue;\n            if (module_1.isConstZero(match)) {\n                operands[i] = match;\n                continue;\n            }\n            let currentFunction = this.currentFunction;\n            let numLocals = binaryen_1._BinaryenFunctionGetNumLocals(currentFunction);\n            let slotIndex = this.noteSlot(currentFunction, numLocals + this.callSlotOffset + i);\n            let temp = this.getSharedTemp(currentFunction, this.ptrType);\n            let stmts = new Array();\n            // t = value\n            stmts.push(module.local_set(temp, match, false));\n            // store<usize>(__stack_pointer, t, slotIndex * ptrSize)\n            stmts.push(module.store(this.ptrSize, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.local_get(temp, this.ptrType), this.ptrType, slotIndex * this.ptrSize));\n            // -> t\n            stmts.push(module.local_get(temp, this.ptrType));\n            operands[i] = module.block(null, stmts, this.ptrType);\n            ++numSlots;\n        }\n        return numSlots;\n    }\n    /** @override */\n    visitCallPre(call) {\n        var numOperands = binaryen_1._BinaryenCallGetNumOperands(call);\n        var operands = new Array(numOperands);\n        for (let i = 0; i < numOperands; ++i) {\n            operands[i] = binaryen_1._BinaryenCallGetOperandAt(call, i);\n        }\n        let numSlots = this.updateCallOperands(operands);\n        if (numSlots) {\n            for (let i = 0, k = operands.length; i < k; ++i) {\n                binaryen_1._BinaryenCallSetOperandAt(call, i, operands[i]);\n            }\n            // Reserve these slots for us so nested calls use their own\n            this.callSlotOffset += numSlots;\n        }\n        this.callSlotStack.push(numSlots);\n    }\n    /** @override */\n    visitCall(call) {\n        let numSlots = this.callSlotStack.pop();\n        if (numSlots)\n            this.callSlotOffset -= numSlots;\n    }\n    /** @override */\n    visitCallIndirectPre(callIndirect) {\n        let numOperands = binaryen_1._BinaryenCallIndirectGetNumOperands(callIndirect);\n        let operands = new Array(numOperands);\n        for (let i = 0; i < numOperands; ++i) {\n            operands[i] = binaryen_1._BinaryenCallIndirectGetOperandAt(callIndirect, i);\n        }\n        let numSlots = this.updateCallOperands(operands);\n        if (numSlots) {\n            for (let i = 0, k = operands.length; i < k; ++i) {\n                binaryen_1._BinaryenCallIndirectSetOperandAt(callIndirect, i, operands[i]);\n            }\n            // Reserve these slots for us so nested calls use their own\n            this.callSlotOffset += numSlots;\n        }\n        this.callSlotStack.push(numSlots);\n    }\n    /** @override */\n    visitCallIndirect(callIndirect) {\n        let numSlots = this.callSlotStack.pop();\n        if (numSlots)\n            this.callSlotOffset -= numSlots;\n    }\n    /** @override */\n    visitLocalSet(localSet) {\n        let value = binaryen_1._BinaryenLocalSetGetValue(localSet);\n        let match = matchTostack(this.module, value);\n        if (!match)\n            return;\n        if (module_1.isConstZero(match)) {\n            binaryen_1._BinaryenLocalSetSetValue(localSet, match);\n            return;\n        }\n        var module = this.module;\n        let index = binaryen_1._BinaryenLocalSetGetIndex(localSet);\n        let slotIndex = this.noteSlot(this.currentFunction, index);\n        let stmts = new Array();\n        // store<usize>(__stack_pointer, local = match, slotIndex * ptrSize)\n        stmts.push(module.store(this.ptrSize, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.local_tee(index, match, false), this.ptrType, slotIndex * this.ptrSize));\n        if (binaryen_1._BinaryenLocalSetIsTee(localSet)) {\n            // -> local\n            stmts.push(module.local_get(index, this.ptrType));\n            this.replaceCurrent(module.flatten(stmts, this.ptrType));\n        }\n        else {\n            this.replaceCurrent(module.flatten(stmts, module_1.NativeType.None));\n        }\n    }\n    /** Updates a function with additional locals etc. */\n    updateFunction(funcRef) {\n        let name = binaryen_1._BinaryenFunctionGetName(funcRef);\n        let params = binaryen_1._BinaryenFunctionGetParams(funcRef);\n        let results = binaryen_1._BinaryenFunctionGetResults(funcRef);\n        let body = assert(binaryen_1._BinaryenFunctionGetBody(funcRef));\n        let numVars = binaryen_1._BinaryenFunctionGetNumVars(funcRef);\n        let vars = new Array();\n        for (let i = 0; i < numVars; ++i) {\n            vars[i] = binaryen_1._BinaryenFunctionGetVar(funcRef, i);\n        }\n        let tempMaps = this.tempMaps;\n        if (tempMaps.has(funcRef)) {\n            let tempMap = changetype(tempMaps.get(funcRef));\n            for (let _keys = Map_keys(tempMap), i = 0, k = _keys.length; i < k; ++i) {\n                vars.push(_keys[i]);\n            }\n        }\n        let moduleRef = this.module.ref;\n        binaryen_1._BinaryenRemoveFunction(moduleRef, name);\n        let cArr = module_1.allocPtrArray(vars);\n        binaryen_1._BinaryenAddFunction(moduleRef, name, params, results, cArr, vars.length, body);\n        binaryen_1._free(cArr);\n    }\n    /** Updates a function export taking managed arguments. */\n    updateExport(exportRef, managedOperandIndices) {\n        var module = this.module;\n        var moduleRef = module.ref;\n        assert(binaryen_1._BinaryenExportGetKind(exportRef) == module_1.ExternalKind.Function);\n        var internalNameRef = binaryen_1._BinaryenExportGetValue(exportRef);\n        var internalName = module.readStringCached(internalNameRef);\n        var externalNameRef = binaryen_1._BinaryenExportGetName(exportRef);\n        var funcRef = binaryen_1._BinaryenGetFunction(moduleRef, internalNameRef);\n        var params = binaryen_1._BinaryenFunctionGetParams(funcRef);\n        var paramTypes = module_1.expandType(params);\n        var numParams = paramTypes.length;\n        var results = binaryen_1._BinaryenFunctionGetResults(funcRef);\n        var numLocals = numParams;\n        var vars = new Array();\n        var numSlots = assert(managedOperandIndices.length);\n        var frameSize = numSlots * this.ptrSize;\n        var wrapperName = \"export:\" + internalName;\n        var wrapperNameRef = module.allocStringCached(wrapperName);\n        if (binaryen_1._BinaryenGetFunction(moduleRef, wrapperNameRef) == 0) {\n            let stmts = new Array();\n            // __stack_pointer -= frameSize\n            stmts.push(this.makeStackOffset(-frameSize));\n            for (let slotIndex = 0; slotIndex < numSlots; ++slotIndex) {\n                // store<usize>(__stack_pointer, $local, slotIndex * ptrSize)\n                stmts.push(module.store(this.ptrSize, module.global_get(builtins_1.BuiltinNames.stack_pointer, this.ptrType), module.local_get(managedOperandIndices[slotIndex], this.ptrType), this.ptrType, slotIndex * this.ptrSize));\n            }\n            let forwardedOperands = new Array(numParams);\n            for (let i = 0; i < numParams; ++i) {\n                forwardedOperands[i] = module.local_get(i, paramTypes[i]);\n            }\n            if (results != module_1.NativeType.None) {\n                let tempIndex = numLocals++;\n                vars.push(results);\n                // t = original(...)\n                stmts.push(module.local_set(tempIndex, module.call(internalName, forwardedOperands, results), false // internal\n                ));\n                // __stack_pointer += frameSize\n                stmts.push(this.makeStackOffset(+frameSize));\n                // -> t\n                stmts.push(module.local_get(tempIndex, results));\n            }\n            else {\n                // original(...)\n                stmts.push(module.call(internalName, forwardedOperands, results));\n                // __stack_pointer += frameSize\n                stmts.push(this.makeStackOffset(+frameSize));\n            }\n            let cArr = module_1.allocPtrArray(vars);\n            binaryen_1._BinaryenAddFunction(moduleRef, wrapperNameRef, params, results, cArr, vars.length, module.block(null, stmts, results));\n            binaryen_1._free(cArr);\n        }\n        binaryen_1._BinaryenRemoveExport(moduleRef, externalNameRef);\n        binaryen_1._BinaryenAddFunctionExport(moduleRef, wrapperNameRef, externalNameRef);\n    }\n    /** @override */\n    walkModule() {\n        // Run the pass normally\n        super.walkModule();\n        // Instrument returns in functions utilizing stack slots\n        var module = this.module;\n        var instrumentReturns = new InstrumentReturns(this);\n        for (let _keys = Map_keys(this.slotMaps), i = 0, k = _keys.length; i < k; ++i) {\n            let func = _keys[i];\n            let slotMap = changetype(this.slotMaps.get(func));\n            let frameSize = slotMap.size * this.ptrSize;\n            // Instrument function returns\n            instrumentReturns.frameSize = frameSize;\n            instrumentReturns.walkFunction(func);\n            // Instrument function entry\n            let stmts = new Array();\n            // __stack_pointer -= frameSize\n            stmts.push(this.makeStackOffset(-frameSize));\n            // memory.fill(__stack_pointer, 0, frameSize)\n            this.makeStackFill(frameSize, stmts);\n            // Handle implicit return\n            let body = binaryen_1._BinaryenFunctionGetBody(func);\n            let bodyType = binaryen_1._BinaryenExpressionGetType(body);\n            if (bodyType == module_1.NativeType.Unreachable) {\n                // body\n                stmts.push(body);\n            }\n            else if (bodyType == module_1.NativeType.None) {\n                // body\n                stmts.push(body);\n                // __stack_pointer += frameSize\n                stmts.push(this.makeStackOffset(+frameSize));\n            }\n            else {\n                let temp = this.getSharedTemp(func, bodyType);\n                // t = body\n                stmts.push(module.local_set(temp, body, false));\n                // __stack_pointer += frameSize\n                stmts.push(this.makeStackOffset(+frameSize));\n                // -> t\n                stmts.push(module.local_get(temp, bodyType));\n            }\n            binaryen_1._BinaryenFunctionSetBody(func, module.flatten(stmts, bodyType));\n        }\n        // Update functions we added more locals to\n        // TODO: _BinaryenFunctionAddVar ?\n        for (let _keys = Map_keys(this.tempMaps), i = 0, k = _keys.length; i < k; ++i) {\n            this.updateFunction(_keys[i]);\n        }\n        // Update exports taking managed arguments\n        var exportMap = this.exportMap;\n        for (let _keys = Map_keys(exportMap), i = 0, k = _keys.length; i < k; ++i) {\n            let exportName = _keys[i];\n            let exportRef = binaryen_1._BinaryenGetExport(module.ref, module.allocStringCached(exportName));\n            let managedOperandIndices = changetype(exportMap.get(exportName));\n            this.updateExport(exportRef, managedOperandIndices);\n        }\n    }\n}\nexports.ShadowStackPass = ShadowStackPass;\n/** Companion pass instrumenting `return` statements to restore the stack frame. */\nclass InstrumentReturns extends pass_1.Pass {\n    constructor(shadowStack) {\n        super(shadowStack.module);\n        /** Frame size of the current function being processed. */\n        this.frameSize = 0;\n        this.parentPass = shadowStack;\n    }\n    /** @override */\n    visitReturn(ret) {\n        assert(this.frameSize);\n        var module = this.module;\n        var value = binaryen_1._BinaryenReturnGetValue(ret);\n        var stmts = new Array();\n        if (value) {\n            let returnType = binaryen_1._BinaryenExpressionGetType(value);\n            let temp = this.parentPass.getSharedTemp(this.currentFunction, returnType);\n            // t = value\n            stmts.push(module.local_set(temp, value, false));\n            // __stack_pointer += frameSize\n            stmts.push(this.parentPass.makeStackOffset(+this.frameSize));\n            // return t\n            binaryen_1._BinaryenReturnSetValue(ret, module.local_get(temp, returnType));\n        }\n        else {\n            // __stack_pointer += frameSize\n            stmts.push(this.parentPass.makeStackOffset(+this.frameSize));\n            // return\n        }\n        stmts.push(ret);\n        this.replaceCurrent(module.flatten(stmts, module_1.NativeType.Unreachable));\n    }\n}\n\n\n/***/ }),\n\n/***/ 974:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getDefaultParameterName = exports.mangleInternalName = exports.Interface = exports.InterfacePrototype = exports.Class = exports.ClassPrototype = exports.IndexSignature = exports.Property = exports.PropertyPrototype = exports.Field = exports.FieldPrototype = exports.Function = exports.FunctionPrototype = exports.Local = exports.Parameter = exports.Global = exports.EnumValue = exports.VariableLikeElement = exports.ConstantValueKind = exports.Enum = exports.Namespace = exports.TypeDefinition = exports.File = exports.TypedElement = exports.isTypedElement = exports.DeclaredElement = exports.isDeclaredElement = exports.Element = exports.DecoratorFlags = exports.ElementKind = exports.Program = exports.OperatorKind = void 0;\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\nconst common_1 = __webpack_require__(200);\nconst diagnostics_1 = __webpack_require__(256);\nconst types_1 = __webpack_require__(699);\nconst tokenizer_1 = __webpack_require__(411);\nconst ast_1 = __webpack_require__(60);\nconst util_1 = __webpack_require__(910);\nconst resolver_1 = __webpack_require__(742);\nconst flow_1 = __webpack_require__(154);\nconst parser_1 = __webpack_require__(215);\nconst builtins_1 = __webpack_require__(346);\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n    constructor(\n    /** File being imported into. */\n    localFile, \n    /** Identifier within the local file. */\n    localIdentifier, \n    /** Identifier within the other file. Is an `import *` if not set. */\n    foreignIdentifier, \n    /** Path to the other file. */\n    foreignPath, \n    /** Alternative path to the other file. */\n    foreignPathAlt) {\n        this.localFile = localFile;\n        this.localIdentifier = localIdentifier;\n        this.foreignIdentifier = foreignIdentifier;\n        this.foreignPath = foreignPath;\n        this.foreignPathAlt = foreignPathAlt;\n    }\n}\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n    constructor(\n    /** Identifier within the local file. */\n    localIdentifier, \n    /** Identifier within the other file. */\n    foreignIdentifier, \n    /** Path to the other file if a re-export. */\n    foreignPath, \n    /** Alternative path to the other file if a re-export. */\n    foreignPathAlt) {\n        this.localIdentifier = localIdentifier;\n        this.foreignIdentifier = foreignIdentifier;\n        this.foreignPath = foreignPath;\n        this.foreignPathAlt = foreignPathAlt;\n    }\n}\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n    // stored in a map with localFile as the key\n    constructor(\n    /** Path to the other file. */\n    foreignPath, \n    /** Alternative path to the other file. */\n    foreignPathAlt, \n    /** Reference to the path literal for reporting. */\n    pathLiteral) {\n        this.foreignPath = foreignPath;\n        this.foreignPathAlt = foreignPathAlt;\n        this.pathLiteral = pathLiteral;\n    }\n}\n/** Represents the kind of an operator overload. */\nvar OperatorKind;\n(function (OperatorKind) {\n    OperatorKind[OperatorKind[\"INVALID\"] = 0] = \"INVALID\";\n    // indexed access\n    OperatorKind[OperatorKind[\"INDEXED_GET\"] = 1] = \"INDEXED_GET\";\n    OperatorKind[OperatorKind[\"INDEXED_SET\"] = 2] = \"INDEXED_SET\";\n    OperatorKind[OperatorKind[\"UNCHECKED_INDEXED_GET\"] = 3] = \"UNCHECKED_INDEXED_GET\";\n    OperatorKind[OperatorKind[\"UNCHECKED_INDEXED_SET\"] = 4] = \"UNCHECKED_INDEXED_SET\";\n    // binary\n    OperatorKind[OperatorKind[\"ADD\"] = 5] = \"ADD\";\n    OperatorKind[OperatorKind[\"SUB\"] = 6] = \"SUB\";\n    OperatorKind[OperatorKind[\"MUL\"] = 7] = \"MUL\";\n    OperatorKind[OperatorKind[\"DIV\"] = 8] = \"DIV\";\n    OperatorKind[OperatorKind[\"REM\"] = 9] = \"REM\";\n    OperatorKind[OperatorKind[\"POW\"] = 10] = \"POW\";\n    OperatorKind[OperatorKind[\"BITWISE_AND\"] = 11] = \"BITWISE_AND\";\n    OperatorKind[OperatorKind[\"BITWISE_OR\"] = 12] = \"BITWISE_OR\";\n    OperatorKind[OperatorKind[\"BITWISE_XOR\"] = 13] = \"BITWISE_XOR\";\n    OperatorKind[OperatorKind[\"BITWISE_SHL\"] = 14] = \"BITWISE_SHL\";\n    OperatorKind[OperatorKind[\"BITWISE_SHR\"] = 15] = \"BITWISE_SHR\";\n    OperatorKind[OperatorKind[\"BITWISE_SHR_U\"] = 16] = \"BITWISE_SHR_U\";\n    OperatorKind[OperatorKind[\"EQ\"] = 17] = \"EQ\";\n    OperatorKind[OperatorKind[\"NE\"] = 18] = \"NE\";\n    OperatorKind[OperatorKind[\"GT\"] = 19] = \"GT\";\n    OperatorKind[OperatorKind[\"GE\"] = 20] = \"GE\";\n    OperatorKind[OperatorKind[\"LT\"] = 21] = \"LT\";\n    OperatorKind[OperatorKind[\"LE\"] = 22] = \"LE\";\n    // unary prefix\n    OperatorKind[OperatorKind[\"PLUS\"] = 23] = \"PLUS\";\n    OperatorKind[OperatorKind[\"MINUS\"] = 24] = \"MINUS\";\n    OperatorKind[OperatorKind[\"NOT\"] = 25] = \"NOT\";\n    OperatorKind[OperatorKind[\"BITWISE_NOT\"] = 26] = \"BITWISE_NOT\";\n    OperatorKind[OperatorKind[\"PREFIX_INC\"] = 27] = \"PREFIX_INC\";\n    OperatorKind[OperatorKind[\"PREFIX_DEC\"] = 28] = \"PREFIX_DEC\";\n    // unary postfix\n    OperatorKind[OperatorKind[\"POSTFIX_INC\"] = 29] = \"POSTFIX_INC\";\n    OperatorKind[OperatorKind[\"POSTFIX_DEC\"] = 30] = \"POSTFIX_DEC\"; // a--\n    // not overridable:\n    // IDENTITY             // a === b\n    // LOGICAL_AND          // a && b\n    // LOGICAL_OR           // a || b\n})(OperatorKind = exports.OperatorKind || (exports.OperatorKind = {}));\n(function (OperatorKind) {\n    /** Returns the operator kind represented by the specified decorator and string argument. */\n    function fromDecorator(decoratorKind, arg) {\n        assert(arg.length);\n        switch (decoratorKind) {\n            case ast_1.DecoratorKind.OPERATOR:\n            case ast_1.DecoratorKind.OPERATOR_BINARY: {\n                switch (arg.charCodeAt(0)) {\n                    case 91 /* OPENBRACKET */: {\n                        if (arg == \"[]\")\n                            return OperatorKind.INDEXED_GET;\n                        if (arg == \"[]=\")\n                            return OperatorKind.INDEXED_SET;\n                        break;\n                    }\n                    case 123 /* OPENBRACE */: {\n                        if (arg == \"{}\")\n                            return OperatorKind.UNCHECKED_INDEXED_GET;\n                        if (arg == \"{}=\")\n                            return OperatorKind.UNCHECKED_INDEXED_SET;\n                        break;\n                    }\n                    case 43 /* PLUS */: {\n                        if (arg == \"+\")\n                            return OperatorKind.ADD;\n                        break;\n                    }\n                    case 45 /* MINUS */: {\n                        if (arg == \"-\")\n                            return OperatorKind.SUB;\n                        break;\n                    }\n                    case 42 /* ASTERISK */: {\n                        if (arg == \"*\")\n                            return OperatorKind.MUL;\n                        if (arg == \"**\")\n                            return OperatorKind.POW;\n                        break;\n                    }\n                    case 47 /* SLASH */: {\n                        if (arg == \"/\")\n                            return OperatorKind.DIV;\n                        break;\n                    }\n                    case 37 /* PERCENT */: {\n                        if (arg == \"%\")\n                            return OperatorKind.REM;\n                        break;\n                    }\n                    case 38 /* AMPERSAND */: {\n                        if (arg == \"&\")\n                            return OperatorKind.BITWISE_AND;\n                        break;\n                    }\n                    case 124 /* BAR */: {\n                        if (arg == \"|\")\n                            return OperatorKind.BITWISE_OR;\n                        break;\n                    }\n                    case 94 /* CARET */: {\n                        if (arg == \"^\")\n                            return OperatorKind.BITWISE_XOR;\n                        break;\n                    }\n                    case 61 /* EQUALS */: {\n                        if (arg == \"==\")\n                            return OperatorKind.EQ;\n                        break;\n                    }\n                    case 33 /* EXCLAMATION */: {\n                        if (arg == \"!=\")\n                            return OperatorKind.NE;\n                        break;\n                    }\n                    case 62 /* GREATERTHAN */: {\n                        if (arg == \">\")\n                            return OperatorKind.GT;\n                        if (arg == \">=\")\n                            return OperatorKind.GE;\n                        if (arg == \">>\")\n                            return OperatorKind.BITWISE_SHR;\n                        if (arg == \">>>\")\n                            return OperatorKind.BITWISE_SHR_U;\n                        break;\n                    }\n                    case 60 /* LESSTHAN */: {\n                        if (arg == \"<\")\n                            return OperatorKind.LT;\n                        if (arg == \"<=\")\n                            return OperatorKind.LE;\n                        if (arg == \"<<\")\n                            return OperatorKind.BITWISE_SHL;\n                        break;\n                    }\n                }\n                break;\n            }\n            case ast_1.DecoratorKind.OPERATOR_PREFIX: {\n                switch (arg.charCodeAt(0)) {\n                    case 43 /* PLUS */: {\n                        if (arg == \"+\")\n                            return OperatorKind.PLUS;\n                        if (arg == \"++\")\n                            return OperatorKind.PREFIX_INC;\n                        break;\n                    }\n                    case 45 /* MINUS */: {\n                        if (arg == \"-\")\n                            return OperatorKind.MINUS;\n                        if (arg == \"--\")\n                            return OperatorKind.PREFIX_DEC;\n                        break;\n                    }\n                    case 33 /* EXCLAMATION */: {\n                        if (arg == \"!\")\n                            return OperatorKind.NOT;\n                        break;\n                    }\n                    case 126 /* TILDE */: {\n                        if (arg == \"~\")\n                            return OperatorKind.BITWISE_NOT;\n                        break;\n                    }\n                }\n                break;\n            }\n            case ast_1.DecoratorKind.OPERATOR_POSTFIX: {\n                switch (arg.charCodeAt(0)) {\n                    case 43 /* PLUS */: {\n                        if (arg == \"++\")\n                            return OperatorKind.POSTFIX_INC;\n                        break;\n                    }\n                    case 45 /* MINUS */: {\n                        if (arg == \"--\")\n                            return OperatorKind.POSTFIX_DEC;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return OperatorKind.INVALID;\n    }\n    OperatorKind.fromDecorator = fromDecorator;\n    /** Converts a binary operator token to the respective operator kind. */\n    function fromBinaryToken(token) {\n        switch (token) {\n            case tokenizer_1.Token.PLUS:\n            case tokenizer_1.Token.PLUS_EQUALS: return OperatorKind.ADD;\n            case tokenizer_1.Token.MINUS:\n            case tokenizer_1.Token.MINUS_EQUALS: return OperatorKind.SUB;\n            case tokenizer_1.Token.ASTERISK:\n            case tokenizer_1.Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n            case tokenizer_1.Token.SLASH:\n            case tokenizer_1.Token.SLASH_EQUALS: return OperatorKind.DIV;\n            case tokenizer_1.Token.PERCENT:\n            case tokenizer_1.Token.PERCENT_EQUALS: return OperatorKind.REM;\n            case tokenizer_1.Token.ASTERISK_ASTERISK:\n            case tokenizer_1.Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n            case tokenizer_1.Token.AMPERSAND:\n            case tokenizer_1.Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n            case tokenizer_1.Token.BAR:\n            case tokenizer_1.Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n            case tokenizer_1.Token.CARET:\n            case tokenizer_1.Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n            case tokenizer_1.Token.LESSTHAN_LESSTHAN:\n            case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN:\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n            case tokenizer_1.Token.EQUALS_EQUALS: return OperatorKind.EQ;\n            case tokenizer_1.Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n            case tokenizer_1.Token.GREATERTHAN: return OperatorKind.GT;\n            case tokenizer_1.Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n            case tokenizer_1.Token.LESSTHAN: return OperatorKind.LT;\n            case tokenizer_1.Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n        }\n        return OperatorKind.INVALID;\n    }\n    OperatorKind.fromBinaryToken = fromBinaryToken;\n    /** Converts a unary prefix operator token to the respective operator kind. */\n    function fromUnaryPrefixToken(token) {\n        switch (token) {\n            case tokenizer_1.Token.PLUS: return OperatorKind.PLUS;\n            case tokenizer_1.Token.MINUS: return OperatorKind.MINUS;\n            case tokenizer_1.Token.EXCLAMATION: return OperatorKind.NOT;\n            case tokenizer_1.Token.TILDE: return OperatorKind.BITWISE_NOT;\n            case tokenizer_1.Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n            case tokenizer_1.Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n        }\n        return OperatorKind.INVALID;\n    }\n    OperatorKind.fromUnaryPrefixToken = fromUnaryPrefixToken;\n    /** Converts a unary postfix operator token to the respective operator kind. */\n    function fromUnaryPostfixToken(token) {\n        switch (token) {\n            case tokenizer_1.Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n            case tokenizer_1.Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n        }\n        return OperatorKind.INVALID;\n    }\n    OperatorKind.fromUnaryPostfixToken = fromUnaryPostfixToken;\n})(OperatorKind = exports.OperatorKind || (exports.OperatorKind = {}));\n/** Represents an AssemblyScript program. */\nclass Program extends diagnostics_1.DiagnosticEmitter {\n    /** Constructs a new program, optionally inheriting parser diagnostics. */\n    constructor(\n    /** Compiler options. */\n    options, \n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics = null) {\n        super(diagnostics);\n        this.options = options;\n        /** Array of sources. */\n        this.sources = [];\n        /** Diagnostic offset used where successively obtaining the next diagnostic. */\n        this.diagnosticsOffset = 0;\n        /** Next class id. */\n        this.nextClassId = 0;\n        /** Next signature id. */\n        this.nextSignatureId = 0;\n        /** An indicator if the program has been initialized. */\n        this.initialized = false;\n        // Lookup maps\n        /** Files by unique internal name. */\n        this.filesByName = new Map();\n        /** Elements by unique internal name in element space. */\n        this.elementsByName = new Map();\n        /** Elements by declaration. */\n        this.elementsByDeclaration = new Map();\n        /** Element instances by unique internal name. */\n        this.instancesByName = new Map();\n        /** Classes wrapping basic types like `i32`. */\n        this.wrapperClasses = new Map();\n        /** Managed classes contained in the program, by id. */\n        this.managedClasses = new Map();\n        /** A set of unique function signatures contained in the program, by id. */\n        this.uniqueSignatures = new Array(0);\n        this._arrayBufferViewInstance = null;\n        this._arrayBufferInstance = null;\n        this._arrayPrototype = null;\n        this._staticArrayPrototype = null;\n        this._setPrototype = null;\n        this._mapPrototype = null;\n        this._functionPrototype = null;\n        this._int8ArrayPrototype = null;\n        this._int16ArrayPrototype = null;\n        this._int32ArrayPrototype = null;\n        this._int64ArrayPrototype = null;\n        this._uint8ArrayPrototype = null;\n        this._uint8ClampedArrayPrototype = null;\n        this._uint16ArrayPrototype = null;\n        this._uint32ArrayPrototype = null;\n        this._uint64ArrayPrototype = null;\n        this._float32ArrayPrototype = null;\n        this._float64ArrayPrototype = null;\n        this._stringInstance = null;\n        this._allocInstance = null;\n        this._reallocInstance = null;\n        this._freeInstance = null;\n        this._newInstance = null;\n        this._renewInstance = null;\n        this._linkInstance = null;\n        this._collectInstance = null;\n        this._visitInstance = null;\n        this._typeinfoInstance = null;\n        this._instanceofInstance = null;\n        this._newBufferInstance = null;\n        this._newArrayInstance = null;\n        this._BLOCKInstance = null;\n        this._OBJECTInstance = null;\n        // a dummy signature for programmatically generated native functions\n        this.nativeDummySignature = null;\n        var nativeSource = new ast_1.Source(ast_1.SourceKind.LIBRARY_ENTRY, common_1.LIBRARY_SUBST + \".wasm\", \"[native code]\");\n        this.nativeSource = nativeSource;\n        this.parser = new parser_1.Parser(this.diagnostics, this.sources);\n        this.resolver = new resolver_1.Resolver(this);\n        var nativeFile = new File(this, nativeSource);\n        this.nativeFile = nativeFile;\n        this.filesByName.set(nativeFile.internalName, nativeFile);\n    }\n    // Standard library\n    /** Gets the standard `ArrayBufferView` instance. */\n    get arrayBufferViewInstance() {\n        var cached = this._arrayBufferViewInstance;\n        if (!cached)\n            this._arrayBufferViewInstance = cached = this.requireClass(common_1.CommonNames.ArrayBufferView);\n        return cached;\n    }\n    /** Gets the standard `ArrayBuffer` instance. */\n    get arrayBufferInstance() {\n        var cached = this._arrayBufferInstance;\n        if (!cached)\n            this._arrayBufferInstance = cached = this.requireClass(common_1.CommonNames.ArrayBuffer);\n        return cached;\n    }\n    /** Gets the standard `Array` prototype. */\n    get arrayPrototype() {\n        var cached = this._arrayPrototype;\n        if (!cached)\n            this._arrayPrototype = cached = this.require(common_1.CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `StaticArray` prototype. */\n    get staticArrayPrototype() {\n        var cached = this._staticArrayPrototype;\n        if (!cached)\n            this._staticArrayPrototype = cached = this.require(common_1.CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Set` prototype. */\n    get setPrototype() {\n        var cached = this._setPrototype;\n        if (!cached)\n            this._setPrototype = cached = this.require(common_1.CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Map` prototype. */\n    get mapPrototype() {\n        var cached = this._mapPrototype;\n        if (!cached)\n            this._mapPrototype = cached = this.require(common_1.CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Function` prototype. */\n    get functionPrototype() {\n        var cached = this._functionPrototype;\n        if (!cached)\n            this._functionPrototype = cached = this.require(common_1.CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Int8Array` prototype. */\n    get int8ArrayPrototype() {\n        var cached = this._int8ArrayPrototype;\n        if (!cached)\n            this._int8ArrayPrototype = cached = this.require(common_1.CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Int16Array` prototype. */\n    get int16ArrayPrototype() {\n        var cached = this._int16ArrayPrototype;\n        if (!cached)\n            this._int16ArrayPrototype = cached = this.require(common_1.CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Int32Array` prototype. */\n    get int32ArrayPrototype() {\n        var cached = this._int32ArrayPrototype;\n        if (!cached)\n            this._int32ArrayPrototype = cached = this.require(common_1.CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Int64Array` prototype. */\n    get int64ArrayPrototype() {\n        var cached = this._int64ArrayPrototype;\n        if (!cached)\n            this._int64ArrayPrototype = cached = this.require(common_1.CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Uint8Array` prototype. */\n    get uint8ArrayPrototype() {\n        var cached = this._uint8ArrayPrototype;\n        if (!cached)\n            this._uint8ArrayPrototype = cached = this.require(common_1.CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Uint8ClampedArray` prototype. */\n    get uint8ClampedArrayPrototype() {\n        var cached = this._uint8ClampedArrayPrototype;\n        if (!cached)\n            this._uint8ClampedArrayPrototype = cached = this.require(common_1.CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Uint16Array` prototype. */\n    get uint16ArrayPrototype() {\n        var cached = this._uint16ArrayPrototype;\n        if (!cached)\n            this._uint16ArrayPrototype = cached = this.require(common_1.CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Uint32Array` prototype. */\n    get uint32ArrayPrototype() {\n        var cached = this._uint32ArrayPrototype;\n        if (!cached)\n            this._uint32ArrayPrototype = cached = this.require(common_1.CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Uint64Array` prototype. */\n    get uint64ArrayPrototype() {\n        var cached = this._uint64ArrayPrototype;\n        if (!cached)\n            this._uint64ArrayPrototype = cached = this.require(common_1.CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Float32Array` prototype. */\n    get float32ArrayPrototype() {\n        var cached = this._float32ArrayPrototype;\n        if (!cached)\n            this._float32ArrayPrototype = cached = this.require(common_1.CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `Float64Array` prototype. */\n    get float64ArrayPrototype() {\n        var cached = this._float64ArrayPrototype;\n        if (!cached)\n            this._float64ArrayPrototype = cached = this.require(common_1.CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n        return cached;\n    }\n    /** Gets the standard `String` instance. */\n    get stringInstance() {\n        var cached = this._stringInstance;\n        if (!cached)\n            this._stringInstance = cached = this.requireClass(common_1.CommonNames.String);\n        return cached;\n    }\n    /** Gets the standard `abort` instance, if not explicitly disabled. */\n    get abortInstance() {\n        var prototype = this.lookup(common_1.CommonNames.abort);\n        if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE)\n            return null;\n        return this.resolver.resolveFunction(prototype, null);\n    }\n    // Runtime interface\n    /** Gets the runtime `__alloc(size: usize): usize` instance. */\n    get allocInstance() {\n        var cached = this._allocInstance;\n        if (!cached)\n            this._allocInstance = cached = this.requireFunction(common_1.CommonNames.alloc);\n        return cached;\n    }\n    /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n    get reallocInstance() {\n        var cached = this._reallocInstance;\n        if (!cached)\n            this._reallocInstance = cached = this.requireFunction(common_1.CommonNames.realloc);\n        return cached;\n    }\n    /** Gets the runtime `__free(ptr: usize): void` instance. */\n    get freeInstance() {\n        var cached = this._freeInstance;\n        if (!cached)\n            this._freeInstance = cached = this.requireFunction(common_1.CommonNames.free);\n        return cached;\n    }\n    /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n    get newInstance() {\n        var cached = this._newInstance;\n        if (!cached)\n            this._newInstance = cached = this.requireFunction(common_1.CommonNames.new_);\n        return cached;\n    }\n    /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n    get renewInstance() {\n        var cached = this._renewInstance;\n        if (!cached)\n            this._renewInstance = cached = this.requireFunction(common_1.CommonNames.renew);\n        return cached;\n    }\n    /** Gets the runtime `__link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void` instance. */\n    get linkInstance() {\n        var cached = this._linkInstance;\n        if (!cached)\n            this._linkInstance = cached = this.requireFunction(common_1.CommonNames.link);\n        return cached;\n    }\n    /** Gets the runtime `__collect(): void` instance. */\n    get collectInstance() {\n        var cached = this._collectInstance;\n        if (!cached)\n            this._collectInstance = cached = this.requireFunction(common_1.CommonNames.collect);\n        return cached;\n    }\n    /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n    get visitInstance() {\n        var cached = this._visitInstance;\n        if (!cached)\n            this._visitInstance = cached = this.requireFunction(common_1.CommonNames.visit);\n        return cached;\n    }\n    /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n    get typeinfoInstance() {\n        var cached = this._typeinfoInstance;\n        if (!cached)\n            this._typeinfoInstance = cached = this.requireFunction(common_1.CommonNames.typeinfo);\n        return cached;\n    }\n    /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n    get instanceofInstance() {\n        var cached = this._instanceofInstance;\n        if (!cached)\n            this._instanceofInstance = cached = this.requireFunction(common_1.CommonNames.instanceof_);\n        return cached;\n    }\n    /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n    get newBufferInstance() {\n        var cached = this._newBufferInstance;\n        if (!cached)\n            this._newBufferInstance = cached = this.requireFunction(common_1.CommonNames.newBuffer);\n        return cached;\n    }\n    /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n    get newArrayInstance() {\n        var cached = this._newArrayInstance;\n        if (!cached)\n            this._newArrayInstance = cached = this.requireFunction(common_1.CommonNames.newArray);\n        return cached;\n    }\n    /** Gets the runtime's internal `BLOCK` instance. */\n    get BLOCKInstance() {\n        var cached = this._BLOCKInstance;\n        if (!cached)\n            this._BLOCKInstance = cached = this.requireClass(common_1.CommonNames.BLOCK);\n        return cached;\n    }\n    /** Gets the runtime's internal `OBJECT` instance. */\n    get OBJECTInstance() {\n        var cached = this._OBJECTInstance;\n        if (!cached)\n            this._OBJECTInstance = cached = this.requireClass(common_1.CommonNames.OBJECT);\n        return cached;\n    }\n    // Utility\n    /** Tests whether this is a WASI program. */\n    get isWasi() {\n        return this.elementsByName.has(common_1.CommonNames.ASC_WASI);\n    }\n    /** Obtains the source matching the specified internal path. */\n    getSource(internalPath) {\n        var sources = this.sources;\n        for (let i = 0; i < sources.length; ++i) {\n            let source = sources[i];\n            if (source.internalPath == internalPath)\n                return source.text;\n        }\n        return null;\n    }\n    /** Gets the overhead of a memory manager block. */\n    get blockOverhead() {\n        // BLOCK | data...\n        //       ^ 16b alignment\n        return this.BLOCKInstance.nextMemoryOffset;\n    }\n    /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n    get objectOverhead() {\n        // OBJECT+align | data...\n        //        └ 0 ┘ ^ 16b alignment\n        return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n    }\n    /** Gets the total overhead of a managed object, incl. block overhead. */\n    get totalOverhead() {\n        // BLOCK | OBJECT+align | data...\n        // └     = TOTAL      ┘ ^ 16b alignment\n        return this.blockOverhead + this.objectOverhead;\n    }\n    /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n    computeBlockStart(currentOffset) {\n        var blockOverhead = this.blockOverhead;\n        return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    }\n    /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n    computeBlockStart64(currentOffset) {\n        var blockOverhead = i64_new(this.blockOverhead);\n        return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n    }\n    /** Computes the size of a memory manager block, excl. block overhead. */\n    computeBlockSize(payloadSize, isManaged) {\n        // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n        if (isManaged)\n            payloadSize += this.objectOverhead;\n        // we know that payload must be aligned, and that block sizes must be chosen\n        // so that blocks are adjacent with the next payload aligned. hence, block\n        // size is payloadSize rounded up to where the next block would start:\n        var blockSize = this.computeBlockStart(payloadSize);\n        // make sure that block size is valid according to TLSF requirements\n        var blockOverhead = this.blockOverhead;\n        var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n        if (blockSize < blockMinsize)\n            blockSize = blockMinsize;\n        const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n        const tagsMask = 3;\n        if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n            throw new Error(\"invalid block size\");\n        }\n        return blockSize;\n    }\n    /** Creates a native variable declaration. */\n    makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name, \n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags = common_1.CommonFlags.NONE) {\n        var range = this.nativeSource.range;\n        return ast_1.Node.createVariableDeclaration(ast_1.Node.createIdentifierExpression(name, range), null, flags, null, null, range);\n    }\n    /** Creates a native type declaration. */\n    makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name, \n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags = common_1.CommonFlags.NONE) {\n        var range = this.nativeSource.range;\n        var identifier = ast_1.Node.createIdentifierExpression(name, range);\n        return ast_1.Node.createTypeDeclaration(identifier, null, flags, null, ast_1.Node.createOmittedType(range), range);\n    }\n    /** Creates a native function declaration. */\n    makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name, \n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags = common_1.CommonFlags.NONE) {\n        var range = this.nativeSource.range;\n        var signature = this.nativeDummySignature;\n        if (!signature) {\n            this.nativeDummySignature = signature = ast_1.Node.createFunctionType([], ast_1.Node.createNamedType(// ^ AST signature doesn't really matter, is overridden anyway\n            ast_1.Node.createSimpleTypeName(common_1.CommonNames.void_, range), null, false, range), null, false, range);\n        }\n        return ast_1.Node.createFunctionDeclaration(ast_1.Node.createIdentifierExpression(name, range), null, flags, null, signature, null, 0 /* NONE */, range);\n    }\n    /** Creates a native namespace declaration. */\n    makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name, \n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags = common_1.CommonFlags.NONE) {\n        var range = this.nativeSource.range;\n        return ast_1.Node.createNamespaceDeclaration(ast_1.Node.createIdentifierExpression(name, range), null, flags, [], range);\n    }\n    /** Creates a native function. */\n    makeNativeFunction(\n    /** The simple name of the function. */\n    name, \n    /** Concrete function signature. */\n    signature, \n    /** Parent element, usually a file, class or namespace. */\n    parent = this.nativeFile, \n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags = common_1.CommonFlags.NONE, \n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        return new Function(name, new FunctionPrototype(name, parent, this.makeNativeFunctionDeclaration(name, flags), decoratorFlags), null, signature);\n    }\n    /** Gets the (possibly merged) program element linked to the specified declaration. */\n    getElementByDeclaration(declaration) {\n        var elementsByDeclaration = this.elementsByDeclaration;\n        return elementsByDeclaration.has(declaration)\n            ? assert(elementsByDeclaration.get(declaration))\n            : null;\n    }\n    /** Initializes the program and its elements prior to compilation. */\n    initialize() {\n        if (this.initialized)\n            return;\n        this.initialized = true;\n        var options = this.options;\n        // register native types\n        this.registerNativeType(common_1.CommonNames.i8, types_1.Type.i8);\n        this.registerNativeType(common_1.CommonNames.i16, types_1.Type.i16);\n        this.registerNativeType(common_1.CommonNames.i32, types_1.Type.i32);\n        this.registerNativeType(common_1.CommonNames.i64, types_1.Type.i64);\n        this.registerNativeType(common_1.CommonNames.isize, options.isizeType);\n        this.registerNativeType(common_1.CommonNames.u8, types_1.Type.u8);\n        this.registerNativeType(common_1.CommonNames.u16, types_1.Type.u16);\n        this.registerNativeType(common_1.CommonNames.u32, types_1.Type.u32);\n        this.registerNativeType(common_1.CommonNames.u64, types_1.Type.u64);\n        this.registerNativeType(common_1.CommonNames.usize, options.usizeType);\n        this.registerNativeType(common_1.CommonNames.bool, types_1.Type.bool);\n        this.registerNativeType(common_1.CommonNames.f32, types_1.Type.f32);\n        this.registerNativeType(common_1.CommonNames.f64, types_1.Type.f64);\n        this.registerNativeType(common_1.CommonNames.void_, types_1.Type.void);\n        this.registerNativeType(common_1.CommonNames.number, types_1.Type.f64); // alias\n        this.registerNativeType(common_1.CommonNames.boolean, types_1.Type.bool); // alias\n        this.nativeFile.add(common_1.CommonNames.native, new TypeDefinition(common_1.CommonNames.native, this.nativeFile, this.makeNativeTypeDeclaration(common_1.CommonNames.native, common_1.CommonFlags.EXPORT | common_1.CommonFlags.GENERIC), DecoratorFlags.BUILTIN));\n        this.nativeFile.add(common_1.CommonNames.indexof, new TypeDefinition(common_1.CommonNames.indexof, this.nativeFile, this.makeNativeTypeDeclaration(common_1.CommonNames.indexof, common_1.CommonFlags.EXPORT | common_1.CommonFlags.GENERIC), DecoratorFlags.BUILTIN));\n        this.nativeFile.add(common_1.CommonNames.valueof, new TypeDefinition(common_1.CommonNames.valueof, this.nativeFile, this.makeNativeTypeDeclaration(common_1.CommonNames.valueof, common_1.CommonFlags.EXPORT | common_1.CommonFlags.GENERIC), DecoratorFlags.BUILTIN));\n        this.nativeFile.add(common_1.CommonNames.returnof, new TypeDefinition(common_1.CommonNames.returnof, this.nativeFile, this.makeNativeTypeDeclaration(common_1.CommonNames.returnof, common_1.CommonFlags.EXPORT | common_1.CommonFlags.GENERIC), DecoratorFlags.BUILTIN));\n        // The following types might not be enabled by compiler options, so the\n        // compiler needs to check this condition whenever such a value is created\n        // respectively stored or loaded.\n        this.registerNativeType(common_1.CommonNames.v128, types_1.Type.v128);\n        this.registerNativeType(common_1.CommonNames.funcref, types_1.Type.funcref);\n        this.registerNativeType(common_1.CommonNames.externref, types_1.Type.externref);\n        this.registerNativeType(common_1.CommonNames.exnref, types_1.Type.exnref);\n        this.registerNativeType(common_1.CommonNames.anyref, types_1.Type.anyref);\n        // register compiler hints\n        this.registerConstantInteger(common_1.CommonNames.ASC_TARGET, types_1.Type.i32, i64_new(options.isWasm64 ? common_1.Target.WASM64 : common_1.Target.WASM32));\n        this.registerConstantInteger(common_1.CommonNames.ASC_NO_ASSERT, types_1.Type.bool, i64_new(options.noAssert ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_MEMORY_BASE, types_1.Type.i32, i64_new(options.memoryBase, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_TABLE_BASE, types_1.Type.i32, i64_new(options.tableBase, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_OPTIMIZE_LEVEL, types_1.Type.i32, i64_new(options.optimizeLevelHint, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_SHRINK_LEVEL, types_1.Type.i32, i64_new(options.shrinkLevelHint, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_LOW_MEMORY_LIMIT, types_1.Type.i32, i64_new(options.lowMemoryLimit, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_EXPORT_RUNTIME, types_1.Type.bool, i64_new(options.exportRuntime ? 1 : 0, 0));\n        // register feature hints\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_SIGN_EXTENSION, types_1.Type.bool, i64_new(options.hasFeature(1 /* SIGN_EXTENSION */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, types_1.Type.bool, i64_new(options.hasFeature(2 /* MUTABLE_GLOBALS */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_NONTRAPPING_F2I, types_1.Type.bool, i64_new(options.hasFeature(4 /* NONTRAPPING_F2I */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_BULK_MEMORY, types_1.Type.bool, i64_new(options.hasFeature(8 /* BULK_MEMORY */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_SIMD, types_1.Type.bool, i64_new(options.hasFeature(16 /* SIMD */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_THREADS, types_1.Type.bool, i64_new(options.hasFeature(32 /* THREADS */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, types_1.Type.bool, i64_new(options.hasFeature(64 /* EXCEPTION_HANDLING */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_TAIL_CALLS, types_1.Type.bool, i64_new(options.hasFeature(128 /* TAIL_CALLS */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_REFERENCE_TYPES, types_1.Type.bool, i64_new(options.hasFeature(256 /* REFERENCE_TYPES */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_MULTI_VALUE, types_1.Type.bool, i64_new(options.hasFeature(512 /* MULTI_VALUE */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_GC, types_1.Type.bool, i64_new(options.hasFeature(1024 /* GC */) ? 1 : 0, 0));\n        this.registerConstantInteger(common_1.CommonNames.ASC_FEATURE_MEMORY64, types_1.Type.bool, i64_new(options.hasFeature(2048 /* MEMORY64 */) ? 1 : 0, 0));\n        // remember deferred elements\n        var queuedImports = new Array();\n        var queuedExports = new Map();\n        var queuedExportsStar = new Map();\n        var queuedExtends = new Array();\n        var queuedImplements = new Array();\n        // initialize relevant declaration-like statements of the entire program\n        for (let i = 0, k = this.sources.length; i < k; ++i) {\n            let source = this.sources[i];\n            let file = new File(this, source);\n            this.filesByName.set(file.internalName, file);\n            let statements = source.statements;\n            for (let j = 0, l = statements.length; j < l; ++j) {\n                let statement = statements[j];\n                switch (statement.kind) {\n                    case ast_1.NodeKind.EXPORT: {\n                        this.initializeExports(statement, file, queuedExports, queuedExportsStar);\n                        break;\n                    }\n                    case ast_1.NodeKind.EXPORTDEFAULT: {\n                        this.initializeExportDefault(statement, file, queuedExtends, queuedImplements);\n                        break;\n                    }\n                    case ast_1.NodeKind.IMPORT: {\n                        this.initializeImports(statement, file, queuedImports, queuedExports);\n                        break;\n                    }\n                    case ast_1.NodeKind.VARIABLE: {\n                        this.initializeVariables(statement, file);\n                        break;\n                    }\n                    case ast_1.NodeKind.CLASSDECLARATION: {\n                        this.initializeClass(statement, file, queuedExtends, queuedImplements);\n                        break;\n                    }\n                    case ast_1.NodeKind.ENUMDECLARATION: {\n                        this.initializeEnum(statement, file);\n                        break;\n                    }\n                    case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                        this.initializeFunction(statement, file);\n                        break;\n                    }\n                    case ast_1.NodeKind.INTERFACEDECLARATION: {\n                        this.initializeInterface(statement, file, queuedExtends);\n                        break;\n                    }\n                    case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                        this.initializeNamespace(statement, file, queuedExtends, queuedImplements);\n                        break;\n                    }\n                    case ast_1.NodeKind.TYPEDECLARATION: {\n                        this.initializeTypeDefinition(statement, file);\n                        break;\n                    }\n                }\n            }\n        }\n        // queued exports * should be linkable now that all files have been processed\n        // TODO: for (let [file, starExports] of queuedExportsStar) {\n        for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n            let file = _keys[i];\n            let starExports = assert(queuedExportsStar.get(file));\n            for (let j = 0, l = starExports.length; j < l; ++j) {\n                let exportStar = unchecked(starExports[j]);\n                let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n                if (!foreignFile) {\n                    this.error(diagnostics_1.DiagnosticCode.File_0_not_found, exportStar.pathLiteral.range, exportStar.pathLiteral.value);\n                    continue;\n                }\n                file.ensureExportStar(foreignFile);\n            }\n        }\n        // queued imports should be resolvable now through traversing exports and queued exports.\n        // note that imports may depend upon imports, so repeat until there's no more progress.\n        do {\n            let i = 0, madeProgress = false;\n            while (i < queuedImports.length) {\n                let queuedImport = queuedImports[i];\n                let localIdentifier = queuedImport.localIdentifier;\n                let foreignIdentifier = queuedImport.foreignIdentifier;\n                if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n                    let element = this.lookupForeign(foreignIdentifier.text, queuedImport.foreignPath, queuedImport.foreignPathAlt, queuedExports);\n                    if (element) {\n                        queuedImport.localFile.add(localIdentifier.text, element, localIdentifier // isImport\n                        );\n                        queuedImports.splice(i, 1);\n                        madeProgress = true;\n                    }\n                    else {\n                        ++i;\n                    }\n                }\n                else { // i.e. import * as bar from \"./bar\"\n                    let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n                    if (foreignFile) {\n                        let localFile = queuedImport.localFile;\n                        let localName = localIdentifier.text;\n                        localFile.add(localName, foreignFile.asAliasNamespace(localName, localFile, localIdentifier), localIdentifier // isImport\n                        );\n                        queuedImports.splice(i, 1);\n                        madeProgress = true;\n                    }\n                    else {\n                        ++i;\n                        assert(false); // already reported by the parser not finding the file\n                    }\n                }\n            }\n            if (!madeProgress) {\n                // report queued imports we were unable to resolve\n                for (let j = 0, l = queuedImports.length; j < l; ++j) {\n                    let queuedImport = queuedImports[j];\n                    let foreignIdentifier = queuedImport.foreignIdentifier;\n                    if (foreignIdentifier) {\n                        this.error(diagnostics_1.DiagnosticCode.Module_0_has_no_exported_member_1, foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text);\n                    }\n                }\n                break;\n            }\n        } while (true);\n        // queued exports should be resolvable now that imports are finalized\n        // TODO: for (let [file, exports] of queuedExports) {\n        for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n            let file = unchecked(_keys[i]);\n            let exports = assert(queuedExports.get(file));\n            // TODO: for (let [exportName, queuedExport] of exports) {\n            for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n                let exportName = unchecked(exportNames[j]);\n                let queuedExport = assert(exports.get(exportName));\n                let localName = queuedExport.localIdentifier.text;\n                let foreignPath = queuedExport.foreignPath;\n                if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n                    let element = this.lookupForeign(localName, foreignPath, assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n                    queuedExports);\n                    if (element) {\n                        file.ensureExport(exportName, element);\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode.Module_0_has_no_exported_member_1, queuedExport.localIdentifier.range, foreignPath, localName);\n                    }\n                }\n                else { // i.e. export { foo [as bar] }\n                    let element = file.lookupInSelf(localName);\n                    if (element) {\n                        file.ensureExport(exportName, element);\n                    }\n                    else {\n                        let globalElement = this.lookup(localName);\n                        if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n                            file.ensureExport(exportName, globalElement);\n                        }\n                        else {\n                            this.error(diagnostics_1.DiagnosticCode.Module_0_has_no_exported_member_1, queuedExport.foreignIdentifier.range, file.internalName, queuedExport.foreignIdentifier.text);\n                        }\n                    }\n                }\n            }\n        }\n        // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n        assert(this.arrayBufferInstance.id == 0);\n        assert(this.stringInstance.id == 1);\n        assert(this.arrayBufferViewInstance.id == 2);\n        // register classes backing basic types\n        this.registerWrapperClass(types_1.Type.i8, common_1.CommonNames.I8);\n        this.registerWrapperClass(types_1.Type.i16, common_1.CommonNames.I16);\n        this.registerWrapperClass(types_1.Type.i32, common_1.CommonNames.I32);\n        this.registerWrapperClass(types_1.Type.i64, common_1.CommonNames.I64);\n        this.registerWrapperClass(options.isizeType, common_1.CommonNames.Isize);\n        this.registerWrapperClass(types_1.Type.u8, common_1.CommonNames.U8);\n        this.registerWrapperClass(types_1.Type.u16, common_1.CommonNames.U16);\n        this.registerWrapperClass(types_1.Type.u32, common_1.CommonNames.U32);\n        this.registerWrapperClass(types_1.Type.u64, common_1.CommonNames.U64);\n        this.registerWrapperClass(options.usizeType, common_1.CommonNames.Usize);\n        this.registerWrapperClass(types_1.Type.bool, common_1.CommonNames.Bool);\n        this.registerWrapperClass(types_1.Type.f32, common_1.CommonNames.F32);\n        this.registerWrapperClass(types_1.Type.f64, common_1.CommonNames.F64);\n        if (options.hasFeature(16 /* SIMD */))\n            this.registerWrapperClass(types_1.Type.v128, common_1.CommonNames.V128);\n        if (options.hasFeature(256 /* REFERENCE_TYPES */)) {\n            this.registerWrapperClass(types_1.Type.funcref, common_1.CommonNames.Funcref);\n            this.registerWrapperClass(types_1.Type.externref, common_1.CommonNames.Externref);\n            if (options.hasFeature(64 /* EXCEPTION_HANDLING */)) {\n                this.registerWrapperClass(types_1.Type.exnref, common_1.CommonNames.Exnref);\n            }\n            if (options.hasFeature(1024 /* GC */)) {\n                this.registerWrapperClass(types_1.Type.anyref, common_1.CommonNames.Anyref);\n            }\n        }\n        // resolve prototypes of extended classes or interfaces\n        var resolver = this.resolver;\n        for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n            let thisPrototype = queuedExtends[i];\n            let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n            let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n            if (!baseElement)\n                continue;\n            if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n                    let basePrototype = baseElement;\n                    if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n                        this.error(diagnostics_1.DiagnosticCode.Class_0_is_final_and_cannot_be_extended, extendsNode.range, basePrototype.identifierNode.text);\n                    }\n                    if (basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n                        thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n                        this.error(diagnostics_1.DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa, tokenizer_1.Range.join(thisPrototype.identifierNode.range, extendsNode.range));\n                    }\n                    thisPrototype.basePrototype = basePrototype;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.A_class_may_only_extend_another_class, extendsNode.range);\n                }\n            }\n            else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n                if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n                    thisPrototype.basePrototype = baseElement;\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.An_interface_can_only_extend_an_interface, extendsNode.range);\n                }\n            }\n        }\n        // resolve prototypes of implemented interfaces\n        for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n            let thisPrototype = queuedImplements[i];\n            let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n            for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n                let implementsNode = implementsNodes[j];\n                let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n                if (!interfaceElement)\n                    continue;\n                if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n                    let interfacePrototype = interfaceElement;\n                    let interfacePrototypes = thisPrototype.interfacePrototypes;\n                    if (!interfacePrototypes)\n                        thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n                    interfacePrototypes.push(interfacePrototype);\n                }\n                else {\n                    this.error(diagnostics_1.DiagnosticCode.A_class_can_only_implement_an_interface, implementsNode.range);\n                }\n            }\n        }\n        // check for virtual overloads in extended classes and implemented interfaces\n        for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n            let thisPrototype = queuedExtends[i];\n            let basePrototype = thisPrototype.basePrototype;\n            if (basePrototype) {\n                this.markVirtuals(thisPrototype, basePrototype);\n            }\n        }\n        for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n            let thisPrototype = queuedImplements[i];\n            let basePrototype = thisPrototype.basePrototype;\n            let interfacePrototypes = thisPrototype.interfacePrototypes;\n            if (basePrototype) {\n                this.markVirtuals(thisPrototype, basePrototype);\n            }\n            if (interfacePrototypes) {\n                for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n                    this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n                }\n            }\n        }\n        // set up global aliases\n        {\n            let globalAliases = options.globalAliases;\n            if (!globalAliases)\n                globalAliases = new Map();\n            let isWasi = this.isWasi;\n            if (!globalAliases.has(common_1.CommonNames.abort)) {\n                globalAliases.set(common_1.CommonNames.abort, isWasi\n                    ? builtins_1.BuiltinNames.wasiAbort\n                    : builtins_1.BuiltinNames.abort);\n            }\n            if (!globalAliases.has(common_1.CommonNames.trace)) {\n                globalAliases.set(common_1.CommonNames.trace, isWasi\n                    ? builtins_1.BuiltinNames.wasiTrace\n                    : builtins_1.BuiltinNames.trace);\n            }\n            if (!globalAliases.has(common_1.CommonNames.seed)) {\n                globalAliases.set(common_1.CommonNames.seed, isWasi\n                    ? builtins_1.BuiltinNames.wasiSeed\n                    : builtins_1.BuiltinNames.seed);\n            }\n            if (!globalAliases.has(common_1.CommonNames.Math)) {\n                globalAliases.set(common_1.CommonNames.Math, common_1.CommonNames.NativeMath);\n            }\n            if (!globalAliases.has(common_1.CommonNames.Mathf)) {\n                globalAliases.set(common_1.CommonNames.Mathf, common_1.CommonNames.NativeMathf);\n            }\n            // TODO: for (let [alias, name] of globalAliases) {\n            for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n                let alias = unchecked(_keys[i]);\n                let name = changetype(globalAliases.get(alias));\n                assert(name != null);\n                if (!name.length) {\n                    this.elementsByName.delete(alias);\n                    continue;\n                }\n                let firstChar = name.charCodeAt(0);\n                if (firstChar >= 48 /* _0 */ && firstChar <= 57 /* _9 */) {\n                    this.registerConstantInteger(alias, types_1.Type.i32, i64_new(parseInt(name, 10)));\n                }\n                else {\n                    let elementsByName = this.elementsByName;\n                    if (elementsByName.has(name)) {\n                        elementsByName.set(alias, assert(elementsByName.get(name)));\n                    }\n                    else {\n                        throw new Error(\"no such global element: \" + name);\n                    }\n                }\n            }\n        }\n        // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n        // TODO: for (let file of this.filesByName.values()) {\n        for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n            let file = unchecked(_values[i]);\n            if (file.source.sourceKind == ast_1.SourceKind.USER_ENTRY) {\n                this.markModuleExports(file);\n            }\n        }\n    }\n    /** Marks virtual members in a base class overloaded in this class. */\n    markVirtuals(thisPrototype, basePrototype) {\n        // TODO: make this work with interfaaces as well\n        var thisInstanceMembers = thisPrototype.instanceMembers;\n        if (thisInstanceMembers) {\n            do {\n                let baseInstanceMembers = basePrototype.instanceMembers;\n                if (baseInstanceMembers) {\n                    for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n                        let thisMember = _values[j];\n                        if (!thisMember.isAny(common_1.CommonFlags.CONSTRUCTOR | common_1.CommonFlags.PRIVATE) &&\n                            baseInstanceMembers.has(thisMember.name)) {\n                            let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n                            if (thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                                let thisMethod = thisMember;\n                                let baseMethod = baseMember;\n                                if (!thisMethod.visibilityEquals(baseMethod)) {\n                                    this.errorRelated(diagnostics_1.DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected, thisMethod.identifierNode.range, baseMethod.identifierNode.range);\n                                }\n                                baseMember.set(common_1.CommonFlags.VIRTUAL);\n                                let overloads = baseMethod.overloads;\n                                if (!overloads)\n                                    baseMethod.overloads = overloads = new Set();\n                                overloads.add(thisMember);\n                                let baseMethodInstances = baseMethod.instances;\n                                if (baseMethodInstances) {\n                                    for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                                        let baseMethodInstance = _values[a];\n                                        baseMethodInstance.set(common_1.CommonFlags.VIRTUAL);\n                                    }\n                                }\n                            }\n                            else if (thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE) {\n                                let thisProperty = thisMember;\n                                let baseProperty = baseMember;\n                                if (!thisProperty.visibilityEquals(baseProperty)) {\n                                    this.errorRelated(diagnostics_1.DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected, thisProperty.identifierNode.range, baseProperty.identifierNode.range);\n                                }\n                                baseProperty.set(common_1.CommonFlags.VIRTUAL);\n                                let baseGetter = baseProperty.getterPrototype;\n                                if (baseGetter) {\n                                    baseGetter.set(common_1.CommonFlags.VIRTUAL);\n                                    let thisGetter = thisProperty.getterPrototype;\n                                    if (thisGetter) {\n                                        let overloads = baseGetter.overloads;\n                                        if (!overloads)\n                                            baseGetter.overloads = overloads = new Set();\n                                        overloads.add(thisGetter);\n                                    }\n                                    let baseGetterInstances = baseGetter.instances;\n                                    if (baseGetterInstances) {\n                                        for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                                            let baseGetterInstance = _values[a];\n                                            baseGetterInstance.set(common_1.CommonFlags.VIRTUAL);\n                                        }\n                                    }\n                                }\n                                let baseSetter = baseProperty.setterPrototype;\n                                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                                    baseSetter.set(common_1.CommonFlags.VIRTUAL);\n                                    let thisSetter = thisProperty.setterPrototype;\n                                    if (thisSetter) {\n                                        let overloads = baseSetter.overloads;\n                                        if (!overloads)\n                                            baseSetter.overloads = overloads = new Set();\n                                        overloads.add(thisSetter);\n                                    }\n                                    let baseSetterInstances = baseSetter.instances;\n                                    if (baseSetterInstances) {\n                                        for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                                            let baseSetterInstance = _values[a];\n                                            baseSetterInstance.set(common_1.CommonFlags.VIRTUAL);\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, thisMember.identifierNode.range, baseMember.identifierNode.range);\n                            }\n                        }\n                    }\n                }\n                let nextPrototype = basePrototype.basePrototype;\n                if (!nextPrototype)\n                    break;\n                basePrototype = nextPrototype;\n            } while (true);\n        }\n    }\n    /** Looks up the element of the specified name in the global scope. */\n    lookup(name) {\n        var elements = this.elementsByName;\n        if (elements.has(name))\n            return assert(elements.get(name));\n        return null;\n    }\n    /** Requires that a global library element of the specified kind is present and returns it. */\n    require(name, kind) {\n        var element = this.lookup(name);\n        if (!element)\n            throw new Error(\"Missing standard library component: \" + name);\n        if (element.kind != kind)\n            throw Error(\"Invalid standard library component kind: \" + name);\n        return element;\n    }\n    /** Requires that a global variable is present and returns it. */\n    requireGlobal(name) {\n        return this.require(name, ElementKind.GLOBAL);\n    }\n    /** Requires that a non-generic global class is present and returns it. */\n    requireClass(name) {\n        var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n        var resolved = this.resolver.resolveClass(prototype, null);\n        if (!resolved)\n            throw new Error(\"Invalid standard library class: \" + name);\n        return resolved;\n    }\n    /** Requires that a global function is present and returns it. */\n    requireFunction(name, typeArguments = null) {\n        var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n        var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n        if (!resolved)\n            throw new Error(\"Invalid standard library function: \" + name);\n        return resolved;\n    }\n    /** Marks all exports of the specified file as module exports. */\n    markModuleExports(file) {\n        var exports = file.exports;\n        if (exports) {\n            // TODO: for (let element of exports.values()) {\n            for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n                let element = unchecked(_values[j]);\n                this.markModuleExport(element);\n            }\n        }\n        var exportsStar = file.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                this.markModuleExports(exportsStar[i]);\n            }\n        }\n    }\n    /** Marks an element and its children as a module export. */\n    markModuleExport(element) {\n        element.set(common_1.CommonFlags.MODULE_EXPORT);\n        switch (element.kind) {\n            case ElementKind.CLASS_PROTOTYPE: {\n                let instanceMembers = element.instanceMembers;\n                if (instanceMembers) {\n                    // TODO: for (let member of instanceMembers.values()) {\n                    for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n                        let member = unchecked(_values[i]);\n                        this.markModuleExport(member);\n                    }\n                }\n                break;\n            }\n            case ElementKind.PROPERTY_PROTOTYPE: {\n                let propertyPrototype = element;\n                let getterPrototype = propertyPrototype.getterPrototype;\n                if (getterPrototype)\n                    this.markModuleExport(getterPrototype);\n                let setterPrototype = propertyPrototype.setterPrototype;\n                if (setterPrototype)\n                    this.markModuleExport(setterPrototype);\n                break;\n            }\n            case ElementKind.PROPERTY:\n            case ElementKind.FUNCTION:\n            case ElementKind.FIELD:\n            case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n        }\n        var staticMembers = element.members;\n        if (staticMembers) {\n            // TODO: for (let member of staticMembers.values()) {\n            for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                this.markModuleExport(member);\n            }\n        }\n    }\n    /** Registers a native type with the program. */\n    registerNativeType(name, type) {\n        var element = new TypeDefinition(name, this.nativeFile, this.makeNativeTypeDeclaration(name, common_1.CommonFlags.EXPORT), DecoratorFlags.BUILTIN);\n        element.setType(type);\n        this.nativeFile.add(name, element);\n    }\n    /** Registers the wrapper class of a non-class type. */\n    registerWrapperClass(type, className) {\n        var wrapperClasses = this.wrapperClasses;\n        assert(!type.isInternalReference && !wrapperClasses.has(type));\n        var element = assert(this.lookup(className));\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        var classElement = assert(this.resolver.resolveClass(element, null));\n        classElement.wrappedType = type;\n        wrapperClasses.set(type, classElement);\n    }\n    /** Registers a constant integer value within the global scope. */\n    registerConstantInteger(name, type, value) {\n        assert(type.isIntegerInclReference);\n        var global = new Global(name, this.nativeFile, DecoratorFlags.NONE, this.makeNativeVariableDeclaration(name, common_1.CommonFlags.CONST | common_1.CommonFlags.EXPORT));\n        global.setConstantIntegerValue(value, type);\n        this.nativeFile.add(name, global);\n    }\n    /** Registers a constant float value within the global scope. */\n    registerConstantFloat(name, type, value) {\n        assert(type.isFloatValue);\n        var global = new Global(name, this.nativeFile, DecoratorFlags.NONE, this.makeNativeVariableDeclaration(name, common_1.CommonFlags.CONST | common_1.CommonFlags.EXPORT));\n        global.setConstantFloatValue(value, type);\n        this.nativeFile.add(name, global);\n    }\n    /** Ensures that the given global element exists. Attempts to merge duplicates. */\n    ensureGlobal(name, element) {\n        var elementsByName = this.elementsByName;\n        if (elementsByName.has(name)) {\n            let existing = assert(elementsByName.get(name));\n            // NOTE: this is effectively only performed when merging native types with\n            // their respective namespaces in std/builtins, but can also trigger when a\n            // user has multiple global elements of the same name in different files,\n            // which might result in unexpected shared symbols accross files. considering\n            // this a wonky feature for now that we might want to revisit later.\n            if (existing !== element) {\n                let merged = tryMerge(existing, element);\n                if (!merged) {\n                    if (isDeclaredElement(existing.kind)) {\n                        this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, element.identifierNode.range, existing.declaration.name.range, name);\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, element.identifierNode.range, name);\n                    }\n                    return element;\n                }\n                element = merged;\n            }\n        }\n        elementsByName.set(name, element);\n        return element;\n    }\n    /** Tries to locate a foreign file given its normalized path. */\n    lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath, \n    /** Alternative normalized path to the other file. */\n    foreignPathAlt) {\n        var filesByName = this.filesByName;\n        return filesByName.has(foreignPath)\n            ? assert(filesByName.get(foreignPath))\n            : filesByName.has(foreignPathAlt)\n                ? assert(filesByName.get(foreignPathAlt))\n                : null;\n    }\n    /** Tries to locate a foreign element by traversing exports and queued exports. */\n    lookupForeign(\n    /** Identifier within the other file. */\n    foreignName, \n    /** Normalized path to the other file. */\n    foreignPath, \n    /** Alternative normalized path to the other file. */\n    foreignPathAlt, \n    /** So far queued exports. */\n    queuedExports) {\n        do {\n            let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n            if (!foreignFile)\n                return null; // no such file\n            // search already resolved exports\n            let element = foreignFile.lookupExport(foreignName);\n            if (element)\n                return element;\n            // otherwise traverse queued exports\n            if (queuedExports.has(foreignFile)) {\n                let fileQueuedExports = assert(queuedExports.get(foreignFile));\n                if (fileQueuedExports.has(foreignName)) {\n                    let queuedExport = assert(fileQueuedExports.get(foreignName));\n                    let queuedExportForeignPath = queuedExport.foreignPath;\n                    if (queuedExportForeignPath) { // imported from another file\n                        foreignName = queuedExport.localIdentifier.text;\n                        foreignPath = queuedExportForeignPath;\n                        foreignPathAlt = assert(queuedExport.foreignPathAlt);\n                        continue;\n                    }\n                    else { // local element of this file\n                        element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n                        if (element)\n                            return element;\n                    }\n                }\n            }\n            break;\n        } while (true);\n        return null;\n    }\n    /** Validates that only supported decorators are present. */\n    checkDecorators(\n    /** Decorators present on an element. */\n    decorators, \n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags) {\n        var flags = DecoratorFlags.NONE;\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                let decorator = decorators[i];\n                let kind = ast_1.DecoratorKind.fromNode(decorator.name);\n                let flag = DecoratorFlags.fromKind(kind);\n                if (flag) {\n                    if (flag == DecoratorFlags.BUILTIN) {\n                        if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n                            this.error(diagnostics_1.DiagnosticCode.Decorator_0_is_not_valid_here, decorator.range, decorator.name.range.toString());\n                        }\n                        else {\n                            flags |= flag;\n                        }\n                    }\n                    else if (!(acceptedFlags & flag)) {\n                        this.error(diagnostics_1.DiagnosticCode.Decorator_0_is_not_valid_here, decorator.range, decorator.name.range.toString());\n                    }\n                    else if (flags & flag) {\n                        this.error(diagnostics_1.DiagnosticCode.Duplicate_decorator, decorator.range);\n                    }\n                    else {\n                        flags |= flag;\n                    }\n                }\n            }\n        }\n        return flags;\n    }\n    /** Initializes a class declaration. */\n    initializeClass(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent element, usually a file or namespace. */\n    parent, \n    /** So far queued `extends` clauses. */\n    queuedExtends, \n    /** So far queued `implements` clauses. */\n    queuedImplements) {\n        var name = declaration.name.text;\n        var element = new ClassPrototype(name, parent, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL |\n            DecoratorFlags.FINAL |\n            DecoratorFlags.UNMANAGED));\n        if (!parent.add(name, element))\n            return null;\n        // remember classes that implement interfaces\n        var implementsTypes = declaration.implementsTypes;\n        if (implementsTypes) {\n            let numImplementsTypes = implementsTypes.length;\n            if (numImplementsTypes) {\n                // cannot implement interfaces when unmanaged\n                if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n                    this.error(diagnostics_1.DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces, tokenizer_1.Range.join(declaration.name.range, implementsTypes[numImplementsTypes - 1].range));\n                }\n                else {\n                    queuedImplements.push(element);\n                }\n            }\n        }\n        // remember classes that extend another class\n        if (declaration.extendsType)\n            queuedExtends.push(element);\n        // initialize members\n        var memberDeclarations = declaration.members;\n        for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n            let memberDeclaration = memberDeclarations[i];\n            switch (memberDeclaration.kind) {\n                case ast_1.NodeKind.FIELDDECLARATION: {\n                    this.initializeField(memberDeclaration, element);\n                    break;\n                }\n                case ast_1.NodeKind.METHODDECLARATION: {\n                    let methodDeclaration = memberDeclaration;\n                    if (memberDeclaration.isAny(common_1.CommonFlags.GET | common_1.CommonFlags.SET)) {\n                        this.initializeProperty(methodDeclaration, element);\n                    }\n                    else {\n                        let method = this.initializeMethod(methodDeclaration, element);\n                        if (method !== null && methodDeclaration.name.kind == ast_1.NodeKind.CONSTRUCTOR) {\n                            element.constructorPrototype = method;\n                        }\n                    }\n                    break;\n                }\n                case ast_1.NodeKind.INDEXSIGNATURE: break; // ignored for now\n                default: assert(false); // class member expected\n            }\n        }\n        return element;\n    }\n    /** Initializes a field of a class or interface. */\n    initializeField(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent class. */\n    parent) {\n        var name = declaration.name.text;\n        var decorators = declaration.decorators;\n        var element;\n        var acceptedFlags = DecoratorFlags.UNSAFE;\n        if (parent.is(common_1.CommonFlags.AMBIENT)) {\n            acceptedFlags |= DecoratorFlags.EXTERNAL;\n        }\n        if (declaration.is(common_1.CommonFlags.STATIC)) { // global variable\n            assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n            acceptedFlags |= DecoratorFlags.LAZY;\n            if (declaration.is(common_1.CommonFlags.READONLY)) {\n                acceptedFlags |= DecoratorFlags.INLINE;\n            }\n            element = new Global(name, parent, this.checkDecorators(decorators, acceptedFlags), declaration);\n            if (!parent.add(name, element))\n                return;\n        }\n        else { // actual instance field\n            assert(!declaration.isAny(common_1.CommonFlags.ABSTRACT | common_1.CommonFlags.GET | common_1.CommonFlags.SET));\n            element = new FieldPrototype(name, parent, declaration, this.checkDecorators(decorators, acceptedFlags));\n            if (!parent.addInstance(name, element))\n                return;\n        }\n    }\n    /** Initializes a method of a class or interface. */\n    initializeMethod(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent class. */\n    parent) {\n        var name = declaration.name.text;\n        var isStatic = declaration.is(common_1.CommonFlags.STATIC);\n        var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n        if (!declaration.is(common_1.CommonFlags.GENERIC)) {\n            acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                | DecoratorFlags.OPERATOR_PREFIX\n                | DecoratorFlags.OPERATOR_POSTFIX;\n        }\n        if (parent.is(common_1.CommonFlags.AMBIENT)) {\n            acceptedFlags |= DecoratorFlags.EXTERNAL;\n        }\n        var element = new FunctionPrototype(name, parent, declaration, this.checkDecorators(declaration.decorators, acceptedFlags));\n        if (isStatic) { // global function\n            assert(declaration.name.kind != ast_1.NodeKind.CONSTRUCTOR);\n            if (!parent.add(name, element))\n                return null;\n        }\n        else { // actual instance method\n            if (!parent.addInstance(name, element))\n                return null;\n        }\n        this.checkOperatorOverloads(declaration.decorators, element, parent);\n        return element;\n    }\n    /** Checks that operator overloads are generally valid, if present. */\n    checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators, \n    /** Decorated method. */\n    prototype, \n    /** Parent class. */\n    classPrototype) {\n        if (decorators) {\n            for (let i = 0, k = decorators.length; i < k; ++i) {\n                let decorator = decorators[i]; // FIXME: why does tsc want a type here?\n                switch (decorator.decoratorKind) {\n                    case ast_1.DecoratorKind.OPERATOR:\n                    case ast_1.DecoratorKind.OPERATOR_BINARY:\n                    case ast_1.DecoratorKind.OPERATOR_PREFIX:\n                    case ast_1.DecoratorKind.OPERATOR_POSTFIX: {\n                        let args = decorator.args;\n                        let numArgs = args ? args.length : 0;\n                        if (numArgs == 1) {\n                            let firstArg = decorator.args[0];\n                            if (firstArg.isLiteralKind(ast_1.LiteralKind.STRING)) {\n                                let text = firstArg.value;\n                                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                                if (kind == OperatorKind.INVALID) {\n                                    this.error(diagnostics_1.DiagnosticCode._0_is_not_a_valid_operator, firstArg.range, text);\n                                }\n                                else {\n                                    let overloads = classPrototype.overloadPrototypes;\n                                    if (overloads.has(kind)) {\n                                        this.error(diagnostics_1.DiagnosticCode.Duplicate_function_implementation, firstArg.range);\n                                    }\n                                    else {\n                                        prototype.operatorKind = kind;\n                                        overloads.set(kind, prototype);\n                                    }\n                                }\n                            }\n                            else {\n                                this.error(diagnostics_1.DiagnosticCode.String_literal_expected, firstArg.range);\n                            }\n                        }\n                        else {\n                            this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, decorator.range, \"1\", numArgs.toString());\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /** Ensures that the property introduced by the specified getter or setter exists.*/\n    ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration, \n    /** Parent class. */\n    parent) {\n        var name = declaration.name.text;\n        if (declaration.is(common_1.CommonFlags.STATIC)) {\n            let parentMembers = parent.members;\n            if (parentMembers !== null && parentMembers.has(name)) {\n                let element = assert(parentMembers.get(name));\n                if (element.kind == ElementKind.PROPERTY_PROTOTYPE)\n                    return element;\n            }\n            else {\n                let element = new PropertyPrototype(name, parent, declaration);\n                if (!parent.add(name, element))\n                    return null;\n                return element;\n            }\n        }\n        else {\n            let parentMembers = parent.instanceMembers;\n            if (parentMembers !== null && parentMembers.has(name)) {\n                let element = assert(parentMembers.get(name));\n                if (element.kind == ElementKind.PROPERTY_PROTOTYPE)\n                    return element;\n            }\n            else {\n                let element = new PropertyPrototype(name, parent, declaration);\n                if (!parent.addInstance(name, element))\n                    return null;\n                return element;\n            }\n        }\n        this.error(diagnostics_1.DiagnosticCode.Duplicate_property_0, declaration.name.range, name);\n        return null;\n    }\n    /** Initializes a property of a class. */\n    initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration, \n    /** Parent class. */\n    parent) {\n        var property = this.ensureProperty(declaration, parent);\n        if (!property)\n            return;\n        var name = declaration.name.text;\n        var isGetter = declaration.is(common_1.CommonFlags.GET);\n        if (isGetter) {\n            if (property.getterPrototype) {\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_property_0, declaration.name.range, name);\n                return;\n            }\n        }\n        else {\n            if (property.setterPrototype) {\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_property_0, declaration.name.range, name);\n                return;\n            }\n        }\n        var element = new FunctionPrototype((isGetter ? common_1.GETTER_PREFIX : common_1.SETTER_PREFIX) + name, property, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.INLINE | DecoratorFlags.UNSAFE));\n        if (isGetter) {\n            property.getterPrototype = element;\n        }\n        else {\n            property.setterPrototype = element;\n        }\n    }\n    /** Initializes an enum. */\n    initializeEnum(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent element, usually a file or namespace. */\n    parent) {\n        var name = declaration.name.text;\n        var element = new Enum(name, parent, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.LAZY));\n        if (!parent.add(name, element))\n            return null;\n        var values = declaration.values;\n        for (let i = 0, k = values.length; i < k; ++i) {\n            this.initializeEnumValue(values[i], element);\n        }\n        return element;\n    }\n    /** Initializes an enum value. */\n    initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent enum. */\n    parent) {\n        var name = declaration.name.text;\n        var element = new EnumValue(name, parent, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.NONE));\n        if (!parent.add(name, element))\n            return;\n    }\n    /** Initializes an `export` statement. */\n    initializeExports(\n    /** The statement to initialize. */\n    statement, \n    /** Parent file. */\n    parent, \n    /** So far queued `export`s. */\n    queuedExports, \n    /** So far queued `export *`s. */\n    queuedExportsStar) {\n        var members = statement.members;\n        if (members) { // export { foo, bar } [from \"./baz\"]\n            for (let i = 0, k = members.length; i < k; ++i) {\n                this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n            }\n        }\n        else { // export * from \"./baz\"\n            let queued;\n            if (queuedExportsStar.has(parent))\n                queued = assert(queuedExportsStar.get(parent));\n            else\n                queuedExportsStar.set(parent, queued = []);\n            let foreignPath = statement.internalPath; // must be set for export *\n            queued.push(new QueuedExportStar(foreignPath, foreignPath.endsWith(common_1.INDEX_SUFFIX) // strip or add index depending on what's already present\n                ? foreignPath.substring(0, foreignPath.length - common_1.INDEX_SUFFIX.length)\n                : foreignPath + common_1.INDEX_SUFFIX, assert(statement.path)));\n        }\n    }\n    /** Initializes a single `export` member. Does not handle `export *`. */\n    initializeExport(\n    /** The member to initialize. */\n    member, \n    /** Local file. */\n    localFile, \n    /** Path to the other file, if present. */\n    foreignPath, \n    /** So far queued `export`s. */\n    queuedExports) {\n        var localName = member.localName.text;\n        var foreignName = member.exportedName.text;\n        // check for duplicates\n        var element = localFile.lookupExport(foreignName);\n        if (element) {\n            this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.exportedName.range, foreignName);\n            return;\n        }\n        // local element, i.e. export { foo [as bar] }\n        if (foreignPath === null) {\n            // resolve right away if the local element already exists\n            if (element = localFile.lookupInSelf(localName)) {\n                localFile.ensureExport(foreignName, element);\n                // otherwise queue it\n            }\n            else {\n                let queued;\n                if (queuedExports.has(localFile))\n                    queued = assert(queuedExports.get(localFile));\n                else\n                    queuedExports.set(localFile, queued = new Map());\n                queued.set(foreignName, new QueuedExport(member.localName, member.exportedName, null, null));\n            }\n            // foreign element, i.e. export { foo } from \"./bar\"\n        }\n        else {\n            let queued;\n            if (queuedExports.has(localFile))\n                queued = assert(queuedExports.get(localFile));\n            else\n                queuedExports.set(localFile, queued = new Map());\n            queued.set(foreignName, new QueuedExport(member.localName, member.exportedName, foreignPath, foreignPath.endsWith(common_1.INDEX_SUFFIX) // strip or add index depending on what's already present\n                ? foreignPath.substring(0, foreignPath.length - common_1.INDEX_SUFFIX.length)\n                : foreignPath + common_1.INDEX_SUFFIX));\n        }\n    }\n    initializeExportDefault(\n    /** The statement to initialize. */\n    statement, \n    /** Parent file. */\n    parent, \n    /** So far queued `extends` clauses. */\n    queuedExtends, \n    /** So far queued `implements` clauses. */\n    queuedImplements) {\n        var declaration = statement.declaration;\n        var element = null;\n        switch (declaration.kind) {\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                element = this.initializeEnum(declaration, parent);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                element = this.initializeFunction(declaration, parent);\n                break;\n            }\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                element = this.initializeClass(declaration, parent, queuedExtends, queuedImplements);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                element = this.initializeInterface(declaration, parent, queuedExtends);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                element = this.initializeNamespace(declaration, parent, queuedExtends, queuedImplements);\n                break;\n            }\n            default: assert(false);\n        }\n        if (element) {\n            let exports = parent.exports;\n            if (!exports)\n                parent.exports = exports = new Map();\n            else {\n                if (exports.has(\"default\")) {\n                    let existing = assert(exports.get(\"default\"));\n                    this.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, existing.declaration.name.range, \"default\");\n                    return;\n                }\n            }\n            exports.set(\"default\", element);\n        }\n    }\n    /** Initializes an `import` statement. */\n    initializeImports(\n    /** The statement to initialize. */\n    statement, \n    /** Parent file. */\n    parent, \n    /** So far queued `import`s. */\n    queuedImports, \n    /** So far queued `export`s. */\n    queuedExports) {\n        var declarations = statement.declarations;\n        if (declarations) { // import { foo [as bar] } from \"./baz\"\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n                this.initializeImport(declarations[i], parent, statement.internalPath, queuedImports, queuedExports);\n            }\n        }\n        else {\n            let namespaceName = statement.namespaceName;\n            if (namespaceName) { // import * as foo from \"./bar\"\n                queuedImports.push(new QueuedImport(parent, namespaceName, null, // indicates import *\n                statement.internalPath, statement.internalPath + common_1.INDEX_SUFFIX));\n            }\n            else {\n                // import \"./foo\"\n            }\n        }\n    }\n    /** Initializes a single `import` declaration. Does not handle `import *`. */\n    initializeImport(// { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent file. */\n    parent, \n    /** Path to the other file. */\n    foreignPath, \n    /** So far queued `import`s. */\n    queuedImports, \n    /** So far queued `export`s. */\n    queuedExports) {\n        var foreignPathAlt = foreignPath.endsWith(common_1.INDEX_SUFFIX) // strip or add index depending on what's already present\n            ? foreignPath.substring(0, foreignPath.length - common_1.INDEX_SUFFIX.length)\n            : foreignPath + common_1.INDEX_SUFFIX;\n        // resolve right away if the element exists\n        var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n        if (element) {\n            parent.add(declaration.name.text, element, declaration.name /* isImport */);\n            return;\n        }\n        // otherwise queue it\n        queuedImports.push(new QueuedImport(parent, declaration.name, declaration.foreignName, foreignPath, foreignPathAlt));\n    }\n    /** Initializes a function. Does not handle methods. */\n    initializeFunction(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent element, usually a file or namespace. */\n    parent) {\n        var name = declaration.name.text;\n        var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n        if (declaration.is(common_1.CommonFlags.AMBIENT)) {\n            validDecorators |= DecoratorFlags.EXTERNAL;\n        }\n        else {\n            validDecorators |= DecoratorFlags.INLINE;\n            if (declaration.range.source.isLibrary || declaration.is(common_1.CommonFlags.EXPORT)) {\n                validDecorators |= DecoratorFlags.LAZY;\n            }\n        }\n        if (!declaration.is(common_1.CommonFlags.INSTANCE)) {\n            if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n                validDecorators |= DecoratorFlags.GLOBAL;\n            }\n        }\n        var element = new FunctionPrototype(name, parent, declaration, this.checkDecorators(declaration.decorators, validDecorators));\n        if (!parent.add(name, element))\n            return null;\n        return element;\n    }\n    /** Initializes an interface. */\n    initializeInterface(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent element, usually a file or namespace. */\n    parent, \n    /** So far queued `extends` clauses. */\n    queuedExtends) {\n        var name = declaration.name.text;\n        var element = new InterfacePrototype(name, parent, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL));\n        if (!parent.add(name, element))\n            return null;\n        // remember interfaces that extend another interface\n        if (declaration.extendsType)\n            queuedExtends.push(element);\n        var memberDeclarations = declaration.members;\n        for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n            let memberDeclaration = memberDeclarations[i];\n            switch (memberDeclaration.kind) {\n                case ast_1.NodeKind.FIELDDECLARATION: {\n                    this.initializeFieldAsProperty(memberDeclaration, element);\n                    break;\n                }\n                case ast_1.NodeKind.METHODDECLARATION: {\n                    let methodDeclaration = memberDeclaration;\n                    if (memberDeclaration.isAny(common_1.CommonFlags.GET | common_1.CommonFlags.SET)) {\n                        this.initializeProperty(methodDeclaration, element);\n                    }\n                    else {\n                        this.initializeMethod(methodDeclaration, element);\n                    }\n                    break;\n                }\n                default: assert(false); // interface member expected\n            }\n        }\n        return element;\n    }\n    /** Initializes a field of an interface, as a property. */\n    initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration, \n    /** Parent interface. */\n    parent) {\n        var typeNode = declaration.type;\n        if (!typeNode)\n            typeNode = ast_1.Node.createOmittedType(declaration.name.range.atEnd);\n        this.initializeProperty(ast_1.Node.createMethodDeclaration(declaration.name, declaration.decorators, declaration.flags | common_1.CommonFlags.GET, null, ast_1.Node.createFunctionType([], typeNode, null, false, declaration.range), null, declaration.range), parent);\n        if (!declaration.is(common_1.CommonFlags.READONLY)) {\n            this.initializeProperty(ast_1.Node.createMethodDeclaration(declaration.name, declaration.decorators, declaration.flags | common_1.CommonFlags.SET, null, ast_1.Node.createFunctionType([\n                ast_1.Node.createParameter(ast_1.ParameterKind.DEFAULT, declaration.name, typeNode, null, declaration.name.range)\n            ], ast_1.Node.createOmittedType(declaration.name.range.atEnd), null, false, declaration.range), null, declaration.range), parent);\n        }\n    }\n    /** Initializes a namespace. */\n    initializeNamespace(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent element, usually a file or another namespace. */\n    parent, \n    /** So far queued `extends` clauses. */\n    queuedExtends, \n    /** So far queued `implements` clauses. */\n    queuedImplements) {\n        var name = declaration.name.text;\n        var original = new Namespace(name, parent, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL));\n        if (!parent.add(name, original))\n            return null;\n        var element = assert(parent.lookupInSelf(name)); // possibly merged\n        var members = declaration.members;\n        for (let i = 0, k = members.length; i < k; ++i) {\n            let member = members[i];\n            switch (member.kind) {\n                case ast_1.NodeKind.CLASSDECLARATION: {\n                    this.initializeClass(member, original, queuedExtends, queuedImplements);\n                    break;\n                }\n                case ast_1.NodeKind.ENUMDECLARATION: {\n                    this.initializeEnum(member, original);\n                    break;\n                }\n                case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                    this.initializeFunction(member, original);\n                    break;\n                }\n                case ast_1.NodeKind.INTERFACEDECLARATION: {\n                    this.initializeInterface(member, original, queuedExtends);\n                    break;\n                }\n                case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                    this.initializeNamespace(member, original, queuedExtends, queuedImplements);\n                    break;\n                }\n                case ast_1.NodeKind.TYPEDECLARATION: {\n                    this.initializeTypeDefinition(member, original);\n                    break;\n                }\n                case ast_1.NodeKind.VARIABLE: {\n                    this.initializeVariables(member, original);\n                    break;\n                }\n                default: assert(false); // namespace member expected\n            }\n        }\n        if (original != element)\n            copyMembers(original, element); // keep original parent\n        return element;\n    }\n    /** Initializes a `type` definition. */\n    initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration, \n    /** Parent element, usually a file or namespace. */\n    parent) {\n        var name = declaration.name.text;\n        var element = new TypeDefinition(name, parent, declaration, this.checkDecorators(declaration.decorators, DecoratorFlags.NONE));\n        parent.add(name, element); // reports\n    }\n    /** Initializes a variable statement. */\n    initializeVariables(\n    /** The statement to initialize. */\n    statement, \n    /** Parent element, usually a file or namespace. */\n    parent) {\n        var declarations = statement.declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            let name = declaration.name.text;\n            let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n            if (declaration.is(common_1.CommonFlags.DECLARE)) {\n                acceptedFlags |= DecoratorFlags.EXTERNAL;\n            }\n            if (declaration.is(common_1.CommonFlags.CONST)) {\n                acceptedFlags |= DecoratorFlags.INLINE;\n            }\n            let element = new Global(name, parent, this.checkDecorators(declaration.decorators, acceptedFlags), declaration);\n            if (!parent.add(name, element))\n                continue; // reports\n        }\n    }\n}\nexports.Program = Program;\n/** Indicates the specific kind of an {@link Element}. */\nvar ElementKind;\n(function (ElementKind) {\n    /** A {@link Global}. */\n    ElementKind[ElementKind[\"GLOBAL\"] = 0] = \"GLOBAL\";\n    /** A {@link Local}. */\n    ElementKind[ElementKind[\"LOCAL\"] = 1] = \"LOCAL\";\n    /** An {@link Enum}. */\n    ElementKind[ElementKind[\"ENUM\"] = 2] = \"ENUM\";\n    /** An {@link EnumValue}. */\n    ElementKind[ElementKind[\"ENUMVALUE\"] = 3] = \"ENUMVALUE\";\n    /** A {@link FunctionPrototype}. */\n    ElementKind[ElementKind[\"FUNCTION_PROTOTYPE\"] = 4] = \"FUNCTION_PROTOTYPE\";\n    /** A {@link Function}. */\n    ElementKind[ElementKind[\"FUNCTION\"] = 5] = \"FUNCTION\";\n    /** A {@link FunctionTarget}. */\n    ElementKind[ElementKind[\"FUNCTION_TARGET\"] = 6] = \"FUNCTION_TARGET\";\n    /** A {@link ClassPrototype}. */\n    ElementKind[ElementKind[\"CLASS_PROTOTYPE\"] = 7] = \"CLASS_PROTOTYPE\";\n    /** A {@link Class}. */\n    ElementKind[ElementKind[\"CLASS\"] = 8] = \"CLASS\";\n    /** An {@link InterfacePrototype}. */\n    ElementKind[ElementKind[\"INTERFACE_PROTOTYPE\"] = 9] = \"INTERFACE_PROTOTYPE\";\n    /** An {@link Interface}. */\n    ElementKind[ElementKind[\"INTERFACE\"] = 10] = \"INTERFACE\";\n    /** A {@link FieldPrototype}. */\n    ElementKind[ElementKind[\"FIELD_PROTOTYPE\"] = 11] = \"FIELD_PROTOTYPE\";\n    /** A {@link Field}. */\n    ElementKind[ElementKind[\"FIELD\"] = 12] = \"FIELD\";\n    /** A {@link PropertyPrototype}.  */\n    ElementKind[ElementKind[\"PROPERTY_PROTOTYPE\"] = 13] = \"PROPERTY_PROTOTYPE\";\n    /** A {@link Property}. */\n    ElementKind[ElementKind[\"PROPERTY\"] = 14] = \"PROPERTY\";\n    /** A {@link Namespace}. */\n    ElementKind[ElementKind[\"NAMESPACE\"] = 15] = \"NAMESPACE\";\n    /** A {@link File}. */\n    ElementKind[ElementKind[\"FILE\"] = 16] = \"FILE\";\n    /** A {@link TypeDefinition}.  */\n    ElementKind[ElementKind[\"TYPEDEFINITION\"] = 17] = \"TYPEDEFINITION\";\n    /** An {@link IndexSignature}. */\n    ElementKind[ElementKind[\"INDEXSIGNATURE\"] = 18] = \"INDEXSIGNATURE\";\n})(ElementKind = exports.ElementKind || (exports.ElementKind = {}));\n/** Indicates built-in decorators that are present. */\nvar DecoratorFlags;\n(function (DecoratorFlags) {\n    /** No flags set. */\n    DecoratorFlags[DecoratorFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Is a program global. */\n    DecoratorFlags[DecoratorFlags[\"GLOBAL\"] = 1] = \"GLOBAL\";\n    /** Is a binary operator overload. */\n    DecoratorFlags[DecoratorFlags[\"OPERATOR_BINARY\"] = 2] = \"OPERATOR_BINARY\";\n    /** Is a unary prefix operator overload. */\n    DecoratorFlags[DecoratorFlags[\"OPERATOR_PREFIX\"] = 4] = \"OPERATOR_PREFIX\";\n    /** Is a unary postfix operator overload. */\n    DecoratorFlags[DecoratorFlags[\"OPERATOR_POSTFIX\"] = 8] = \"OPERATOR_POSTFIX\";\n    /** Is an unmanaged class. */\n    DecoratorFlags[DecoratorFlags[\"UNMANAGED\"] = 16] = \"UNMANAGED\";\n    /** Is a final class. */\n    DecoratorFlags[DecoratorFlags[\"FINAL\"] = 32] = \"FINAL\";\n    /** Is always inlined. */\n    DecoratorFlags[DecoratorFlags[\"INLINE\"] = 64] = \"INLINE\";\n    /** Is using a different external name. */\n    DecoratorFlags[DecoratorFlags[\"EXTERNAL\"] = 128] = \"EXTERNAL\";\n    /** Is a builtin. */\n    DecoratorFlags[DecoratorFlags[\"BUILTIN\"] = 256] = \"BUILTIN\";\n    /** Is compiled lazily. */\n    DecoratorFlags[DecoratorFlags[\"LAZY\"] = 512] = \"LAZY\";\n    /** Is considered unsafe code. */\n    DecoratorFlags[DecoratorFlags[\"UNSAFE\"] = 1024] = \"UNSAFE\";\n})(DecoratorFlags = exports.DecoratorFlags || (exports.DecoratorFlags = {}));\n(function (DecoratorFlags) {\n    /** Translates a decorator kind to the respective decorator flag. */\n    function fromKind(kind) {\n        switch (kind) {\n            case ast_1.DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n            case ast_1.DecoratorKind.OPERATOR:\n            case ast_1.DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n            case ast_1.DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n            case ast_1.DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n            case ast_1.DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n            case ast_1.DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n            case ast_1.DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n            case ast_1.DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n            case ast_1.DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n            case ast_1.DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n            case ast_1.DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n            default: return DecoratorFlags.NONE;\n        }\n    }\n    DecoratorFlags.fromKind = fromKind;\n})(DecoratorFlags = exports.DecoratorFlags || (exports.DecoratorFlags = {}));\n/** Base class of all program elements. */\nclass Element {\n    /** Constructs a new program element. */\n    constructor(\n    /** Specific element kind. */\n    kind, \n    /** Simple name. */\n    name, \n    /** Internal name referring to this element. */\n    internalName, \n    /** Containing {@link Program}. */\n    program, \n    /** Parent element. */\n    parent) {\n        this.kind = kind;\n        this.name = name;\n        this.internalName = internalName;\n        this.program = program;\n        /** Common flags indicating specific traits. */\n        this.flags = common_1.CommonFlags.NONE;\n        /** Decorator flags indicating annotated traits. */\n        this.decoratorFlags = DecoratorFlags.NONE;\n        /** Member elements. */\n        this.members = null;\n        /** Shadowing type in type space, if any. */\n        this.shadowType = null;\n        this.program = program;\n        this.name = name;\n        this.internalName = internalName;\n        if (parent) {\n            this.parent = parent;\n        }\n        else {\n            assert(this.kind == ElementKind.FILE);\n            this.parent = this; // special case to keep this.parent non-nullable\n        }\n    }\n    /** Gets the enclosing file. */\n    get file() {\n        var current = this;\n        do {\n            current = current.parent;\n            if (current.kind == ElementKind.FILE)\n                return current;\n        } while (true);\n    }\n    /** Tests if this element has a specific flag or flags. */\n    is(flag) { return (this.flags & flag) == flag; }\n    /** Tests if this element has any of the specified flags. */\n    isAny(flags) { return (this.flags & flags) != 0; }\n    /** Sets a specific flag or flags. */\n    set(flag) { this.flags |= flag; }\n    /** Unsets the specific flag or flags. */\n    unset(flag) { this.flags &= ~flag; }\n    /** Tests if this element has a specific decorator flag or flags. */\n    hasDecorator(flag) { return (this.decoratorFlags & flag) == flag; }\n    /** Looks up the element with the specified name within this element. */\n    lookupInSelf(name) {\n        var members = this.members;\n        if (members !== null && members.has(name))\n            return assert(members.get(name));\n        return null;\n    }\n    /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n    add(name, element, localIdentifierIfImport = null) {\n        var originalDeclaration = element.declaration;\n        var members = this.members;\n        if (!members)\n            this.members = members = new Map();\n        else if (members.has(name)) {\n            let existing = assert(members.get(name));\n            if (existing.parent !== this) {\n                // override non-own element\n            }\n            else {\n                let merged = tryMerge(existing, element);\n                if (merged) {\n                    element = merged; // use merged element\n                }\n                else {\n                    let reportedIdentifier = localIdentifierIfImport\n                        ? localIdentifierIfImport\n                        : element.identifierNode;\n                    if (isDeclaredElement(existing.kind)) {\n                        this.program.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, reportedIdentifier.range, existing.identifierNode.range, reportedIdentifier.text);\n                    }\n                    else {\n                        this.program.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, reportedIdentifier.range, reportedIdentifier.text);\n                    }\n                    return false;\n                }\n            }\n        }\n        members.set(name, element);\n        var program = this.program;\n        if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !element.isBound) {\n            // prefer unbound prototypes in global lookup maps\n            program.elementsByName.set(element.internalName, element);\n            program.elementsByDeclaration.set(originalDeclaration, element);\n        }\n        return true;\n    }\n    /** Checks if this element is public, explicitly or implicitly. */\n    get isPublic() {\n        return !this.isAny(common_1.CommonFlags.PRIVATE | common_1.CommonFlags.PROTECTED);\n    }\n    /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n    get isImplicitlyPublic() {\n        return this.isPublic && !this.is(common_1.CommonFlags.PUBLIC);\n    }\n    /** Checks if the visibility of this element equals the specified. */\n    visibilityEquals(other) {\n        if (this.isPublic == other.isPublic)\n            return true;\n        const vis = common_1.CommonFlags.PRIVATE | common_1.CommonFlags.PROTECTED;\n        return (this.flags & vis) == (other.flags & vis);\n    }\n    /** Returns a string representation of this element. */\n    toString() {\n        return this.internalName + \", kind=\" + this.kind.toString();\n    }\n}\nexports.Element = Element;\n// Kinds of all declared elements\nvar declaredElements = new Set();\n/** Tests if the specified element kind indicates a declared element. */\nfunction isDeclaredElement(kind) {\n    return declaredElements.has(kind);\n}\nexports.isDeclaredElement = isDeclaredElement;\n/** Base class of elements with an associated declaration statement. */\nclass DeclaredElement extends Element {\n    /** Constructs a new declared program element. */\n    constructor(\n    /** Specific element kind. */\n    kind, \n    /** Simple name. */\n    name, \n    /** Internal name referring to this element. */\n    internalName, \n    /** Containing {@link Program}. */\n    program, \n    /** Parent element. */\n    parent, \n    /** Declaration reference. */\n    declaration) {\n        super(kind, name, internalName, program, parent);\n        this.declaration = declaration;\n        declaredElements.add(kind);\n        // It is necessary to have access to identifiers of all members and exports\n        // for reporting purposes and this is the lowest common denominator. Comes\n        // at the expense of not having more specific type information in derived\n        // classes, though. Instead, derived classes implement getters for other\n        // important AST nodes directly through manual casting, allowing the resolver\n        // etc. to not worry about actual declarations.\n        this.declaration = declaration;\n        this.flags = declaration.flags; // inherit\n    }\n    /** Tests if this element is a library element. */\n    get isDeclaredInLibrary() {\n        return this.declaration.range.source.isLibrary;\n    }\n    /** Gets the associated identifier node. */\n    get identifierNode() {\n        return this.declaration.name;\n    }\n    /** Gets the signature node, if applicable, along the identifier node. */\n    get identifierAndSignatureRange() {\n        var declaration = this.declaration;\n        var identifierNode = declaration.name;\n        if (declaration.kind == ast_1.NodeKind.FUNCTIONDECLARATION || declaration.kind == ast_1.NodeKind.METHODDECLARATION) {\n            let signatureNode = declaration.signature;\n            return tokenizer_1.Range.join(identifierNode.range, signatureNode.range);\n        }\n        return identifierNode.range;\n    }\n    /** Gets the assiciated decorator nodes. */\n    get decoratorNodes() {\n        return this.declaration.decorators;\n    }\n    /** Checks if this element is a compatible override of the specified. */\n    isCompatibleOverride(base) {\n        var self = this; // TS\n        var kind = self.kind;\n        if (kind == base.kind) {\n            switch (kind) {\n                case ElementKind.FUNCTION: {\n                    return self.signature.isAssignableTo(base.signature, /* sameSize */ true);\n                }\n                case ElementKind.PROPERTY: {\n                    let selfProperty = self;\n                    let baseProperty = base;\n                    let selfGetter = selfProperty.getterInstance;\n                    let baseGetter = baseProperty.getterInstance;\n                    if (selfGetter) {\n                        if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n                            return false;\n                        }\n                    }\n                    else if (baseGetter) {\n                        return false;\n                    }\n                    let selfSetter = selfProperty.setterInstance;\n                    let baseSetter = baseProperty.setterInstance;\n                    if (selfSetter) {\n                        if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n                            return false;\n                        }\n                    }\n                    else if (baseSetter) {\n                        return false;\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.DeclaredElement = DeclaredElement;\n// Kinds of all typed elements\nvar typedElements = new Set();\n/** Checks if the specified element kind indicates a typed element. */\nfunction isTypedElement(kind) {\n    return typedElements.has(kind);\n}\nexports.isTypedElement = isTypedElement;\n/** Base class of elements that can be resolved to a concrete type. */\nclass TypedElement extends DeclaredElement {\n    constructor(\n    /** Specific element kind. */\n    kind, \n    /** Simple name. */\n    name, \n    /** Internal name referring to this element. */\n    internalName, \n    /** Containing {@link Program}. */\n    program, \n    /** Parent element. */\n    parent, \n    /** Declaration reference. */\n    declaration) {\n        super(kind, name, internalName, program, parent, declaration);\n        /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n        this.type = types_1.Type.void;\n        typedElements.add(kind);\n    }\n    /** Sets the resolved type of this element. */\n    setType(type) {\n        assert(!this.is(common_1.CommonFlags.RESOLVED));\n        this.type = type;\n        this.set(common_1.CommonFlags.RESOLVED);\n    }\n}\nexports.TypedElement = TypedElement;\n/** A file representing the implicit top-level namespace of a source. */\nclass File extends Element {\n    /** Constructs a new file. */\n    constructor(\n    /** Program this file belongs to. */\n    program, \n    /** Source of this file. */\n    source) {\n        super(ElementKind.FILE, source.normalizedPath, source.internalPath, program, null // special case for files\n        );\n        this.source = source;\n        /** File exports. */\n        this.exports = null;\n        /** File re-exports. */\n        this.exportsStar = null;\n        /** Array of `import * as X` alias namespaces of this file. */\n        this.aliasNamespaces = new Array();\n        this.source = source;\n        assert(!program.filesByName.has(this.internalName));\n        program.filesByName.set(this.internalName, this);\n        var startFunction = this.program.makeNativeFunction(\"start:\" + this.internalName, new types_1.Signature(program, null, types_1.Type.void), this);\n        startFunction.internalName = startFunction.name;\n        this.startFunction = startFunction;\n    }\n    /* @override */\n    add(name, element, localIdentifierIfImport = null) {\n        if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n            element = this.program.ensureGlobal(name, element); // possibly merged globally\n        }\n        if (!super.add(name, element, localIdentifierIfImport))\n            return false;\n        element = assert(this.lookupInSelf(name)); // possibly merged locally\n        if (element.is(common_1.CommonFlags.EXPORT) && !localIdentifierIfImport) {\n            this.ensureExport(element.name, element);\n        }\n        return true;\n    }\n    /* @override */\n    lookupInSelf(name) {\n        var element = super.lookupInSelf(name);\n        if (element)\n            return element;\n        var exportsStar = this.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                if (element = exportsStar[i].lookupInSelf(name))\n                    return element;\n            }\n        }\n        return null;\n    }\n    /* @override */\n    lookup(name) {\n        var element = this.lookupInSelf(name);\n        if (element)\n            return element;\n        return this.program.lookup(name);\n    }\n    /** Ensures that an element is an export of this file. */\n    ensureExport(name, element) {\n        var exports = this.exports;\n        if (!exports)\n            this.exports = exports = new Map();\n        exports.set(name, element);\n        if (this.source.sourceKind == ast_1.SourceKind.LIBRARY_ENTRY)\n            this.program.ensureGlobal(name, element);\n        // Also, add to the namespaces that capture our exports\n        for (let i = 0; i < this.aliasNamespaces.length; i++) {\n            let ns = this.aliasNamespaces[i];\n            ns.add(name, element);\n        }\n    }\n    /** Ensures that another file is a re-export of this file. */\n    ensureExportStar(file) {\n        var exportsStar = this.exportsStar;\n        if (!exportsStar)\n            this.exportsStar = exportsStar = [];\n        else if (exportsStar.includes(file))\n            return;\n        exportsStar.push(file);\n    }\n    /** Looks up the export of the specified name. */\n    lookupExport(name) {\n        var exports = this.exports;\n        if (exports !== null && exports.has(name))\n            return assert(exports.get(name));\n        var exportsStar = this.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                let element = exportsStar[i].lookupExport(name);\n                if (element)\n                    return element;\n            }\n        }\n        return null;\n    }\n    /** Creates an imported namespace from this file. */\n    asAliasNamespace(name, parent, localIdentifier) {\n        var declaration = this.program.makeNativeNamespaceDeclaration(name);\n        declaration.name = localIdentifier;\n        var ns = new Namespace(name, parent, declaration);\n        ns.set(common_1.CommonFlags.SCOPED);\n        this.copyExportsToNamespace(ns);\n        // NOTE: Some exports are still queued, and can't yet be added here,\n        // so we remember all the alias namespaces and add to them as well\n        // when adding an element to the file.\n        this.aliasNamespaces.push(ns);\n        return ns;\n    }\n    /** Recursively copies the exports of this file to the specified namespace. */\n    copyExportsToNamespace(ns) {\n        var exports = this.exports;\n        if (exports) {\n            // TODO: for (let [memberName, member] of exports) {\n            for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n                let memberName = unchecked(_keys[i]);\n                let member = assert(exports.get(memberName));\n                ns.add(memberName, member);\n            }\n        }\n        var exportsStar = this.exportsStar;\n        if (exportsStar) {\n            for (let i = 0, k = exportsStar.length; i < k; ++i) {\n                exportsStar[i].copyExportsToNamespace(ns);\n            }\n        }\n    }\n}\nexports.File = File;\n/** A type definition. */\nclass TypeDefinition extends TypedElement {\n    /** Constructs a new type definition. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent element, usually a file or namespace. */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        super(ElementKind.TYPEDEFINITION, name, mangleInternalName(name, parent, false), parent.program, parent, declaration);\n        this.decoratorFlags = decoratorFlags;\n    }\n    /** Gets the associated type parameter nodes. */\n    get typeParameterNodes() {\n        return this.declaration.typeParameters;\n    }\n    /** Gets the associated type node. */\n    get typeNode() {\n        return this.declaration.type;\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.TypeDefinition = TypeDefinition;\n/** A namespace that differs from a file in being user-declared with a name. */\nclass Namespace extends DeclaredElement {\n    /** Constructs a new namespace. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent element, usually a file or another namespace. */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        super(ElementKind.NAMESPACE, name, mangleInternalName(name, parent, false), parent.program, parent, declaration);\n        this.decoratorFlags = decoratorFlags;\n    }\n    /* @override */\n    lookup(name) {\n        var inSelf = this.lookupInSelf(name);\n        if (inSelf)\n            return inSelf;\n        return this.parent.lookup(name);\n    }\n}\nexports.Namespace = Namespace;\n/** An enum. */\nclass Enum extends TypedElement {\n    /** Constructs a new enum. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent element, usually a file or namespace. */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        super(ElementKind.ENUM, name, mangleInternalName(name, parent, false), parent.program, parent, declaration);\n        this.decoratorFlags = decoratorFlags;\n        this.setType(types_1.Type.i32);\n    }\n    /* @override */\n    lookup(name) {\n        var inSelf = this.lookupInSelf(name);\n        if (inSelf)\n            return inSelf;\n        return this.parent.lookup(name);\n    }\n}\nexports.Enum = Enum;\n/** Indicates the kind of an inlined constant value. */\nvar ConstantValueKind;\n(function (ConstantValueKind) {\n    /** No constant value. */\n    ConstantValueKind[ConstantValueKind[\"NONE\"] = 0] = \"NONE\";\n    /** Constant integer value. */\n    ConstantValueKind[ConstantValueKind[\"INTEGER\"] = 1] = \"INTEGER\";\n    /** Constant float value. */\n    ConstantValueKind[ConstantValueKind[\"FLOAT\"] = 2] = \"FLOAT\";\n})(ConstantValueKind = exports.ConstantValueKind || (exports.ConstantValueKind = {}));\n/** Base class of all variable-like program elements. */\nclass VariableLikeElement extends TypedElement {\n    /** Constructs a new variable-like element. */\n    constructor(\n    /** Specific element kind. */\n    kind, \n    /** Simple name. */\n    name, \n    /** Parent element, usually a file, namespace or class. */\n    parent, \n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration = parent.program.makeNativeVariableDeclaration(name)) {\n        super(kind, name, mangleInternalName(name, parent, false), parent.program, parent, declaration);\n        /** Constant value kind. */\n        this.constantValueKind = 0 /* NONE */;\n        /** Constant integer value, if applicable. */\n        this.constantIntegerValue = i64_zero;\n        /** Constant float value, if applicable. */\n        this.constantFloatValue = 0;\n        this.flags = declaration.flags;\n    }\n    /** Gets the associated type node.s */\n    get typeNode() {\n        return this.declaration.type;\n    }\n    /** Gets the associated initializer node. */\n    get initializerNode() {\n        return this.declaration.initializer;\n    }\n    /** Applies a constant integer value to this element. */\n    setConstantIntegerValue(value, type) {\n        assert(type.isIntegerInclReference);\n        this.type = type;\n        this.constantValueKind = 1 /* INTEGER */;\n        this.constantIntegerValue = value;\n        this.set(common_1.CommonFlags.CONST | common_1.CommonFlags.INLINED | common_1.CommonFlags.RESOLVED);\n    }\n    /** Applies a constant float value to this element. */\n    setConstantFloatValue(value, type) {\n        assert(type.isFloatValue);\n        this.type = type;\n        this.constantValueKind = 2 /* FLOAT */;\n        this.constantFloatValue = value;\n        this.set(common_1.CommonFlags.CONST | common_1.CommonFlags.INLINED | common_1.CommonFlags.RESOLVED);\n    }\n    /** @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.VariableLikeElement = VariableLikeElement;\n/** An enum value. */\nclass EnumValue extends VariableLikeElement {\n    /** Constructs a new enum value. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent enum. */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        super(ElementKind.ENUMVALUE, name, parent, declaration);\n        /** Whether this enum value is immutable. */\n        this.isImmutable = false;\n        this.decoratorFlags = decoratorFlags;\n        this.setType(types_1.Type.i32);\n    }\n    /** Gets the associated value node. */\n    get valueNode() {\n        return this.declaration.initializer;\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.EnumValue = EnumValue;\n/** A global variable. */\nclass Global extends VariableLikeElement {\n    /** Constructs a new global variable. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent element, usually a file, namespace or static class. */\n    parent, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags, \n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration = parent.program.makeNativeVariableDeclaration(name)) {\n        super(ElementKind.GLOBAL, name, parent, declaration);\n        this.decoratorFlags = decoratorFlags;\n    }\n}\nexports.Global = Global;\n/** A function parameter. */\nclass Parameter {\n    /** Constructs a new function parameter. */\n    constructor(\n    /** Parameter name. */\n    name, \n    /** Parameter type. */\n    type, \n    /** Parameter initializer, if present. */\n    initializer = null) {\n        this.name = name;\n        this.type = type;\n        this.initializer = initializer;\n    }\n}\nexports.Parameter = Parameter;\n/** A local variable. */\nclass Local extends VariableLikeElement {\n    /** Constructs a new local variable. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    index, \n    /** Resolved type. */\n    type, \n    /** Parent function. */\n    parent, \n    /** Declaration reference. */\n    declaration = parent.program.makeNativeVariableDeclaration(name)) {\n        super(ElementKind.LOCAL, name, parent, declaration);\n        this.index = index;\n        this.originalName = name;\n        this.index = index;\n        assert(type != types_1.Type.void);\n        this.setType(type);\n    }\n    /** Sets the temporary name of this local. */\n    setTemporaryName(name) {\n        this.name = name;\n        this.internalName = mangleInternalName(name, this.parent, false);\n    }\n    /** Resets the temporary name of this local. */\n    resetTemporaryName() {\n        var name = this.originalName;\n        this.name = name;\n        this.internalName = mangleInternalName(name, this.parent, false);\n    }\n}\nexports.Local = Local;\n/** A yet unresolved function prototype. */\nclass FunctionPrototype extends DeclaredElement {\n    /** Constructs a new function prototype. */\n    constructor(\n    /** Simple name */\n    name, \n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        super(ElementKind.FUNCTION_PROTOTYPE, name, mangleInternalName(name, parent, declaration.is(common_1.CommonFlags.INSTANCE)), parent.program, parent, declaration);\n        /** Operator kind, if an overload. */\n        this.operatorKind = OperatorKind.INVALID;\n        /** Already resolved instances. */\n        this.instances = null;\n        /** Methods overloading this one, if any. These are unbound. */\n        this.overloads = null;\n        /** Clones of this prototype that are bounds to specific classes. */\n        this.boundPrototypes = null;\n        this.decoratorFlags = decoratorFlags;\n    }\n    /** Gets the associated type parameter nodes. */\n    get typeParameterNodes() {\n        return this.declaration.typeParameters;\n    }\n    /** Gets the associated function type node. */\n    get functionTypeNode() {\n        return this.declaration.signature;\n    }\n    /** Gets the associated body node. */\n    get bodyNode() {\n        return this.declaration.body;\n    }\n    /** Gets the arrow function kind. */\n    get arrowKind() {\n        return this.declaration.arrowKind;\n    }\n    /** Tests if this prototype is bound to a class. */\n    get isBound() {\n        var parent = this.parent;\n        return parent.kind == ElementKind.CLASS ||\n            parent.kind == ElementKind.PROPERTY_PROTOTYPE && (parent.parent.kind == ElementKind.CLASS ||\n                parent.parent.kind == ElementKind.INTERFACE);\n    }\n    /** Creates a clone of this prototype that is bound to a concrete class instead. */\n    toBound(classInstance) {\n        assert(this.is(common_1.CommonFlags.INSTANCE));\n        assert(!this.isBound);\n        var boundPrototypes = this.boundPrototypes;\n        if (!boundPrototypes)\n            this.boundPrototypes = boundPrototypes = new Map();\n        else if (boundPrototypes.has(classInstance))\n            return assert(boundPrototypes.get(classInstance));\n        var declaration = this.declaration;\n        assert(declaration.kind == ast_1.NodeKind.METHODDECLARATION);\n        var bound = new FunctionPrototype(this.name, classInstance, // !\n        declaration, this.decoratorFlags);\n        bound.flags = this.flags;\n        bound.operatorKind = this.operatorKind;\n        bound.overloads = this.overloads;\n        // NOTE: this.instances holds instances per bound class / unbound\n        boundPrototypes.set(classInstance, bound);\n        return bound;\n    }\n    /** Gets the resolved instance for the specified instance key, if already resolved. */\n    getResolvedInstance(instanceKey) {\n        var instances = this.instances;\n        if (instances !== null && instances.has(instanceKey))\n            return assert(instances.get(instanceKey));\n        return null;\n    }\n    /** Sets the resolved instance for the specified instance key. */\n    setResolvedInstance(instanceKey, instance) {\n        var instances = this.instances;\n        if (!instances)\n            this.instances = instances = new Map();\n        else\n            assert(!instances.has(instanceKey));\n        instances.set(instanceKey, instance);\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.FunctionPrototype = FunctionPrototype;\n/** A resolved function. */\nclass Function extends TypedElement {\n    /** Constructs a new concrete function. */\n    constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters, \n    /** Respective function prototype. */\n    prototype, \n    /** Concrete type arguments. */\n    typeArguments, \n    /** Concrete signature. */\n    signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments = null) {\n        super(ElementKind.FUNCTION, nameInclTypeParameters, mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(common_1.CommonFlags.INSTANCE)), prototype.program, prototype.parent, prototype.declaration);\n        /** Map of locals by name. */\n        this.localsByName = new Map();\n        /** Array of locals by index. */\n        this.localsByIndex = [];\n        /** List of additional non-parameter locals. */\n        this.additionalLocals = [];\n        /** Remembered debug locations. */\n        this.debugLocations = [];\n        /** Function reference, if compiled. */\n        this.ref = 0;\n        /** Varargs stub for calling with omitted arguments. */\n        this.varargsStub = null;\n        /** Virtual stub for calling overloads. */\n        this.virtualStub = null;\n        /** Runtime memory segment, if created. */\n        this.memorySegment = null;\n        /** Counting id of inline operations involving this function. */\n        this.nextInlineId = 0;\n        /** Counting id of anonymous inner functions. */\n        this.nextAnonymousId = 0;\n        // used by flows to keep track of temporary locals\n        this.tempI32s = null;\n        this.tempI64s = null;\n        this.tempF32s = null;\n        this.tempF64s = null;\n        this.tempV128s = null;\n        this.tempFuncrefs = null;\n        this.tempExternrefs = null;\n        this.tempExnrefs = null;\n        this.tempAnyrefs = null;\n        // used by flows to keep track of break labels\n        this.nextBreakId = 0;\n        this.breakStack = null;\n        this.breakLabel = null;\n        this.prototype = prototype;\n        this.typeArguments = typeArguments;\n        this.signature = signature;\n        this.flags = prototype.flags | common_1.CommonFlags.RESOLVED;\n        this.decoratorFlags = prototype.decoratorFlags;\n        this.contextualTypeArguments = contextualTypeArguments;\n        this.original = this;\n        var program = prototype.program;\n        this.type = signature.type;\n        if (!prototype.is(common_1.CommonFlags.AMBIENT)) {\n            let localIndex = 0;\n            let thisType = signature.thisType;\n            if (thisType) {\n                let local = new Local(common_1.CommonNames.this_, localIndex++, thisType, this);\n                this.localsByName.set(common_1.CommonNames.this_, local);\n                this.localsByIndex[local.index] = local;\n            }\n            let parameterTypes = signature.parameterTypes;\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n                let parameterType = parameterTypes[i];\n                let parameterName = this.getParameterName(i);\n                let local = new Local(parameterName, localIndex++, parameterType, this);\n                this.localsByName.set(parameterName, local);\n                this.localsByIndex[local.index] = local;\n            }\n        }\n        this.flow = flow_1.Flow.createParent(this);\n        registerConcreteElement(program, this);\n    }\n    /** Gets the name of the parameter at the specified index. */\n    getParameterName(index) {\n        var parameters = this.declaration.signature.parameters;\n        return parameters.length > index\n            ? parameters[index].name.text\n            : getDefaultParameterName(index);\n    }\n    /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n    newStub(postfix) {\n        var stub = new Function(this.original.name + common_1.STUB_DELIMITER + postfix, this.prototype, this.typeArguments, this.signature.clone(), this.contextualTypeArguments);\n        stub.original = this.original;\n        stub.set(this.flags & ~common_1.CommonFlags.COMPILED | common_1.CommonFlags.STUB);\n        return stub;\n    }\n    /** Adds a local of the specified type, with an optional name. */\n    addLocal(type, name = null, declaration = null) {\n        // if it has a name, check previously as this method will throw otherwise\n        var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n        if (this.is(common_1.CommonFlags.INSTANCE))\n            ++localIndex;\n        var localName = name !== null\n            ? name\n            : \"var$\" + localIndex.toString();\n        if (!declaration)\n            declaration = this.program.makeNativeVariableDeclaration(localName);\n        var local = new Local(localName, localIndex, type, this, declaration);\n        if (name) {\n            if (this.localsByName.has(name))\n                throw new Error(\"duplicate local name\");\n            this.localsByName.set(name, local);\n        }\n        this.localsByIndex[local.index] = local;\n        this.additionalLocals.push(type);\n        return local;\n    }\n    /* @override */\n    lookup(name) {\n        var locals = this.localsByName;\n        if (locals.has(name))\n            return assert(locals.get(name));\n        return this.parent.lookup(name);\n    }\n    /** Finalizes the function once compiled, releasing no longer needed resources. */\n    finalize(module, ref) {\n        this.ref = ref;\n        var breakStack = this.breakStack;\n        assert(!breakStack || !breakStack.length); // internal error\n        this.breakStack = breakStack = null;\n        this.breakLabel = null;\n        this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n        if (this.program.options.sourceMap) {\n            let debugLocations = this.debugLocations;\n            for (let i = 0, k = debugLocations.length; i < k; ++i) {\n                let range = debugLocations[i];\n                let source = range.source;\n                module.setDebugLocation(ref, range.debugInfoRef, source.debugInfoIndex, source.lineAt(range.start), source.columnAt() - 1 // source maps are 0-based\n                );\n            }\n        }\n    }\n}\nexports.Function = Function;\n/** A yet unresolved instance field prototype. */\nclass FieldPrototype extends DeclaredElement {\n    /** Constructs a new field prototype. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent class. */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE) {\n        super(ElementKind.FIELD_PROTOTYPE, name, mangleInternalName(name, parent, assert(declaration.is(common_1.CommonFlags.INSTANCE))), parent.program, parent, declaration);\n        this.decoratorFlags = decoratorFlags;\n    }\n    /** Gets the associated type node. */\n    get typeNode() {\n        return this.declaration.type;\n    }\n    /** Gets the associated initializer node. */\n    get initializerNode() {\n        return this.declaration.initializer;\n    }\n    /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n    get parameterIndex() {\n        return this.declaration.parameterIndex;\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.FieldPrototype = FieldPrototype;\n/** A resolved instance field. */\nclass Field extends VariableLikeElement {\n    /** Constructs a new field. */\n    constructor(\n    /** Respective field prototype. */\n    prototype, \n    /** Parent class. */\n    parent, \n    /** Concrete type. */\n    type) {\n        super(ElementKind.FIELD, prototype.name, parent, prototype.declaration);\n        /** Field memory offset, if an instance field. */\n        this.memoryOffset = -1;\n        /** Getter function reference, if compiled. */\n        this.getterRef = 0;\n        /** Setter function reference, if compiled. */\n        this.setterRef = 0;\n        this._internalGetterName = null;\n        this._internalSetterName = null;\n        this._internalGetterSignature = null;\n        this._internalSetterSignature = null;\n        this.prototype = prototype;\n        this.flags = prototype.flags;\n        this.decoratorFlags = prototype.decoratorFlags;\n        assert(type != types_1.Type.void);\n        this.setType(type);\n        registerConcreteElement(this.program, this);\n    }\n    /** Gets the field's `this` type. */\n    get thisType() {\n        var parent = this.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        return parent.type;\n    }\n    /** Gets the internal name of the respective getter function. */\n    get internalGetterName() {\n        var cached = this._internalGetterName;\n        if (cached === null)\n            this._internalGetterName = cached = this.parent.internalName + common_1.INSTANCE_DELIMITER + common_1.GETTER_PREFIX + this.name;\n        return cached;\n    }\n    /** Gets the internal name of the respective setter function. */\n    get internalSetterName() {\n        var cached = this._internalSetterName;\n        if (cached === null)\n            this._internalSetterName = cached = this.parent.internalName + common_1.INSTANCE_DELIMITER + common_1.SETTER_PREFIX + this.name;\n        return cached;\n    }\n    /** Gets the signature of the respective getter function. */\n    get internalGetterSignature() {\n        var cached = this._internalGetterSignature;\n        if (!cached)\n            this._internalGetterSignature = cached = new types_1.Signature(this.program, null, this.type, this.thisType);\n        return cached;\n    }\n    /** Gets the signature of the respective setter function. */\n    get internalSetterSignature() {\n        var cached = this._internalSetterSignature;\n        if (!cached)\n            this._internalGetterSignature = cached = new types_1.Signature(this.program, [this.type], types_1.Type.void, this.thisType);\n        return cached;\n    }\n}\nexports.Field = Field;\n/** A property comprised of a getter and a setter function. */\nclass PropertyPrototype extends DeclaredElement {\n    /** Constructs a new property prototype. */\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent element. Either a class prototype or instance. */\n    parent, \n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration) {\n        super(ElementKind.PROPERTY_PROTOTYPE, name, mangleInternalName(name, parent, firstDeclaration.is(common_1.CommonFlags.INSTANCE)), parent.program, parent, firstDeclaration);\n        /** Getter prototype. */\n        this.getterPrototype = null;\n        /** Setter prototype. */\n        this.setterPrototype = null;\n        /** Property instance, if resolved. */\n        this.instance = null;\n        /** Clones of this prototype that are bound to specific classes. */\n        this.boundPrototypes = null;\n        this.flags &= ~(common_1.CommonFlags.GET | common_1.CommonFlags.SET);\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n    /** Tests if this prototype is bound to a class. */\n    get isBound() {\n        switch (this.parent.kind) {\n            case ElementKind.CLASS:\n            case ElementKind.INTERFACE: return true;\n        }\n        return false;\n    }\n    /** Creates a clone of this prototype that is bound to a concrete class instead. */\n    toBound(classInstance) {\n        assert(this.is(common_1.CommonFlags.INSTANCE));\n        assert(!this.isBound);\n        var boundPrototypes = this.boundPrototypes;\n        if (!boundPrototypes)\n            this.boundPrototypes = boundPrototypes = new Map();\n        else if (boundPrototypes.has(classInstance))\n            return assert(boundPrototypes.get(classInstance));\n        var firstDeclaration = this.declaration;\n        assert(firstDeclaration.kind == ast_1.NodeKind.METHODDECLARATION);\n        var bound = new PropertyPrototype(this.name, classInstance, // !\n        firstDeclaration);\n        bound.flags = this.flags;\n        var getterPrototype = this.getterPrototype;\n        if (getterPrototype) {\n            bound.getterPrototype = getterPrototype.toBound(classInstance);\n        }\n        var setterPrototype = this.setterPrototype;\n        if (setterPrototype) {\n            bound.setterPrototype = setterPrototype.toBound(classInstance);\n        }\n        boundPrototypes.set(classInstance, bound);\n        return bound;\n    }\n}\nexports.PropertyPrototype = PropertyPrototype;\n/** A resolved property. */\nclass Property extends VariableLikeElement {\n    /** Constructs a new property prototype. */\n    constructor(\n    /** Respective property prototype. */\n    prototype, \n    /** Parent element, usually a static class prototype or class instance. */\n    parent) {\n        super(ElementKind.PROPERTY, prototype.name, parent, ast_1.Node.createVariableDeclaration(prototype.identifierNode, null, prototype.is(common_1.CommonFlags.INSTANCE)\n            ? common_1.CommonFlags.INSTANCE\n            : common_1.CommonFlags.NONE, null, null, prototype.identifierNode.range));\n        /** Getter instance. */\n        this.getterInstance = null;\n        /** Setter instance. */\n        this.setterInstance = null;\n        this.prototype = prototype;\n        this.flags = prototype.flags;\n        this.decoratorFlags = prototype.decoratorFlags;\n        if (this.is(common_1.CommonFlags.INSTANCE)) {\n            registerConcreteElement(this.program, this);\n        }\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.Property = Property;\n/** A resolved index signature. */\nclass IndexSignature extends TypedElement {\n    /** Constructs a new index prototype. */\n    constructor(\n    /** Parent class. */\n    parent) {\n        super(ElementKind.INDEXSIGNATURE, \"[]\", parent.internalName + \"[]\", parent.program, parent, parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n        );\n    }\n    /** Obtains the getter instance. */\n    getGetterInstance(isUnchecked) {\n        return this.parent.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n    }\n    /** Obtains the setter instance. */\n    getSetterInstance(isUnchecked) {\n        return this.parent.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.IndexSignature = IndexSignature;\n/** A yet unresolved class prototype. */\nclass ClassPrototype extends DeclaredElement {\n    constructor(\n    /** Simple name. */\n    name, \n    /** Parent element, usually a file or namespace. */\n    parent, \n    /** Declaration reference. */\n    declaration, \n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags = DecoratorFlags.NONE, _isInterface = false // FIXME\n    ) {\n        super(_isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE, name, mangleInternalName(name, parent, declaration.is(common_1.CommonFlags.INSTANCE)), parent.program, parent, declaration);\n        /** Instance member prototypes. */\n        this.instanceMembers = null;\n        /** Base class prototype, if applicable. */\n        this.basePrototype = null;\n        /** Interface prototypes, if applicable. */\n        this.interfacePrototypes = null;\n        /** Constructor prototype. */\n        this.constructorPrototype = null;\n        /** Operator overload prototypes. */\n        this.overloadPrototypes = new Map();\n        /** Already resolved instances. */\n        this.instances = null;\n        /** Classes extending this class. */\n        this.extendees = new Set();\n        this.decoratorFlags = decoratorFlags;\n    }\n    /** Gets the associated type parameter nodes. */\n    get typeParameterNodes() {\n        return this.declaration.typeParameters;\n    }\n    /** Gets the associated extends node. */\n    get extendsNode() {\n        return this.declaration.extendsType;\n    }\n    /** Gets the associated implements nodes. */\n    get implementsNodes() {\n        return this.declaration.implementsTypes;\n    }\n    /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n    get isBuiltinArray() {\n        var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n        return arrayBufferViewInstance !== null\n            && this.extends(arrayBufferViewInstance.prototype);\n    }\n    /** Tests if this prototype extends the specified. */\n    extends(basePtototype) {\n        var current = this;\n        var seen = new Set();\n        do {\n            // cannot directly or indirectly extend itself\n            if (seen.has(current))\n                break;\n            seen.add(current);\n            if (current === basePtototype)\n                return true;\n            current = current.basePrototype;\n        } while (current);\n        return false;\n    }\n    /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n    addInstance(name, element) {\n        var originalDeclaration = element.declaration;\n        var instanceMembers = this.instanceMembers;\n        if (!instanceMembers)\n            this.instanceMembers = instanceMembers = new Map();\n        else if (instanceMembers.has(name)) {\n            let existing = assert(instanceMembers.get(name));\n            let merged = tryMerge(existing, element);\n            if (!merged) {\n                if (isDeclaredElement(existing.kind)) {\n                    this.program.errorRelated(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, element.identifierNode.range, existing.declaration.name.range, element.identifierNode.text);\n                }\n                else {\n                    this.program.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, element.identifierNode.range, element.identifierNode.text);\n                }\n                return false;\n            }\n            element = merged;\n        }\n        instanceMembers.set(name, element);\n        if (element.is(common_1.CommonFlags.EXPORT) && this.is(common_1.CommonFlags.MODULE_EXPORT)) {\n            element.set(common_1.CommonFlags.MODULE_EXPORT); // propagate\n        }\n        this.program.elementsByDeclaration.set(originalDeclaration, element);\n        return true;\n    }\n    /** Gets the resolved instance for the specified instance key, if already resolved. */\n    getResolvedInstance(instanceKey) {\n        var instances = this.instances;\n        if (instances !== null && instances.has(instanceKey))\n            return instances.get(instanceKey);\n        return null;\n    }\n    /** Sets the resolved instance for the specified instance key. */\n    setResolvedInstance(instanceKey, instance) {\n        var instances = this.instances;\n        if (!instances)\n            this.instances = instances = new Map();\n        else\n            assert(!instances.has(instanceKey));\n        instances.set(instanceKey, instance);\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n}\nexports.ClassPrototype = ClassPrototype;\n/** A resolved class. */\nclass Class extends TypedElement {\n    /** Constructs a new class. */\n    constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters, \n    /** The respective class prototype. */\n    prototype, \n    /** Concrete type arguments, if any. */\n    typeArguments = null, _isInterface = false // FIXME\n    ) {\n        super(_isInterface ? ElementKind.INTERFACE : ElementKind.CLASS, nameInclTypeParameters, mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(common_1.CommonFlags.INSTANCE)), prototype.program, prototype.parent, prototype.declaration);\n        /** Base class, if applicable. */\n        this.base = null;\n        /** Implemented interfaces, if applicable. */\n        this.interfaces = null;\n        /** Contextual type arguments for fields and methods. */\n        this.contextualTypeArguments = null;\n        /** Current member memory offset. */\n        this.nextMemoryOffset = 0;\n        /** Constructor instance. */\n        this.constructorInstance = null;\n        /** Operator overloads. */\n        this.overloads = null;\n        /** Index signature, if present. */\n        this.indexSignature = null;\n        /** Unique class id. */\n        this._id = 0;\n        /** Runtime type information flags. */\n        this.rttiFlags = 0;\n        /** Wrapped type, if a wrapper for a basic type. */\n        this.wrappedType = null;\n        /** Classes directly extending this class. */\n        this.extendees = null;\n        /** Classes implementing this interface. */\n        this.implementers = null;\n        /** Whether the field initialization check has already been performed. */\n        this.didCheckFieldInitialization = false;\n        /** Runtime visitor function reference. */\n        this.visitRef = 0;\n        var program = this.program;\n        this.prototype = prototype;\n        this.flags = prototype.flags;\n        this.decoratorFlags = prototype.decoratorFlags;\n        this.typeArguments = typeArguments;\n        var usizeType = program.options.usizeType;\n        var type = new types_1.Type(usizeType.kind, usizeType.flags & ~128 /* VALUE */ | 256 /* REFERENCE */, usizeType.size);\n        type.classReference = this;\n        this.setType(type);\n        if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n            let id = program.nextClassId++;\n            this._id = id;\n            program.managedClasses.set(id, this);\n        }\n        // apply pre-checked instance-specific contextual type arguments\n        var typeParameters = prototype.typeParameterNodes;\n        if (typeArguments) {\n            let numTypeArguments = typeArguments.length;\n            if (!typeParameters || numTypeArguments != typeParameters.length) {\n                throw new Error(\"type argument count mismatch\");\n            }\n            if (numTypeArguments) {\n                let contextualTypeArguments = this.contextualTypeArguments;\n                if (!contextualTypeArguments)\n                    this.contextualTypeArguments = contextualTypeArguments = new Map();\n                for (let i = 0; i < numTypeArguments; ++i) {\n                    contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n                }\n            }\n        }\n        else if (typeParameters !== null && typeParameters.length > 0) {\n            throw new Error(\"type argument count mismatch\");\n        }\n        registerConcreteElement(program, this);\n    }\n    /** Gets the unique runtime id of this class. */\n    get id() {\n        return this._id; // unmanaged remains 0 (=ArrayBuffer)\n    }\n    /** Tests if this class is of a builtin array type (Array/TypedArray). */\n    get isBuiltinArray() {\n        return this.prototype.isBuiltinArray;\n    }\n    /** Tests if this class is array-like. */\n    get isArrayLike() {\n        if (this.isBuiltinArray)\n            return true;\n        var lengthField = this.lookupInSelf(\"length\");\n        return lengthField !== null && (lengthField.kind == ElementKind.FIELD ||\n            (lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                lengthField.getterPrototype !== null // TODO: resolve & check type?\n            )) && (this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n            this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null);\n    }\n    /** Sets the base class. */\n    setBase(base) {\n        assert(!this.base);\n        this.base = base;\n        var extendees = base.extendees;\n        if (!extendees)\n            base.extendees = extendees = new Set();\n        extendees.add(this);\n        // Inherit contextual type arguments from base class\n        var inheritedTypeArguments = base.contextualTypeArguments;\n        if (inheritedTypeArguments) {\n            let contextualTypeArguments = this.contextualTypeArguments;\n            // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n            for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n                let baseName = unchecked(_keys[i]);\n                let baseType = assert(inheritedTypeArguments.get(baseName));\n                if (!contextualTypeArguments) {\n                    this.contextualTypeArguments = contextualTypeArguments = new Map();\n                    contextualTypeArguments.set(baseName, baseType);\n                }\n                else if (!contextualTypeArguments.has(baseName)) {\n                    contextualTypeArguments.set(baseName, baseType);\n                }\n            }\n        }\n    }\n    /** Adds an interface. */\n    addInterface(iface) {\n        var interfaces = this.interfaces;\n        if (!interfaces)\n            this.interfaces = interfaces = new Set();\n        interfaces.add(iface);\n        var implementers = iface.implementers;\n        if (!implementers)\n            iface.implementers = implementers = new Set();\n        implementers.add(this);\n    }\n    /** Tests if a value of this class type is assignable to a target of the specified class type. */\n    isAssignableTo(target) {\n        var current = this;\n        do {\n            if (current == target)\n                return true;\n            if (target.kind == ElementKind.INTERFACE) {\n                let interfaces = current.interfaces;\n                if (interfaces) {\n                    for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n                        let iface = _values[i];\n                        if (iface.isAssignableTo(target))\n                            return true;\n                    }\n                }\n            }\n            current = current.base;\n        } while (current);\n        return false;\n    }\n    /** Looks up the operator overload of the specified kind. */\n    lookupOverload(kind, unchecked = false) {\n        if (unchecked) {\n            switch (kind) {\n                case OperatorKind.INDEXED_GET: {\n                    let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n                    if (uncheckedOverload)\n                        return uncheckedOverload;\n                    break;\n                }\n                case OperatorKind.INDEXED_SET: {\n                    let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n                    if (uncheckedOverload)\n                        return uncheckedOverload;\n                    break;\n                }\n                default: assert(false);\n            }\n        }\n        var instance = this;\n        do {\n            let overloads = instance.overloads;\n            if (overloads != null && overloads.has(kind)) {\n                return assert(overloads.get(kind));\n            }\n            instance = instance.base;\n        } while (instance);\n        return null;\n    }\n    /* @override */\n    lookup(name) {\n        return this.parent.lookup(name);\n    }\n    /** Calculates the memory offset of the specified field. */\n    offsetof(fieldName) {\n        var members = assert(this.members);\n        assert(members.has(fieldName));\n        var field = members.get(fieldName);\n        assert(field.kind == ElementKind.FIELD);\n        return field.memoryOffset;\n    }\n    /** Creates a buffer suitable to hold a runtime instance of this class. */\n    createBuffer(overhead = 0) {\n        var program = this.program;\n        var payloadSize = this.nextMemoryOffset + overhead;\n        var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n        var buffer = new Uint8Array(program.blockOverhead + blockSize);\n        var OBJECT = program.OBJECTInstance;\n        OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n        OBJECT.writeField(\"gcInfo\", 0, buffer, 0);\n        OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n        OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n        OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n        return buffer;\n    }\n    /** Writes a field value to a buffer and returns the number of bytes written. */\n    writeField(name, value, buffer, baseOffset = this.program.totalOverhead) {\n        var element = this.lookupInSelf(name);\n        if (element !== null && element.kind == ElementKind.FIELD) {\n            let fieldInstance = element;\n            let offset = baseOffset + fieldInstance.memoryOffset;\n            let typeKind = fieldInstance.type.kind;\n            switch (typeKind) {\n                case 0 /* I8 */:\n                case 5 /* U8 */: {\n                    assert(!i64_is(value));\n                    util_1.writeI8(i32(value), buffer, offset);\n                    return 1;\n                }\n                case 1 /* I16 */:\n                case 6 /* U16 */: {\n                    assert(!i64_is(value));\n                    util_1.writeI16(i32(value), buffer, offset);\n                    return 2;\n                }\n                case 2 /* I32 */:\n                case 7 /* U32 */: {\n                    assert(!i64_is(value));\n                    util_1.writeI32(i32(value), buffer, offset);\n                    return 4;\n                }\n                case 4 /* ISIZE */:\n                case 9 /* USIZE */: {\n                    if (this.program.options.isWasm64) {\n                        if (i64_is(value)) {\n                            util_1.writeI64(value, buffer, offset);\n                        }\n                        else {\n                            util_1.writeI32AsI64(i32(value), buffer, offset, typeKind == 9 /* USIZE */);\n                        }\n                        return 8;\n                    }\n                    else {\n                        if (i64_is(value)) {\n                            util_1.writeI64AsI32(value, buffer, offset, typeKind == 9 /* USIZE */);\n                        }\n                        else {\n                            util_1.writeI32(i32(value), buffer, offset);\n                        }\n                        return 4;\n                    }\n                }\n                case 3 /* I64 */:\n                case 8 /* U64 */: {\n                    if (i64_is(value)) {\n                        util_1.writeI64(value, buffer, offset);\n                    }\n                    else {\n                        util_1.writeI32AsI64(i32(value), buffer, offset, typeKind == 8 /* U64 */);\n                    }\n                    return 8;\n                }\n                case 11 /* F32 */: {\n                    assert(!i64_is(value));\n                    util_1.writeF32(f32(value), buffer, offset);\n                    return 4;\n                }\n                case 12 /* F64 */: {\n                    assert(!i64_is(value));\n                    util_1.writeF64(f64(value), buffer, offset);\n                    return 8;\n                }\n            }\n        }\n        assert(false);\n        return 0;\n    }\n    /** Tests if this class extends the specified prototype. */\n    extends(prototype) {\n        return this.prototype.extends(prototype);\n    }\n    /** Gets the concrete type arguments to the specified extendend prototype. */\n    getTypeArgumentsTo(extendedPrototype) {\n        var current = this;\n        do {\n            if (current.prototype === extendedPrototype)\n                return current.typeArguments;\n            current = current.base;\n        } while (current);\n        return null;\n    }\n    /** Gets the value type of an array. Must be an array. */\n    getArrayValueType() {\n        var current = this;\n        var program = this.program;\n        var arrayPrototype = program.arrayPrototype;\n        if (this.extends(arrayPrototype)) {\n            return this.getTypeArgumentsTo(arrayPrototype)[0];\n        }\n        var staticArrayPrototype = program.staticArrayPrototype;\n        if (this.extends(staticArrayPrototype)) {\n            return this.getTypeArgumentsTo(staticArrayPrototype)[0];\n        }\n        var abvInstance = program.arrayBufferViewInstance;\n        while (current.base !== abvInstance) {\n            current = assert(current.base);\n        }\n        var prototype = current.prototype;\n        switch (prototype.name.charCodeAt(0)) {\n            case 70 /* F */: {\n                if (prototype == program.float32ArrayPrototype)\n                    return types_1.Type.f32;\n                if (prototype == program.float64ArrayPrototype)\n                    return types_1.Type.f64;\n                break;\n            }\n            case 73 /* I */: {\n                if (prototype == program.int8ArrayPrototype)\n                    return types_1.Type.i8;\n                if (prototype == program.int16ArrayPrototype)\n                    return types_1.Type.i16;\n                if (prototype == program.int32ArrayPrototype)\n                    return types_1.Type.i32;\n                if (prototype == program.int64ArrayPrototype)\n                    return types_1.Type.i64;\n                break;\n            }\n            case 85 /* U */: {\n                if (prototype == program.uint8ArrayPrototype)\n                    return types_1.Type.u8;\n                if (prototype == program.uint8ClampedArrayPrototype)\n                    return types_1.Type.u8;\n                if (prototype == program.uint16ArrayPrototype)\n                    return types_1.Type.u16;\n                if (prototype == program.uint32ArrayPrototype)\n                    return types_1.Type.u32;\n                if (prototype == program.uint64ArrayPrototype)\n                    return types_1.Type.u64;\n                break;\n            }\n        }\n        assert(false);\n        return types_1.Type.void;\n    }\n    /** Tests if this class is pointerfree. Useful to know for the GC. */\n    get isPointerfree() {\n        var program = this.program;\n        var instanceMembers = this.members;\n        if (instanceMembers) {\n            // Check that there are no managed instance fields\n            for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                if (member.kind == ElementKind.FIELD) {\n                    let fieldType = member.type;\n                    if (fieldType.isManaged)\n                        return false;\n                }\n            }\n            // Check that this isn't a managed collection\n            if (instanceMembers.has(common_1.CommonNames.visit)) {\n                let prototype = this.prototype;\n                if (prototype == program.arrayPrototype ||\n                    prototype == program.staticArrayPrototype ||\n                    prototype == program.setPrototype ||\n                    prototype == program.mapPrototype) {\n                    // Note that we cannot know for sure anymore as soon as the collection\n                    // is extended, because user code may implement a custom visitor.\n                    let typeArguments = assert(this.getTypeArgumentsTo(prototype));\n                    for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                        if (typeArguments[i].isManaged)\n                            return false;\n                    }\n                    return true;\n                }\n                return false; // has a custom __visit\n            }\n        }\n        return true;\n    }\n    /** Gets all extendees of this class (that do not have the specified instance member). */\n    getAllExtendees(exceptIfMember = null, out = new Set()) {\n        var extendees = this.extendees;\n        if (extendees) {\n            for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n                let extendee = _values[i];\n                if (exceptIfMember) {\n                    let instanceMembers = extendee.prototype.instanceMembers;\n                    if (instanceMembers !== null && instanceMembers.has(exceptIfMember))\n                        continue;\n                }\n                out.add(extendee);\n                extendee.getAllExtendees(exceptIfMember, out);\n            }\n        }\n        return out;\n    }\n}\nexports.Class = Class;\n/** A yet unresolved interface. */\nclass InterfacePrototype extends ClassPrototype {\n    /** Constructs a new interface prototype. */\n    constructor(name, parent, declaration, decoratorFlags) {\n        super(name, parent, declaration, decoratorFlags, true);\n    }\n}\nexports.InterfacePrototype = InterfacePrototype;\n/** A resolved interface. */\nclass Interface extends Class {\n    /** Constructs a new interface. */\n    constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters, \n    /** The respective class prototype. */\n    prototype, \n    /** Concrete type arguments, if any. */\n    typeArguments = null) {\n        super(nameInclTypeParameters, prototype, typeArguments, true);\n    }\n}\nexports.Interface = Interface;\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program, element) {\n    assert(!program.instancesByName.has(element.internalName));\n    program.instancesByName.set(element.internalName, element);\n}\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older, newer) {\n    // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n    // suggesting to just merge what seems to be possible for now and revisit later.\n    assert(older.program === newer.program);\n    if (newer.members)\n        return null;\n    var merged = null;\n    switch (older.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n            switch (newer.kind) {\n                case ElementKind.NAMESPACE: {\n                    copyMembers(newer, older);\n                    merged = older;\n                    break;\n                }\n                case ElementKind.TYPEDEFINITION: {\n                    if (!older.shadowType) {\n                        older.shadowType = newer;\n                        copyMembers(newer, older);\n                        merged = older;\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n        case ElementKind.CLASS_PROTOTYPE:\n        case ElementKind.ENUM: {\n            if (newer.kind == ElementKind.NAMESPACE) {\n                copyMembers(newer, older);\n                merged = older;\n                break;\n            }\n            break;\n        }\n        case ElementKind.NAMESPACE: {\n            switch (newer.kind) {\n                case ElementKind.ENUM:\n                case ElementKind.CLASS_PROTOTYPE: // TS2434\n                case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n                    copyMembers(older, newer);\n                    merged = newer;\n                    break;\n                }\n                case ElementKind.NAMESPACE: {\n                    copyMembers(newer, older);\n                    merged = older;\n                    break;\n                }\n                case ElementKind.TYPEDEFINITION: {\n                    if (!older.shadowType) {\n                        older.shadowType = newer;\n                        copyMembers(newer, older);\n                        merged = older;\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n        case ElementKind.GLOBAL: {\n            if (newer.kind == ElementKind.TYPEDEFINITION) {\n                if (!older.shadowType) {\n                    older.shadowType = newer;\n                    copyMembers(newer, older);\n                    merged = older;\n                }\n            }\n            break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n            switch (newer.kind) {\n                case ElementKind.GLOBAL:\n                case ElementKind.FUNCTION_PROTOTYPE:\n                case ElementKind.NAMESPACE: {\n                    if (!newer.shadowType) {\n                        newer.shadowType = older;\n                        copyMembers(older, newer);\n                        merged = newer;\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    if (merged) {\n        let olderIsExport = older.is(common_1.CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n        let newerIsExport = newer.is(common_1.CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n        if (olderIsExport != newerIsExport) {\n            older.program.error(diagnostics_1.DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, merged.identifierNode.range, merged.identifierNode.text);\n        }\n    }\n    return merged;\n}\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src, dest) {\n    var srcMembers = src.members;\n    if (srcMembers) {\n        let destMembers = dest.members;\n        if (!destMembers)\n            dest.members = destMembers = new Map();\n        // TODO: for (let [memberName, member] of srcMembers) {\n        for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(srcMembers.get(memberName));\n            destMembers.set(memberName, member);\n        }\n    }\n}\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nfunction mangleInternalName(name, parent, isInstance, asGlobal = false) {\n    switch (parent.kind) {\n        case ElementKind.FILE: {\n            if (asGlobal)\n                return name;\n            return parent.internalName + common_1.PATH_DELIMITER + name;\n        }\n        case ElementKind.FUNCTION: {\n            if (asGlobal)\n                return name;\n            assert(!isInstance);\n            return parent.internalName + common_1.INNER_DELIMITER + name;\n        }\n        case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n        case ElementKind.PROPERTY: { //\n            parent = parent.parent;\n            // fall-through\n        }\n        default: {\n            return mangleInternalName(parent.name, parent.parent, parent.is(common_1.CommonFlags.INSTANCE), asGlobal)\n                + (isInstance ? common_1.INSTANCE_DELIMITER : common_1.STATIC_DELIMITER) + name;\n        }\n    }\n}\nexports.mangleInternalName = mangleInternalName;\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames = [];\n/** Gets the cached default parameter name for the specified index. */\nfunction getDefaultParameterName(index) {\n    for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n        cachedDefaultParameterNames.push(\"$\" + i.toString());\n    }\n    return cachedDefaultParameterNames[index];\n}\nexports.getDefaultParameterName = getDefaultParameterName;\n\n\n/***/ }),\n\n/***/ 742:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Resolver = exports.ReportMode = void 0;\nconst diagnostics_1 = __webpack_require__(256);\nconst program_1 = __webpack_require__(974);\nconst tokenizer_1 = __webpack_require__(411);\nconst ast_1 = __webpack_require__(60);\nconst types_1 = __webpack_require__(699);\nconst common_1 = __webpack_require__(200);\nconst util_1 = __webpack_require__(910);\nconst tokenizer_2 = __webpack_require__(411);\nconst builtins_1 = __webpack_require__(346);\n/** Indicates whether errors are reported or not. */\nvar ReportMode;\n(function (ReportMode) {\n    /** Report errors. */\n    ReportMode[ReportMode[\"REPORT\"] = 0] = \"REPORT\";\n    /** Swallow errors. */\n    ReportMode[ReportMode[\"SWALLOW\"] = 1] = \"SWALLOW\";\n})(ReportMode = exports.ReportMode || (exports.ReportMode = {}));\n/** Provides tools to resolve types and expressions. */\nclass Resolver extends diagnostics_1.DiagnosticEmitter {\n    /** Constructs the resolver for the specified program. */\n    constructor(\n    /** The program to construct a resolver for. */\n    program) {\n        super(program.diagnostics);\n        /** Target expression of the previously resolved property or element access. */\n        this.currentThisExpression = null;\n        /** Element expression of the previously resolved element access. */\n        this.currentElementExpression = null;\n        /** Currently resolving classes. */\n        this.resolveClassPending = new Set();\n        this.program = program;\n    }\n    // ====================================================== Types ======================================================\n    /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n    resolveType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        switch (node.kind) {\n            case ast_1.NodeKind.NAMEDTYPE: {\n                return this.resolveNamedType(node, ctxElement, ctxTypes, reportMode);\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                return this.resolveFunctionType(node, ctxElement, ctxTypes, reportMode);\n            }\n            default: assert(false);\n        }\n        return null;\n    }\n    /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n    resolveNamedType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var nameNode = node.name;\n        var typeArgumentNodes = node.typeArguments;\n        var isSimpleType = !nameNode.next;\n        // Look up in contextual types if a simple type\n        if (isSimpleType) {\n            let simpleName = nameNode.identifier.text;\n            if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n                let type = assert(ctxTypes.get(simpleName));\n                if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, node.range, type.toString());\n                    }\n                }\n                if (node.isNullable) {\n                    if (type.isInternalReference)\n                        return type.asNullable();\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_cannot_be_nullable, node.range, type.toString());\n                    }\n                }\n                return type;\n            }\n        }\n        // Look up in context\n        var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n        if (!element)\n            return null;\n        // Use shadow type if present (i.e. namespace sharing a type)\n        var shadowType = element.shadowType;\n        if (shadowType) {\n            element = shadowType;\n        }\n        else {\n            // Handle enums (become i32)\n            if (element.kind == program_1.ElementKind.ENUM) {\n                if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, node.range, element.internalName);\n                    }\n                }\n                if (node.isNullable) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_cannot_be_nullable, node.range, element.name + \"/i32\");\n                    }\n                }\n                return types_1.Type.i32;\n            }\n            // Handle classes and interfaces\n            if (element.kind == program_1.ElementKind.CLASS_PROTOTYPE ||\n                element.kind == program_1.ElementKind.INTERFACE_PROTOTYPE) {\n                let instance = this.resolveClassInclTypeArguments(element, typeArgumentNodes, ctxElement, util_1.uniqueMap(ctxTypes), // don't inherit\n                node, reportMode);\n                if (!instance)\n                    return null;\n                return node.isNullable ? instance.type.asNullable() : instance.type;\n            }\n        }\n        // Handle type definitions\n        if (element.kind == program_1.ElementKind.TYPEDEFINITION) {\n            let typeDefinition = element;\n            // Shortcut already resolved (mostly builtins)\n            if (element.is(common_1.CommonFlags.RESOLVED)) {\n                if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, node.range, element.internalName);\n                    }\n                }\n                let type = typeDefinition.type;\n                if (node.isNullable) {\n                    if (type.isInternalReference)\n                        return type.asNullable();\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Type_0_cannot_be_nullable, nameNode.range, nameNode.identifier.text);\n                    }\n                }\n                return type;\n            }\n            // Handle special built-in types\n            if (isSimpleType) {\n                let text = nameNode.identifier.text;\n                if (text == common_1.CommonNames.native)\n                    return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n                if (text == common_1.CommonNames.indexof)\n                    return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n                if (text == common_1.CommonNames.valueof)\n                    return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n                if (text == common_1.CommonNames.returnof)\n                    return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n            }\n            // Resolve normally\n            let typeParameterNodes = typeDefinition.typeParameterNodes;\n            let typeArguments = null;\n            if (typeParameterNodes) {\n                typeArguments = this.resolveTypeArguments(typeParameterNodes, typeArgumentNodes, ctxElement, ctxTypes = util_1.uniqueMap(ctxTypes), // inherit\n                node, reportMode);\n                if (!typeArguments)\n                    return null;\n            }\n            else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, node.range, nameNode.identifier.text);\n            }\n            let type = this.resolveType(typeDefinition.typeNode, element, ctxTypes, reportMode);\n            if (!type)\n                return null;\n            if (node.isNullable) {\n                if (type.isInternalReference)\n                    return type.asNullable();\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_cannot_be_nullable, nameNode.range, nameNode.identifier.text);\n                }\n            }\n            return type;\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, nameNode.range, nameNode.identifier.text);\n        }\n        return null;\n    }\n    /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n    resolveFunctionType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var explicitThisType = node.explicitThisType;\n        var thisType = null;\n        if (explicitThisType) {\n            thisType = this.resolveType(explicitThisType, ctxElement, ctxTypes, reportMode);\n            if (!thisType)\n                return null;\n        }\n        var parameterNodes = node.parameters;\n        var numParameters = parameterNodes.length;\n        var parameterTypes = new Array(numParameters);\n        var requiredParameters = 0;\n        var hasRest = false;\n        for (let i = 0; i < numParameters; ++i) {\n            let parameterNode = parameterNodes[i];\n            switch (parameterNode.parameterKind) {\n                case ast_1.ParameterKind.DEFAULT: {\n                    requiredParameters = i + 1;\n                    break;\n                }\n                case ast_1.ParameterKind.REST: {\n                    assert(i == numParameters);\n                    hasRest = true;\n                    break;\n                }\n            }\n            let parameterTypeNode = parameterNode.type;\n            if (ast_1.isTypeOmitted(parameterTypeNode)) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, parameterTypeNode.range);\n                }\n                return null;\n            }\n            let parameterType = this.resolveType(parameterTypeNode, ctxElement, ctxTypes, reportMode);\n            if (!parameterType)\n                return null;\n            parameterTypes[i] = parameterType;\n        }\n        var returnTypeNode = node.returnType;\n        var returnType;\n        if (ast_1.isTypeOmitted(returnTypeNode)) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, returnTypeNode.range);\n            }\n            returnType = types_1.Type.void;\n        }\n        else {\n            returnType = this.resolveType(returnTypeNode, ctxElement, ctxTypes, reportMode);\n            if (!returnType)\n                return null;\n        }\n        var signature = new types_1.Signature(this.program, parameterTypes, returnType, thisType);\n        signature.requiredParameters = requiredParameters;\n        signature.hasRest = hasRest;\n        return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n    resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var typeArgumentNodes = node.typeArguments;\n        if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n            if (reportMode == ReportMode.REPORT) {\n                let numTypeArguments = 0;\n                if (typeArgumentNodes)\n                    numTypeArguments = typeArgumentNodes.length;\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, node.range, \"1\", numTypeArguments.toString());\n            }\n            return null;\n        }\n        var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n        if (!typeArgument)\n            return null;\n        switch (typeArgument.kind) {\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */: return types_1.Type.i32;\n            case 4 /* ISIZE */: if (!this.program.options.isWasm64)\n                return types_1.Type.i32;\n            case 3 /* I64 */: return types_1.Type.i64;\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: return types_1.Type.u32;\n            case 9 /* USIZE */: if (!this.program.options.isWasm64)\n                return types_1.Type.u32;\n            case 8 /* U64 */: return types_1.Type.u64;\n            case 11 /* F32 */: return types_1.Type.f32;\n            case 12 /* F64 */: return types_1.Type.f64;\n            case 13 /* V128 */: return types_1.Type.v128;\n            case 18 /* VOID */: return types_1.Type.void;\n            default: assert(false);\n        }\n        return null;\n    }\n    resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var typeArgumentNodes = node.typeArguments;\n        if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n            if (reportMode == ReportMode.REPORT) {\n                let numTypeArguments = 0;\n                if (typeArgumentNodes)\n                    numTypeArguments = typeArgumentNodes.length;\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, node.range, \"1\", numTypeArguments.toString());\n            }\n            return null;\n        }\n        var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n        if (!typeArgument)\n            return null;\n        var classReference = typeArgument.classReference;\n        if (!classReference) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, typeArgumentNodes[0].range, typeArgument.toString());\n            }\n            return null;\n        }\n        var overload = classReference.lookupOverload(program_1.OperatorKind.INDEXED_GET);\n        if (overload) {\n            if (overload.is(common_1.CommonFlags.STATIC)) {\n                assert(overload.signature.parameterTypes.length == 2);\n                return overload.signature.parameterTypes[1];\n            }\n            else {\n                assert(overload.signature.parameterTypes.length == 1);\n                return overload.signature.parameterTypes[0];\n            }\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, typeArgumentNodes[0].range, typeArgument.toString());\n        }\n        return null;\n    }\n    resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var typeArgumentNodes = node.typeArguments;\n        if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n            let numTypeArguments = 0;\n            if (typeArgumentNodes)\n                numTypeArguments = typeArgumentNodes.length;\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, node.range, \"1\", numTypeArguments.toString());\n            }\n            return null;\n        }\n        var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n        if (!typeArgument)\n            return null;\n        var classReference = typeArgument.getClassOrWrapper(this.program);\n        if (classReference) {\n            let overload = classReference.lookupOverload(program_1.OperatorKind.INDEXED_GET);\n            if (overload)\n                return overload.signature.returnType;\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, typeArgumentNodes[0].range, typeArgument.toString());\n        }\n        return null;\n    }\n    resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = null, \n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var typeArgumentNodes = node.typeArguments;\n        if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n            if (reportMode == ReportMode.REPORT) {\n                let numTypeArguments = 0;\n                if (typeArgumentNodes)\n                    numTypeArguments = typeArgumentNodes.length;\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, node.range, \"1\", numTypeArguments.toString());\n            }\n            return null;\n        }\n        var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n        if (!typeArgument)\n            return null;\n        var signatureReference = typeArgument.getSignature();\n        if (signatureReference)\n            return signatureReference.returnType;\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Type_0_has_no_call_signatures, typeArgumentNodes[0].range, typeArgument.toString());\n        }\n        return null;\n    }\n    /** Resolves a type name to the program element it refers to. */\n    resolveTypeName(\n    /** The type name to resolve. */\n    node, \n    /** Contextual element. */\n    ctxElement, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = ctxElement.lookup(node.identifier.text);\n        if (!element) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, node.range, node.identifier.text);\n            }\n            return null;\n        }\n        var prev = node;\n        var next = node.next;\n        while (next) {\n            if (!(element = element.lookupInSelf(next.identifier.text))) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, next.range, next.identifier.text, prev.identifier.text);\n                }\n                return null;\n            }\n            prev = next;\n            next = next.next;\n        }\n        return element;\n    }\n    /** Resolves an array of type arguments to concrete types. */\n    resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters, \n    /** Type argument nodes provided. */\n    typeArgumentNodes, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = util_1.uniqueMap(), \n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode = null, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var minParameterCount = 0;\n        var maxParameterCount = 0;\n        for (let i = 0, k = typeParameters.length; i < k; ++i) {\n            if (!typeParameters[i].defaultType)\n                ++minParameterCount;\n            ++maxParameterCount;\n        }\n        var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n        if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, argumentCount\n                    ? tokenizer_1.Range.join(typeArgumentNodes[0].range, typeArgumentNodes[argumentCount - 1].range)\n                    : alternativeReportNode.range, (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(), argumentCount.toString());\n            }\n            return null;\n        }\n        var typeArguments = new Array(maxParameterCount);\n        for (let i = 0; i < maxParameterCount; ++i) {\n            let type = i < argumentCount\n                ? this.resolveType(// reports\n                typeArgumentNodes[i], ctxElement, ctxTypes, reportMode)\n                : this.resolveType(// reports\n                assert(typeParameters[i].defaultType), ctxElement, ctxTypes, reportMode);\n            if (!type)\n                return null;\n            // TODO: check extendsType\n            ctxTypes.set(typeParameters[i].name.text, type);\n            typeArguments[i] = type;\n        }\n        return typeArguments;\n    }\n    /** Resolves respectively infers the concrete instance of a function by call context. */\n    maybeInferCall(node, prototype, ctxFlow, reportMode = ReportMode.REPORT) {\n        var typeArguments = node.typeArguments;\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n            if (!prototype.is(common_1.CommonFlags.GENERIC)) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, node.expression.range, prototype.internalName);\n                }\n                return null;\n            }\n            return this.resolveFunctionInclTypeArguments(prototype, typeArguments, ctxFlow.actualFunction, util_1.uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n            node, reportMode);\n        }\n        // infer generic call if type arguments have been omitted\n        if (prototype.is(common_1.CommonFlags.GENERIC)) {\n            let contextualTypeArguments = util_1.uniqueMap(ctxFlow.contextualTypeArguments);\n            // fill up contextual types with auto for each generic component\n            let typeParameterNodes = assert(prototype.typeParameterNodes);\n            let numTypeParameters = typeParameterNodes.length;\n            let typeParameterNames = new Set();\n            for (let i = 0; i < numTypeParameters; ++i) {\n                let name = typeParameterNodes[i].name.text;\n                contextualTypeArguments.set(name, types_1.Type.auto);\n                typeParameterNames.add(name);\n            }\n            let parameterNodes = prototype.functionTypeNode.parameters;\n            let numParameters = parameterNodes.length;\n            let argumentNodes = node.args;\n            let numArguments = argumentNodes.length;\n            // infer types with generic components while updating contextual types\n            for (let i = 0; i < numParameters; ++i) {\n                let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n                if (!argumentExpression) { // missing initializer -> too few arguments\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, node.range, numParameters.toString(), numArguments.toString());\n                    }\n                    return null;\n                }\n                let typeNode = parameterNodes[i].type;\n                if (typeNode.hasGenericComponent(typeParameterNodes)) {\n                    let type = this.resolveExpression(argumentExpression, ctxFlow, types_1.Type.auto, ReportMode.SWALLOW);\n                    if (type)\n                        this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n                }\n            }\n            // apply concrete types to the generic function signature\n            let resolvedTypeArguments = new Array(numTypeParameters);\n            for (let i = 0; i < numTypeParameters; ++i) {\n                let name = typeParameterNodes[i].name.text;\n                if (contextualTypeArguments.has(name)) {\n                    let inferredType = assert(contextualTypeArguments.get(name));\n                    if (inferredType != types_1.Type.auto) {\n                        resolvedTypeArguments[i] = inferredType;\n                        continue;\n                    }\n                }\n                // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n                // invalid because the type is effectively unknown inside the function body\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_argument_expected, node.expression.range.atEnd);\n                }\n                return null;\n            }\n            return this.resolveFunction(prototype, resolvedTypeArguments, util_1.uniqueMap(ctxFlow.contextualTypeArguments), reportMode);\n        }\n        // otherwise resolve the non-generic call as usual\n        return this.resolveFunction(prototype, null, util_1.uniqueMap(), reportMode);\n    }\n    /** Updates contextual types with a possibly encapsulated inferred type. */\n    propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node, \n    /** The inferred type. */\n    type, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes, \n    /** The names of the type parameters being inferred. */\n    typeParameterNames) {\n        if (node.kind == ast_1.NodeKind.NAMEDTYPE) {\n            let namedTypeNode = node;\n            let typeArgumentNodes = namedTypeNode.typeArguments;\n            if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n                let classReference = type.classReference;\n                if (classReference) {\n                    let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n                    if (!classPrototype || classPrototype.kind != program_1.ElementKind.CLASS_PROTOTYPE)\n                        return;\n                    if (classReference.prototype == classPrototype) {\n                        let typeArguments = classReference.typeArguments;\n                        if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n                            for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n                            }\n                            return;\n                        }\n                    }\n                }\n            }\n            else { // foo<T>(bar: T)\n                let name = namedTypeNode.name.identifier.text;\n                if (ctxTypes.has(name)) {\n                    let currentType = assert(ctxTypes.get(name));\n                    if (currentType == types_1.Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n                        ctxTypes.set(name, type);\n                    }\n                }\n            }\n        }\n        else if (node.kind == ast_1.NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n            let functionTypeNode = node;\n            let parameterNodes = functionTypeNode.parameters;\n            if (parameterNodes !== null && parameterNodes.length > 0) {\n                let signatureReference = type.signatureReference;\n                if (signatureReference) {\n                    let parameterTypes = signatureReference.parameterTypes;\n                    let thisType = signatureReference.thisType;\n                    if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n                        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n                            this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n                        }\n                        this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n                        if (thisType)\n                            this.propagateInferredGenericTypes(functionTypeNode.explicitThisType, thisType, ctxFlow, ctxTypes, typeParameterNames);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    /** Gets the concrete type of an element. */\n    getTypeOfElement(element) {\n        var kind = element.kind;\n        if (kind == program_1.ElementKind.GLOBAL) {\n            if (!this.ensureResolvedLazyGlobal(element, ReportMode.SWALLOW))\n                return null;\n        }\n        if (program_1.isTypedElement(kind)) {\n            let type = element.type;\n            assert(type != types_1.Type.void);\n            let classReference = type.getClassOrWrapper(this.program);\n            if (classReference) {\n                let wrappedType = classReference.wrappedType;\n                if (wrappedType)\n                    type = wrappedType;\n            }\n            return type;\n        }\n        return null;\n    }\n    /** Gets the element of a concrete type. */\n    getElementOfType(type) {\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference)\n            return classReference;\n        return null;\n    }\n    // =================================================== Expressions ===================================================\n    /** Looks up the program element the specified expression refers to. */\n    lookupExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        while (node.kind == ast_1.NodeKind.PARENTHESIZED) { // skip\n            node = node.expression;\n        }\n        switch (node.kind) {\n            case ast_1.NodeKind.ASSERTION: {\n                return this.lookupAssertionExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.BINARY: {\n                return this.lookupBinaryExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.CALL: {\n                return this.lookupCallExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.COMMA: {\n                return this.lookupCommaExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                return this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                return this.lookupFunctionExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.IDENTIFIER:\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.TRUE: {\n                return this.lookupIdentifierExpression(node, ctxFlow, ctxFlow.actualFunction, reportMode);\n            }\n            case ast_1.NodeKind.THIS: {\n                return this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.SUPER: {\n                return this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                return this.lookupInstanceOfExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.LITERAL: {\n                return this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.NEW: {\n                return this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                return this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.TERNARY: {\n                return this.lookupTernaryExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                return this.lookupUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                return this.lookupUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n            }\n        }\n        assert(false);\n        return null;\n    }\n    /** Resolves an expression to its static type. */\n    resolveExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        while (node.kind == ast_1.NodeKind.PARENTHESIZED) { // skip\n            node = node.expression;\n        }\n        switch (node.kind) {\n            case ast_1.NodeKind.ASSERTION: {\n                return this.resolveAssertionExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.BINARY: {\n                return this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.CALL: {\n                return this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.COMMA: {\n                return this.resolveCommaExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                return this.resolveElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                return this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.IDENTIFIER:\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.TRUE: {\n                return this.resolveIdentifierExpression(node, ctxFlow, ctxType, ctxFlow.actualFunction, reportMode);\n            }\n            case ast_1.NodeKind.THIS: {\n                return this.resolveThisExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.SUPER: {\n                return this.resolveSuperExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                return this.resolveInstanceOfExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.LITERAL: {\n                return this.resolveLiteralExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.NEW: {\n                return this.resolveNewExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                return this.resolvePropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.TERNARY: {\n                return this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                return this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                return this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n            }\n        }\n        assert(false);\n        return null;\n    }\n    /** Looks up the program element the specified identifier expression refers to. */\n    lookupIdentifierExpression(\n    /** The expression to look up. */\n    node, \n    /** Flow to search for scoped locals. */\n    ctxFlow, \n    /** Element to search. */\n    ctxElement = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        switch (node.kind) {\n            case ast_1.NodeKind.TRUE:\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL: {\n                let type = this.resolveIdentifierExpression(node, ctxFlow, types_1.Type.auto, ctxElement, reportMode);\n                return type ? this.getElementOfType(type) : null;\n            }\n        }\n        var name = node.text;\n        var element;\n        if (element = ctxFlow.lookup(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n        }\n        var outerFlow = ctxFlow.outer;\n        if (outerFlow) {\n            if (element = outerFlow.lookup(name)) {\n                this.currentThisExpression = null;\n                this.currentElementExpression = null;\n                return element;\n            }\n        }\n        if (element = ctxElement.lookup(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n        }\n        if (element = this.program.lookup(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, node.range, name);\n        }\n        return null;\n    }\n    /** Resolves an identifier to its static type. */\n    resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node, \n    /** Flow to search for scoped locals. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** Element to search. */\n    ctxElement = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        switch (node.kind) {\n            case ast_1.NodeKind.TRUE:\n            case ast_1.NodeKind.FALSE: return types_1.Type.bool;\n            case ast_1.NodeKind.NULL: {\n                let classReference = ctxType.getClass();\n                if (classReference) {\n                    return classReference.type.asNullable();\n                }\n                else {\n                    let signatureReference = ctxType.getSignature();\n                    if (signatureReference) {\n                        return signatureReference.type.asNullable();\n                    }\n                    else if (ctxType.isExternalReference) {\n                        return ctxType; // TODO: nullable?\n                    }\n                }\n                return this.program.options.usizeType;\n            }\n        }\n        var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n        if (!element)\n            return null;\n        if (element.kind == program_1.ElementKind.FUNCTION_PROTOTYPE) {\n            let instance = this.resolveFunction(element, null, util_1.uniqueMap(), reportMode);\n            if (!instance)\n                return null;\n            element = instance;\n        }\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n    ensureResolvedLazyGlobal(global, reportMode = ReportMode.REPORT) {\n        if (global.is(common_1.CommonFlags.RESOLVED))\n            return true;\n        var type;\n        var typeNode = global.typeNode;\n        if (typeNode) {\n            type = this.resolveType(typeNode, global.parent, null, reportMode);\n        }\n        else {\n            type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, types_1.Type.auto, reportMode);\n        }\n        if (!type)\n            return false;\n        global.setType(type); // also sets resolved\n        return true;\n    }\n    /** Looks up the program element the specified property access expression refers to. */\n    lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var targetNode = node.expression;\n        var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n        if (!target)\n            return null;\n        var propertyName = node.property.text;\n        // Resolve variable-likes to their class type first\n        switch (target.kind) {\n            case program_1.ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(target, reportMode))\n                return null;\n            case program_1.ElementKind.ENUMVALUE:\n            case program_1.ElementKind.LOCAL:\n            case program_1.ElementKind.FIELD: { // someVar.prop\n                let variableLikeElement = target;\n                let type = variableLikeElement.type;\n                assert(type != types_1.Type.void);\n                let classReference = type.getClassOrWrapper(this.program);\n                if (!classReference) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, node.property.range, propertyName, variableLikeElement.type.toString());\n                    }\n                    return null;\n                }\n                target = classReference;\n                break;\n            }\n            case program_1.ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n                let propertyInstance = this.resolveProperty(target, reportMode);\n                if (!propertyInstance)\n                    return null;\n                target = propertyInstance;\n                // fall-through\n            }\n            case program_1.ElementKind.PROPERTY: { // someInstance.prop\n                let propertyInstance = target;\n                let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n                let type = getterInstance.signature.returnType;\n                let classReference = type.getClassOrWrapper(this.program);\n                if (!classReference) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, node.property.range, propertyName, type.toString());\n                    }\n                    return null;\n                }\n                target = classReference;\n                break;\n            }\n            case program_1.ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n                let indexSignature = target;\n                let parent = indexSignature.parent;\n                assert(parent.kind == program_1.ElementKind.CLASS);\n                let classInstance = parent;\n                let elementExpression = assert(this.currentElementExpression);\n                let indexedGet = classInstance.lookupOverload(program_1.OperatorKind.INDEXED_GET);\n                if (!indexedGet) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, elementExpression.range, parent.internalName);\n                    }\n                    return null;\n                }\n                let returnType = indexedGet.signature.returnType;\n                let classReference = returnType.getClassOrWrapper(this.program);\n                if (!classReference) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, node.property.range, propertyName, returnType.toString());\n                    }\n                    return null;\n                }\n                target = classReference;\n                break;\n            }\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n                let shadowType = target.shadowType;\n                if (shadowType) {\n                    if (!shadowType.is(common_1.CommonFlags.RESOLVED)) {\n                        let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n                        if (resolvedType)\n                            shadowType.setType(resolvedType);\n                    }\n                    let classReference = shadowType.type.classReference;\n                    if (classReference)\n                        target = classReference.prototype;\n                    break;\n                }\n                else if (!target.is(common_1.CommonFlags.GENERIC)) {\n                    // Inherit from 'Function' if not overridden, i.e. fn.call\n                    let members = target.members;\n                    if (!members || !members.has(propertyName)) {\n                        let functionInstance = this.resolveFunction(target, null, util_1.uniqueMap(), ReportMode.SWALLOW);\n                        if (functionInstance) {\n                            let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n                            if (wrapper)\n                                target = wrapper;\n                        }\n                    }\n                }\n                break;\n            }\n        }\n        // Look up the member within\n        switch (target.kind) {\n            case program_1.ElementKind.CLASS_PROTOTYPE:\n            case program_1.ElementKind.INTERFACE_PROTOTYPE:\n            case program_1.ElementKind.CLASS:\n            case program_1.ElementKind.INTERFACE: {\n                do {\n                    let members = target.members;\n                    if (members !== null && members.has(propertyName)) {\n                        let member = assert(members.get(propertyName));\n                        if (member.kind == program_1.ElementKind.PROPERTY_PROTOTYPE) {\n                            let propertyInstance = this.resolveProperty(member, reportMode);\n                            if (!propertyInstance)\n                                return null;\n                            member = propertyInstance;\n                            if (propertyInstance.is(common_1.CommonFlags.STATIC)) {\n                                this.currentThisExpression = null;\n                            }\n                            else {\n                                this.currentThisExpression = targetNode;\n                            }\n                        }\n                        else {\n                            this.currentThisExpression = targetNode;\n                        }\n                        this.currentElementExpression = null;\n                        return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n                    }\n                    // traverse inherited static members on the base prototype if target is a class prototype\n                    if (target.kind == program_1.ElementKind.CLASS_PROTOTYPE ||\n                        target.kind == program_1.ElementKind.INTERFACE_PROTOTYPE) {\n                        let classPrototype = target;\n                        let basePrototype = classPrototype.basePrototype;\n                        if (basePrototype) {\n                            target = basePrototype;\n                        }\n                        else {\n                            break;\n                        }\n                        // traverse inherited instance members on the base class if target is a class instance\n                    }\n                    else if (target.kind == program_1.ElementKind.CLASS ||\n                        target.kind == program_1.ElementKind.INTERFACE) {\n                        let classInstance = target;\n                        let baseInstance = classInstance.base;\n                        if (baseInstance) {\n                            target = baseInstance;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                } while (true);\n                break;\n            }\n            default: { // enums or other namespace-like elements\n                let members = target.members;\n                if (members !== null && members.has(propertyName)) {\n                    this.currentThisExpression = targetNode;\n                    this.currentElementExpression = null;\n                    return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n                }\n                break;\n            }\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, node.property.range, propertyName, target.internalName);\n        }\n        return null;\n    }\n    /** Resolves a property access expression to its static type. */\n    resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element)\n            return null;\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Looks up the program element the specified element access expression refers to. */\n    lookupElementAccessExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var targetExpression = node.expression;\n        var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n        if (!targetType)\n            return null;\n        let classReference = targetType.getClassOrWrapper(this.program);\n        if (classReference) {\n            do {\n                let indexSignature = classReference.indexSignature;\n                if (indexSignature) {\n                    this.currentThisExpression = targetExpression;\n                    this.currentElementExpression = node.elementExpression;\n                    return indexSignature;\n                }\n                classReference = classReference.base;\n            } while (classReference);\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, targetExpression.range, targetType.toString());\n        }\n        return null;\n    }\n    /** Resolves an element access expression to its static type. */\n    resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element)\n            return null;\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Determines the final type of an integer literal given the specified contextual type. */\n    determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue, \n    /** Contextual type. */\n    ctxType) {\n        if (ctxType.isValue) {\n            // compile to contextual type if matching\n            switch (ctxType.kind) {\n                case 0 /* I8 */: {\n                    if (i64_is_i8(intValue))\n                        return types_1.Type.i8;\n                    break;\n                }\n                case 5 /* U8 */: {\n                    if (i64_is_u8(intValue))\n                        return types_1.Type.u8;\n                    break;\n                }\n                case 1 /* I16 */: {\n                    if (i64_is_i16(intValue))\n                        return types_1.Type.i16;\n                    break;\n                }\n                case 6 /* U16 */: {\n                    if (i64_is_u16(intValue))\n                        return types_1.Type.u16;\n                    break;\n                }\n                case 2 /* I32 */: {\n                    if (i64_is_i32(intValue))\n                        return types_1.Type.i32;\n                    break;\n                }\n                case 7 /* U32 */: {\n                    if (i64_is_u32(intValue))\n                        return types_1.Type.u32;\n                    break;\n                }\n                case 10 /* BOOL */: {\n                    if (i64_is_bool(intValue))\n                        return types_1.Type.bool;\n                    break;\n                }\n                case 4 /* ISIZE */: {\n                    if (!this.program.options.isWasm64) {\n                        if (i64_is_i32(intValue))\n                            return types_1.Type.isize32;\n                        break;\n                    }\n                    return types_1.Type.isize64;\n                }\n                case 9 /* USIZE */: {\n                    if (!this.program.options.isWasm64) {\n                        if (i64_is_u32(intValue))\n                            return types_1.Type.usize32;\n                        break;\n                    }\n                    return types_1.Type.usize64;\n                }\n                case 3 /* I64 */: return types_1.Type.i64;\n                case 8 /* U64 */: return types_1.Type.u64;\n                case 11 /* F32 */: return types_1.Type.f32;\n                case 12 /* F64 */: return types_1.Type.f64;\n            }\n        }\n        // otherwise compile to best fitting native type\n        if (i64_is_i32(intValue))\n            return types_1.Type.i32;\n        if (i64_is_u32(intValue))\n            return types_1.Type.u32;\n        return types_1.Type.i64; // TODO: u64 if positive and larger than i64?\n    }\n    /** Looks up the program element the specified assertion expression refers to. */\n    lookupAssertionExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        switch (node.assertionKind) {\n            case ast_1.AssertionKind.AS:\n            case ast_1.AssertionKind.PREFIX: {\n                let type = this.resolveType(assert(node.toType), // must be set if not NONNULL\n                ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n                if (!type)\n                    return null;\n                let element = this.getElementOfType(type);\n                if (element)\n                    return element;\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_illegal_in_this_context, node.range, type.toString());\n                }\n                this.currentThisExpression = null;\n                this.currentElementExpression = null;\n                return null;\n            }\n            case ast_1.AssertionKind.NONNULL: {\n                return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n            }\n            case ast_1.AssertionKind.CONST: {\n                // TODO: decide on the layout of ReadonlyArray first\n                // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n                // if (!element) return null;\n                // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n                //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n                //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n                // }\n                this.error(diagnostics_1.DiagnosticCode.Not_implemented_0, node.range, \"Const assertion\");\n                return null;\n            }\n        }\n        assert(false);\n        return null;\n    }\n    /** Resolves an assertion expression to its static type. */\n    resolveAssertionExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        switch (node.assertionKind) {\n            case ast_1.AssertionKind.AS:\n            case ast_1.AssertionKind.PREFIX: {\n                return this.resolveType(assert(node.toType), ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n            }\n            case ast_1.AssertionKind.NONNULL: {\n                let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n                return type ? type.nonNullableType : null;\n            }\n            case ast_1.AssertionKind.CONST: {\n                let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n                if (!element)\n                    return null;\n                let type = this.getTypeOfElement(element);\n                if (!type) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n                    }\n                }\n                return type;\n            }\n            default: assert(false);\n        }\n        return null;\n    }\n    /** Looks up the program element the specified unary prefix expression refers to. */\n    lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n        if (!type)\n            return null;\n        var element = this.getElementOfType(type);\n        if (!element) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, tokenizer_2.operatorTokenToString(node.operator), type.toString());\n            }\n        }\n        return element;\n    }\n    /** Resolves an unary prefix expression to its static type. */\n    resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var operand = node.operand;\n        var operator = node.operator;\n        switch (operator) {\n            case tokenizer_2.Token.MINUS: {\n                // implicitly negate if an integer literal to distinguish between i32/u32/i64\n                if (operand.isLiteralKind(ast_1.LiteralKind.INTEGER)) {\n                    return this.determineIntegerLiteralType(i64_sub(i64_zero, operand.value), ctxType);\n                }\n                // fall-through\n            }\n            case tokenizer_2.Token.PLUS:\n            case tokenizer_2.Token.PLUS_PLUS:\n            case tokenizer_2.Token.MINUS_MINUS: {\n                let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n                if (!type)\n                    return null;\n                let classReference = type.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromUnaryPrefixToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                if (!type.isNumericValue) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, tokenizer_2.operatorTokenToString(operator), type.toString());\n                    }\n                    return null;\n                }\n                return type;\n            }\n            case tokenizer_2.Token.EXCLAMATION: {\n                let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n                if (!type)\n                    return null;\n                let classReference = type.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.NOT);\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                return types_1.Type.bool; // incl. references\n            }\n            case tokenizer_2.Token.TILDE: {\n                let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n                if (!type)\n                    return null;\n                let classReference = type.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.BITWISE_NOT);\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                if (!type.isNumericValue) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, \"~\", type.toString());\n                    }\n                    return null;\n                }\n                return type.intType;\n            }\n            default: assert(false);\n        }\n        return null;\n    }\n    /** Looks up the program element the specified unary postfix expression refers to. */\n    lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n        if (!type)\n            return null;\n        var element = this.getElementOfType(type);\n        if (!element) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, tokenizer_2.operatorTokenToString(node.operator), type.toString());\n            }\n        }\n        return element;\n    }\n    /** Resolves an unary postfix expression to its static type. */\n    resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var operator = node.operator;\n        switch (operator) {\n            case tokenizer_2.Token.PLUS_PLUS:\n            case tokenizer_2.Token.MINUS_MINUS: {\n                let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n                if (!type)\n                    return null;\n                let classReference = type.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromUnaryPostfixToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                if (!type.isNumericValue) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, tokenizer_2.operatorTokenToString(operator), type.toString());\n                    }\n                    return null;\n                }\n                return type;\n            }\n        }\n        assert(false);\n        return null;\n    }\n    /** Looks up the program element the specified binary expression refers to. */\n    lookupBinaryExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n        if (!type)\n            return null;\n        var element = this.getElementOfType(type);\n        if (element)\n            return element; // otherwise void\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_illegal_in_this_context, node.range, type.toString());\n        }\n        return null;\n    }\n    /** Resolves a binary expression to its static type. */\n    resolveBinaryExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var left = node.left;\n        var right = node.right;\n        var operator = node.operator;\n        switch (operator) {\n            // assignment: result is the target's type\n            case tokenizer_2.Token.EQUALS:\n            case tokenizer_2.Token.PLUS_EQUALS:\n            case tokenizer_2.Token.MINUS_EQUALS:\n            case tokenizer_2.Token.ASTERISK_EQUALS:\n            case tokenizer_2.Token.ASTERISK_ASTERISK_EQUALS:\n            case tokenizer_2.Token.SLASH_EQUALS:\n            case tokenizer_2.Token.PERCENT_EQUALS:\n            case tokenizer_2.Token.LESSTHAN_LESSTHAN_EQUALS:\n            case tokenizer_2.Token.GREATERTHAN_GREATERTHAN_EQUALS:\n            case tokenizer_2.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n            case tokenizer_2.Token.AMPERSAND_EQUALS:\n            case tokenizer_2.Token.BAR_EQUALS:\n            case tokenizer_2.Token.CARET_EQUALS: {\n                return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n            }\n            // comparison: result is Bool, preferring overloads, integer/float only\n            case tokenizer_2.Token.LESSTHAN:\n            case tokenizer_2.Token.GREATERTHAN:\n            case tokenizer_2.Token.LESSTHAN_EQUALS:\n            case tokenizer_2.Token.GREATERTHAN_EQUALS: {\n                let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n                if (!leftType)\n                    return null;\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromBinaryToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                if (!leftType.isNumericValue) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, tokenizer_2.operatorTokenToString(operator), leftType.toString());\n                    }\n                    return null;\n                }\n                return types_1.Type.bool;\n            }\n            // equality: result is Bool, preferring overloads, incl. references\n            case tokenizer_2.Token.EQUALS_EQUALS:\n            case tokenizer_2.Token.EXCLAMATION_EQUALS: {\n                let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n                if (!leftType)\n                    return null;\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromBinaryToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                return types_1.Type.bool;\n            }\n            // identity: result is Bool, not supporting overloads\n            case tokenizer_2.Token.EQUALS_EQUALS_EQUALS:\n            case tokenizer_2.Token.EXCLAMATION_EQUALS_EQUALS: {\n                return types_1.Type.bool;\n            }\n            // arithmetics: result is common type of LHS and RHS, preferring overloads\n            case tokenizer_2.Token.PLUS:\n            case tokenizer_2.Token.MINUS:\n            case tokenizer_2.Token.ASTERISK:\n            case tokenizer_2.Token.SLASH:\n            case tokenizer_2.Token.PERCENT: { // mod has special logic, but also behaves like this\n                let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n                if (!leftType)\n                    return null;\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromBinaryToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n                if (!rightType)\n                    return null;\n                let commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                if (!commonType) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, node.range, leftType.toString(), rightType.toString());\n                    }\n                }\n                return commonType;\n            }\n            // pow: result is common type of LHS and RHS, preferring overloads\n            case tokenizer_2.Token.ASTERISK_ASTERISK: {\n                let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n                if (!leftType)\n                    return null;\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromBinaryToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n                if (!rightType)\n                    return null;\n                let commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                if (!commonType) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, node.range, leftType.toString(), rightType.toString());\n                    }\n                }\n                return commonType;\n            }\n            // shift: result is LHS (RHS is converted to LHS), preferring overloads\n            case tokenizer_2.Token.LESSTHAN_LESSTHAN:\n            case tokenizer_2.Token.GREATERTHAN_GREATERTHAN:\n            case tokenizer_2.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n                let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n                if (!leftType)\n                    return null;\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromBinaryToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                if (!leftType.isIntegerValue) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1, node.range, tokenizer_2.operatorTokenToString(operator), leftType.toString());\n                    }\n                    return null;\n                }\n                return leftType;\n            }\n            // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n            case tokenizer_2.Token.AMPERSAND:\n            case tokenizer_2.Token.BAR:\n            case tokenizer_2.Token.CARET: {\n                let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n                if (!leftType)\n                    return null;\n                let classReference = leftType.getClassOrWrapper(this.program);\n                if (classReference) {\n                    let overload = classReference.lookupOverload(program_1.OperatorKind.fromBinaryToken(operator));\n                    if (overload)\n                        return overload.signature.returnType;\n                }\n                let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n                if (!rightType)\n                    return null;\n                let commonType = types_1.Type.commonDenominator(leftType, rightType, false);\n                if (!commonType || !commonType.isIntegerValue) {\n                    if (reportMode == ReportMode.REPORT) {\n                        this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, node.range, tokenizer_2.operatorTokenToString(operator), leftType.toString(), rightType.toString());\n                    }\n                }\n                return commonType;\n            }\n            // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n            case tokenizer_2.Token.AMPERSAND_AMPERSAND:\n            case tokenizer_2.Token.BAR_BAR: {\n                return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n            }\n        }\n        assert(false);\n        return null;\n    }\n    /** Looks up the program element the specified this expression refers to. */\n    lookupThisExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        if (ctxFlow.isInline) {\n            let thisLocal = ctxFlow.lookupLocal(common_1.CommonNames.this_);\n            if (thisLocal) {\n                this.currentThisExpression = null;\n                this.currentElementExpression = null;\n                return thisLocal;\n            }\n        }\n        var parent = ctxFlow.actualFunction.parent;\n        if (parent) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode._this_cannot_be_referenced_in_current_location, node.range);\n        }\n        return null;\n    }\n    /** Resolves a this expression to its static type. */\n    resolveThisExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element)\n            return null;\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Looks up the program element the specified super expression refers to. */\n    lookupSuperExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        if (ctxFlow.isInline) {\n            let superLocal = ctxFlow.lookupLocal(common_1.CommonNames.super_);\n            if (superLocal) {\n                this.currentThisExpression = null;\n                this.currentElementExpression = null;\n                return superLocal;\n            }\n        }\n        var parent = ctxFlow.actualFunction.parent;\n        if (parent !== null && parent.kind == program_1.ElementKind.CLASS) {\n            let base = parent.base;\n            if (base) {\n                this.currentThisExpression = null;\n                this.currentElementExpression = null;\n                return base;\n            }\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, node.range);\n        }\n        return null;\n    }\n    /** Resolves a super expression to its static type. */\n    resolveSuperExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element)\n            return null;\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Looks up the program element the specified literal expression refers to. */\n    lookupLiteralExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        switch (node.literalKind) {\n            case ast_1.LiteralKind.INTEGER: {\n                let intType = this.determineIntegerLiteralType(node.value, ctxType);\n                return assert(intType.getClassOrWrapper(this.program));\n            }\n            case ast_1.LiteralKind.FLOAT: {\n                let fltType = ctxType == types_1.Type.f32 ? types_1.Type.f32 : types_1.Type.f64;\n                return assert(fltType.getClassOrWrapper(this.program));\n            }\n            case ast_1.LiteralKind.STRING: {\n                return this.program.stringInstance;\n            }\n            case ast_1.LiteralKind.ARRAY: {\n                let classReference = ctxType.getClass();\n                if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n                    return this.getElementOfType(ctxType);\n                }\n                // otherwise infer, ignoring ctxType\n                let expressions = node.elementExpressions;\n                let length = expressions.length;\n                let elementType = types_1.Type.auto;\n                let numNullLiterals = 0;\n                for (let i = 0, k = length; i < k; ++i) {\n                    let expression = expressions[i];\n                    if (expression) {\n                        if (expression.kind == ast_1.NodeKind.NULL && length > 1) {\n                            ++numNullLiterals;\n                        }\n                        else {\n                            let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n                            if (!currentType)\n                                return null;\n                            if (elementType == types_1.Type.auto)\n                                elementType = currentType;\n                            else if (currentType != elementType) {\n                                let commonType = types_1.Type.commonDenominator(elementType, currentType, false);\n                                if (commonType)\n                                    elementType = commonType;\n                                // otherwise triggers error on compilation\n                            }\n                        }\n                    }\n                }\n                if (elementType /* still */ == types_1.Type.auto) {\n                    if (numNullLiterals == length) { // all nulls infers as usize\n                        elementType = this.program.options.usizeType;\n                    }\n                    else {\n                        this.error(diagnostics_1.DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly, node.range, \"T\");\n                        return null;\n                    }\n                }\n                if (numNullLiterals > 0 &&\n                    elementType.isInternalReference) {\n                    elementType = elementType.asNullable();\n                }\n                return assert(this.resolveClass(this.program.arrayPrototype, [elementType]));\n            }\n        }\n        assert(false);\n        return null;\n    }\n    /** Resolves a literal expression to its static type. */\n    resolveLiteralExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element)\n            return null;\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Looks up the program element the specified call expression refers to. */\n    lookupCallExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.void, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n        if (!type)\n            return null;\n        var element = this.getElementOfType(type);\n        if (!element) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Type_0_is_illegal_in_this_context, node.range, type.toString());\n            }\n        }\n        return element;\n    }\n    /** Resolves a call expression to its static type. */\n    resolveCallExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.void, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var targetExpression = node.expression;\n        var target = this.lookupExpression(// reports\n        targetExpression, ctxFlow, ctxType, reportMode);\n        if (!target)\n            return null;\n        switch (target.kind) {\n            case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                let functionPrototype = target;\n                // `unchecked` behaves like parenthesized\n                if (functionPrototype.internalName == builtins_1.BuiltinNames.unchecked &&\n                    node.args.length > 0) {\n                    return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n                }\n                let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n                if (!instance)\n                    return null;\n                return instance.signature.returnType;\n            }\n            case program_1.ElementKind.GLOBAL:\n            case program_1.ElementKind.LOCAL:\n            case program_1.ElementKind.FIELD: {\n                let varType = target.type;\n                let varElement = this.getElementOfType(varType);\n                if (!varElement || varElement.kind != program_1.ElementKind.CLASS) {\n                    break;\n                }\n                target = varElement;\n                // fall-through\n            }\n            case program_1.ElementKind.CLASS: {\n                let typeArguments = target.getTypeArgumentsTo(this.program.functionPrototype);\n                if (typeArguments !== null && typeArguments.length > 0) {\n                    let ftype = typeArguments[0];\n                    let signatureReference = assert(ftype.signatureReference);\n                    return signatureReference.returnType;\n                }\n                break;\n            }\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, targetExpression.range, target.internalName);\n        }\n        return null;\n    }\n    /** Looks up the program element the specified comma expression refers to. */\n    lookupCommaExpression(\n    /** The expression to look up. */\n    node, \n    /** Flow to search for scoped locals. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var expressions = node.expressions;\n        return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n    }\n    /** Resolves a comma expression to its static type. */\n    resolveCommaExpression(\n    /** The expression to resolve. */\n    node, \n    /** Flow to search for scoped locals. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var expressions = node.expressions;\n        return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n    }\n    /** Looks up the program element the specified instanceof expression refers to. */\n    lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node, \n    /** Flow to search for scoped locals. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        return assert(types_1.Type.bool.getClassOrWrapper(this.program));\n    }\n    /** Resolves an instanceof expression to its static type. */\n    resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node, \n    /** Flow to search for scoped locals. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType = types_1.Type.auto, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        return types_1.Type.bool;\n    }\n    /** Looks up the program element the specified ternary expression refers to. */\n    lookupTernaryExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n        if (!type)\n            return null;\n        var element = this.getElementOfType(type);\n        if (!element) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Type_0_is_illegal_in_this_context, node.range, type.toString());\n            }\n        }\n        return element;\n    }\n    /** Resolves a ternary expression to its static type. */\n    resolveTernaryExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n        if (!thenType)\n            return null;\n        var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n        if (!elseType)\n            return null;\n        var commonType = types_1.Type.commonDenominator(thenType, elseType, false);\n        if (!commonType) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2, node.range, \"?:\", thenType.toString(), elseType.toString());\n            }\n        }\n        return commonType;\n    }\n    /** Looks up the program element the specified new expression refers to. */\n    lookupNewExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n        if (!element)\n            return null;\n        if (element.kind == program_1.ElementKind.CLASS_PROTOTYPE) {\n            return this.resolveClassInclTypeArguments(element, node.typeArguments, ctxFlow.actualFunction, util_1.uniqueMap(ctxFlow.contextualTypeArguments), node, reportMode);\n        }\n        if (reportMode == ReportMode.REPORT) {\n            this.error(diagnostics_1.DiagnosticCode.This_expression_is_not_constructable, node.range);\n        }\n        return null;\n    }\n    /** Resolves a new expression to its static type. */\n    resolveNewExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element)\n            return null;\n        var type = this.getTypeOfElement(element);\n        if (!type) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Expression_cannot_be_represented_by_a_type, node.range);\n            }\n        }\n        return type;\n    }\n    /** Looks up the program element the specified function expression refers to. */\n    lookupFunctionExpression(\n    /** The expression to look up. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n        if (!type)\n            return null;\n        var element = this.getElementOfType(type);\n        if (!element) {\n            if (reportMode == ReportMode.REPORT) {\n                this.error(diagnostics_1.DiagnosticCode.Type_0_is_illegal_in_this_context, node.range, type.toString());\n            }\n        }\n        return element;\n    }\n    /** Resolves a function expression to its static type. */\n    resolveFunctionExpression(\n    /** The expression to resolve. */\n    node, \n    /** Contextual flow. */\n    ctxFlow, \n    /** Contextual type. */\n    ctxType, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n    }\n    // ==================================================== Elements =====================================================\n    /** Resolves a function prototype using the specified concrete type arguments. */\n    resolveFunction(\n    /** The prototype of the function. */\n    prototype, \n    /** Type arguments provided. */\n    typeArguments, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = util_1.uniqueMap(), \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var actualParent = prototype.parent.kind == program_1.ElementKind.PROPERTY_PROTOTYPE\n            ? prototype.parent.parent\n            : prototype.parent;\n        var classInstance = null; // if an instance method\n        var instanceKey = typeArguments ? types_1.typesToString(typeArguments) : \"\";\n        // Instance method prototypes are pre-bound to their concrete class as their parent\n        if (prototype.is(common_1.CommonFlags.INSTANCE)) {\n            assert(actualParent.kind == program_1.ElementKind.CLASS || actualParent.kind == program_1.ElementKind.INTERFACE);\n            classInstance = actualParent;\n            // check if this exact concrete class and function combination is known already\n            let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n            if (resolvedInstance)\n                return resolvedInstance;\n            // inherit class specific type arguments\n            let classTypeArguments = classInstance.typeArguments;\n            if (classTypeArguments) {\n                let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n                let numClassTypeArguments = classTypeParameters.length;\n                assert(numClassTypeArguments == classTypeParameters.length);\n                for (let i = 0; i < numClassTypeArguments; ++i) {\n                    let classTypeParameterName = classTypeParameters[i].name.text;\n                    if (!ctxTypes.has(classTypeParameterName)) {\n                        ctxTypes.set(classTypeParameterName, classTypeArguments[i]);\n                    }\n                }\n            }\n        }\n        else {\n            assert(actualParent.kind != program_1.ElementKind.CLASS); // must not be pre-bound\n            let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n            if (resolvedInstance)\n                return resolvedInstance;\n        }\n        // override whatever is contextual with actual function type arguments\n        var signatureNode = prototype.functionTypeNode;\n        var typeParameterNodes = prototype.typeParameterNodes;\n        var numFunctionTypeArguments;\n        if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n            assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n            for (let i = 0; i < numFunctionTypeArguments; ++i) {\n                ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n            }\n        }\n        else {\n            assert(!typeParameterNodes || typeParameterNodes.length == 0);\n        }\n        // resolve `this` type if applicable\n        var thisType = null;\n        var explicitThisType = signatureNode.explicitThisType;\n        if (explicitThisType) {\n            thisType = this.resolveType(explicitThisType, prototype.parent, // relative to function\n            ctxTypes, reportMode);\n            if (!thisType)\n                return null;\n            ctxTypes.set(common_1.CommonNames.this_, thisType);\n        }\n        else if (classInstance) {\n            thisType = classInstance.type;\n            ctxTypes.set(common_1.CommonNames.this_, thisType);\n        }\n        // resolve parameter types\n        var signatureParameters = signatureNode.parameters;\n        var numSignatureParameters = signatureParameters.length;\n        var parameterTypes = new Array(numSignatureParameters);\n        var requiredParameters = 0;\n        for (let i = 0; i < numSignatureParameters; ++i) {\n            let parameterDeclaration = signatureParameters[i];\n            if (parameterDeclaration.parameterKind == ast_1.ParameterKind.DEFAULT) {\n                requiredParameters = i + 1;\n            }\n            let typeNode = parameterDeclaration.type;\n            if (ast_1.isTypeOmitted(typeNode)) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, typeNode.range);\n                }\n                return null;\n            }\n            let parameterType = this.resolveType(typeNode, prototype.parent, // relative to function\n            ctxTypes, reportMode);\n            if (!parameterType)\n                return null;\n            if (parameterType == types_1.Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, typeNode.range);\n                }\n                return null;\n            }\n            parameterTypes[i] = parameterType;\n        }\n        // resolve return type\n        var returnType;\n        if (prototype.is(common_1.CommonFlags.SET)) {\n            returnType = types_1.Type.void; // not annotated\n        }\n        else if (prototype.is(common_1.CommonFlags.CONSTRUCTOR)) {\n            returnType = classInstance.type; // not annotated\n        }\n        else {\n            let typeNode = signatureNode.returnType;\n            if (ast_1.isTypeOmitted(typeNode)) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, typeNode.range);\n                }\n                return null;\n            }\n            let type = this.resolveType(typeNode, prototype.parent, // relative to function\n            ctxTypes, reportMode);\n            if (!type)\n                return null;\n            returnType = type;\n        }\n        var signature = new types_1.Signature(this.program, parameterTypes, returnType, thisType);\n        signature.requiredParameters = requiredParameters;\n        var nameInclTypeParameters = prototype.name;\n        if (instanceKey.length)\n            nameInclTypeParameters += \"<\" + instanceKey + \">\";\n        var instance = new program_1.Function(nameInclTypeParameters, prototype, typeArguments, signature, ctxTypes);\n        prototype.setResolvedInstance(instanceKey, instance);\n        return instance;\n    }\n    /** Resolves a function prototypeby first resolving the specified type arguments. */\n    resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype, \n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes, \n    /** The node to use when reporting intermediate errors. */\n    reportNode, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var actualParent = prototype.parent.kind == program_1.ElementKind.PROPERTY_PROTOTYPE\n            ? prototype.parent.parent\n            : prototype.parent;\n        var resolvedTypeArguments = null;\n        // Resolve type arguments if generic\n        if (prototype.is(common_1.CommonFlags.GENERIC)) {\n            // If this is an instance method, first apply the class's type arguments\n            if (prototype.is(common_1.CommonFlags.INSTANCE)) {\n                assert(actualParent.kind == program_1.ElementKind.CLASS);\n                let classInstance = actualParent;\n                let classTypeArguments = classInstance.typeArguments;\n                if (classTypeArguments) {\n                    let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n                    let numClassTypeArguments = classTypeArguments.length;\n                    assert(numClassTypeArguments == typeParameterNodes.length);\n                    for (let i = 0; i < numClassTypeArguments; ++i) {\n                        ctxTypes.set(typeParameterNodes[i].name.text, classTypeArguments[i]);\n                    }\n                }\n            }\n            resolvedTypeArguments = this.resolveTypeArguments(// reports\n            assert(prototype.typeParameterNodes), typeArgumentNodes, ctxElement, ctxTypes, reportNode, reportMode);\n            if (!resolvedTypeArguments)\n                return null;\n            // Otherwise make sure that no type arguments have been specified\n        }\n        else {\n            if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\n                }\n                return null;\n            }\n        }\n        // Continue with concrete types\n        return this.resolveFunction(prototype, resolvedTypeArguments, ctxTypes, reportMode);\n    }\n    /** Resolves a class prototype using the specified concrete type arguments. */\n    resolveClass(\n    /** The prototype of the class. */\n    prototype, \n    /** Type arguments provided. */\n    typeArguments, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes = util_1.uniqueMap(), \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var instanceKey = typeArguments ? types_1.typesToString(typeArguments) : \"\";\n        // Do not attempt to resolve the same class twice. This can return a class\n        // that isn't fully resolved yet, but only on deeper levels of recursion.\n        var instance = prototype.getResolvedInstance(instanceKey);\n        if (instance)\n            return instance;\n        // Otherwise create\n        var nameInclTypeParamters = prototype.name;\n        if (instanceKey.length)\n            nameInclTypeParamters += \"<\" + instanceKey + \">\";\n        if (prototype.kind == program_1.ElementKind.INTERFACE_PROTOTYPE) {\n            instance = new program_1.Interface(nameInclTypeParamters, prototype, typeArguments);\n        }\n        else {\n            instance = new program_1.Class(nameInclTypeParamters, prototype, typeArguments);\n        }\n        prototype.setResolvedInstance(instanceKey, instance);\n        var pendingClasses = this.resolveClassPending;\n        pendingClasses.add(instance);\n        // Insert contextual type arguments for this operation. Internally, this method is always\n        // called with matching type parameter / argument counts.\n        if (typeArguments) {\n            let typeParameterNodes = assert(prototype.typeParameterNodes);\n            let numTypeParameters = typeParameterNodes.length;\n            let numTypeArguments = typeArguments.length;\n            assert(numTypeArguments == numTypeParameters);\n            for (let i = 0; i < numTypeArguments; ++i) {\n                ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n            }\n        }\n        else {\n            let typeParameterNodes = prototype.typeParameterNodes;\n            assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n        }\n        instance.contextualTypeArguments = ctxTypes;\n        var anyPending = false;\n        // Resolve base class if applicable\n        var basePrototype = prototype.basePrototype;\n        if (basePrototype) {\n            let current = basePrototype;\n            do {\n                if (current == prototype) {\n                    this.error(diagnostics_1.DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, prototype.identifierNode.range, prototype.internalName);\n                    return null;\n                }\n                current = current.basePrototype;\n            } while (current);\n            let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n            let base = this.resolveClassInclTypeArguments(basePrototype, extendsNode.typeArguments, prototype.parent, // relative to derived class\n            util_1.uniqueMap(ctxTypes), // don't inherit\n            extendsNode, reportMode);\n            if (!base)\n                return null;\n            instance.setBase(base);\n            // If the base class is still pending, yield here and instead resolve any\n            // derived classes once the base class's `finishResolveClass` is done.\n            // This is guaranteed to never happen at the entry of the recursion, i.e.\n            // where `resolveClass` is called from other code.\n            if (pendingClasses.has(base))\n                anyPending = true;\n        }\n        // Resolve interfaces if applicable\n        var interfacePrototypes = prototype.interfacePrototypes;\n        if (interfacePrototypes) {\n            for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n                let interfacePrototype = interfacePrototypes[i];\n                let current = interfacePrototype;\n                do {\n                    if (current == prototype) {\n                        this.error(diagnostics_1.DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, prototype.identifierNode.range, prototype.internalName);\n                        return null;\n                    }\n                    current = current.basePrototype;\n                } while (current);\n                let implementsNode = assert(prototype.implementsNodes[i]);\n                let iface = this.resolveClassInclTypeArguments(interfacePrototype, implementsNode.typeArguments, prototype.parent, util_1.uniqueMap(ctxTypes), implementsNode, reportMode);\n                if (!iface)\n                    return null;\n                assert(iface.kind == program_1.ElementKind.INTERFACE);\n                instance.addInterface(iface);\n                // Like above, if any implemented interface is still pending, yield\n                if (pendingClasses.has(iface))\n                    anyPending = true;\n            }\n        }\n        if (anyPending)\n            return instance;\n        // We only get here if the base class has been fully resolved already.\n        this.finishResolveClass(instance, reportMode);\n        return instance;\n    }\n    /** Finishes resolving the specified class. */\n    finishResolveClass(\n    /** Class to finish resolving. */\n    instance, \n    /** How to proceed with eventual diagnostics. */\n    reportMode) {\n        var members = instance.members;\n        if (!members)\n            instance.members = members = new Map();\n        var pendingClasses = this.resolveClassPending;\n        var unimplemented = new Map();\n        // Alias interface members\n        var interfaces = instance.interfaces;\n        if (interfaces) {\n            for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n                let iface = _values[i];\n                assert(!pendingClasses.has(iface));\n                let ifaceMembers = iface.members;\n                if (ifaceMembers) {\n                    for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n                        let memberName = unchecked(_keys[i]);\n                        let member = assert(ifaceMembers.get(memberName));\n                        if (members.has(memberName)) {\n                            let existing = assert(members.get(memberName));\n                            if (!member.isCompatibleOverride(existing)) {\n                                this.errorRelated(diagnostics_1.DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature, member.identifierAndSignatureRange, existing.identifierAndSignatureRange);\n                                continue;\n                            }\n                        }\n                        members.set(memberName, member);\n                        unimplemented.set(memberName, member);\n                    }\n                }\n            }\n        }\n        // Alias base members\n        var memoryOffset = 0;\n        var base = instance.base;\n        if (base) {\n            assert(!pendingClasses.has(base));\n            let baseMembers = base.members;\n            if (baseMembers) {\n                // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n                for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n                    let memberName = unchecked(_keys[i]);\n                    let member = assert(baseMembers.get(memberName));\n                    if (members.has(memberName)) {\n                        let existing = assert(members.get(memberName));\n                        if (!member.isCompatibleOverride(existing)) {\n                            this.errorRelated(diagnostics_1.DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature, member.identifierAndSignatureRange, existing.identifierAndSignatureRange);\n                            continue;\n                        }\n                    }\n                    members.set(memberName, member);\n                    if (member.is(common_1.CommonFlags.ABSTRACT)) {\n                        unimplemented.set(memberName, member);\n                    }\n                    else {\n                        unimplemented.delete(memberName);\n                    }\n                }\n            }\n            memoryOffset = base.nextMemoryOffset;\n        }\n        // Resolve instance members\n        var prototype = instance.prototype;\n        var instanceMemberPrototypes = prototype.instanceMembers;\n        var properties = new Array();\n        if (instanceMemberPrototypes) {\n            // TODO: for (let member of instanceMemberPrototypes.values()) {\n            for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n                let member = unchecked(_values[i]);\n                let memberName = member.name;\n                switch (member.kind) {\n                    case program_1.ElementKind.FIELD_PROTOTYPE: {\n                        let fieldPrototype = member;\n                        let fieldTypeNode = fieldPrototype.typeNode;\n                        let fieldType = null;\n                        // TODO: handle duplicate non-private fields specifically?\n                        if (!fieldTypeNode) {\n                            if (base) {\n                                let baseMembers = base.members;\n                                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                                    let baseField = assert(baseMembers.get(fieldPrototype.name));\n                                    if (!baseField.is(common_1.CommonFlags.PRIVATE)) {\n                                        assert(baseField.kind == program_1.ElementKind.FIELD);\n                                        fieldType = baseField.type;\n                                    }\n                                }\n                            }\n                            if (!fieldType) {\n                                if (reportMode == ReportMode.REPORT) {\n                                    this.error(diagnostics_1.DiagnosticCode.Type_expected, fieldPrototype.identifierNode.range.atEnd);\n                                }\n                            }\n                        }\n                        else {\n                            fieldType = this.resolveType(fieldTypeNode, prototype.parent, // relative to class\n                            instance.contextualTypeArguments, reportMode);\n                            if (fieldType == types_1.Type.void) {\n                                if (reportMode == ReportMode.REPORT) {\n                                    this.error(diagnostics_1.DiagnosticCode.Type_expected, fieldTypeNode.range);\n                                }\n                                break;\n                            }\n                        }\n                        if (!fieldType)\n                            break; // did report above\n                        let fieldInstance = new program_1.Field(fieldPrototype, instance, fieldType);\n                        assert(util_1.isPowerOf2(fieldType.byteSize));\n                        let mask = fieldType.byteSize - 1;\n                        if (memoryOffset & mask)\n                            memoryOffset = (memoryOffset | mask) + 1;\n                        fieldInstance.memoryOffset = memoryOffset;\n                        memoryOffset += fieldType.byteSize;\n                        instance.add(memberName, fieldInstance); // reports\n                        break;\n                    }\n                    case program_1.ElementKind.FUNCTION_PROTOTYPE: {\n                        let boundPrototype = member.toBound(instance);\n                        instance.add(boundPrototype.name, boundPrototype); // reports\n                        break;\n                    }\n                    case program_1.ElementKind.PROPERTY_PROTOTYPE: {\n                        let boundPrototype = member.toBound(instance);\n                        instance.add(boundPrototype.name, boundPrototype); // reports\n                        break;\n                    }\n                    default: assert(false);\n                }\n                if (!member.is(common_1.CommonFlags.ABSTRACT)) {\n                    unimplemented.delete(memberName);\n                }\n            }\n        }\n        // Check that property getters and setters match\n        for (let i = 0, k = properties.length; i < k; ++i) {\n            let property = properties[i];\n            let propertyGetter = property.getterInstance;\n            if (!propertyGetter) {\n                this.error(diagnostics_1.DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter, property.identifierNode.range, property.name);\n            }\n            else {\n                let propertySetter = property.setterInstance;\n                if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n                    this.errorRelated(diagnostics_1.DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility, propertyGetter.identifierNode.range, propertySetter.identifierNode.range);\n                }\n            }\n        }\n        if (instance.kind != program_1.ElementKind.INTERFACE) {\n            // Check that all required members are implemented\n            if (!instance.is(common_1.CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n                for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n                    let memberName = _keys[i];\n                    let member = assert(unimplemented.get(memberName));\n                    this.errorRelated(diagnostics_1.DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2, instance.identifierNode.range, member.identifierNode.range, instance.internalName, memberName, member.parent.internalName);\n                }\n            }\n            // Finalize memory offset\n            instance.nextMemoryOffset = memoryOffset;\n            // Link _own_ constructor if present\n            {\n                let ctorPrototype = instance.lookupInSelf(common_1.CommonNames.constructor);\n                if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n                    assert(ctorPrototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\n                    let ctorInstance = this.resolveFunction(ctorPrototype, null, assert(instance.contextualTypeArguments), reportMode);\n                    if (ctorInstance)\n                        instance.constructorInstance = ctorInstance;\n                }\n            }\n        }\n        // Fully resolve operator overloads (don't have type parameters on their own)\n        var overloadPrototypes = prototype.overloadPrototypes;\n        // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n        for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n            let overloadKind = unchecked(_keys[i]);\n            let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n            assert(overloadKind != program_1.OperatorKind.INVALID);\n            let operatorInstance;\n            if (overloadPrototype.is(common_1.CommonFlags.INSTANCE)) {\n                let boundPrototype = overloadPrototype.toBound(instance);\n                operatorInstance = this.resolveFunction(boundPrototype, null, util_1.uniqueMap(), reportMode);\n            }\n            else {\n                operatorInstance = this.resolveFunction(overloadPrototype, null, util_1.uniqueMap(), reportMode);\n            }\n            if (!operatorInstance)\n                continue;\n            let overloads = instance.overloads;\n            if (!overloads)\n                instance.overloads = overloads = new Map();\n            // inc/dec are special in that an instance overload attempts to re-assign\n            // the corresponding value, thus requiring a matching return type, while a\n            // static overload works like any other overload.\n            if (operatorInstance.is(common_1.CommonFlags.INSTANCE)) {\n                switch (overloadKind) {\n                    case program_1.OperatorKind.PREFIX_INC:\n                    case program_1.OperatorKind.PREFIX_DEC:\n                    case program_1.OperatorKind.POSTFIX_INC:\n                    case program_1.OperatorKind.POSTFIX_DEC: {\n                        let returnType = operatorInstance.signature.returnType;\n                        if (!returnType.isAssignableTo(instance.type)) {\n                            if (reportMode == ReportMode.REPORT) {\n                                this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString());\n                            }\n                        }\n                    }\n                }\n            }\n            if (!overloads.has(overloadKind)) {\n                overloads.set(overloadKind, operatorInstance);\n                if (overloadKind == program_1.OperatorKind.INDEXED_GET || overloadKind == program_1.OperatorKind.INDEXED_SET) {\n                    let index = instance.indexSignature;\n                    if (!index)\n                        instance.indexSignature = index = new program_1.IndexSignature(instance);\n                    if (overloadKind == program_1.OperatorKind.INDEXED_GET) {\n                        index.setType(operatorInstance.signature.returnType);\n                    }\n                }\n            }\n            else {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_decorator, operatorInstance.declaration.range);\n                }\n            }\n        }\n        // Remove this class from pending\n        assert(pendingClasses.has(instance)); // must be pending\n        pendingClasses.delete(instance);\n        // Finish derived classes that we postponed in `resolveClass` due to the\n        // base class still being pending, again triggering `finishResolveClass`\n        // of any classes derived from those classes, ultimately leading to all\n        // pending classes being resolved.\n        for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n            let pending = _values[i];\n            let dependsOnInstance = pending.base === instance;\n            let interfaces = pending.interfaces;\n            if (interfaces) {\n                let anyPending = false;\n                for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n                    let iface = _values2[j];\n                    if (iface === instance)\n                        dependsOnInstance = true;\n                    else if (pendingClasses.has(iface))\n                        anyPending = true;\n                }\n                if (anyPending)\n                    continue;\n            }\n            if (dependsOnInstance)\n                this.finishResolveClass(pending, reportMode);\n        }\n    }\n    /** Resolves a class prototype by first resolving the specified type arguments. */\n    resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype, \n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes, \n    /** Contextual element. */\n    ctxElement, \n    /** Contextual types, i.e. `T`. */\n    ctxTypes, \n    /** The node to use when reporting intermediate errors. */\n    reportNode, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var resolvedTypeArguments = null;\n        // Resolve type arguments if generic\n        if (prototype.is(common_1.CommonFlags.GENERIC)) {\n            resolvedTypeArguments = this.resolveTypeArguments(// reports\n            assert(prototype.typeParameterNodes), // must be present if generic\n            typeArgumentNodes, ctxElement, ctxTypes, reportNode, reportMode);\n            if (!resolvedTypeArguments)\n                return null;\n            // Otherwise make sure that no type arguments have been specified\n        }\n        else {\n            if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n                if (reportMode == ReportMode.REPORT) {\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\n                }\n                return null;\n            }\n        }\n        // Continue with concrete types\n        return this.resolveClass(prototype, resolvedTypeArguments, ctxTypes, reportMode);\n    }\n    /** Resolves a property prototype. */\n    resolveProperty(\n    /** The prototype of the property. */\n    prototype, \n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT) {\n        var instance = prototype.instance;\n        if (instance)\n            return instance;\n        prototype.instance = instance = new program_1.Property(prototype, prototype);\n        var getterPrototype = prototype.getterPrototype;\n        if (getterPrototype) {\n            let getterInstance = this.resolveFunction(getterPrototype, null, util_1.uniqueMap(), reportMode);\n            if (getterInstance) {\n                instance.getterInstance = getterInstance;\n                instance.setType(getterInstance.signature.returnType);\n            }\n        }\n        var setterPrototype = prototype.setterPrototype;\n        if (setterPrototype) {\n            let setterInstance = this.resolveFunction(setterPrototype, null, util_1.uniqueMap(), reportMode);\n            if (setterInstance) {\n                instance.setterInstance = setterInstance;\n                if (!instance.is(common_1.CommonFlags.RESOLVED)) {\n                    assert(setterInstance.signature.parameterTypes.length == 1);\n                    instance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n            }\n        }\n        return instance;\n    }\n}\nexports.Resolver = Resolver;\n\n\n/***/ }),\n\n/***/ 411:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.State = exports.Tokenizer = exports.Range = exports.operatorTokenToString = exports.isIllegalVariableIdentifier = exports.tokenIsAlsoIdentifier = exports.tokenFromKeyword = exports.IdentifierHandling = exports.Token = void 0;\nconst diagnostics_1 = __webpack_require__(256);\nconst ast_1 = __webpack_require__(60);\nconst util_1 = __webpack_require__(910);\n/** Named token types. */\nvar Token;\n(function (Token) {\n    // keywords\n    // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n    Token[Token[\"ABSTRACT\"] = 0] = \"ABSTRACT\";\n    Token[Token[\"AS\"] = 1] = \"AS\";\n    Token[Token[\"ASYNC\"] = 2] = \"ASYNC\";\n    Token[Token[\"AWAIT\"] = 3] = \"AWAIT\";\n    Token[Token[\"BREAK\"] = 4] = \"BREAK\";\n    Token[Token[\"CASE\"] = 5] = \"CASE\";\n    Token[Token[\"CATCH\"] = 6] = \"CATCH\";\n    Token[Token[\"CLASS\"] = 7] = \"CLASS\";\n    Token[Token[\"CONST\"] = 8] = \"CONST\";\n    Token[Token[\"CONTINUE\"] = 9] = \"CONTINUE\";\n    Token[Token[\"CONSTRUCTOR\"] = 10] = \"CONSTRUCTOR\";\n    Token[Token[\"DEBUGGER\"] = 11] = \"DEBUGGER\";\n    Token[Token[\"DECLARE\"] = 12] = \"DECLARE\";\n    Token[Token[\"DEFAULT\"] = 13] = \"DEFAULT\";\n    Token[Token[\"DELETE\"] = 14] = \"DELETE\";\n    Token[Token[\"DO\"] = 15] = \"DO\";\n    Token[Token[\"ELSE\"] = 16] = \"ELSE\";\n    Token[Token[\"ENUM\"] = 17] = \"ENUM\";\n    Token[Token[\"EXPORT\"] = 18] = \"EXPORT\";\n    Token[Token[\"EXTENDS\"] = 19] = \"EXTENDS\";\n    Token[Token[\"FALSE\"] = 20] = \"FALSE\";\n    Token[Token[\"FINALLY\"] = 21] = \"FINALLY\";\n    Token[Token[\"FOR\"] = 22] = \"FOR\";\n    Token[Token[\"FROM\"] = 23] = \"FROM\";\n    Token[Token[\"FUNCTION\"] = 24] = \"FUNCTION\";\n    Token[Token[\"GET\"] = 25] = \"GET\";\n    Token[Token[\"IF\"] = 26] = \"IF\";\n    Token[Token[\"IMPLEMENTS\"] = 27] = \"IMPLEMENTS\";\n    Token[Token[\"IMPORT\"] = 28] = \"IMPORT\";\n    Token[Token[\"IN\"] = 29] = \"IN\";\n    Token[Token[\"INSTANCEOF\"] = 30] = \"INSTANCEOF\";\n    Token[Token[\"INTERFACE\"] = 31] = \"INTERFACE\";\n    Token[Token[\"IS\"] = 32] = \"IS\";\n    Token[Token[\"KEYOF\"] = 33] = \"KEYOF\";\n    Token[Token[\"LET\"] = 34] = \"LET\";\n    Token[Token[\"MODULE\"] = 35] = \"MODULE\";\n    Token[Token[\"NAMESPACE\"] = 36] = \"NAMESPACE\";\n    Token[Token[\"NEW\"] = 37] = \"NEW\";\n    Token[Token[\"NULL\"] = 38] = \"NULL\";\n    Token[Token[\"OF\"] = 39] = \"OF\";\n    Token[Token[\"PACKAGE\"] = 40] = \"PACKAGE\";\n    Token[Token[\"PRIVATE\"] = 41] = \"PRIVATE\";\n    Token[Token[\"PROTECTED\"] = 42] = \"PROTECTED\";\n    Token[Token[\"PUBLIC\"] = 43] = \"PUBLIC\";\n    Token[Token[\"READONLY\"] = 44] = \"READONLY\";\n    Token[Token[\"RETURN\"] = 45] = \"RETURN\";\n    Token[Token[\"SET\"] = 46] = \"SET\";\n    Token[Token[\"STATIC\"] = 47] = \"STATIC\";\n    Token[Token[\"SUPER\"] = 48] = \"SUPER\";\n    Token[Token[\"SWITCH\"] = 49] = \"SWITCH\";\n    Token[Token[\"THIS\"] = 50] = \"THIS\";\n    Token[Token[\"THROW\"] = 51] = \"THROW\";\n    Token[Token[\"TRUE\"] = 52] = \"TRUE\";\n    Token[Token[\"TRY\"] = 53] = \"TRY\";\n    Token[Token[\"TYPE\"] = 54] = \"TYPE\";\n    Token[Token[\"TYPEOF\"] = 55] = \"TYPEOF\";\n    Token[Token[\"VAR\"] = 56] = \"VAR\";\n    Token[Token[\"VOID\"] = 57] = \"VOID\";\n    Token[Token[\"WHILE\"] = 58] = \"WHILE\";\n    Token[Token[\"WITH\"] = 59] = \"WITH\";\n    Token[Token[\"YIELD\"] = 60] = \"YIELD\";\n    // punctuation\n    Token[Token[\"OPENBRACE\"] = 61] = \"OPENBRACE\";\n    Token[Token[\"CLOSEBRACE\"] = 62] = \"CLOSEBRACE\";\n    Token[Token[\"OPENPAREN\"] = 63] = \"OPENPAREN\";\n    Token[Token[\"CLOSEPAREN\"] = 64] = \"CLOSEPAREN\";\n    Token[Token[\"OPENBRACKET\"] = 65] = \"OPENBRACKET\";\n    Token[Token[\"CLOSEBRACKET\"] = 66] = \"CLOSEBRACKET\";\n    Token[Token[\"DOT\"] = 67] = \"DOT\";\n    Token[Token[\"DOT_DOT_DOT\"] = 68] = \"DOT_DOT_DOT\";\n    Token[Token[\"SEMICOLON\"] = 69] = \"SEMICOLON\";\n    Token[Token[\"COMMA\"] = 70] = \"COMMA\";\n    Token[Token[\"LESSTHAN\"] = 71] = \"LESSTHAN\";\n    Token[Token[\"GREATERTHAN\"] = 72] = \"GREATERTHAN\";\n    Token[Token[\"LESSTHAN_EQUALS\"] = 73] = \"LESSTHAN_EQUALS\";\n    Token[Token[\"GREATERTHAN_EQUALS\"] = 74] = \"GREATERTHAN_EQUALS\";\n    Token[Token[\"EQUALS_EQUALS\"] = 75] = \"EQUALS_EQUALS\";\n    Token[Token[\"EXCLAMATION_EQUALS\"] = 76] = \"EXCLAMATION_EQUALS\";\n    Token[Token[\"EQUALS_EQUALS_EQUALS\"] = 77] = \"EQUALS_EQUALS_EQUALS\";\n    Token[Token[\"EXCLAMATION_EQUALS_EQUALS\"] = 78] = \"EXCLAMATION_EQUALS_EQUALS\";\n    Token[Token[\"EQUALS_GREATERTHAN\"] = 79] = \"EQUALS_GREATERTHAN\";\n    Token[Token[\"PLUS\"] = 80] = \"PLUS\";\n    Token[Token[\"MINUS\"] = 81] = \"MINUS\";\n    Token[Token[\"ASTERISK_ASTERISK\"] = 82] = \"ASTERISK_ASTERISK\";\n    Token[Token[\"ASTERISK\"] = 83] = \"ASTERISK\";\n    Token[Token[\"SLASH\"] = 84] = \"SLASH\";\n    Token[Token[\"PERCENT\"] = 85] = \"PERCENT\";\n    Token[Token[\"PLUS_PLUS\"] = 86] = \"PLUS_PLUS\";\n    Token[Token[\"MINUS_MINUS\"] = 87] = \"MINUS_MINUS\";\n    Token[Token[\"LESSTHAN_LESSTHAN\"] = 88] = \"LESSTHAN_LESSTHAN\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN\"] = 89] = \"GREATERTHAN_GREATERTHAN\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN_GREATERTHAN\"] = 90] = \"GREATERTHAN_GREATERTHAN_GREATERTHAN\";\n    Token[Token[\"AMPERSAND\"] = 91] = \"AMPERSAND\";\n    Token[Token[\"BAR\"] = 92] = \"BAR\";\n    Token[Token[\"CARET\"] = 93] = \"CARET\";\n    Token[Token[\"EXCLAMATION\"] = 94] = \"EXCLAMATION\";\n    Token[Token[\"TILDE\"] = 95] = \"TILDE\";\n    Token[Token[\"AMPERSAND_AMPERSAND\"] = 96] = \"AMPERSAND_AMPERSAND\";\n    Token[Token[\"BAR_BAR\"] = 97] = \"BAR_BAR\";\n    Token[Token[\"QUESTION\"] = 98] = \"QUESTION\";\n    Token[Token[\"COLON\"] = 99] = \"COLON\";\n    Token[Token[\"EQUALS\"] = 100] = \"EQUALS\";\n    Token[Token[\"PLUS_EQUALS\"] = 101] = \"PLUS_EQUALS\";\n    Token[Token[\"MINUS_EQUALS\"] = 102] = \"MINUS_EQUALS\";\n    Token[Token[\"ASTERISK_EQUALS\"] = 103] = \"ASTERISK_EQUALS\";\n    Token[Token[\"ASTERISK_ASTERISK_EQUALS\"] = 104] = \"ASTERISK_ASTERISK_EQUALS\";\n    Token[Token[\"SLASH_EQUALS\"] = 105] = \"SLASH_EQUALS\";\n    Token[Token[\"PERCENT_EQUALS\"] = 106] = \"PERCENT_EQUALS\";\n    Token[Token[\"LESSTHAN_LESSTHAN_EQUALS\"] = 107] = \"LESSTHAN_LESSTHAN_EQUALS\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN_EQUALS\"] = 108] = \"GREATERTHAN_GREATERTHAN_EQUALS\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS\"] = 109] = \"GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS\";\n    Token[Token[\"AMPERSAND_EQUALS\"] = 110] = \"AMPERSAND_EQUALS\";\n    Token[Token[\"BAR_EQUALS\"] = 111] = \"BAR_EQUALS\";\n    Token[Token[\"CARET_EQUALS\"] = 112] = \"CARET_EQUALS\";\n    Token[Token[\"AT\"] = 113] = \"AT\";\n    // literals\n    Token[Token[\"IDENTIFIER\"] = 114] = \"IDENTIFIER\";\n    Token[Token[\"STRINGLITERAL\"] = 115] = \"STRINGLITERAL\";\n    Token[Token[\"INTEGERLITERAL\"] = 116] = \"INTEGERLITERAL\";\n    Token[Token[\"FLOATLITERAL\"] = 117] = \"FLOATLITERAL\";\n    // meta\n    Token[Token[\"INVALID\"] = 118] = \"INVALID\";\n    Token[Token[\"ENDOFFILE\"] = 119] = \"ENDOFFILE\";\n})(Token = exports.Token || (exports.Token = {}));\nvar IdentifierHandling;\n(function (IdentifierHandling) {\n    IdentifierHandling[IdentifierHandling[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    IdentifierHandling[IdentifierHandling[\"PREFER\"] = 1] = \"PREFER\";\n    IdentifierHandling[IdentifierHandling[\"ALWAYS\"] = 2] = \"ALWAYS\";\n})(IdentifierHandling = exports.IdentifierHandling || (exports.IdentifierHandling = {}));\nfunction tokenFromKeyword(text) {\n    assert(text.length);\n    switch (text.charCodeAt(0)) {\n        case 97 /* a */: {\n            if (text == \"abstract\")\n                return Token.ABSTRACT;\n            if (text == \"as\")\n                return Token.AS;\n            if (text == \"async\")\n                return Token.ASYNC;\n            if (text == \"await\")\n                return Token.AWAIT;\n            break;\n        }\n        case 98 /* b */: {\n            if (text == \"break\")\n                return Token.BREAK;\n            break;\n        }\n        case 99 /* c */: {\n            if (text == \"case\")\n                return Token.CASE;\n            if (text == \"catch\")\n                return Token.CATCH;\n            if (text == \"class\")\n                return Token.CLASS;\n            if (text == \"continue\")\n                return Token.CONTINUE;\n            if (text == \"const\")\n                return Token.CONST;\n            if (text == \"constructor\")\n                return Token.CONSTRUCTOR;\n            break;\n        }\n        case 100 /* d */: {\n            if (text == \"debugger\")\n                return Token.DEBUGGER;\n            if (text == \"declare\")\n                return Token.DECLARE;\n            if (text == \"default\")\n                return Token.DEFAULT;\n            if (text == \"delete\")\n                return Token.DELETE;\n            if (text == \"do\")\n                return Token.DO;\n            break;\n        }\n        case 101 /* e */: {\n            if (text == \"else\")\n                return Token.ELSE;\n            if (text == \"enum\")\n                return Token.ENUM;\n            if (text == \"export\")\n                return Token.EXPORT;\n            if (text == \"extends\")\n                return Token.EXTENDS;\n            break;\n        }\n        case 102 /* f */: {\n            if (text == \"false\")\n                return Token.FALSE;\n            if (text == \"finally\")\n                return Token.FINALLY;\n            if (text == \"for\")\n                return Token.FOR;\n            if (text == \"from\")\n                return Token.FROM;\n            if (text == \"function\")\n                return Token.FUNCTION;\n            break;\n        }\n        case 103 /* g */: {\n            if (text == \"get\")\n                return Token.GET;\n            break;\n        }\n        case 105 /* i */: {\n            if (text == \"if\")\n                return Token.IF;\n            if (text == \"implements\")\n                return Token.IMPLEMENTS;\n            if (text == \"import\")\n                return Token.IMPORT;\n            if (text == \"in\")\n                return Token.IN;\n            if (text == \"instanceof\")\n                return Token.INSTANCEOF;\n            if (text == \"interface\")\n                return Token.INTERFACE;\n            if (text == \"is\")\n                return Token.IS;\n            break;\n        }\n        case 107 /* k */: {\n            if (text == \"keyof\")\n                return Token.KEYOF;\n            break;\n        }\n        case 108 /* l */: {\n            if (text == \"let\")\n                return Token.LET;\n            break;\n        }\n        case 109 /* m */: {\n            if (text == \"module\")\n                return Token.MODULE;\n            break;\n        }\n        case 110 /* n */: {\n            if (text == \"namespace\")\n                return Token.NAMESPACE;\n            if (text == \"new\")\n                return Token.NEW;\n            if (text == \"null\")\n                return Token.NULL;\n            break;\n        }\n        case 111 /* o */: {\n            if (text == \"of\")\n                return Token.OF;\n            break;\n        }\n        case 112 /* p */: {\n            if (text == \"package\")\n                return Token.PACKAGE;\n            if (text == \"private\")\n                return Token.PRIVATE;\n            if (text == \"protected\")\n                return Token.PROTECTED;\n            if (text == \"public\")\n                return Token.PUBLIC;\n            break;\n        }\n        case 114 /* r */: {\n            if (text == \"readonly\")\n                return Token.READONLY;\n            if (text == \"return\")\n                return Token.RETURN;\n            break;\n        }\n        case 115 /* s */: {\n            if (text == \"set\")\n                return Token.SET;\n            if (text == \"static\")\n                return Token.STATIC;\n            if (text == \"super\")\n                return Token.SUPER;\n            if (text == \"switch\")\n                return Token.SWITCH;\n            break;\n        }\n        case 116 /* t */: {\n            if (text == \"this\")\n                return Token.THIS;\n            if (text == \"throw\")\n                return Token.THROW;\n            if (text == \"true\")\n                return Token.TRUE;\n            if (text == \"try\")\n                return Token.TRY;\n            if (text == \"type\")\n                return Token.TYPE;\n            if (text == \"typeof\")\n                return Token.TYPEOF;\n            break;\n        }\n        case 118 /* v */: {\n            if (text == \"var\")\n                return Token.VAR;\n            if (text == \"void\")\n                return Token.VOID;\n            break;\n        }\n        case 119 /* w */: {\n            if (text == \"while\")\n                return Token.WHILE;\n            if (text == \"with\")\n                return Token.WITH;\n            break;\n        }\n        case 121 /* y */: {\n            if (text == \"yield\")\n                return Token.YIELD;\n            break;\n        }\n    }\n    return Token.INVALID;\n}\nexports.tokenFromKeyword = tokenFromKeyword;\nfunction tokenIsAlsoIdentifier(token) {\n    switch (token) {\n        case Token.ABSTRACT:\n        case Token.AS:\n        case Token.CONSTRUCTOR:\n        case Token.DECLARE:\n        case Token.DELETE:\n        case Token.FROM:\n        case Token.FOR:\n        case Token.GET:\n        case Token.INSTANCEOF:\n        case Token.IS:\n        case Token.KEYOF:\n        case Token.MODULE:\n        case Token.NAMESPACE:\n        case Token.NULL:\n        case Token.READONLY:\n        case Token.SET:\n        case Token.TYPE:\n        case Token.VOID: return true;\n        default: return false;\n    }\n}\nexports.tokenIsAlsoIdentifier = tokenIsAlsoIdentifier;\nfunction isIllegalVariableIdentifier(name) {\n    assert(name.length);\n    switch (name.charCodeAt(0)) {\n        case 100 /* d */: return name == \"delete\";\n        case 102 /* f */: return name == \"for\";\n        case 105 /* i */: return name == \"instanceof\";\n        case 110 /* n */: return name == \"null\";\n        case 118 /* v */: return name == \"void\";\n    }\n    return false;\n}\nexports.isIllegalVariableIdentifier = isIllegalVariableIdentifier;\nfunction operatorTokenToString(token) {\n    switch (token) {\n        case Token.DELETE: return \"delete\";\n        case Token.IN: return \"in\";\n        case Token.INSTANCEOF: return \"instanceof\";\n        case Token.NEW: return \"new\";\n        case Token.TYPEOF: return \"typeof\";\n        case Token.VOID: return \"void\";\n        case Token.YIELD: return \"yield\";\n        case Token.DOT_DOT_DOT: return \"...\";\n        case Token.COMMA: return \",\";\n        case Token.LESSTHAN: return \"<\";\n        case Token.GREATERTHAN: return \">\";\n        case Token.LESSTHAN_EQUALS: return \"<=\";\n        case Token.GREATERTHAN_EQUALS: return \">=\";\n        case Token.EQUALS_EQUALS: return \"==\";\n        case Token.EXCLAMATION_EQUALS: return \"!=\";\n        case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n        case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n        case Token.PLUS: return \"+\";\n        case Token.MINUS: return \"-\";\n        case Token.ASTERISK_ASTERISK: return \"**\";\n        case Token.ASTERISK: return \"*\";\n        case Token.SLASH: return \"/\";\n        case Token.PERCENT: return \"%\";\n        case Token.PLUS_PLUS: return \"++\";\n        case Token.MINUS_MINUS: return \"--\";\n        case Token.LESSTHAN_LESSTHAN: return \"<<\";\n        case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n        case Token.AMPERSAND: return \"&\";\n        case Token.BAR: return \"|\";\n        case Token.CARET: return \"^\";\n        case Token.EXCLAMATION: return \"!\";\n        case Token.TILDE: return \"~\";\n        case Token.AMPERSAND_AMPERSAND: return \"&&\";\n        case Token.BAR_BAR: return \"||\";\n        case Token.EQUALS: return \"=\";\n        case Token.PLUS_EQUALS: return \"+=\";\n        case Token.MINUS_EQUALS: return \"-=\";\n        case Token.ASTERISK_EQUALS: return \"*=\";\n        case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n        case Token.SLASH_EQUALS: return \"/=\";\n        case Token.PERCENT_EQUALS: return \"%=\";\n        case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n        case Token.AMPERSAND_EQUALS: return \"&=\";\n        case Token.BAR_EQUALS: return \"|=\";\n        case Token.CARET_EQUALS: return \"^=\";\n        default: {\n            assert(false);\n            return \"\";\n        }\n    }\n}\nexports.operatorTokenToString = operatorTokenToString;\nclass Range {\n    constructor(start, end) {\n        this.debugInfoRef = 0;\n        this.start = start;\n        this.end = end;\n    }\n    static join(a, b) {\n        if (a.source != b.source)\n            throw new Error(\"source mismatch\");\n        let range = new Range(a.start < b.start ? a.start : b.start, a.end > b.end ? a.end : b.end);\n        range.source = a.source;\n        return range;\n    }\n    equals(other) {\n        return this.source == other.source && this.start == other.start && this.end == other.end;\n    }\n    get atStart() {\n        let range = new Range(this.start, this.start);\n        range.source = this.source;\n        return range;\n    }\n    get atEnd() {\n        let range = new Range(this.end, this.end);\n        range.source = this.source;\n        return range;\n    }\n    toString() {\n        return this.source.text.substring(this.start, this.end);\n    }\n}\nexports.Range = Range;\n/** Tokenizes a source to individual {@link Token}s. */\nclass Tokenizer extends diagnostics_1.DiagnosticEmitter {\n    /** Constructs a new tokenizer. */\n    constructor(source, diagnostics = null) {\n        super(diagnostics);\n        this.end = 0;\n        this.pos = 0;\n        this.token = -1;\n        this.tokenPos = 0;\n        this.nextToken = -1;\n        this.nextTokenPos = 0;\n        this.nextTokenOnNewLine = false;\n        this.onComment = null;\n        if (!diagnostics)\n            diagnostics = [];\n        this.diagnostics = diagnostics;\n        this.source = source;\n        var text = source.text;\n        var end = text.length;\n        var pos = 0;\n        // skip bom\n        if (pos < end &&\n            text.charCodeAt(pos) == 65279 /* BYTEORDERMARK */) {\n            ++pos;\n        }\n        // skip shebang\n        if (pos + 1 < end &&\n            text.charCodeAt(pos) == 35 /* HASH */ &&\n            text.charCodeAt(pos + 1) == 33 /* EXCLAMATION */) {\n            pos += 2;\n            while (pos < end &&\n                text.charCodeAt(pos) != 10 /* LINEFEED */) {\n                ++pos;\n            }\n            // 'next' now starts at lf or eof\n        }\n        this.pos = pos;\n        this.end = end;\n    }\n    next(identifierHandling = IdentifierHandling.DEFAULT) {\n        this.nextToken = -1;\n        var token;\n        do\n            token = this.unsafeNext(identifierHandling);\n        while (token == Token.INVALID);\n        this.token = token;\n        return token;\n    }\n    unsafeNext(identifierHandling = IdentifierHandling.DEFAULT, maxTokenLength = i32.MAX_VALUE) {\n        var text = this.source.text;\n        var end = this.end;\n        var pos = this.pos;\n        while (pos < end) {\n            this.tokenPos = pos;\n            let c = text.charCodeAt(pos);\n            switch (c) {\n                case 13 /* CARRIAGERETURN */: {\n                    if (!(++pos < end &&\n                        text.charCodeAt(pos) == 10 /* LINEFEED */))\n                        break;\n                    // otherwise fall-through\n                }\n                case 10 /* LINEFEED */:\n                case 9 /* TAB */:\n                case 11 /* VERTICALTAB */:\n                case 12 /* FORMFEED */:\n                case 32 /* SPACE */: {\n                    ++pos;\n                    break;\n                }\n                case 33 /* EXCLAMATION */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end &&\n                        text.charCodeAt(pos) == 61 /* EQUALS */) {\n                        ++pos;\n                        if (maxTokenLength > 2 && pos < end &&\n                            text.charCodeAt(pos) == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.EXCLAMATION_EQUALS_EQUALS;\n                        }\n                        this.pos = pos;\n                        return Token.EXCLAMATION_EQUALS;\n                    }\n                    this.pos = pos;\n                    return Token.EXCLAMATION;\n                }\n                case 34 /* DOUBLEQUOTE */:\n                case 39 /* SINGLEQUOTE */:\n                case 96 /* BACKTICK */: { // TODO\n                    this.pos = pos;\n                    return Token.STRINGLITERAL; // expects a call to readString\n                }\n                case 37 /* PERCENT */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end &&\n                        text.charCodeAt(pos) == 61 /* EQUALS */) {\n                        this.pos = pos + 1;\n                        return Token.PERCENT_EQUALS;\n                    }\n                    this.pos = pos;\n                    return Token.PERCENT;\n                }\n                case 38 /* AMPERSAND */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 38 /* AMPERSAND */) {\n                            this.pos = pos + 1;\n                            return Token.AMPERSAND_AMPERSAND;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.AMPERSAND_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.AMPERSAND;\n                }\n                case 40 /* OPENPAREN */: {\n                    this.pos = pos + 1;\n                    return Token.OPENPAREN;\n                }\n                case 41 /* CLOSEPAREN */: {\n                    this.pos = pos + 1;\n                    return Token.CLOSEPAREN;\n                }\n                case 42 /* ASTERISK */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.ASTERISK_EQUALS;\n                        }\n                        if (chr == 42 /* ASTERISK */) {\n                            ++pos;\n                            if (maxTokenLength > 2 && pos < end &&\n                                text.charCodeAt(pos) == 61 /* EQUALS */) {\n                                this.pos = pos + 1;\n                                return Token.ASTERISK_ASTERISK_EQUALS;\n                            }\n                            this.pos = pos;\n                            return Token.ASTERISK_ASTERISK;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.ASTERISK;\n                }\n                case 43 /* PLUS */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 43 /* PLUS */) {\n                            this.pos = pos + 1;\n                            return Token.PLUS_PLUS;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.PLUS_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.PLUS;\n                }\n                case 44 /* COMMA */: {\n                    this.pos = pos + 1;\n                    return Token.COMMA;\n                }\n                case 45 /* MINUS */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 45 /* MINUS */) {\n                            this.pos = pos + 1;\n                            return Token.MINUS_MINUS;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.MINUS_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.MINUS;\n                }\n                case 46 /* DOT */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (util_1.isDecimalDigit(chr)) {\n                            this.pos = pos - 1;\n                            return Token.FLOATLITERAL; // expects a call to readFloat\n                        }\n                        if (maxTokenLength > 2 && pos + 1 < end &&\n                            chr == 46 /* DOT */ &&\n                            text.charCodeAt(pos + 1) == 46 /* DOT */) {\n                            this.pos = pos + 2;\n                            return Token.DOT_DOT_DOT;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.DOT;\n                }\n                case 47 /* SLASH */: {\n                    let commentStartPos = pos;\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 47 /* SLASH */) { // single-line\n                            let commentKind = ast_1.CommentKind.LINE;\n                            if (pos + 1 < end &&\n                                text.charCodeAt(pos + 1) == 47 /* SLASH */) {\n                                ++pos;\n                                commentKind = ast_1.CommentKind.TRIPLE;\n                            }\n                            while (++pos < end) {\n                                if (text.charCodeAt(pos) == 10 /* LINEFEED */) {\n                                    ++pos;\n                                    break;\n                                }\n                            }\n                            if (this.onComment) {\n                                this.onComment(commentKind, text.substring(commentStartPos, pos), this.range(commentStartPos, pos));\n                            }\n                            break;\n                        }\n                        if (chr == 42 /* ASTERISK */) { // multi-line\n                            let closed = false;\n                            while (++pos < end) {\n                                c = text.charCodeAt(pos);\n                                if (c == 42 /* ASTERISK */ &&\n                                    pos + 1 < end &&\n                                    text.charCodeAt(pos + 1) == 47 /* SLASH */) {\n                                    pos += 2;\n                                    closed = true;\n                                    break;\n                                }\n                            }\n                            if (!closed) {\n                                this.error(diagnostics_1.DiagnosticCode._0_expected, this.range(pos), \"*/\");\n                            }\n                            else if (this.onComment) {\n                                this.onComment(ast_1.CommentKind.BLOCK, text.substring(commentStartPos, pos), this.range(commentStartPos, pos));\n                            }\n                            break;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.SLASH_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.SLASH;\n                }\n                case 48 /* _0 */:\n                case 49 /* _1 */:\n                case 50 /* _2 */:\n                case 51 /* _3 */:\n                case 52 /* _4 */:\n                case 53 /* _5 */:\n                case 54 /* _6 */:\n                case 55 /* _7 */:\n                case 56 /* _8 */:\n                case 57 /* _9 */: {\n                    this.pos = pos;\n                    return this.testInteger()\n                        ? Token.INTEGERLITERAL // expects a call to readInteger\n                        : Token.FLOATLITERAL; // expects a call to readFloat\n                }\n                case 58 /* COLON */: {\n                    this.pos = pos + 1;\n                    return Token.COLON;\n                }\n                case 59 /* SEMICOLON */: {\n                    this.pos = pos + 1;\n                    return Token.SEMICOLON;\n                }\n                case 60 /* LESSTHAN */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 60 /* LESSTHAN */) {\n                            ++pos;\n                            if (maxTokenLength > 2 &&\n                                pos < end &&\n                                text.charCodeAt(pos) == 61 /* EQUALS */) {\n                                this.pos = pos + 1;\n                                return Token.LESSTHAN_LESSTHAN_EQUALS;\n                            }\n                            this.pos = pos;\n                            return Token.LESSTHAN_LESSTHAN;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.LESSTHAN_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.LESSTHAN;\n                }\n                case 61 /* EQUALS */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 61 /* EQUALS */) {\n                            ++pos;\n                            if (maxTokenLength > 2 &&\n                                pos < end &&\n                                text.charCodeAt(pos) == 61 /* EQUALS */) {\n                                this.pos = pos + 1;\n                                return Token.EQUALS_EQUALS_EQUALS;\n                            }\n                            this.pos = pos;\n                            return Token.EQUALS_EQUALS;\n                        }\n                        if (chr == 62 /* GREATERTHAN */) {\n                            this.pos = pos + 1;\n                            return Token.EQUALS_GREATERTHAN;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.EQUALS;\n                }\n                case 62 /* GREATERTHAN */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 62 /* GREATERTHAN */) {\n                            ++pos;\n                            if (maxTokenLength > 2 && pos < end) {\n                                chr = text.charCodeAt(pos);\n                                if (chr == 62 /* GREATERTHAN */) {\n                                    ++pos;\n                                    if (maxTokenLength > 3 && pos < end &&\n                                        text.charCodeAt(pos) == 61 /* EQUALS */) {\n                                        this.pos = pos + 1;\n                                        return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                                    }\n                                    this.pos = pos;\n                                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                                }\n                                if (chr == 61 /* EQUALS */) {\n                                    this.pos = pos + 1;\n                                    return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                                }\n                            }\n                            this.pos = pos;\n                            return Token.GREATERTHAN_GREATERTHAN;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.GREATERTHAN_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.GREATERTHAN;\n                }\n                case 63 /* QUESTION */: {\n                    this.pos = pos + 1;\n                    return Token.QUESTION;\n                }\n                case 91 /* OPENBRACKET */: {\n                    this.pos = pos + 1;\n                    return Token.OPENBRACKET;\n                }\n                case 93 /* CLOSEBRACKET */: {\n                    this.pos = pos + 1;\n                    return Token.CLOSEBRACKET;\n                }\n                case 94 /* CARET */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end &&\n                        text.charCodeAt(pos) == 61 /* EQUALS */) {\n                        this.pos = pos + 1;\n                        return Token.CARET_EQUALS;\n                    }\n                    this.pos = pos;\n                    return Token.CARET;\n                }\n                case 123 /* OPENBRACE */: {\n                    this.pos = pos + 1;\n                    return Token.OPENBRACE;\n                }\n                case 124 /* BAR */: {\n                    ++pos;\n                    if (maxTokenLength > 1 && pos < end) {\n                        let chr = text.charCodeAt(pos);\n                        if (chr == 124 /* BAR */) {\n                            this.pos = pos + 1;\n                            return Token.BAR_BAR;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            this.pos = pos + 1;\n                            return Token.BAR_EQUALS;\n                        }\n                    }\n                    this.pos = pos;\n                    return Token.BAR;\n                }\n                case 125 /* CLOSEBRACE */: {\n                    this.pos = pos + 1;\n                    return Token.CLOSEBRACE;\n                }\n                case 126 /* TILDE */: {\n                    this.pos = pos + 1;\n                    return Token.TILDE;\n                }\n                case 64 /* AT */: {\n                    this.pos = pos + 1;\n                    return Token.AT;\n                }\n                default: {\n                    if (util_1.isIdentifierStart(c)) {\n                        if (util_1.isKeywordCharacter(c)) {\n                            let posBefore = pos;\n                            while (++pos < end &&\n                                util_1.isIdentifierPart(c = text.charCodeAt(pos))) {\n                                if (!util_1.isKeywordCharacter(c)) {\n                                    this.pos = posBefore;\n                                    return Token.IDENTIFIER;\n                                }\n                            }\n                            let keywordText = text.substring(posBefore, pos);\n                            let keywordToken = tokenFromKeyword(keywordText);\n                            if (keywordToken !== Token.INVALID &&\n                                identifierHandling !== IdentifierHandling.ALWAYS &&\n                                !(identifierHandling === IdentifierHandling.PREFER &&\n                                    tokenIsAlsoIdentifier(keywordToken))) {\n                                this.pos = pos;\n                                return keywordToken;\n                            }\n                            this.pos = pos = posBefore;\n                        }\n                        this.pos = pos;\n                        return Token.IDENTIFIER; // expects a call to readIdentifier\n                    }\n                    else if (util_1.isWhiteSpace(c)) {\n                        ++pos;\n                        break;\n                    }\n                    let start = pos++;\n                    if ( // surrogate pair?\n                    (c & 0xFC00) == 0xD800 && pos < end &&\n                        ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00)\n                        ++pos;\n                    this.error(diagnostics_1.DiagnosticCode.Invalid_character, this.range(start, pos));\n                    this.pos = pos;\n                    return Token.INVALID;\n                }\n            }\n        }\n        this.pos = pos;\n        return Token.ENDOFFILE;\n    }\n    peek(checkOnNewLine = false, identifierHandling = IdentifierHandling.DEFAULT, maxCompoundLength = i32.MAX_VALUE) {\n        var text = this.source.text;\n        if (this.nextToken < 0) {\n            let posBefore = this.pos;\n            let tokenBefore = this.token;\n            let tokenPosBefore = this.tokenPos;\n            let nextToken;\n            do\n                nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n            while (nextToken == Token.INVALID);\n            this.nextToken = nextToken;\n            this.nextTokenPos = this.tokenPos;\n            if (checkOnNewLine) {\n                this.nextTokenOnNewLine = false;\n                for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n                    if (util_1.isLineBreak(text.charCodeAt(pos))) {\n                        this.nextTokenOnNewLine = true;\n                        break;\n                    }\n                }\n            }\n            this.pos = posBefore;\n            this.token = tokenBefore;\n            this.tokenPos = tokenPosBefore;\n        }\n        return this.nextToken;\n    }\n    skipIdentifier(identifierHandling = IdentifierHandling.PREFER) {\n        return this.skip(Token.IDENTIFIER, identifierHandling);\n    }\n    skip(token, identifierHandling = IdentifierHandling.DEFAULT) {\n        var posBefore = this.pos;\n        var tokenBefore = this.token;\n        var tokenPosBefore = this.tokenPos;\n        var maxCompoundLength = i32.MAX_VALUE;\n        if (token == Token.GREATERTHAN) { // where parsing type arguments\n            maxCompoundLength = 1;\n        }\n        var nextToken;\n        do\n            nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n        while (nextToken == Token.INVALID);\n        if (nextToken == token) {\n            this.token = token;\n            this.nextToken = -1;\n            return true;\n        }\n        else {\n            this.pos = posBefore;\n            this.token = tokenBefore;\n            this.tokenPos = tokenPosBefore;\n            return false;\n        }\n    }\n    mark() {\n        var state = reusableState;\n        if (state) {\n            reusableState = null;\n            state.pos = this.pos;\n            state.token = this.token;\n            state.tokenPos = this.tokenPos;\n        }\n        else {\n            state = new State(this.pos, this.token, this.tokenPos);\n        }\n        return state;\n    }\n    discard(state) {\n        reusableState = state;\n    }\n    reset(state) {\n        this.pos = state.pos;\n        this.token = state.token;\n        this.tokenPos = state.tokenPos;\n        this.nextToken = -1;\n    }\n    range(start = -1, end = -1) {\n        if (start < 0) {\n            start = this.tokenPos;\n            end = this.pos;\n        }\n        else if (end < 0) {\n            end = start;\n        }\n        let range = new Range(start, end);\n        range.source = this.source;\n        return range;\n    }\n    readIdentifier() {\n        var text = this.source.text;\n        var end = this.end;\n        var pos = this.pos;\n        var start = pos;\n        while (++pos < end &&\n            util_1.isIdentifierPart(text.charCodeAt(pos)))\n            ;\n        this.pos = pos;\n        return text.substring(start, pos);\n    }\n    readString() {\n        var text = this.source.text;\n        var end = this.end;\n        var pos = this.pos;\n        var quote = text.charCodeAt(pos++);\n        var start = pos;\n        var result = \"\";\n        while (true) {\n            if (pos >= end) {\n                result += text.substring(start, pos);\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_string_literal, this.range(start - 1, end));\n                break;\n            }\n            let c = text.charCodeAt(pos);\n            if (c == quote) {\n                result += text.substring(start, pos++);\n                break;\n            }\n            if (c == 92 /* BACKSLASH */) {\n                result += text.substring(start, pos);\n                this.pos = pos; // save\n                result += this.readEscapeSequence();\n                pos = this.pos; // restore\n                start = pos;\n                continue;\n            }\n            if (util_1.isLineBreak(c) && quote != 96 /* BACKTICK */) {\n                result += text.substring(start, pos);\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_string_literal, this.range(start - 1, pos));\n                break;\n            }\n            ++pos;\n        }\n        this.pos = pos;\n        return result;\n    }\n    readEscapeSequence() {\n        var end = this.end;\n        if (++this.pos >= end) {\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(end));\n            return \"\";\n        }\n        var text = this.source.text;\n        var c = text.charCodeAt(this.pos++);\n        switch (c) {\n            case 48 /* _0 */: return \"\\0\";\n            case 98 /* b */: return \"\\b\";\n            case 116 /* t */: return \"\\t\";\n            case 110 /* n */: return \"\\n\";\n            case 118 /* v */: return \"\\v\";\n            case 102 /* f */: return \"\\f\";\n            case 114 /* r */: return \"\\r\";\n            case 39 /* SINGLEQUOTE */: return \"'\";\n            case 34 /* DOUBLEQUOTE */: return \"\\\"\";\n            case 117 /* u */: {\n                if (this.pos < end &&\n                    text.charCodeAt(this.pos) == 123 /* OPENBRACE */) {\n                    ++this.pos;\n                    return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n                }\n                return this.readUnicodeEscape(); // \\uDDDD\n            }\n            case 120 /* x */: {\n                return this.readHexadecimalEscape(); // \\xDD\n            }\n            case 13 /* CARRIAGERETURN */: {\n                if (this.pos < end &&\n                    text.charCodeAt(this.pos) == 10 /* LINEFEED */) {\n                    ++this.pos;\n                }\n                // fall through\n            }\n            case 10 /* LINEFEED */:\n            case 8232 /* LINESEPARATOR */:\n            case 8233 /* PARAGRAPHSEPARATOR */: return \"\";\n            default: return String.fromCharCode(c);\n        }\n    }\n    readRegexpPattern() {\n        var text = this.source.text;\n        var start = this.pos;\n        var end = this.end;\n        var escaped = false;\n        while (true) {\n            if (this.pos >= end) {\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, end));\n                break;\n            }\n            if (text.charCodeAt(this.pos) == 92 /* BACKSLASH */) {\n                ++this.pos;\n                escaped = true;\n                continue;\n            }\n            let c = text.charCodeAt(this.pos);\n            if (!escaped && c == 47 /* SLASH */)\n                break;\n            if (util_1.isLineBreak(c)) {\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, this.pos));\n                break;\n            }\n            ++this.pos;\n            escaped = false;\n        }\n        return text.substring(start, this.pos);\n    }\n    readRegexpFlags() {\n        var text = this.source.text;\n        var start = this.pos;\n        var end = this.end;\n        var flags = 0;\n        while (this.pos < end) {\n            let c = text.charCodeAt(this.pos);\n            if (!util_1.isIdentifierPart(c))\n                break;\n            ++this.pos;\n            // make sure each supported flag is unique\n            switch (c) {\n                case 103 /* g */: {\n                    flags |= flags & 1 ? -1 : 1;\n                    break;\n                }\n                case 105 /* i */: {\n                    flags |= flags & 2 ? -1 : 2;\n                    break;\n                }\n                case 109 /* m */: {\n                    flags |= flags & 4 ? -1 : 4;\n                    break;\n                }\n                default: {\n                    flags = -1;\n                    break;\n                }\n            }\n        }\n        if (flags == -1) {\n            this.error(diagnostics_1.DiagnosticCode.Invalid_regular_expression_flags, this.range(start, this.pos));\n        }\n        return text.substring(start, this.pos);\n    }\n    testInteger() {\n        var text = this.source.text;\n        var pos = this.pos;\n        var end = this.end;\n        if (pos + 1 < end && text.charCodeAt(pos) == 48 /* _0 */) {\n            switch (text.charCodeAt(pos + 2) | 32) {\n                case 120 /* x */:\n                case 98 /* b */:\n                case 111 /* o */: return true;\n            }\n        }\n        while (pos < end) {\n            let c = text.charCodeAt(pos);\n            if (c == 46 /* DOT */ || (c | 32) == 101 /* e */)\n                return false;\n            if (c != 95 /* _ */ && (c < 48 /* _0 */ || c > 57 /* _9 */))\n                break;\n            // does not validate separator placement (this is done in readXYInteger)\n            pos++;\n        }\n        return true;\n    }\n    readInteger() {\n        var text = this.source.text;\n        var pos = this.pos;\n        if (pos + 2 < this.end && text.charCodeAt(pos) == 48 /* _0 */) {\n            switch (text.charCodeAt(pos + 1) | 32) {\n                case 120 /* x */: {\n                    this.pos = pos + 2;\n                    return this.readHexInteger();\n                }\n                case 98 /* b */: {\n                    this.pos = pos + 2;\n                    return this.readBinaryInteger();\n                }\n                case 111 /* o */: {\n                    this.pos = pos + 2;\n                    return this.readOctalInteger();\n                }\n            }\n            if (util_1.isOctalDigit(text.charCodeAt(pos + 1))) {\n                let start = pos;\n                this.pos = pos + 1;\n                let value = this.readOctalInteger();\n                this.error(diagnostics_1.DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode, this.range(start, this.pos));\n                return value;\n            }\n        }\n        return this.readDecimalInteger();\n    }\n    readHexInteger() {\n        var text = this.source.text;\n        let pos = this.pos;\n        var end = this.end;\n        var start = pos;\n        var sepEnd = start;\n        var value = i64_new(0);\n        var i64_4 = i64_new(4);\n        while (pos < end) {\n            let c = text.charCodeAt(pos);\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\n                // value = (value << 4) + c - CharCode._0;\n                value = i64_add(i64_shl(value, i64_4), i64_new(c - 48 /* _0 */));\n            }\n            else if (c >= 65 /* A */ && c <= 70 /* F */) {\n                // value = (value << 4) + 10 + c - CharCode.A;\n                value = i64_add(i64_shl(value, i64_4), i64_new(10 + c - 65 /* A */));\n            }\n            else if (c >= 97 /* a */ && c <= 102 /* f */) {\n                // value = (value << 4) + 10 + c - CharCode.a;\n                value = i64_add(i64_shl(value, i64_4), i64_new(10 + c - 97 /* a */));\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            ++pos;\n        }\n        if (pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Hexadecimal_digit_expected, this.range(start));\n        }\n        else if (sepEnd == pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        this.pos = pos;\n        return value;\n    }\n    readDecimalInteger() {\n        var text = this.source.text;\n        var pos = this.pos;\n        var end = this.end;\n        var start = pos;\n        var sepEnd = start;\n        var value = i64_new(0);\n        var i64_10 = i64_new(10);\n        while (pos < end) {\n            let c = text.charCodeAt(pos);\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\n                // value = value * 10 + c - CharCode._0;\n                value = i64_add(i64_mul(value, i64_10), i64_new(c - 48 /* _0 */));\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                else if (pos - 1 == start && text.charCodeAt(pos - 1) == 48 /* _0 */) {\n                    this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            ++pos;\n        }\n        if (pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Digit_expected, this.range(start));\n        }\n        else if (sepEnd == pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        this.pos = pos;\n        return value;\n    }\n    readOctalInteger() {\n        var text = this.source.text;\n        var pos = this.pos;\n        var end = this.end;\n        var start = pos;\n        var sepEnd = start;\n        var value = i64_new(0);\n        var i64_3 = i64_new(3);\n        while (pos < end) {\n            let c = text.charCodeAt(pos);\n            if (c >= 48 /* _0 */ && c <= 55 /* _7 */) {\n                // value = (value << 3) + c - CharCode._0;\n                value = i64_add(i64_shl(value, i64_3), i64_new(c - 48 /* _0 */));\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            ++pos;\n        }\n        if (pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Octal_digit_expected, this.range(start));\n        }\n        else if (sepEnd == pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        this.pos = pos;\n        return value;\n    }\n    readBinaryInteger() {\n        var text = this.source.text;\n        var pos = this.pos;\n        var end = this.end;\n        var start = pos;\n        var sepEnd = start;\n        var value = i64_new(0);\n        var i64_1 = i64_new(1);\n        while (pos < end) {\n            let c = text.charCodeAt(pos);\n            if (c == 48 /* _0 */) {\n                // value = (value << 1);\n                value = i64_shl(value, i64_1);\n            }\n            else if (c == 49 /* _1 */) {\n                // value = (value << 1) + 1;\n                value = i64_add(i64_shl(value, i64_1), i64_1);\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            ++pos;\n        }\n        if (pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Binary_digit_expected, this.range(start));\n        }\n        else if (sepEnd == pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        this.pos = pos;\n        return value;\n    }\n    readFloat() {\n        // var text = this.source.text;\n        // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n        //   switch (text.charCodeAt(this.pos + 1)) {\n        //     case CharCode.X:\n        //     case CharCode.x: {\n        //       this.pos += 2;\n        //       return this.readHexFloat();\n        //     }\n        //   }\n        // }\n        return this.readDecimalFloat();\n    }\n    readDecimalFloat() {\n        var text = this.source.text;\n        var end = this.end;\n        var start = this.pos;\n        var sepCount = this.readDecimalFloatPartial(false);\n        if (this.pos < end && text.charCodeAt(this.pos) == 46 /* DOT */) {\n            ++this.pos;\n            sepCount += this.readDecimalFloatPartial();\n        }\n        if (this.pos < end) {\n            let c = text.charCodeAt(this.pos);\n            if ((c | 32) == 101 /* e */) {\n                if (++this.pos < end &&\n                    (c = text.charCodeAt(this.pos)) == 45 /* MINUS */ || c == 43 /* PLUS */ &&\n                    util_1.isDecimalDigit(text.charCodeAt(this.pos + 1))) {\n                    ++this.pos;\n                }\n                sepCount += this.readDecimalFloatPartial();\n            }\n        }\n        let result = text.substring(start, this.pos);\n        if (sepCount)\n            result = result.replaceAll(\"_\", \"\");\n        return parseFloat(result);\n    }\n    /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n    readDecimalFloatPartial(allowLeadingZeroSep = true) {\n        var text = this.source.text;\n        var pos = this.pos;\n        var start = pos;\n        var end = this.end;\n        var sepEnd = start;\n        var sepCount = 0;\n        while (pos < end) {\n            let c = text.charCodeAt(pos);\n            if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == 48 /* _0 */) {\n                    this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(pos));\n                }\n                sepEnd = pos + 1;\n                ++sepCount;\n            }\n            else if (!util_1.isDecimalDigit(c)) {\n                break;\n            }\n            ++pos;\n        }\n        if (pos != start && sepEnd == pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        this.pos = pos;\n        return sepCount;\n    }\n    readHexFloat() {\n        throw new Error(\"not implemented\"); // TBD\n    }\n    readHexadecimalEscape(remain = 2) {\n        var value = 0;\n        var text = this.source.text;\n        var pos = this.pos;\n        var end = this.end;\n        while (pos < end) {\n            let c = text.charCodeAt(pos++);\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\n                value = (value << 4) + c - 48 /* _0 */;\n            }\n            else if (c >= 65 /* A */ && c <= 70 /* F */) {\n                value = (value << 4) + c + (10 - 65 /* A */);\n            }\n            else if (c >= 97 /* a */ && c <= 102 /* f */) {\n                value = (value << 4) + c + (10 - 97 /* a */);\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Hexadecimal_digit_expected, this.range(pos - 1, pos));\n                this.pos = pos;\n                return \"\";\n            }\n            if (--remain == 0)\n                break;\n        }\n        if (remain) {\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(pos));\n            this.pos = pos;\n            return \"\";\n        }\n        this.pos = pos;\n        return String.fromCharCode(value);\n    }\n    checkForIdentifierStartAfterNumericLiteral() {\n        // TODO: BigInt n\n        var pos = this.pos;\n        if (pos < this.end && util_1.isIdentifierStart(this.source.text.charCodeAt(pos))) {\n            this.error(diagnostics_1.DiagnosticCode.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, this.range(pos));\n        }\n    }\n    readUnicodeEscape() {\n        return this.readHexadecimalEscape(4);\n    }\n    readExtendedUnicodeEscape() {\n        var start = this.pos;\n        var value = this.readHexInteger();\n        var value32 = i64_low(value);\n        var invalid = false;\n        assert(!i64_high(value));\n        if (value32 > 0x10FFFF) {\n            this.error(diagnostics_1.DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive, this.range(start, this.pos));\n            invalid = true;\n        }\n        var end = this.end;\n        var text = this.source.text;\n        if (this.pos >= end) {\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(start, end));\n            invalid = true;\n        }\n        else if (text.charCodeAt(this.pos) == 125 /* CLOSEBRACE */) {\n            ++this.pos;\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Unterminated_Unicode_escape_sequence, this.range(start, this.pos));\n            invalid = true;\n        }\n        if (invalid)\n            return \"\";\n        return value32 < 0x10000\n            ? String.fromCharCode(value32)\n            : String.fromCharCode(((value32 - 0x10000) >>> 10) | 0xD800, ((value32 - 0x10000) & 1023) | 0xDC00);\n    }\n}\nexports.Tokenizer = Tokenizer;\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nclass State {\n    constructor(\n    /** Current position. */\n    pos, \n    /** Current token. */\n    token, \n    /** Current token's position. */\n    tokenPos) {\n        this.pos = pos;\n        this.token = token;\n        this.tokenPos = tokenPos;\n    }\n}\nexports.State = State;\n// Reusable state object to reduce allocations\nvar reusableState = null;\n\n\n/***/ }),\n\n/***/ 699:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Signature = exports.typesToString = exports.typesToNativeTypes = exports.Type = exports.TypeFlags = exports.TypeKind = void 0;\nconst program_1 = __webpack_require__(974);\nconst module_1 = __webpack_require__(656);\n/** Indicates the kind of a type. */\nvar TypeKind;\n(function (TypeKind) {\n    // signed integers\n    /** An 8-bit signed integer. */\n    TypeKind[TypeKind[\"I8\"] = 0] = \"I8\";\n    /** A 16-bit signed integer. */\n    TypeKind[TypeKind[\"I16\"] = 1] = \"I16\";\n    /** A 32-bit signed integer. */\n    TypeKind[TypeKind[\"I32\"] = 2] = \"I32\";\n    /** A 64-bit signed integer. */\n    TypeKind[TypeKind[\"I64\"] = 3] = \"I64\";\n    /** A 32-bit/64-bit signed integer, depending on the target. */\n    TypeKind[TypeKind[\"ISIZE\"] = 4] = \"ISIZE\";\n    // unsigned integers\n    /** An 8-bit unsigned integer. */\n    TypeKind[TypeKind[\"U8\"] = 5] = \"U8\";\n    /** A 16-bit unsigned integer. */\n    TypeKind[TypeKind[\"U16\"] = 6] = \"U16\";\n    /** A 32-bit unsigned integer. Also the base of function types. */\n    TypeKind[TypeKind[\"U32\"] = 7] = \"U32\";\n    /** A 64-bit unsigned integer. */\n    TypeKind[TypeKind[\"U64\"] = 8] = \"U64\";\n    /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n    TypeKind[TypeKind[\"USIZE\"] = 9] = \"USIZE\";\n    /** A 1-bit unsigned integer. */\n    TypeKind[TypeKind[\"BOOL\"] = 10] = \"BOOL\";\n    // floats\n    /** A 32-bit float. */\n    TypeKind[TypeKind[\"F32\"] = 11] = \"F32\";\n    /** A 64-bit double. */\n    TypeKind[TypeKind[\"F64\"] = 12] = \"F64\";\n    // vectors\n    /** A 128-bit vector. */\n    TypeKind[TypeKind[\"V128\"] = 13] = \"V128\";\n    // references\n    /** Function reference. */\n    TypeKind[TypeKind[\"FUNCREF\"] = 14] = \"FUNCREF\";\n    /** External reference. */\n    TypeKind[TypeKind[\"EXTERNREF\"] = 15] = \"EXTERNREF\";\n    /** Exception reference. */\n    TypeKind[TypeKind[\"EXNREF\"] = 16] = \"EXNREF\";\n    /** Any reference. */\n    TypeKind[TypeKind[\"ANYREF\"] = 17] = \"ANYREF\";\n    // other\n    /** No return type. */\n    TypeKind[TypeKind[\"VOID\"] = 18] = \"VOID\";\n})(TypeKind = exports.TypeKind || (exports.TypeKind = {}));\n/** Indicates capabilities of a type. */\nvar TypeFlags;\n(function (TypeFlags) {\n    TypeFlags[TypeFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Is a signed type that can represent negative values. */\n    TypeFlags[TypeFlags[\"SIGNED\"] = 1] = \"SIGNED\";\n    /** Is an unsigned type that cannot represent negative values. */\n    TypeFlags[TypeFlags[\"UNSIGNED\"] = 2] = \"UNSIGNED\";\n    /** Is an integer type. */\n    TypeFlags[TypeFlags[\"INTEGER\"] = 4] = \"INTEGER\";\n    /** Is a floating point type. */\n    TypeFlags[TypeFlags[\"FLOAT\"] = 8] = \"FLOAT\";\n    /** Is a varying (in size) type. */\n    TypeFlags[TypeFlags[\"VARYING\"] = 16] = \"VARYING\";\n    /** Is smaller than 32-bits. */\n    TypeFlags[TypeFlags[\"SHORT\"] = 32] = \"SHORT\";\n    /** Is larger than 32-bits. */\n    TypeFlags[TypeFlags[\"LONG\"] = 64] = \"LONG\";\n    /** Is a value type. */\n    TypeFlags[TypeFlags[\"VALUE\"] = 128] = \"VALUE\";\n    /** Is a reference type (either a class or a function type). */\n    TypeFlags[TypeFlags[\"REFERENCE\"] = 256] = \"REFERENCE\";\n    /** Is a nullable type. */\n    TypeFlags[TypeFlags[\"NULLABLE\"] = 512] = \"NULLABLE\";\n    /** Is a vector type. */\n    TypeFlags[TypeFlags[\"VECTOR\"] = 1024] = \"VECTOR\";\n    /** Is an external type. */\n    TypeFlags[TypeFlags[\"EXTERNAL\"] = 2048] = \"EXTERNAL\";\n    /** Is a class. */\n    TypeFlags[TypeFlags[\"CLASS\"] = 4096] = \"CLASS\";\n    /** Is a function. */\n    TypeFlags[TypeFlags[\"FUNCTION\"] = 8192] = \"FUNCTION\";\n})(TypeFlags = exports.TypeFlags || (exports.TypeFlags = {}));\n/** Represents a resolved type. */\nclass Type {\n    /** Constructs a new resolved type. */\n    constructor(kind, flags, size) {\n        /** Respective non-nullable type, if nullable. */\n        this._nonNullableType = null;\n        /** Respective nullable type, if non-nullable. */\n        this._nullableType = null;\n        this.kind = kind;\n        this.flags = flags;\n        this.size = size;\n        this.byteSize = ceil(size / 8);\n        this.classReference = null;\n        this.signatureReference = null;\n        if (!(flags & 512 /* NULLABLE */)) {\n            this._nonNullableType = this;\n        }\n        else {\n            this._nullableType = this;\n        }\n    }\n    /** Returns the closest int type representing this type. */\n    get intType() {\n        if (this == Type.auto)\n            return this; // keep auto as a hint\n        switch (this.kind) {\n            case 0 /* I8 */: return Type.i8;\n            case 1 /* I16 */: return Type.i16;\n            case 11 /* F32 */:\n            case 2 /* I32 */: return Type.i32;\n            case 12 /* F64 */:\n            case 3 /* I64 */: return Type.i64;\n            case 4 /* ISIZE */: return this.size == 64 ? Type.isize64 : Type.isize32;\n            case 5 /* U8 */: return Type.u8;\n            case 6 /* U16 */: return Type.u16;\n            case 7 /* U32 */: return Type.u32;\n            case 8 /* U64 */: return Type.u64;\n            case 9 /* USIZE */: return this.size == 64 ? Type.usize64 : Type.usize32;\n            case 10 /* BOOL */:\n            default: return Type.i32;\n        }\n    }\n    /** Substitutes this type with the auto type if this type is void. */\n    get exceptVoid() {\n        if (this.kind == 18 /* VOID */)\n            return Type.auto;\n        return this;\n    }\n    /** Gets this type's logarithmic alignment in memory. */\n    get alignLog2() {\n        return 31 - clz(this.byteSize);\n    }\n    /** Tests if this type represents a basic value. */\n    get isValue() {\n        return this.is(128 /* VALUE */);\n    }\n    /** Tests if this type represents an integer value. */\n    get isIntegerValue() {\n        return this.is(4 /* INTEGER */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents a small (< 32 bits) integer value. */\n    get isShortIntegerValue() {\n        return this.is(32 /* SHORT */ | 4 /* INTEGER */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents a long (> 32 bits) integer value. */\n    get isLongIntegerValue() {\n        return this.is(64 /* LONG */ | 4 /* INTEGER */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents a signed integer value. */\n    get isSignedIntegerValue() {\n        return this.is(1 /* SIGNED */ | 4 /* INTEGER */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents an unsigned integer value. */\n    get isUnsignedIntegerValue() {\n        return this.is(2 /* UNSIGNED */ | 4 /* INTEGER */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents a varying (in size) integer value. */\n    get isVaryingIntegerValue() {\n        return this.is(16 /* VARYING */ | 4 /* INTEGER */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents an integer, including references.  */\n    get isIntegerInclReference() {\n        return this.is(4 /* INTEGER */);\n    }\n    /** Tests if this type represents a floating point value. */\n    get isFloatValue() {\n        return this.is(8 /* FLOAT */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents a numeric (integer or floating point) value. */\n    get isNumericValue() {\n        return this.isIntegerValue || this.isFloatValue;\n    }\n    /** Tests if this type represents a boolean value. */\n    get isBooleanValue() {\n        return this == Type.bool;\n    }\n    /** Tests if this type represents a vector value. */\n    get isVectorValue() {\n        return this.is(1024 /* VECTOR */ | 128 /* VALUE */);\n    }\n    /** Tests if this type represents an internal or external reference. */\n    get isReference() {\n        return this.is(256 /* REFERENCE */);\n    }\n    /** Tests if this type represents a nullable internal or external reference. */\n    get isNullableReference() {\n        return this.is(512 /* NULLABLE */ | 256 /* REFERENCE */);\n    }\n    /** Tests if this type represents an internal object. */\n    get isInternalReference() {\n        return this.is(4 /* INTEGER */ | 256 /* REFERENCE */);\n    }\n    /** Tests if this type represents an external object. */\n    get isExternalReference() {\n        return this.is(2048 /* EXTERNAL */ | 256 /* REFERENCE */);\n    }\n    /** Tests if this type represents a class. */\n    get isClass() {\n        return this.isInternalReference\n            ? this.classReference !== null\n            : false;\n    }\n    /** Gets the underlying class of this type, if any. */\n    getClass() {\n        return this.isInternalReference\n            ? this.classReference\n            : null;\n    }\n    /** Gets the underlying class or wrapper class of this type, if any. */\n    getClassOrWrapper(program) {\n        let classReference = this.getClass();\n        if (classReference) {\n            // typical class\n            return classReference;\n        }\n        else {\n            let signatureReference = this.getSignature();\n            if (signatureReference) {\n                // function wrapper\n                let type = signatureReference.type;\n                let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [type]));\n                wrapper.wrappedType = type;\n                return wrapper;\n            }\n            else {\n                let wrapperClasses = program.wrapperClasses;\n                if (wrapperClasses.has(this)) {\n                    // value wrapper\n                    return assert(wrapperClasses.get(this));\n                }\n            }\n        }\n        return null;\n    }\n    /** Tests if this type represents a function. */\n    get isFunction() {\n        return this.isInternalReference\n            ? this.signatureReference !== null\n            : false;\n    }\n    /** Gets the underlying function signature of this type, if any. */\n    getSignature() {\n        return this.isInternalReference\n            ? this.signatureReference\n            : null;\n    }\n    /** Tests if this is a managed type that needs GC hooks. */\n    get isManaged() {\n        if (this.isInternalReference) {\n            let classReference = this.classReference;\n            if (classReference)\n                return !classReference.hasDecorator(program_1.DecoratorFlags.UNMANAGED);\n            return this.signatureReference !== null; // function references are managed\n        }\n        return false;\n    }\n    /** Tests if this is a class type explicitly annotated as unmanaged. */\n    get isUnmanaged() {\n        var classReference = this.classReference;\n        return classReference !== null && classReference.hasDecorator(program_1.DecoratorFlags.UNMANAGED);\n    }\n    /** Gets the corresponding non-nullable type. */\n    get nonNullableType() {\n        if (this.isExternalReference) {\n            return this; // TODO\n        }\n        return assert(this._nonNullableType); // set either in ctor or asNullable\n    }\n    /** Gets the corresponding nullable type, if applicable. */\n    get nullableType() {\n        return this._nullableType; // set either in ctor or asNullable\n    }\n    /** Computes the sign-extending shift in the target type. */\n    computeSmallIntegerShift(targetType) {\n        return targetType.size - this.size;\n    }\n    /** Computes the truncating mask in the target type. */\n    computeSmallIntegerMask(targetType) {\n        var size = this.is(2 /* UNSIGNED */) ? this.size : this.size - 1;\n        return ~0 >>> (targetType.size - size);\n    }\n    /** Tests if this type has (all of) the specified flags. */\n    is(flags) { return (this.flags & flags) == flags; }\n    /** Tests if this type has any of the specified flags. */\n    isAny(flags) { return (this.flags & flags) != 0; }\n    /** Composes the respective nullable type of this type. */\n    asNullable() {\n        assert(this.isInternalReference);\n        var nullableType = this._nullableType;\n        if (!nullableType) {\n            assert(!this.isNullableReference);\n            this._nullableType = nullableType = new Type(this.kind, this.flags | 512 /* NULLABLE */, this.size);\n            nullableType.classReference = this.classReference; // either a class reference\n            nullableType.signatureReference = this.signatureReference; // or a function reference\n            nullableType._nonNullableType = this;\n        }\n        return nullableType;\n    }\n    /** Tests if this type equals the specified. */\n    equals(other) {\n        if (this.kind != other.kind)\n            return false;\n        if (this.isReference) {\n            return (this.classReference == other.classReference &&\n                this.signatureReference == other.signatureReference &&\n                this.isNullableReference == other.isNullableReference);\n        }\n        return true;\n    }\n    /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n    isAssignableTo(target, signednessIsRelevant = false) {\n        var currentClass;\n        var targetClass;\n        var currentFunction;\n        var targetFunction;\n        if (this.isReference) {\n            if (target.isReference) {\n                if (!this.isNullableReference || target.isNullableReference) {\n                    if (currentClass = this.getClass()) {\n                        if (targetClass = target.getClass()) {\n                            return currentClass.isAssignableTo(targetClass);\n                        }\n                    }\n                    else if (currentFunction = this.getSignature()) {\n                        if (targetFunction = target.getSignature()) {\n                            return currentFunction.isAssignableTo(targetFunction);\n                        }\n                    }\n                    else if (this.isExternalReference && (this.kind == target.kind || target.kind == 17 /* ANYREF */)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        else if (!target.isReference) {\n            if (this.isIntegerValue) {\n                if (target.isIntegerValue) {\n                    if (!signednessIsRelevant ||\n                        this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n                        this.isSignedIntegerValue == target.isSignedIntegerValue) {\n                        return this.size <= target.size;\n                    }\n                }\n                else if (target.kind == 11 /* F32 */) {\n                    return this.size <= 23; // mantissa bits\n                }\n                else if (target.kind == 12 /* F64 */) {\n                    return this.size <= 52; // ^\n                }\n            }\n            else if (this.isFloatValue) {\n                if (target.isFloatValue) {\n                    return this.size <= target.size;\n                }\n            }\n            else if (this.isVectorValue) {\n                if (target.isVectorValue) {\n                    return this.size == target.size;\n                }\n            }\n        }\n        return false;\n    }\n    /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n    isStrictlyAssignableTo(target, signednessIsRelevant = false) {\n        if (this.isReference)\n            return this.isAssignableTo(target);\n        else if (target.isReference)\n            return false;\n        // not dealing with references from here on\n        if (this.isIntegerValue) {\n            return target.isIntegerValue && target.size == this.size && (!signednessIsRelevant ||\n                this.isSignedIntegerValue == target.isSignedIntegerValue);\n        }\n        return this.kind == target.kind;\n    }\n    /** Tests if a value of this type can be changed to the target type using `changetype`. */\n    isChangeableTo(target) {\n        // special in that it allows integer references as well\n        if (this.is(4 /* INTEGER */) && target.is(4 /* INTEGER */)) {\n            let size = this.size;\n            return size == target.size && (size >= 32 || this.is(1 /* SIGNED */) == target.is(1 /* SIGNED */));\n        }\n        return this.kind == target.kind;\n    }\n    /** Determines the common denominator type of two types, if there is any. */\n    static commonDenominator(left, right, signednessIsImportant) {\n        if (right.isAssignableTo(left, signednessIsImportant))\n            return left;\n        else if (left.isAssignableTo(right, signednessIsImportant))\n            return right;\n        return null;\n    }\n    /** Converts this type to a string. */\n    toString(validWat = false) {\n        const nullablePostfix = validWat\n            ? \"|null\"\n            : \" | null\";\n        if (this.isReference) {\n            let classReference = this.getClass();\n            if (classReference) {\n                return this.isNullableReference\n                    ? classReference.internalName + nullablePostfix\n                    : classReference.internalName;\n            }\n            else {\n                let signatureReference = this.getSignature();\n                if (signatureReference) {\n                    return this.isNullableReference\n                        ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n                        : signatureReference.toString(validWat);\n                }\n            }\n        }\n        switch (this.kind) {\n            case 0 /* I8 */: return \"i8\";\n            case 1 /* I16 */: return \"i16\";\n            case 2 /* I32 */: return \"i32\";\n            case 3 /* I64 */: return \"i64\";\n            case 4 /* ISIZE */: return \"isize\";\n            case 5 /* U8 */: return \"u8\";\n            case 6 /* U16 */: return \"u16\";\n            case 7 /* U32 */: return \"u32\";\n            case 8 /* U64 */: return \"u64\";\n            case 9 /* USIZE */: return \"usize\";\n            case 10 /* BOOL */: return \"bool\";\n            case 11 /* F32 */: return \"f32\";\n            case 12 /* F64 */: return \"f64\";\n            case 13 /* V128 */: return \"v128\";\n            case 14 /* FUNCREF */: return \"funcref\";\n            case 15 /* EXTERNREF */: return \"externref\";\n            case 16 /* EXNREF */: return \"exnref\";\n            case 17 /* ANYREF */: return \"anyref\";\n            default: assert(false);\n            case 18 /* VOID */: return \"void\";\n        }\n    }\n    // Binaryen specific\n    /** Converts this type to its respective native type. */\n    toNativeType() {\n        switch (this.kind) {\n            default: assert(false);\n            case 0 /* I8 */:\n            case 1 /* I16 */:\n            case 2 /* I32 */:\n            case 5 /* U8 */:\n            case 6 /* U16 */:\n            case 7 /* U32 */:\n            case 10 /* BOOL */: return module_1.NativeType.I32;\n            case 4 /* ISIZE */:\n            case 9 /* USIZE */: if (this.size != 64)\n                return module_1.NativeType.I32;\n            case 3 /* I64 */:\n            case 8 /* U64 */: return module_1.NativeType.I64;\n            case 11 /* F32 */: return module_1.NativeType.F32;\n            case 12 /* F64 */: return module_1.NativeType.F64;\n            case 13 /* V128 */: return module_1.NativeType.V128;\n            case 14 /* FUNCREF */: return module_1.NativeType.Funcref;\n            case 15 /* EXTERNREF */: return module_1.NativeType.Externref;\n            case 16 /* EXNREF */: return module_1.NativeType.Exnref;\n            case 17 /* ANYREF */: return module_1.NativeType.Anyref;\n            case 18 /* VOID */: return module_1.NativeType.None;\n        }\n    }\n}\nexports.Type = Type;\n// Types\n/** An 8-bit signed integer. */\nType.i8 = new Type(0 /* I8 */, 1 /* SIGNED */ |\n    32 /* SHORT */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 8);\n/** A 16-bit signed integer. */\nType.i16 = new Type(1 /* I16 */, 1 /* SIGNED */ |\n    32 /* SHORT */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 16);\n/** A 32-bit signed integer. */\nType.i32 = new Type(2 /* I32 */, 1 /* SIGNED */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 32);\n/** A 64-bit signed integer. */\nType.i64 = new Type(3 /* I64 */, 1 /* SIGNED */ |\n    64 /* LONG */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 64);\n/** A 32-bit signed size. WASM32 only. */\nType.isize32 = new Type(4 /* ISIZE */, 1 /* SIGNED */ |\n    4 /* INTEGER */ |\n    16 /* VARYING */ |\n    128 /* VALUE */, 32);\n/** A 64-bit signed size. WASM64 only. */\nType.isize64 = new Type(4 /* ISIZE */, 1 /* SIGNED */ |\n    64 /* LONG */ |\n    4 /* INTEGER */ |\n    16 /* VARYING */ |\n    128 /* VALUE */, 64);\n/** An 8-bit unsigned integer. */\nType.u8 = new Type(5 /* U8 */, 2 /* UNSIGNED */ |\n    32 /* SHORT */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 8);\n/** A 16-bit unsigned integer. */\nType.u16 = new Type(6 /* U16 */, 2 /* UNSIGNED */ |\n    32 /* SHORT */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 16);\n/** A 32-bit unsigned integer. */\nType.u32 = new Type(7 /* U32 */, 2 /* UNSIGNED */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 32);\n/** A 64-bit unsigned integer. */\nType.u64 = new Type(8 /* U64 */, 2 /* UNSIGNED */ |\n    64 /* LONG */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 64);\n/** A 32-bit unsigned size. WASM32 only. */\nType.usize32 = new Type(9 /* USIZE */, 2 /* UNSIGNED */ |\n    4 /* INTEGER */ |\n    16 /* VARYING */ |\n    128 /* VALUE */, 32);\n/** A 64-bit unsigned size. WASM64 only. */\nType.usize64 = new Type(9 /* USIZE */, 2 /* UNSIGNED */ |\n    64 /* LONG */ |\n    4 /* INTEGER */ |\n    16 /* VARYING */ |\n    128 /* VALUE */, 64);\n/** A 1-bit unsigned integer. */\nType.bool = new Type(10 /* BOOL */, 2 /* UNSIGNED */ |\n    32 /* SHORT */ |\n    4 /* INTEGER */ |\n    128 /* VALUE */, 1);\n/** A 32-bit float. */\nType.f32 = new Type(11 /* F32 */, 1 /* SIGNED */ |\n    8 /* FLOAT */ |\n    128 /* VALUE */, 32);\n/** A 64-bit float. */\nType.f64 = new Type(12 /* F64 */, 1 /* SIGNED */ |\n    64 /* LONG */ |\n    8 /* FLOAT */ |\n    128 /* VALUE */, 64);\n/** A 128-bit vector. */\nType.v128 = new Type(13 /* V128 */, 1024 /* VECTOR */ |\n    128 /* VALUE */, 128);\n/** Function reference. */\nType.funcref = new Type(14 /* FUNCREF */, 2048 /* EXTERNAL */ |\n    512 /* NULLABLE */ |\n    256 /* REFERENCE */, 0);\n/** External reference. */\nType.externref = new Type(15 /* EXTERNREF */, 2048 /* EXTERNAL */ |\n    512 /* NULLABLE */ |\n    256 /* REFERENCE */, 0);\n/** Exception reference. */\nType.exnref = new Type(16 /* EXNREF */, 2048 /* EXTERNAL */ |\n    512 /* NULLABLE */ |\n    256 /* REFERENCE */, 0);\n/** Any reference. */\nType.anyref = new Type(17 /* ANYREF */, 2048 /* EXTERNAL */ |\n    512 /* NULLABLE */ |\n    256 /* REFERENCE */, 0);\n/** No return type. */\nType.void = new Type(18 /* VOID */, 0 /* NONE */, 0);\n/** Alias of i32 indicating type inference of locals and globals with just an initializer. */\nType.auto = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n/** Converts an array of types to an array of native types. */\nfunction typesToNativeTypes(types) {\n    var numTypes = types.length;\n    var ret = new Array(numTypes);\n    for (let i = 0; i < numTypes; ++i)\n        ret[i] = types[i].toNativeType();\n    return ret;\n}\nexports.typesToNativeTypes = typesToNativeTypes;\n/** Converts an array of types to its combined string representation. */\nfunction typesToString(types) {\n    var numTypes = types.length;\n    if (!numTypes)\n        return \"\";\n    var sb = new Array(numTypes);\n    for (let i = 0; i < numTypes; ++i)\n        sb[i] = types[i].toString(true);\n    return sb.join(\",\");\n}\nexports.typesToString = typesToString;\n/** Represents a fully resolved function signature. */\nclass Signature {\n    /** Constructs a new signature. */\n    constructor(program, parameterTypes = null, returnType = null, thisType = null) {\n        /** Unique id representing this signature. */\n        this.id = 0;\n        this.parameterTypes = parameterTypes ? parameterTypes : [];\n        this.requiredParameters = 0;\n        this.returnType = returnType ? returnType : Type.void;\n        this.thisType = thisType;\n        this.program = program;\n        this.hasRest = false;\n        var usizeType = program.options.usizeType;\n        var type = new Type(usizeType.kind, usizeType.flags & ~128 /* VALUE */ | 256 /* REFERENCE */, usizeType.size);\n        this.type = type;\n        type.signatureReference = this;\n        var signatureTypes = program.uniqueSignatures;\n        var length = signatureTypes.length;\n        for (let i = 0; i < length; i++) {\n            let compare = signatureTypes[i];\n            if (this.equals(compare)) {\n                this.id = compare.id;\n                return this;\n            }\n        }\n        this.id = program.nextSignatureId++;\n        program.uniqueSignatures.push(this);\n    }\n    get nativeParams() {\n        var thisType = this.thisType;\n        var parameterTypes = this.parameterTypes;\n        var numParameterTypes = parameterTypes.length;\n        if (!numParameterTypes) {\n            if (!thisType)\n                return module_1.NativeType.None;\n            return thisType.toNativeType();\n        }\n        if (thisType) {\n            let nativeTypes = new Array(1 + numParameterTypes);\n            nativeTypes[0] = thisType.toNativeType();\n            for (let i = 0; i < numParameterTypes; ++i) {\n                nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n            }\n            return module_1.createType(nativeTypes);\n        }\n        return module_1.createType(typesToNativeTypes(parameterTypes));\n    }\n    get nativeResults() {\n        return this.returnType.toNativeType();\n    }\n    /** Tests if this signature equals the specified. */\n    equals(other) {\n        // check `this` type\n        var thisThisType = this.thisType;\n        var otherThisType = other.thisType;\n        if (thisThisType !== null) {\n            if (otherThisType === null || !thisThisType.equals(otherThisType))\n                return false;\n        }\n        else if (otherThisType) {\n            return false;\n        }\n        // check rest parameter\n        if (this.hasRest != other.hasRest)\n            return false;\n        // check parameter types\n        var thisParameterTypes = this.parameterTypes;\n        var otherParameterTypes = other.parameterTypes;\n        var numParameters = thisParameterTypes.length;\n        if (numParameters != otherParameterTypes.length)\n            return false;\n        for (let i = 0; i < numParameters; ++i) {\n            if (!thisParameterTypes[i].equals(otherParameterTypes[i]))\n                return false;\n        }\n        // check return type\n        return this.returnType.equals(other.returnType);\n    }\n    /** Tests if a value of this function type is assignable to a target of the specified function type. */\n    isAssignableTo(target, requireSameSize = false) {\n        // check `this` type\n        var thisThisType = this.thisType;\n        var targetThisType = target.thisType;\n        if (thisThisType !== null) {\n            if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType))\n                return false;\n        }\n        else if (targetThisType) {\n            return false;\n        }\n        // check rest parameter\n        if (this.hasRest != target.hasRest)\n            return false; // TODO\n        // check parameter types\n        var thisParameterTypes = this.parameterTypes;\n        var targetParameterTypes = target.parameterTypes;\n        var numParameters = thisParameterTypes.length;\n        if (numParameters != targetParameterTypes.length)\n            return false; // TODO\n        for (let i = 0; i < numParameters; ++i) {\n            let thisParameterType = thisParameterTypes[i];\n            let targetParameterType = targetParameterTypes[i];\n            if (!thisParameterType.isAssignableTo(targetParameterType))\n                return false;\n        }\n        // check return type\n        var thisReturnType = this.returnType;\n        var targetReturnType = target.returnType;\n        return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n    }\n    /** Tests if this signature has at least one managed operand. */\n    get hasManagedOperands() {\n        var thisType = this.thisType;\n        if (thisType) {\n            if (thisType.isManaged)\n                return true;\n        }\n        var parameterTypes = this.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n            if (parameterTypes[i].isManaged)\n                return true;\n        }\n        return false;\n    }\n    /** Gets the indices of all managed operands. */\n    getManagedOperandIndices() {\n        var indices = new Array();\n        var index = 0;\n        var thisType = this.thisType;\n        if (thisType) {\n            if (thisType.isManaged) {\n                indices.push(index);\n            }\n            ++index;\n        }\n        var parameterTypes = this.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n            if (parameterTypes[i].isManaged) {\n                indices.push(index);\n            }\n            ++index;\n        }\n        return indices;\n    }\n    /** Converts this signature to a string. */\n    toString(validWat = false) {\n        var sb = new Array();\n        sb.push(validWat ? \"%28\" : \"(\");\n        var index = 0;\n        var thisType = this.thisType;\n        if (thisType) {\n            sb.push(validWat ? \"this:\" : \"this: \");\n            assert(!thisType.signatureReference);\n            sb.push(thisType.toString(validWat));\n            index = 1;\n        }\n        var parameters = this.parameterTypes;\n        var numParameters = parameters.length;\n        if (numParameters) {\n            let optionalStart = this.requiredParameters;\n            let restIndex = this.hasRest ? numParameters - 1 : -1;\n            for (let i = 0; i < numParameters; ++i, ++index) {\n                if (index)\n                    sb.push(validWat ? \"%2C\" : \", \");\n                if (i == restIndex)\n                    sb.push(\"...\");\n                sb.push(parameters[i].toString(validWat));\n                if (i >= optionalStart && i != restIndex)\n                    sb.push(\"?\");\n            }\n        }\n        sb.push(validWat ? \"%29=>\" : \") => \");\n        sb.push(this.returnType.toString(validWat));\n        return sb.join(\"\");\n    }\n    /** Creates a clone of this signature that is safe to modify. */\n    clone() {\n        var parameterTypes = this.parameterTypes;\n        var numParameterTypes = parameterTypes.length;\n        var cloneParameterTypes = new Array(numParameterTypes);\n        for (let i = 0; i < numParameterTypes; ++i) {\n            cloneParameterTypes[i] = parameterTypes[i];\n        }\n        return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n    }\n}\nexports.Signature = Signature;\n\n\n/***/ }),\n\n/***/ 540:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.writeF64 = exports.readF64 = exports.writeF32 = exports.readF32 = exports.writeI64AsI32 = exports.writeI64 = exports.readI64 = exports.writeI32AsI64 = exports.writeI32 = exports.readI32 = exports.writeI16 = exports.readI16 = exports.writeI8 = exports.readI8 = void 0;\n/** Reads an 8-bit integer from the specified buffer. */\nfunction readI8(buffer, offset) {\n    return buffer[offset];\n}\nexports.readI8 = readI8;\n/** Writes an 8-bit integer to the specified buffer. */\nfunction writeI8(value, buffer, offset) {\n    buffer[offset] = value;\n}\nexports.writeI8 = writeI8;\n/** Reads a 16-bit integer from the specified buffer. */\nfunction readI16(buffer, offset) {\n    return i32(buffer[offset])\n        | i32(buffer[offset + 1]) << 8;\n}\nexports.readI16 = readI16;\n/** Writes a 16-bit integer to the specified buffer. */\nfunction writeI16(value, buffer, offset) {\n    buffer[offset] = value;\n    buffer[offset + 1] = value >>> 8;\n}\nexports.writeI16 = writeI16;\n/** Reads a 32-bit integer from the specified buffer. */\nfunction readI32(buffer, offset) {\n    return i32(buffer[offset])\n        | i32(buffer[offset + 1]) << 8\n        | i32(buffer[offset + 2]) << 16\n        | i32(buffer[offset + 3]) << 24;\n}\nexports.readI32 = readI32;\n/** Writes a 32-bit integer to the specified buffer. */\nfunction writeI32(value, buffer, offset) {\n    buffer[offset] = value;\n    buffer[offset + 1] = value >>> 8;\n    buffer[offset + 2] = value >>> 16;\n    buffer[offset + 3] = value >>> 24;\n}\nexports.writeI32 = writeI32;\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nfunction writeI32AsI64(value, buffer, offset, unsigned = false) {\n    writeI32(value, buffer, offset);\n    writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\nexports.writeI32AsI64 = writeI32AsI64;\n/** Reads a 64-bit integer from the specified buffer. */\nfunction readI64(buffer, offset) {\n    var lo = readI32(buffer, offset);\n    var hi = readI32(buffer, offset + 4);\n    return i64_new(lo, hi);\n}\nexports.readI64 = readI64;\n/** Writes a 64-bit integer to the specified buffer. */\nfunction writeI64(value, buffer, offset) {\n    writeI32(i64_low(value), buffer, offset);\n    writeI32(i64_high(value), buffer, offset + 4);\n}\nexports.writeI64 = writeI64;\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nfunction writeI64AsI32(value, buffer, offset, unsigned = false) {\n    assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n    writeI32(i64_low(value), buffer, offset);\n}\nexports.writeI64AsI32 = writeI64AsI32;\n/** Reads a 32-bit float from the specified buffer. */\nfunction readF32(buffer, offset) {\n    return i32_as_f32(readI32(buffer, offset));\n}\nexports.readF32 = readF32;\n/** Writes a 32-bit float to the specified buffer. */\nfunction writeF32(value, buffer, offset) {\n    writeI32(f32_as_i32(value), buffer, offset);\n}\nexports.writeF32 = writeF32;\n/** Reads a 64-bit float from the specified buffer. */\nfunction readF64(buffer, offset) {\n    return i64_as_f64(readI64(buffer, offset));\n}\nexports.readF64 = readF64;\n/** Writes a 64-bit float to the specified buffer. */\nfunction writeF64(value, buffer, offset) {\n    var valueI64 = f64_as_i64(value);\n    writeI32(i64_low(valueI64), buffer, offset);\n    writeI32(i64_high(valueI64), buffer, offset + 4);\n}\nexports.writeF64 = writeF64;\n\n\n/***/ }),\n\n/***/ 189:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.uniqueMap = void 0;\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nfunction uniqueMap(original = null, overrides = null) {\n    var cloned = new Map();\n    if (original) {\n        // TODO: for (let [k, v] of original) {\n        for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n            let k = unchecked(_keys[i]);\n            let v = assert(original.get(k));\n            cloned.set(k, v);\n        }\n    }\n    if (overrides) {\n        // TODO: for (let [k, v] of overrides) {\n        for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n            let k = unchecked(_keys[i]);\n            let v = assert(overrides.get(k));\n            cloned.set(k, v);\n        }\n    }\n    return cloned;\n}\nexports.uniqueMap = uniqueMap;\n\n\n/***/ }),\n\n/***/ 910:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(540), exports);\n__exportStar(__webpack_require__(189), exports);\n__exportStar(__webpack_require__(96), exports);\n__exportStar(__webpack_require__(841), exports);\n__exportStar(__webpack_require__(95), exports);\n__exportStar(__webpack_require__(311), exports);\n__exportStar(__webpack_require__(560), exports);\n\n\n/***/ }),\n\n/***/ 96:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isPowerOf2 = void 0;\n/** Tests if `x` is a power of two. */\nfunction isPowerOf2(x) {\n    return x != 0 && (x & (x - 1)) == 0;\n}\nexports.isPowerOf2 = isPowerOf2;\n\n\n/***/ }),\n\n/***/ 841:\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dirname = exports.resolvePath = exports.normalizePath = void 0;\nconst common_1 = __webpack_require__(200);\nconst separator = 47 /* SLASH */;\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nfunction normalizePath(path) {\n    var pos = 0;\n    var len = path.length;\n    // trim leading './'\n    while (pos + 1 < len &&\n        path.charCodeAt(pos) == 46 /* DOT */ &&\n        path.charCodeAt(pos + 1) == separator) {\n        pos += 2;\n    }\n    if (pos > 0 || len < path.length) {\n        path = path.substring(pos, len);\n        len -= pos;\n        pos = 0;\n    }\n    var atEnd;\n    while (pos + 1 < len) {\n        atEnd = false;\n        // we are only interested in '/.' sequences ...\n        if (path.charCodeAt(pos) == separator &&\n            path.charCodeAt(pos + 1) == 46 /* DOT */) {\n            // '/.' ( '/' | $ )\n            atEnd = pos + 2 == len;\n            if (atEnd ||\n                pos + 2 < len &&\n                    path.charCodeAt(pos + 2) == separator) {\n                path = atEnd\n                    ? path.substring(0, pos)\n                    : path.substring(0, pos) + path.substring(pos + 2);\n                len -= 2;\n                continue;\n            }\n            // '/.' ( './' | '.' $ )\n            atEnd = pos + 3 == len;\n            if (atEnd && path.charCodeAt(pos + 2) == 46 /* DOT */ ||\n                pos + 3 < len &&\n                    path.charCodeAt(pos + 2) == 46 /* DOT */ &&\n                    path.charCodeAt(pos + 3) == separator) {\n                // find preceeding '/'\n                let ipos = pos;\n                while (--ipos >= 0) {\n                    if (path.charCodeAt(ipos) == separator) {\n                        if (pos - ipos != 3 ||\n                            path.charCodeAt(ipos + 1) != 46 /* DOT */ ||\n                            path.charCodeAt(ipos + 2) != 46 /* DOT */) { // exclude '..' itself\n                            path = atEnd\n                                ? path.substring(0, ipos)\n                                : path.substring(0, ipos) + path.substring(pos + 3);\n                            len -= pos + 3 - ipos;\n                            pos = ipos - 1; // incremented again at end of loop\n                        }\n                        break;\n                    }\n                }\n                // if there's no preceeding '/', trim start if non-empty\n                if (ipos < 0 && pos > 0) {\n                    if (pos != 2 ||\n                        path.charCodeAt(0) != 46 /* DOT */ ||\n                        path.charCodeAt(1) != 46 /* DOT */) { // exclude '..' itself\n                        path = path.substring(pos + 4);\n                        len = path.length;\n                        continue;\n                    }\n                }\n            }\n        }\n        pos++;\n    }\n    return len > 0 ? path : \".\";\n}\nexports.normalizePath = normalizePath;\n/** Resolves the specified path relative to the specified origin. */\nfunction resolvePath(normalizedPath, origin) {\n    if (normalizedPath.startsWith(\"std/\")) {\n        return normalizedPath;\n    }\n    return normalizePath(dirname(origin) + common_1.PATH_DELIMITER + normalizedPath);\n}\nexports.resolvePath = resolvePath;\n/** Obtains the directory portion of a normalized path. */\nfunction dirname(normalizedPath) {\n    var pos = normalizedPath.length;\n    if (pos <= 1) {\n        if (pos == 0)\n            return \".\";\n        if (normalizedPath.charCodeAt(0) == separator) {\n            return normalizedPath;\n        }\n    }\n    while (--pos > 0) {\n        if (normalizedPath.charCodeAt(pos) == separator) {\n            return normalizedPath.substring(0, pos);\n        }\n    }\n    return \".\";\n}\nexports.dirname = dirname;\n\n\n/***/ }),\n\n/***/ 95:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Terminal utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.colorize = exports.setColorsEnabled = exports.isColorsEnabled = exports.COLOR_RESET = exports.COLOR_WHITE = exports.COLOR_CYAN = exports.COLOR_MAGENTA = exports.COLOR_BLUE = exports.COLOR_YELLOW = exports.COLOR_GREEN = exports.COLOR_RED = exports.COLOR_GRAY = void 0;\n/** Gray terminal color code. */\nexports.COLOR_GRAY = \"\\u001b[90m\";\n/** Red terminal color code. */\nexports.COLOR_RED = \"\\u001b[91m\";\n/** Green terminal color code. */\nexports.COLOR_GREEN = \"\\u001b[92m\";\n/** Yellow terminal color code. */\nexports.COLOR_YELLOW = \"\\u001b[93m\";\n/** Blue terminal color code. */\nexports.COLOR_BLUE = \"\\u001b[94m\";\n/** Magenta terminal color code. */\nexports.COLOR_MAGENTA = \"\\u001b[95m\";\n/** Cyan terminal color code. */\nexports.COLOR_CYAN = \"\\u001b[96m\";\n/** White terminal color code. */\nexports.COLOR_WHITE = \"\\u001b[97m\";\n/** Terminal color reset code. */\nexports.COLOR_RESET = \"\\u001b[0m\";\n/** Whether terminal colors are enabled or not. */\nvar colorsEnabled = true;\n/** Checks whether terminal colors are enabled or not. */\nfunction isColorsEnabled() {\n    return colorsEnabled;\n}\nexports.isColorsEnabled = isColorsEnabled;\n/** Sets whether terminal colors are enabled or not. */\nfunction setColorsEnabled(isEnabled) {\n    var wasEnabled = isEnabled;\n    colorsEnabled = isEnabled;\n    return wasEnabled;\n}\nexports.setColorsEnabled = setColorsEnabled;\n/** Wraps the specified text in the specified terminal color code. */\nfunction colorize(text, color) {\n    return colorsEnabled ? color + text + exports.COLOR_RESET : text;\n}\nexports.colorize = colorize;\n\n\n/***/ }),\n\n/***/ 311:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.indent = exports.isIdentifierPart = exports.isKeywordCharacter = exports.isIdentifierStart = exports.isTrivialAlphanum = exports.isOctalDigit = exports.isDecimalDigit = exports.isWhiteSpace = exports.isLineBreak = exports.CharCode = void 0;\n/** An enum of named character codes. */\nvar CharCode;\n(function (CharCode) {\n    CharCode[CharCode[\"NULL\"] = 0] = \"NULL\";\n    CharCode[CharCode[\"LINEFEED\"] = 10] = \"LINEFEED\";\n    CharCode[CharCode[\"CARRIAGERETURN\"] = 13] = \"CARRIAGERETURN\";\n    CharCode[CharCode[\"LINESEPARATOR\"] = 8232] = \"LINESEPARATOR\";\n    CharCode[CharCode[\"PARAGRAPHSEPARATOR\"] = 8233] = \"PARAGRAPHSEPARATOR\";\n    CharCode[CharCode[\"NEXTLINE\"] = 133] = \"NEXTLINE\";\n    CharCode[CharCode[\"SPACE\"] = 32] = \"SPACE\";\n    CharCode[CharCode[\"NONBREAKINGSPACE\"] = 160] = \"NONBREAKINGSPACE\";\n    CharCode[CharCode[\"ENQUAD\"] = 8192] = \"ENQUAD\";\n    CharCode[CharCode[\"EMQUAD\"] = 8193] = \"EMQUAD\";\n    CharCode[CharCode[\"ENSPACE\"] = 8194] = \"ENSPACE\";\n    CharCode[CharCode[\"EMSPACE\"] = 8195] = \"EMSPACE\";\n    CharCode[CharCode[\"THREEPEREMSPACE\"] = 8196] = \"THREEPEREMSPACE\";\n    CharCode[CharCode[\"FOURPEREMSPACE\"] = 8197] = \"FOURPEREMSPACE\";\n    CharCode[CharCode[\"SIXPEREMSPACE\"] = 8198] = \"SIXPEREMSPACE\";\n    CharCode[CharCode[\"FIGURESPACE\"] = 8199] = \"FIGURESPACE\";\n    CharCode[CharCode[\"PUNCTUATIONSPACE\"] = 8200] = \"PUNCTUATIONSPACE\";\n    CharCode[CharCode[\"THINSPACE\"] = 8201] = \"THINSPACE\";\n    CharCode[CharCode[\"HAIRSPACE\"] = 8202] = \"HAIRSPACE\";\n    CharCode[CharCode[\"ZEROWIDTHSPACE\"] = 8203] = \"ZEROWIDTHSPACE\";\n    CharCode[CharCode[\"NARROWNOBREAKSPACE\"] = 8239] = \"NARROWNOBREAKSPACE\";\n    CharCode[CharCode[\"IDEOGRAPHICSPACE\"] = 12288] = \"IDEOGRAPHICSPACE\";\n    CharCode[CharCode[\"MATHEMATICALSPACE\"] = 8287] = \"MATHEMATICALSPACE\";\n    CharCode[CharCode[\"OGHAM\"] = 5760] = \"OGHAM\";\n    CharCode[CharCode[\"_\"] = 95] = \"_\";\n    CharCode[CharCode[\"_0\"] = 48] = \"_0\";\n    CharCode[CharCode[\"_1\"] = 49] = \"_1\";\n    CharCode[CharCode[\"_2\"] = 50] = \"_2\";\n    CharCode[CharCode[\"_3\"] = 51] = \"_3\";\n    CharCode[CharCode[\"_4\"] = 52] = \"_4\";\n    CharCode[CharCode[\"_5\"] = 53] = \"_5\";\n    CharCode[CharCode[\"_6\"] = 54] = \"_6\";\n    CharCode[CharCode[\"_7\"] = 55] = \"_7\";\n    CharCode[CharCode[\"_8\"] = 56] = \"_8\";\n    CharCode[CharCode[\"_9\"] = 57] = \"_9\";\n    CharCode[CharCode[\"a\"] = 97] = \"a\";\n    CharCode[CharCode[\"b\"] = 98] = \"b\";\n    CharCode[CharCode[\"c\"] = 99] = \"c\";\n    CharCode[CharCode[\"d\"] = 100] = \"d\";\n    CharCode[CharCode[\"e\"] = 101] = \"e\";\n    CharCode[CharCode[\"f\"] = 102] = \"f\";\n    CharCode[CharCode[\"g\"] = 103] = \"g\";\n    CharCode[CharCode[\"h\"] = 104] = \"h\";\n    CharCode[CharCode[\"i\"] = 105] = \"i\";\n    CharCode[CharCode[\"j\"] = 106] = \"j\";\n    CharCode[CharCode[\"k\"] = 107] = \"k\";\n    CharCode[CharCode[\"l\"] = 108] = \"l\";\n    CharCode[CharCode[\"m\"] = 109] = \"m\";\n    CharCode[CharCode[\"n\"] = 110] = \"n\";\n    CharCode[CharCode[\"o\"] = 111] = \"o\";\n    CharCode[CharCode[\"p\"] = 112] = \"p\";\n    CharCode[CharCode[\"q\"] = 113] = \"q\";\n    CharCode[CharCode[\"r\"] = 114] = \"r\";\n    CharCode[CharCode[\"s\"] = 115] = \"s\";\n    CharCode[CharCode[\"t\"] = 116] = \"t\";\n    CharCode[CharCode[\"u\"] = 117] = \"u\";\n    CharCode[CharCode[\"v\"] = 118] = \"v\";\n    CharCode[CharCode[\"w\"] = 119] = \"w\";\n    CharCode[CharCode[\"x\"] = 120] = \"x\";\n    CharCode[CharCode[\"y\"] = 121] = \"y\";\n    CharCode[CharCode[\"z\"] = 122] = \"z\";\n    CharCode[CharCode[\"A\"] = 65] = \"A\";\n    CharCode[CharCode[\"B\"] = 66] = \"B\";\n    CharCode[CharCode[\"C\"] = 67] = \"C\";\n    CharCode[CharCode[\"D\"] = 68] = \"D\";\n    CharCode[CharCode[\"E\"] = 69] = \"E\";\n    CharCode[CharCode[\"F\"] = 70] = \"F\";\n    CharCode[CharCode[\"G\"] = 71] = \"G\";\n    CharCode[CharCode[\"H\"] = 72] = \"H\";\n    CharCode[CharCode[\"I\"] = 73] = \"I\";\n    CharCode[CharCode[\"J\"] = 74] = \"J\";\n    CharCode[CharCode[\"K\"] = 75] = \"K\";\n    CharCode[CharCode[\"L\"] = 76] = \"L\";\n    CharCode[CharCode[\"M\"] = 77] = \"M\";\n    CharCode[CharCode[\"N\"] = 78] = \"N\";\n    CharCode[CharCode[\"O\"] = 79] = \"O\";\n    CharCode[CharCode[\"P\"] = 80] = \"P\";\n    CharCode[CharCode[\"Q\"] = 81] = \"Q\";\n    CharCode[CharCode[\"R\"] = 82] = \"R\";\n    CharCode[CharCode[\"S\"] = 83] = \"S\";\n    CharCode[CharCode[\"T\"] = 84] = \"T\";\n    CharCode[CharCode[\"U\"] = 85] = \"U\";\n    CharCode[CharCode[\"V\"] = 86] = \"V\";\n    CharCode[CharCode[\"W\"] = 87] = \"W\";\n    CharCode[CharCode[\"X\"] = 88] = \"X\";\n    CharCode[CharCode[\"Y\"] = 89] = \"Y\";\n    CharCode[CharCode[\"Z\"] = 90] = \"Z\";\n    CharCode[CharCode[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CharCode[CharCode[\"ASTERISK\"] = 42] = \"ASTERISK\";\n    CharCode[CharCode[\"AT\"] = 64] = \"AT\";\n    CharCode[CharCode[\"BACKSLASH\"] = 92] = \"BACKSLASH\";\n    CharCode[CharCode[\"BACKTICK\"] = 96] = \"BACKTICK\";\n    CharCode[CharCode[\"BAR\"] = 124] = \"BAR\";\n    CharCode[CharCode[\"CARET\"] = 94] = \"CARET\";\n    CharCode[CharCode[\"CLOSEBRACE\"] = 125] = \"CLOSEBRACE\";\n    CharCode[CharCode[\"CLOSEBRACKET\"] = 93] = \"CLOSEBRACKET\";\n    CharCode[CharCode[\"CLOSEPAREN\"] = 41] = \"CLOSEPAREN\";\n    CharCode[CharCode[\"COLON\"] = 58] = \"COLON\";\n    CharCode[CharCode[\"COMMA\"] = 44] = \"COMMA\";\n    CharCode[CharCode[\"DOLLAR\"] = 36] = \"DOLLAR\";\n    CharCode[CharCode[\"DOT\"] = 46] = \"DOT\";\n    CharCode[CharCode[\"DOUBLEQUOTE\"] = 34] = \"DOUBLEQUOTE\";\n    CharCode[CharCode[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCode[CharCode[\"EXCLAMATION\"] = 33] = \"EXCLAMATION\";\n    CharCode[CharCode[\"GREATERTHAN\"] = 62] = \"GREATERTHAN\";\n    CharCode[CharCode[\"HASH\"] = 35] = \"HASH\";\n    CharCode[CharCode[\"LESSTHAN\"] = 60] = \"LESSTHAN\";\n    CharCode[CharCode[\"MINUS\"] = 45] = \"MINUS\";\n    CharCode[CharCode[\"OPENBRACE\"] = 123] = \"OPENBRACE\";\n    CharCode[CharCode[\"OPENBRACKET\"] = 91] = \"OPENBRACKET\";\n    CharCode[CharCode[\"OPENPAREN\"] = 40] = \"OPENPAREN\";\n    CharCode[CharCode[\"PERCENT\"] = 37] = \"PERCENT\";\n    CharCode[CharCode[\"PLUS\"] = 43] = \"PLUS\";\n    CharCode[CharCode[\"QUESTION\"] = 63] = \"QUESTION\";\n    CharCode[CharCode[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CharCode[CharCode[\"SINGLEQUOTE\"] = 39] = \"SINGLEQUOTE\";\n    CharCode[CharCode[\"SLASH\"] = 47] = \"SLASH\";\n    CharCode[CharCode[\"TILDE\"] = 126] = \"TILDE\";\n    CharCode[CharCode[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\n    CharCode[CharCode[\"FORMFEED\"] = 12] = \"FORMFEED\";\n    CharCode[CharCode[\"BYTEORDERMARK\"] = 65279] = \"BYTEORDERMARK\";\n    CharCode[CharCode[\"TAB\"] = 9] = \"TAB\";\n    CharCode[CharCode[\"VERTICALTAB\"] = 11] = \"VERTICALTAB\";\n})(CharCode = exports.CharCode || (exports.CharCode = {}));\n/** Tests if the specified character code is some sort of line break. */\nfunction isLineBreak(c) {\n    switch (c) {\n        case 10 /* LINEFEED */:\n        case 13 /* CARRIAGERETURN */:\n        case 8232 /* LINESEPARATOR */:\n        case 8233 /* PARAGRAPHSEPARATOR */: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\nexports.isLineBreak = isLineBreak;\n/** Tests if the specified character code is some sort of white space. */\nfunction isWhiteSpace(c) {\n    switch (c) {\n        case 32 /* SPACE */:\n        case 9 /* TAB */:\n        case 11 /* VERTICALTAB */:\n        case 12 /* FORMFEED */:\n        case 160 /* NONBREAKINGSPACE */:\n        case 133 /* NEXTLINE */:\n        case 5760 /* OGHAM */:\n        case 8239 /* NARROWNOBREAKSPACE */:\n        case 8287 /* MATHEMATICALSPACE */:\n        case 12288 /* IDEOGRAPHICSPACE */:\n        case 65279 /* BYTEORDERMARK */: {\n            return true;\n        }\n        default: {\n            return c >= 8192 /* ENQUAD */ && c <= 8203 /* ZEROWIDTHSPACE */;\n        }\n    }\n}\nexports.isWhiteSpace = isWhiteSpace;\n/** Tests if the specified character code is a valid decimal digit. */\nfunction isDecimalDigit(c) {\n    return c >= 48 /* _0 */ && c <= 57 /* _9 */;\n}\nexports.isDecimalDigit = isDecimalDigit;\n/** Tests if the specified character code is a valid octal digit. */\nfunction isOctalDigit(c) {\n    return c >= 48 /* _0 */ && c <= 55 /* _7 */;\n}\nexports.isOctalDigit = isOctalDigit;\n/** Tests if the specified character code is trivially alphanumeric. */\nfunction isTrivialAlphanum(code) {\n    return code >= 97 /* a */ && code <= 122 /* z */\n        || code >= 65 /* A */ && code <= 90 /* Z */\n        || code >= 48 /* _0 */ && code <= 57 /* _9 */;\n}\nexports.isTrivialAlphanum = isTrivialAlphanum;\n/** Tests if the specified character code is a valid start of an identifier. */\nfunction isIdentifierStart(c) {\n    const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n    return c0 >= 97 /* a */ && c0 <= 122 /* z */\n        || c == 95 /* _ */\n        || c == 36 /* DOLLAR */\n        || c > 0x7F && isUnicodeIdentifierStart(c);\n}\nexports.isIdentifierStart = isIdentifierStart;\n/** Tests if the specified character code is a valid keyword character. */\nfunction isKeywordCharacter(c) {\n    return c >= 97 /* a */ && c <= 122 /* z */;\n}\nexports.isKeywordCharacter = isKeywordCharacter;\n/** Tests if the specified character code is a valid part of an identifier. */\nfunction isIdentifierPart(c) {\n    const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n    return c0 >= 97 /* a */ && c0 <= 122 /* z */\n        || c >= 48 /* _0 */ && c <= 57 /* _9 */\n        || c == 95 /* _ */\n        || c == 36 /* DOLLAR */\n        || c > 0x7F && isUnicodeIdentifierPart(c);\n}\nexports.isIdentifierPart = isIdentifierPart;\n// storing as u16 to save memory\nconst unicodeIdentifierStart = [\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n    740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n    908, 908, 910, 929, 931,\n    1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n    1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n    1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n    1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n    2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n    2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n    2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n    2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n    2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n    2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n    2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n    2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n    2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n    2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n    3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n    3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n    3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n    3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n    3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n    3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n    3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n    3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n    4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n    4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n    4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n    4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n    5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n    5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n    6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n    6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n    6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n    7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n    7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n    8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n    8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n    8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n    8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n    8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n    11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n    11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n    11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n    11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n    12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n    12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n    19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n    42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n    42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n    43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n    43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n    43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n    43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n    43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n    43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n    55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n    64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n    64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n    65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n    65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart = [\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n    740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n    908, 908, 910, 929, 931,\n    1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n    1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n    1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n    1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n    2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n    2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n    2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n    2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n    2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n    2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n    2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n    2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n    2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n    2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n    2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n    2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n    3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n    3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n    3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n    3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n    3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n    3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n    3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n    3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n    3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n    3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n    3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n    3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n    3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n    4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n    4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n    4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n    4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n    5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n    5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n    6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n    6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n    6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n    6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n    7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n    7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n    8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n    8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n    8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n    8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n    8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n    8521, 8526, 8526, 8544, 8584,\n    11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n    11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n    11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n    11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n    12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n    12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n    13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n    42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n    42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n    43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n    43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n    43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n    43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n    43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n    55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n    64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n    64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n    65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n    65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n    65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nfunction lookupInUnicodeMap(code, map) {\n    if (code < map[0])\n        return false;\n    var lo = 0;\n    var hi = map.length;\n    var mid;\n    var midVal;\n    while (lo + 1 < hi) {\n        mid = lo + ((hi - lo) >> 1);\n        mid -= (mid & 1);\n        midVal = map[mid];\n        if (midVal <= code && code <= map[mid + 1]) {\n            return true;\n        }\n        if (code < midVal) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 2;\n        }\n    }\n    return false;\n}\nfunction isUnicodeIdentifierStart(code) {\n    return code < 170 || code > 65500 ? false :\n        lookupInUnicodeMap(code, unicodeIdentifierStart);\n}\nfunction isUnicodeIdentifierPart(code) {\n    return code < 170 || code > 65500 ? false :\n        lookupInUnicodeMap(code, unicodeIdentifierPart);\n}\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n/** Creates an indentation matching the number of specified levels. */\nfunction indent(sb, level) {\n    while (level >= 4) {\n        sb.push(indentX4);\n        level -= 4;\n    }\n    if (level >= 2) {\n        sb.push(indentX2);\n        level -= 2;\n    }\n    if (level) {\n        sb.push(indentX1);\n    }\n}\nexports.indent = indent;\n\n\n/***/ }),\n\n/***/ 560:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.v128_zero = void 0;\n/** v128 zero constant. */\nexports.v128_zero = new Uint8Array(16);\n\n\n/***/ }),\n\n/***/ 466:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n// This file is shared with the compiler and must remain portable\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.featureToString = exports.Feature = void 0;\n/** Indicates specific features to activate. */\nvar Feature;\n(function (Feature) {\n    /** No additional features. */\n    Feature[Feature[\"NONE\"] = 0] = \"NONE\";\n    /** Sign extension operations. */\n    Feature[Feature[\"SIGN_EXTENSION\"] = 1] = \"SIGN_EXTENSION\";\n    /** Mutable global imports and exports. */\n    Feature[Feature[\"MUTABLE_GLOBALS\"] = 2] = \"MUTABLE_GLOBALS\";\n    /** Non-trapping float to integer operations. */\n    Feature[Feature[\"NONTRAPPING_F2I\"] = 4] = \"NONTRAPPING_F2I\";\n    /** Bulk memory operations. */\n    Feature[Feature[\"BULK_MEMORY\"] = 8] = \"BULK_MEMORY\";\n    /** SIMD types and operations. */\n    Feature[Feature[\"SIMD\"] = 16] = \"SIMD\";\n    /** Threading and atomic operations. */\n    Feature[Feature[\"THREADS\"] = 32] = \"THREADS\";\n    /** Exception handling operations. */\n    Feature[Feature[\"EXCEPTION_HANDLING\"] = 64] = \"EXCEPTION_HANDLING\";\n    /** Tail call operations. */\n    Feature[Feature[\"TAIL_CALLS\"] = 128] = \"TAIL_CALLS\";\n    /** Reference types. */\n    Feature[Feature[\"REFERENCE_TYPES\"] = 256] = \"REFERENCE_TYPES\";\n    /** Multi value types. */\n    Feature[Feature[\"MULTI_VALUE\"] = 512] = \"MULTI_VALUE\";\n    /** Garbage collection. */\n    Feature[Feature[\"GC\"] = 1024] = \"GC\";\n    /** Memory64. */\n    Feature[Feature[\"MEMORY64\"] = 2048] = \"MEMORY64\"; // see: https://github.com/WebAssembly/memory64\n})(Feature = exports.Feature || (exports.Feature = {}));\n/** Gets the name of the specified feature one would specify on the command line. */\nfunction featureToString(feature) {\n    switch (feature) {\n        case 1 /* SIGN_EXTENSION */: return \"sign-extension\";\n        case 2 /* MUTABLE_GLOBALS */: return \"mutable-globals\";\n        case 4 /* NONTRAPPING_F2I */: return \"nontrapping-f2i\";\n        case 8 /* BULK_MEMORY */: return \"bulk-memory\";\n        case 16 /* SIMD */: return \"simd\";\n        case 32 /* THREADS */: return \"threads\";\n        case 64 /* EXCEPTION_HANDLING */: return \"exception-handling\";\n        case 128 /* TAIL_CALLS */: return \"tail-calls\";\n        case 256 /* REFERENCE_TYPES */: return \"reference-types\";\n        case 512 /* MULTI_VALUE */: return \"multi-value\";\n        case 1024 /* GC */: return \"gc\";\n        case 2048 /* MEMORY64 */: return \"memory64\";\n    }\n    assert(false);\n    return \"\";\n}\nexports.featureToString = featureToString;\n\n\n/***/ }),\n\n/***/ 607:\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\n// This file is shared with the compiler and must remain portable\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Target = void 0;\n/** Compilation target. */\nvar Target;\n(function (Target) {\n    /** Portable. */\n    Target[Target[\"JS\"] = 0] = \"JS\";\n    /** WebAssembly with 32-bit pointers. */\n    Target[Target[\"WASM32\"] = 1] = \"WASM32\";\n    /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n    Target[Target[\"WASM64\"] = 2] = \"WASM64\";\n})(Target = exports.Target || (exports.Target = {}));\n\n\n/***/ }),\n\n/***/ 604:\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n// This file is shared with the compiler and must remain portable\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TypeinfoFlags = exports.Typeinfo = void 0;\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n/** Runtime type information data structure. */\nlet Typeinfo = class Typeinfo {\n    constructor() {\n        /** Flags describing the shape of this class type. */\n        this.flags = 0 /* NONE */;\n        /** Base class id or `0` if none. */\n        this.base = 0;\n    }\n};\nTypeinfo = __decorate([\n    unmanaged\n], Typeinfo);\nexports.Typeinfo = Typeinfo;\n/** Runtime type information flags. */\nvar TypeinfoFlags;\n(function (TypeinfoFlags) {\n    /** No specific flags. */\n    TypeinfoFlags[TypeinfoFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Type is an `ArrayBufferView`. */\n    TypeinfoFlags[TypeinfoFlags[\"ARRAYBUFFERVIEW\"] = 1] = \"ARRAYBUFFERVIEW\";\n    /** Type is an `Array`. */\n    TypeinfoFlags[TypeinfoFlags[\"ARRAY\"] = 2] = \"ARRAY\";\n    /** Type is a `StaticArray`. */\n    TypeinfoFlags[TypeinfoFlags[\"STATICARRAY\"] = 4] = \"STATICARRAY\";\n    /** Type is a `Set`. */\n    TypeinfoFlags[TypeinfoFlags[\"SET\"] = 8] = \"SET\";\n    /** Type is a `Map`. */\n    TypeinfoFlags[TypeinfoFlags[\"MAP\"] = 16] = \"MAP\";\n    /** Type has no outgoing pointers. */\n    TypeinfoFlags[TypeinfoFlags[\"POINTERFREE\"] = 32] = \"POINTERFREE\";\n    /** Value alignment of 1 byte. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_0\"] = 64] = \"VALUE_ALIGN_0\";\n    /** Value alignment of 2 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_1\"] = 128] = \"VALUE_ALIGN_1\";\n    /** Value alignment of 4 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_2\"] = 256] = \"VALUE_ALIGN_2\";\n    /** Value alignment of 8 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_3\"] = 512] = \"VALUE_ALIGN_3\";\n    /** Value alignment of 16 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_4\"] = 1024] = \"VALUE_ALIGN_4\";\n    /** Value is a signed type. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_SIGNED\"] = 2048] = \"VALUE_SIGNED\";\n    /** Value is a float type. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_FLOAT\"] = 4096] = \"VALUE_FLOAT\";\n    /** Value type is nullable. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_NULLABLE\"] = 8192] = \"VALUE_NULLABLE\";\n    /** Value type is managed. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_MANAGED\"] = 16384] = \"VALUE_MANAGED\";\n    /** Key alignment of 1 byte. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_0\"] = 32768] = \"KEY_ALIGN_0\";\n    /** Key alignment of 2 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_1\"] = 65536] = \"KEY_ALIGN_1\";\n    /** Key alignment of 4 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_2\"] = 131072] = \"KEY_ALIGN_2\";\n    /** Key alignment of 8 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_3\"] = 262144] = \"KEY_ALIGN_3\";\n    /** Key alignment of 16 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_4\"] = 524288] = \"KEY_ALIGN_4\";\n    /** Key is a signed type. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_SIGNED\"] = 1048576] = \"KEY_SIGNED\";\n    /** Key is a float type. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_FLOAT\"] = 2097152] = \"KEY_FLOAT\";\n    /** Key type is nullable. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_NULLABLE\"] = 4194304] = \"KEY_NULLABLE\";\n    /** Key type is managed. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_MANAGED\"] = 8388608] = \"KEY_MANAGED\";\n})(TypeinfoFlags = exports.TypeinfoFlags || (exports.TypeinfoFlags = {}));\n\n\n/***/ }),\n\n/***/ 292:\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = __webpack_require__.g.binaryen || (__webpack_require__.g.binaryen = __webpack_require__(911));\n\nmodule.exports = binaryen;\n\nconst { Module } = __webpack_require__(656);\n\nModule.prototype.toText = function toText(watFormat = true) {\n  if (watFormat) {\n    // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n    // of unreachable statements not actually emitted by the compiler. Optimizing\n    // StackIR removes these again, but may also suppress useless code emitted by\n    // the compiler that's then no longer visible in tests. Both not ideal.\n    return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n  } else {\n    return binaryen.wrapModule(this.ref).emitText();\n  }\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n\n\n/***/ }),\n\n/***/ 710:\n/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {\n\n/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\n__webpack_require__.g.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\n__webpack_require__.g.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\n__webpack_require__.g.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n\n\n/***/ }),\n\n/***/ 620:\n/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {\n\n/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\n__webpack_require__.g.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\n__webpack_require__.g.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\n__webpack_require__.g.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\n__webpack_require__.g.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n\n\n/***/ }),\n\n/***/ 875:\n/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {\n\n/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = __webpack_require__.g.Long || __webpack_require__(720);\n\n__webpack_require__.g.i64_zero    = Long.ZERO;\n__webpack_require__.g.i64_one     = Long.ONE;\n__webpack_require__.g.i64_neg_one = Long.fromInt(-1);\n\n__webpack_require__.g.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\n__webpack_require__.g.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\n__webpack_require__.g.i64_low = function i64_low(value) {\n  return value.low;\n};\n\n__webpack_require__.g.i64_high = function i64_high(value) {\n  return value.high;\n};\n\n__webpack_require__.g.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\n__webpack_require__.g.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\n__webpack_require__.g.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\n__webpack_require__.g.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(__webpack_require__.g.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\n__webpack_require__.g.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\n__webpack_require__.g.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\n__webpack_require__.g.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\n__webpack_require__.g.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\n__webpack_require__.g.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\n__webpack_require__.g.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\n__webpack_require__.g.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\n__webpack_require__.g.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\n__webpack_require__.g.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\n__webpack_require__.g.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\n__webpack_require__.g.i64_not = function i64_not(value) {\n  return value.not();\n};\n\n__webpack_require__.g.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\n__webpack_require__.g.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\n__webpack_require__.g.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\n__webpack_require__.g.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\n__webpack_require__.g.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\n__webpack_require__.g.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\n__webpack_require__.g.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\n__webpack_require__.g.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\n__webpack_require__.g.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\n__webpack_require__.g.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\n__webpack_require__.g.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\n__webpack_require__.g.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\n__webpack_require__.g.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\n__webpack_require__.g.i64_to_f32 = function i64_to_f32(value) {\n  return __webpack_require__.g.Math.fround(value.toNumber());\n};\n\n__webpack_require__.g.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\n__webpack_require__.g.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n\n\n/***/ }),\n\n/***/ 352:\n/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {\n\n/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.at) {\n  Object.defineProperty(String.prototype, \"at\", {\n    value: function at(index) {\n      return this.charAt(index >= 0 ? index : index + this.length);\n    },\n    configurable: true\n  });\n}\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    },\n    configurable: true\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\n[ Array,\n  Uint8ClampedArray,\n  Uint8Array, Int8Array,\n  Uint16Array, Int16Array,\n  Uint32Array, Int32Array,\n  Float32Array, Float64Array\n].forEach(Ctr => {\n  if (!Ctr.prototype.at) {\n    Object.defineProperty(Ctr.prototype, \"at\", {\n      value: function at(index) {\n        return this[index >= 0 ? index : index + this.length];\n      },\n      configurable: true\n    });\n  }\n});\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean(U64[1] >>> 31);\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n\n\n/***/ }),\n\n/***/ 911:\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__911__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t__webpack_require__(308);\n/******/ \t// This entry module is referenced by other modules so it can't be inlined\n/******/ \tvar __webpack_exports__ = __webpack_require__(780);\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=assemblyscript.js.map","// GENERATED FILE. DO NOT EDIT.\nvar loader = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.instantiate = instantiate;\n  exports.instantiateSync = instantiateSync;\n  exports.instantiateStreaming = instantiateStreaming;\n  exports.demangle = demangle;\n  exports.default = void 0;\n  // Runtime header offsets\n  const ID_OFFSET = -8;\n  const SIZE_OFFSET = -4; // Runtime ids\n  \n  const ARRAYBUFFER_ID = 0;\n  const STRING_ID = 1; // const ARRAYBUFFERVIEW_ID = 2;\n  // Runtime type information\n  \n  const ARRAYBUFFERVIEW = 1 << 0;\n  const ARRAY = 1 << 1;\n  const STATICARRAY = 1 << 2; // const SET = 1 << 3;\n  // const MAP = 1 << 4;\n  \n  const VAL_ALIGN_OFFSET = 6; // const VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\n  \n  const VAL_SIGNED = 1 << 11;\n  const VAL_FLOAT = 1 << 12; // const VAL_NULLABLE = 1 << 13;\n  \n  const VAL_MANAGED = 1 << 14; // const KEY_ALIGN_OFFSET = 15;\n  // const KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\n  // const KEY_SIGNED = 1 << 20;\n  // const KEY_FLOAT = 1 << 21;\n  // const KEY_NULLABLE = 1 << 22;\n  // const KEY_MANAGED = 1 << 23;\n  // Array(BufferView) layout\n  \n  const ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\n  const ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\n  const ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\n  const ARRAYBUFFERVIEW_SIZE = 12;\n  const ARRAY_LENGTH_OFFSET = 12;\n  const ARRAY_SIZE = 16;\n  const BIGINT = typeof BigUint64Array !== \"undefined\";\n  const THIS = Symbol();\n  const STRING_DECODE_THRESHOLD = 32;\n  const decoder = new TextDecoder(\"utf-16le\");\n  /** Gets a string from an U32 and an U16 view on a memory. */\n  \n  function getStringImpl(buffer, ptr) {\n    const len = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2] >>> 1;\n    const arr = new Uint16Array(buffer, ptr, len);\n  \n    if (len <= STRING_DECODE_THRESHOLD) {\n      return String.fromCharCode.apply(String, arr);\n    }\n  \n    return decoder.decode(arr);\n  }\n  /** Prepares the base module prior to instantiation. */\n  \n  \n  function preInstantiate(imports) {\n    const extendedExports = {};\n  \n    function getString(memory, ptr) {\n      if (!memory) return \"<yet unknown>\";\n      return getStringImpl(memory.buffer, ptr);\n    } // add common imports used by stdlib for convenience\n  \n  \n    const env = imports.env = imports.env || {};\n  \n    env.abort = env.abort || function abort(msg, file, line, colm) {\n      const memory = extendedExports.memory || env.memory; // prefer exported, otherwise try imported\n  \n      throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\n    };\n  \n    env.trace = env.trace || function trace(msg, n, ...args) {\n      const memory = extendedExports.memory || env.memory;\n      console.log(`trace: ${getString(memory, msg)}${n ? \" \" : \"\"}${args.slice(0, n).join(\", \")}`);\n    };\n  \n    env.seed = env.seed || Date.now;\n    imports.Math = imports.Math || Math;\n    imports.Date = imports.Date || Date;\n    return extendedExports;\n  }\n  \n  const E_NOEXPORTRUNTIME = \"Operation requires compiling with --exportRuntime\";\n  \n  const F_NOEXPORTRUNTIME = function () {\n    throw Error(E_NOEXPORTRUNTIME);\n  };\n  /** Prepares the final module once instantiation is complete. */\n  \n  \n  function postInstantiate(extendedExports, instance) {\n    const exports = instance.exports;\n    const memory = exports.memory;\n    const table = exports.table;\n  \n    const __new = exports.__new || F_NOEXPORTRUNTIME;\n  \n    const __pin = exports.__pin || F_NOEXPORTRUNTIME;\n  \n    const __unpin = exports.__unpin || F_NOEXPORTRUNTIME;\n  \n    const __collect = exports.__collect || F_NOEXPORTRUNTIME;\n  \n    const __rtti_base = exports.__rtti_base || ~0; // oob if not present\n  \n  \n    extendedExports.__new = __new;\n    extendedExports.__pin = __pin;\n    extendedExports.__unpin = __unpin;\n    extendedExports.__collect = __collect;\n    /** Gets the runtime type info for the given id. */\n  \n    function getInfo(id) {\n      const U32 = new Uint32Array(memory.buffer);\n      const count = U32[__rtti_base >>> 2];\n      if ((id >>>= 0) >= count) throw Error(`invalid id: ${id}`);\n      return U32[(__rtti_base + 4 >>> 2) + id * 2];\n    }\n    /** Gets and validate runtime type info for the given id for array like objects */\n  \n  \n    function getArrayInfo(id) {\n      const info = getInfo(id);\n      if (!(info & (ARRAYBUFFERVIEW | ARRAY | STATICARRAY))) throw Error(`not an array: ${id}, flags=${info}`);\n      return info;\n    }\n    /** Gets the runtime base id for the given id. */\n  \n  \n    function getBase(id) {\n      const U32 = new Uint32Array(memory.buffer);\n      const count = U32[__rtti_base >>> 2];\n      if ((id >>>= 0) >= count) throw Error(`invalid id: ${id}`);\n      return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];\n    }\n    /** Gets the runtime alignment of a collection's values. */\n  \n  \n    function getValueAlign(info) {\n      return 31 - Math.clz32(info >>> VAL_ALIGN_OFFSET & 31); // -1 if none\n    }\n    /** Gets the runtime alignment of a collection's keys. */\n    // function getKeyAlign(info) {\n    //   return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n    // }\n  \n    /** Allocates a new string in the module's memory and returns its pointer. */\n  \n  \n    function __newString(str) {\n      if (str == null) return 0;\n      const length = str.length;\n  \n      const ptr = __new(length << 1, STRING_ID);\n  \n      const U16 = new Uint16Array(memory.buffer);\n  \n      for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n  \n      return ptr;\n    }\n  \n    extendedExports.__newString = __newString;\n    /** Reads a string from the module's memory by its pointer. */\n  \n    function __getString(ptr) {\n      if (!ptr) return null;\n      const buffer = memory.buffer;\n      const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n      if (id !== STRING_ID) throw Error(`not a string: ${ptr}`);\n      return getStringImpl(buffer, ptr);\n    }\n  \n    extendedExports.__getString = __getString;\n    /** Gets the view matching the specified alignment, signedness and floatness. */\n  \n    function getView(alignLog2, signed, float) {\n      const buffer = memory.buffer;\n  \n      if (float) {\n        switch (alignLog2) {\n          case 2:\n            return new Float32Array(buffer);\n  \n          case 3:\n            return new Float64Array(buffer);\n        }\n      } else {\n        switch (alignLog2) {\n          case 0:\n            return new (signed ? Int8Array : Uint8Array)(buffer);\n  \n          case 1:\n            return new (signed ? Int16Array : Uint16Array)(buffer);\n  \n          case 2:\n            return new (signed ? Int32Array : Uint32Array)(buffer);\n  \n          case 3:\n            return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n        }\n      }\n  \n      throw Error(`unsupported align: ${alignLog2}`);\n    }\n    /** Allocates a new array in the module's memory and returns its pointer. */\n  \n  \n    function __newArray(id, values) {\n      const info = getArrayInfo(id);\n      const align = getValueAlign(info);\n      const length = values.length;\n  \n      const buf = __new(length << align, info & STATICARRAY ? id : ARRAYBUFFER_ID);\n  \n      let result;\n  \n      if (info & STATICARRAY) {\n        result = buf;\n      } else {\n        __pin(buf);\n  \n        const arr = __new(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n  \n        __unpin(buf);\n  \n        const U32 = new Uint32Array(memory.buffer);\n        U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\n        U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n        U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\n        if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n        result = arr;\n      }\n  \n      const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n  \n      if (info & VAL_MANAGED) {\n        for (let i = 0; i < length; ++i) {\n          const value = values[i];\n          view[(buf >>> align) + i] = value;\n        }\n      } else {\n        view.set(values, buf >>> align);\n      }\n  \n      return result;\n    }\n  \n    extendedExports.__newArray = __newArray;\n    /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */\n  \n    function __getArrayView(arr) {\n      const U32 = new Uint32Array(memory.buffer);\n      const id = U32[arr + ID_OFFSET >>> 2];\n      const info = getArrayInfo(id);\n      const align = getValueAlign(info);\n      let buf = info & STATICARRAY ? arr : U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n      const length = info & ARRAY ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2] : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n      return getView(align, info & VAL_SIGNED, info & VAL_FLOAT).subarray(buf >>>= align, buf + length);\n    }\n  \n    extendedExports.__getArrayView = __getArrayView;\n    /** Copies an array's values from the module's memory. Infers the array type from RTTI. */\n  \n    function __getArray(arr) {\n      const input = __getArrayView(arr);\n  \n      const len = input.length;\n      const out = new Array(len);\n  \n      for (let i = 0; i < len; i++) out[i] = input[i];\n  \n      return out;\n    }\n  \n    extendedExports.__getArray = __getArray;\n    /** Copies an ArrayBuffer's value from the module's memory. */\n  \n    function __getArrayBuffer(ptr) {\n      const buffer = memory.buffer;\n      const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n      return buffer.slice(ptr, ptr + length);\n    }\n  \n    extendedExports.__getArrayBuffer = __getArrayBuffer;\n    /** Copies a typed array's values from the module's memory. */\n  \n    function getTypedArray(Type, alignLog2, ptr) {\n      return new Type(getTypedArrayView(Type, alignLog2, ptr));\n    }\n    /** Gets a live view on a typed array's values in the module's memory. */\n  \n  \n    function getTypedArrayView(Type, alignLog2, ptr) {\n      const buffer = memory.buffer;\n      const U32 = new Uint32Array(buffer);\n      const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n      return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);\n    }\n    /** Attach a set of get TypedArray and View functions to the exports. */\n  \n  \n    function attachTypedArrayFunctions(ctor, name, align) {\n      extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\n      extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\n    }\n  \n    [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array].forEach(ctor => {\n      attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\n    });\n  \n    if (BIGINT) {\n      [BigUint64Array, BigInt64Array].forEach(ctor => {\n        attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\n      });\n    }\n    /** Tests whether an object is an instance of the class represented by the specified base id. */\n  \n  \n    function __instanceof(ptr, baseId) {\n      const U32 = new Uint32Array(memory.buffer);\n      let id = U32[ptr + ID_OFFSET >>> 2];\n  \n      if (id <= U32[__rtti_base >>> 2]) {\n        do {\n          if (id == baseId) return true;\n          id = getBase(id);\n        } while (id);\n      }\n  \n      return false;\n    }\n  \n    extendedExports.__instanceof = __instanceof; // Pull basic exports to extendedExports so code in preInstantiate can use them\n  \n    extendedExports.memory = extendedExports.memory || memory;\n    extendedExports.table = extendedExports.table || table; // Demangle exports and provide the usual utility on the prototype\n  \n    return demangle(exports, extendedExports);\n  }\n  \n  function isResponse(src) {\n    return typeof Response !== \"undefined\" && src instanceof Response;\n  }\n  \n  function isModule(src) {\n    return src instanceof WebAssembly.Module;\n  }\n  /** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */\n  \n  \n  async function instantiate(source, imports = {}) {\n    if (isResponse(source = await source)) return instantiateStreaming(source, imports);\n    const module = isModule(source) ? source : await WebAssembly.compile(source);\n    const extended = preInstantiate(imports);\n    const instance = await WebAssembly.instantiate(module, imports);\n    const exports = postInstantiate(extended, instance);\n    return {\n      module,\n      instance,\n      exports\n    };\n  }\n  /** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */\n  \n  \n  function instantiateSync(source, imports = {}) {\n    const module = isModule(source) ? source : new WebAssembly.Module(source);\n    const extended = preInstantiate(imports);\n    const instance = new WebAssembly.Instance(module, imports);\n    const exports = postInstantiate(extended, instance);\n    return {\n      module,\n      instance,\n      exports\n    };\n  }\n  /** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */\n  \n  \n  async function instantiateStreaming(source, imports = {}) {\n    if (!WebAssembly.instantiateStreaming) {\n      return instantiate(isResponse(source = await source) ? source.arrayBuffer() : source, imports);\n    }\n  \n    const extended = preInstantiate(imports);\n    const result = await WebAssembly.instantiateStreaming(source, imports);\n    const exports = postInstantiate(extended, result.instance);\n    return { ...result,\n      exports\n    };\n  }\n  /** Demangles an AssemblyScript module's exports to a friendly object structure. */\n  \n  \n  function demangle(exports, extendedExports = {}) {\n    const setArgumentsLength = exports[\"__argumentsLength\"] ? length => {\n      exports[\"__argumentsLength\"].value = length;\n    } : exports[\"__setArgumentsLength\"] || exports[\"__setargc\"] || (() => {\n      /* nop */\n    });\n  \n    for (let internalName in exports) {\n      if (!Object.prototype.hasOwnProperty.call(exports, internalName)) continue;\n      const elem = exports[internalName];\n      let parts = internalName.split(\".\");\n      let curr = extendedExports;\n  \n      while (parts.length > 1) {\n        let part = parts.shift();\n        if (!Object.prototype.hasOwnProperty.call(curr, part)) curr[part] = {};\n        curr = curr[part];\n      }\n  \n      let name = parts[0];\n      let hash = name.indexOf(\"#\");\n  \n      if (hash >= 0) {\n        const className = name.substring(0, hash);\n        const classElem = curr[className];\n  \n        if (typeof classElem === \"undefined\" || !classElem.prototype) {\n          const ctor = function (...args) {\n            return ctor.wrap(ctor.prototype.constructor(0, ...args));\n          };\n  \n          ctor.prototype = {\n            valueOf() {\n              return this[THIS];\n            }\n  \n          };\n  \n          ctor.wrap = function (thisValue) {\n            return Object.create(ctor.prototype, {\n              [THIS]: {\n                value: thisValue,\n                writable: false\n              }\n            });\n          };\n  \n          if (classElem) Object.getOwnPropertyNames(classElem).forEach(name => Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name)));\n          curr[className] = ctor;\n        }\n  \n        name = name.substring(hash + 1);\n        curr = curr[className].prototype;\n  \n        if (/^(get|set):/.test(name)) {\n          if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n            let getter = exports[internalName.replace(\"set:\", \"get:\")];\n            let setter = exports[internalName.replace(\"get:\", \"set:\")];\n            Object.defineProperty(curr, name, {\n              get() {\n                return getter(this[THIS]);\n              },\n  \n              set(value) {\n                setter(this[THIS], value);\n              },\n  \n              enumerable: true\n            });\n          }\n        } else {\n          if (name === 'constructor') {\n            (curr[name] = (...args) => {\n              setArgumentsLength(args.length);\n              return elem(...args);\n            }).original = elem;\n          } else {\n            // instance method\n            (curr[name] = function (...args) {\n              // !\n              setArgumentsLength(args.length);\n              return elem(this[THIS], ...args);\n            }).original = elem;\n          }\n        }\n      } else {\n        if (/^(get|set):/.test(name)) {\n          if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n            Object.defineProperty(curr, name, {\n              get: exports[internalName.replace(\"set:\", \"get:\")],\n              set: exports[internalName.replace(\"get:\", \"set:\")],\n              enumerable: true\n            });\n          }\n        } else if (typeof elem === \"function\" && elem !== setArgumentsLength) {\n          (curr[name] = (...args) => {\n            setArgumentsLength(args.length);\n            return elem(...args);\n          }).original = elem;\n        } else {\n          curr[name] = elem;\n        }\n      }\n    }\n  \n    return extendedExports;\n  }\n  \n  var _default = {\n    instantiate,\n    instantiateSync,\n    instantiateStreaming,\n    demangle\n  };\n  exports.default = _default;\n  return exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return loader; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = loader;\n","// GENERATED FILE. DO NOT EDIT.\nvar rtrace = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.Rtrace = exports.TOTAL_OVERHEAD = exports.OBJECT_OVERHEAD = exports.BLOCK_OVERHEAD = void 0;\n  // WebAssembly pages are 65536 kb\n  const PAGE_SIZE_BITS = 16;\n  const PAGE_SIZE = 1 << PAGE_SIZE_BITS;\n  const PAGE_MASK = PAGE_SIZE - 1; // Wasm32 pointer size is 4 bytes\n  \n  const PTR_SIZE_BITS = 2;\n  const PTR_SIZE = 1 << PTR_SIZE_BITS;\n  const PTR_MASK = PTR_SIZE - 1;\n  const PTR_VIEW = Uint32Array;\n  const BLOCK_OVERHEAD = PTR_SIZE;\n  exports.BLOCK_OVERHEAD = BLOCK_OVERHEAD;\n  const OBJECT_OVERHEAD = 16;\n  exports.OBJECT_OVERHEAD = OBJECT_OVERHEAD;\n  const TOTAL_OVERHEAD = BLOCK_OVERHEAD + OBJECT_OVERHEAD;\n  exports.TOTAL_OVERHEAD = TOTAL_OVERHEAD;\n  \n  function assert(x) {\n    if (!x) throw Error(\"assertion failed\");\n    return x;\n  }\n  \n  Error.stackTraceLimit = 15;\n  \n  function trimStacktrace(stack, levels) {\n    return stack.split(/\\r?\\n/).slice(1 + levels);\n  }\n  \n  const hrtime = typeof performance !== \"undefined\" && performance.now ? performance.now : typeof process !== \"undefined\" && process.hrtime ? () => {\n    let t = process.hrtime();\n    return t[0] * 1e3 + t[1] / 1e6;\n  } : Date.now;\n  const mmTagsToString = [\"\", \"FREE\", \"LEFTFREE\", \"FREE+LEFTFREE\"];\n  const gcColorToString = [\"BLACK/WHITE\", \"WHITE/BLACK\", \"GRAY\", \"INVALID\"];\n  \n  class Rtrace {\n    constructor(options) {\n      this.options = options || {};\n  \n      this.onerror = this.options.onerror || function () {\n        /* nop */\n      };\n  \n      this.oninfo = this.options.oninfo || function () {\n        /* nop */\n      };\n  \n      this.oncollect_ = this.options.oncollect || function () {\n        /* nop */\n      };\n  \n      this.memory = null;\n      this.shadow = null;\n      this.shadowStart = 0x100000000;\n      this.blocks = new Map();\n      this.allocSites = new Map();\n      this.freedBlocks = new Map();\n      this.gcProfileStart = 0;\n      this.gcProfile = [];\n      this.allocCount = 0;\n      this.resizeCount = 0;\n      this.moveCount = 0;\n      this.freeCount = 0;\n      this.heapBase = 0x100000000;\n    }\n  \n    install(imports) {\n      if (!imports) imports = {};\n      imports.rtrace = Object.assign(imports.rtrace || {}, {\n        oninit: this.oninit.bind(this),\n        onalloc: this.onalloc.bind(this),\n        onresize: this.onresize.bind(this),\n        onmove: this.onmove.bind(this),\n        onvisit: this.onvisit.bind(this),\n        onfree: this.onfree.bind(this),\n        oninterrupt: this.oninterrupt.bind(this),\n        onyield: this.onyield.bind(this),\n        oncollect: this.oncollect.bind(this),\n        onstore: this.onstore.bind(this),\n        onload: this.onload.bind(this)\n      });\n      return imports;\n    }\n    /** Synchronizes the shadow memory with the module's memory. */\n  \n  \n    syncShadow() {\n      if (!this.memory) {\n        this.memory = assert(this.options.getMemory());\n        this.shadow = new WebAssembly.Memory({\n          initial: (this.memory.buffer.byteLength + PAGE_MASK & ~PAGE_MASK) >>> PAGE_SIZE_BITS\n        });\n      } else {\n        var diff = this.memory.buffer.byteLength - this.shadow.buffer.byteLength;\n        if (diff > 0) this.shadow.grow(diff >>> 16);\n      }\n    }\n    /** Marks a block's presence in shadow memory. */\n  \n  \n    markShadow(info, oldSize = 0) {\n      assert(this.shadow && this.shadow.byteLength == this.memory.byteLength);\n      assert((info.size & PTR_MASK) == 0);\n  \n      if (info.ptr < this.shadowStart) {\n        this.shadowStart = info.ptr;\n      }\n  \n      var len = info.size >>> PTR_SIZE_BITS;\n      var view = new PTR_VIEW(this.shadow.buffer, info.ptr, len);\n      var errored = false;\n      var start = oldSize >>> PTR_SIZE_BITS;\n  \n      for (let i = 0; i < start; ++i) {\n        if (view[i] != info.ptr && !errored) {\n          this.onerror(Error(\"shadow region mismatch: \" + view[i] + \" != \" + info.ptr), info);\n          errored = true;\n        }\n      }\n  \n      errored = false;\n  \n      for (let i = start; i < len; ++i) {\n        if (view[i] != 0 && !errored) {\n          this.onerror(Error(\"shadow region already in use: \" + view[i] + \" != 0\"), info);\n          errored = true;\n        }\n  \n        view[i] = info.ptr;\n      }\n    }\n    /** Unmarks a block's presence in shadow memory. */\n  \n  \n    unmarkShadow(info, oldSize = info.size) {\n      assert(this.shadow && this.shadow.byteLength == this.memory.byteLength);\n      var len = oldSize >>> PTR_SIZE_BITS;\n      var view = new PTR_VIEW(this.shadow.buffer, info.ptr, len);\n      var errored = false;\n      var start = 0;\n  \n      if (oldSize != info.size) {\n        assert(oldSize > info.size);\n        start = info.size >>> PTR_SIZE_BITS;\n      }\n  \n      for (let i = 0; i < len; ++i) {\n        if (view[i] != info.ptr && !errored) {\n          this.onerror(Error(\"shadow region mismatch: \" + view[i] + \" != \" + info.ptr), info);\n          errored = true;\n        }\n  \n        if (i >= start) view[i] = 0;\n      }\n    }\n    /** Performs an access to shadow memory. */\n  \n  \n    accessShadow(ptr, size, isLoad, isRT) {\n      this.syncShadow();\n      if (ptr < this.shadowStart) return;\n      var value = new Uint32Array(this.shadow.buffer, ptr & ~PTR_MASK, 1)[0];\n      if (value != 0) return;\n  \n      if (!isRT) {\n        let stack = trimStacktrace(new Error().stack, 2);\n        this.onerror(new Error(\"OOB \" + (isLoad ? \"load\" : \"store\") + 8 * size + \" at address \" + ptr + \"\\n\" + stack.join(\"\\n\")));\n      }\n    }\n    /** Obtains information about a block. */\n  \n  \n    getBlockInfo(ptr) {\n      const [mmInfo, gcInfo, gcInfo2, rtId, rtSize] = new Uint32Array(this.memory.buffer, ptr, 5);\n      const size = mmInfo & ~3;\n      return {\n        ptr,\n        size: BLOCK_OVERHEAD + size,\n        // total incl. overhead\n        mmInfo: {\n          tags: mmTagsToString[mmInfo & 3],\n          size: size // as stored excl. overhead\n  \n        },\n        gcInfo: {\n          color: gcColorToString[gcInfo & 3],\n          next: gcInfo & ~3,\n          prev: gcInfo2\n        },\n        rtId,\n        rtSize\n      };\n    }\n    /** Checks if rtrace is active, i.e. at least one event has occurred. */\n  \n  \n    get active() {\n      return Boolean(this.allocCount || this.resizeCount || this.moveCount || this.freeCount);\n    }\n    /** Checks if there are any leaks and emits them via `oninfo`. Returns the number of live blocks. */\n  \n  \n    check() {\n      if (this.oninfo) {\n        for (let [ptr, info] of this.blocks) {\n          this.oninfo(\"LIVE \" + ptr + \"\\n\" + info.allocStack.join(\"\\n\"));\n        }\n      }\n  \n      return this.blocks.size;\n    } // Runtime instrumentation\n  \n  \n    oninit(heapBase) {\n      this.heapBase = heapBase;\n      this.gcProfileStart = 0;\n      this.gcProfile.length = 0;\n      this.oninfo(\"INIT heapBase=\" + heapBase);\n    }\n  \n    onalloc(ptr) {\n      this.syncShadow();\n      ++this.allocCount;\n      var info = this.getBlockInfo(ptr);\n  \n      if (this.blocks.has(ptr)) {\n        this.onerror(Error(\"duplicate alloc: \" + ptr), info);\n      } else {\n        this.oninfo(\"ALLOC \" + ptr + \"..\" + (ptr + info.size));\n        this.markShadow(info);\n        let allocStack = trimStacktrace(new Error().stack, 1); // strip onalloc\n  \n        this.blocks.set(ptr, Object.assign(info, {\n          allocStack\n        }));\n      }\n    }\n  \n    onresize(ptr, oldSize) {\n      this.syncShadow();\n      ++this.resizeCount;\n      const info = this.getBlockInfo(ptr);\n  \n      if (!this.blocks.has(ptr)) {\n        this.onerror(Error(\"orphaned resize: \" + ptr), info);\n      } else {\n        const beforeInfo = this.blocks.get(ptr);\n  \n        if (beforeInfo.size != oldSize) {\n          this.onerror(Error(`size mismatch upon resize: ${ptr} (${beforeInfo.size} != ${oldSize})`), info);\n        }\n  \n        const newSize = info.size;\n        this.oninfo(\"RESIZE \" + ptr + \"..\" + (ptr + newSize) + \" (\" + oldSize + \"->\" + newSize + \")\");\n        this.blocks.set(ptr, Object.assign(info, {\n          allocStack: beforeInfo.allocStack\n        }));\n  \n        if (newSize > oldSize) {\n          this.markShadow(info, oldSize);\n        } else if (newSize < oldSize) {\n          this.unmarkShadow(info, oldSize);\n        }\n      }\n    }\n  \n    onmove(oldPtr, newPtr) {\n      this.syncShadow();\n      ++this.moveCount;\n      var oldInfo = this.getBlockInfo(oldPtr);\n      var newInfo = this.getBlockInfo(newPtr);\n  \n      if (!this.blocks.has(oldPtr)) {\n        this.onerror(Error(\"orphaned move (old): \" + oldPtr), oldInfo);\n      } else {\n        if (!this.blocks.has(newPtr)) {\n          this.onerror(Error(\"orphaned move (new): \" + newPtr), newInfo);\n        } else {\n          const beforeInfo = this.blocks.get(oldPtr);\n          const oldSize = oldInfo.size;\n          const newSize = newInfo.size;\n  \n          if (beforeInfo.size != oldSize) {\n            this.onerror(Error(`size mismatch upon move: ${oldPtr} (${beforeInfo.size} != ${oldSize})`), oldInfo);\n          }\n  \n          this.oninfo(\"MOVE \" + oldPtr + \"..\" + (oldPtr + oldSize) + \" -> \" + newPtr + \"..\" + (newPtr + newSize)); // calls new alloc before and old free after\n        }\n      }\n    }\n  \n    onvisit(ptr) {\n      // Indicates that a block has been freed but it still visited by the GC\n      if (ptr > this.heapBase && !this.blocks.has(ptr)) {\n        let err = Error(\"orphaned visit: \" + ptr);\n        let info = this.freedBlocks.get(ptr);\n  \n        if (info) {\n          err.stack += \"\\n^ allocated at:\\n\" + info.allocStack.join(\"\\n\");\n          err.stack += \"\\n^ freed at:\\n\" + info.freeStack.join(\"\\n\");\n        }\n  \n        this.onerror(err, null);\n        return false;\n      }\n  \n      return true;\n    }\n  \n    onfree(ptr) {\n      this.syncShadow();\n      ++this.freeCount;\n      var info = this.getBlockInfo(ptr);\n  \n      if (!this.blocks.has(ptr)) {\n        this.onerror(Error(\"orphaned free: \" + ptr), info);\n      } else {\n        const oldInfo = this.blocks.get(ptr);\n  \n        if (info.size != oldInfo.size) {\n          this.onerror(Error(`size mismatch upon free: ${ptr} (${oldInfo.size} != ${info.size})`), info);\n        }\n  \n        this.oninfo(\"FREE \" + ptr + \"..\" + (ptr + info.size));\n        this.unmarkShadow(info);\n        const allocInfo = this.blocks.get(ptr);\n        this.blocks.delete(ptr);\n        const allocStack = allocInfo.allocStack;\n        const freeStack = trimStacktrace(new Error().stack, 1); // strip onfree\n        // (not much) TODO: Maintaining these is essentially a memory leak\n  \n        this.freedBlocks.set(ptr, {\n          allocStack,\n          freeStack\n        });\n      }\n    }\n  \n    oncollect(total) {\n      this.oninfo(`COLLECT at ${total}`);\n      this.plot(total);\n      this.oncollect_();\n    } // GC profiling\n  \n  \n    plot(total, pause = 0) {\n      if (!this.gcProfileStart) this.gcProfileStart = Date.now();\n      this.gcProfile.push([Date.now() - this.gcProfileStart, total, pause]);\n    }\n  \n    oninterrupt(total) {\n      this.interruptStart = hrtime();\n      this.plot(total);\n    }\n  \n    onyield(total) {\n      var pause = hrtime() - this.interruptStart;\n      if (pause >= 1) console.log(\"interrupted for \" + pause.toFixed(1) + \"ms\");\n      this.plot(total, pause);\n    } // Memory instrumentation\n  \n  \n    onstore(ptr, offset, bytes, isRT) {\n      this.accessShadow(ptr + offset, bytes, false, isRT);\n      return ptr;\n    }\n  \n    onload(ptr, offset, bytes, isRT) {\n      this.accessShadow(ptr + offset, bytes, true, isRT);\n      return ptr;\n    }\n  \n  }\n  \n  exports.Rtrace = Rtrace;\n  var _default = {\n    Rtrace\n  };\n  exports.default = _default;\n  return exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return rtrace; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = rtrace;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__911__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(469);\n"],"sourceRoot":""}